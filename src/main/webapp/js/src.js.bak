/*
	Copyright (c) 2004-2011, The Dojo Foundation All Rights Reserved.
	Available via Academic Free License >= 2.1 OR the modified BSD license.
	see: http://dojotoolkit.org/license for details
*/
/*
	This is an optimized version of Dojo, built for deployment and not for
	development. To get sources and documentation, please visit:

		http://dojotoolkit.org
*/
//>>built
require({
    cache: {
        "dojo/data/ItemFileWriteStore": function () {
            define(["../_base/lang", "../_base/declare", "../_base/array", "../_base/json", "../_base/window", "./ItemFileReadStore", "../date/stamp"], function (_1, _2, _3, _4, _5, _6, _7) {
                return _2("dojo.data.ItemFileWriteStore", _6, {
                    constructor: function (_8) {
                        this._features["dojo.data.api.Write"] = true;
                        this._features["dojo.data.api.Notification"] = true;
                        this._pending = {
                            _newItems: {},
                            _modifiedItems: {},
                            _deletedItems: {}
                        };
                        if (!this._datatypeMap["Date"].serialize) {
                            this._datatypeMap["Date"].serialize = function (_9) {
                                return _7.toISOString(_9, {
                                    zulu: true
                                });
                            };
                        }
                        if (_8 && (_8.referenceIntegrity === false)) {
                            this.referenceIntegrity = false;
                        }
                        this._saveInProgress = false;
                    },
                    referenceIntegrity: true,
                    _assert: function (_a) {
                        if (!_a) {
                            throw new Error("assertion failed in ItemFileWriteStore");
                        }
                    },
                    _getIdentifierAttribute: function () {
                        return this.getFeatures()["dojo.data.api.Identity"];
                    },
                    newItem: function (_b, _c) {
                        this._assert(!this._saveInProgress);
                        if (!this._loadFinished) {
                            this._forceLoad();
                        }
                        if (typeof _b != "object" && typeof _b != "undefined") {
                            throw new Error("newItem() was passed something other than an object");
                        }
                        var _d = null;
                        var _e = this._getIdentifierAttribute();
                        if (_e === Number) {
                            _d = this._arrayOfAllItems.length;
                        } else {
                            _d = _b[_e];
                            if (typeof _d === "undefined") {
                                throw new Error("newItem() was not passed an identity for the new item");
                            }
                            if (_1.isArray(_d)) {
                                throw new Error("newItem() was not passed an single-valued identity");
                            }
                        }
                        if (this._itemsByIdentity) {
                            this._assert(typeof this._itemsByIdentity[_d] === "undefined");
                        }
                        this._assert(typeof this._pending._newItems[_d] === "undefined");
                        this._assert(typeof this._pending._deletedItems[_d] === "undefined");
                        var _f = {};
                        _f[this._storeRefPropName] = this;
                        _f[this._itemNumPropName] = this._arrayOfAllItems.length;
                        if (this._itemsByIdentity) {
                            this._itemsByIdentity[_d] = _f;
                            _f[_e] = [_d];
                        }
                        this._arrayOfAllItems.push(_f);
                        var _10 = null;
                        if (_c && _c.parent && _c.attribute) {
                            _10 = {
                                item: _c.parent,
                                attribute: _c.attribute,
                                oldValue: undefined
                            };
                            var _11 = this.getValues(_c.parent, _c.attribute);
                            if (_11 && _11.length > 0) {
                                var _12 = _11.slice(0, _11.length);
                                if (_11.length === 1) {
                                    _10.oldValue = _11[0];
                                } else {
                                    _10.oldValue = _11.slice(0, _11.length);
                                }
                                _12.push(_f);
                                this._setValueOrValues(_c.parent, _c.attribute, _12, false);
                                _10.newValue = this.getValues(_c.parent, _c.attribute);
                            } else {
                                this._setValueOrValues(_c.parent, _c.attribute, _f, false);
                                _10.newValue = _f;
                            }
                        } else {
                            _f[this._rootItemPropName] = true;
                            this._arrayOfTopLevelItems.push(_f);
                        }
                        this._pending._newItems[_d] = _f;
                        for (var key in _b) {
                            if (key === this._storeRefPropName || key === this._itemNumPropName) {
                                throw new Error("encountered bug in ItemFileWriteStore.newItem");
                            }
                            var _13 = _b[key];
                            if (!_1.isArray(_13)) {
                                _13 = [_13];
                            }
                            _f[key] = _13;
                            if (this.referenceIntegrity) {
                                for (var i = 0; i < _13.length; i++) {
                                    var val = _13[i];
                                    if (this.isItem(val)) {
                                        this._addReferenceToMap(val, _f, key);
                                    }
                                }
                            }
                        }
                        this.onNew(_f, _10);
                        return _f;
                    },
                    _removeArrayElement: function (_14, _15) {
                        var _16 = _3.indexOf(_14, _15);
                        if (_16 != -1) {
                            _14.splice(_16, 1);
                            return true;
                        }
                        return false;
                    },
                    deleteItem: function (_17) {
                        this._assert(!this._saveInProgress);
                        this._assertIsItem(_17);
                        var _18 = _17[this._itemNumPropName];
                        var _19 = this.getIdentity(_17);
                        if (this.referenceIntegrity) {
                            var _1a = this.getAttributes(_17);
                            if (_17[this._reverseRefMap]) {
                                _17["backup_" + this._reverseRefMap] = _1.clone(_17[this._reverseRefMap]);
                            }
                            _3.forEach(_1a, function (_1b) {
                                _3.forEach(this.getValues(_17, _1b), function (_1c) {
                                    if (this.isItem(_1c)) {
                                        if (!_17["backupRefs_" + this._reverseRefMap]) {
                                            _17["backupRefs_" + this._reverseRefMap] = [];
                                        }
                                        _17["backupRefs_" + this._reverseRefMap].push({
                                            id: this.getIdentity(_1c),
                                            attr: _1b
                                        });
                                        this._removeReferenceFromMap(_1c, _17, _1b);
                                    }
                                }, this);
                            }, this);
                            var _1d = _17[this._reverseRefMap];
                            if (_1d) {
                                for (var _1e in _1d) {
                                    var _1f = null;
                                    if (this._itemsByIdentity) {
                                        _1f = this._itemsByIdentity[_1e];
                                    } else {
                                        _1f = this._arrayOfAllItems[_1e];
                                    }
                                    if (_1f) {
                                        for (var _20 in _1d[_1e]) {
                                            var _21 = this.getValues(_1f, _20) || [];
                                            var _22 = _3.filter(_21, function (_23) {
                                                return !(this.isItem(_23) && this.getIdentity(_23) == _19);
                                            }, this);
                                            this._removeReferenceFromMap(_17, _1f, _20);
                                            if (_22.length < _21.length) {
                                                this._setValueOrValues(_1f, _20, _22, true);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        this._arrayOfAllItems[_18] = null;
                        _17[this._storeRefPropName] = null;
                        if (this._itemsByIdentity) {
                            delete this._itemsByIdentity[_19];
                        }
                        this._pending._deletedItems[_19] = _17;
                        if (_17[this._rootItemPropName]) {
                            this._removeArrayElement(this._arrayOfTopLevelItems, _17);
                        }
                        this.onDelete(_17);
                        return true;
                    },
                    setValue: function (_24, _25, _26) {
                        return this._setValueOrValues(_24, _25, _26, true);
                    },
                    setValues: function (_27, _28, _29) {
                        return this._setValueOrValues(_27, _28, _29, true);
                    },
                    unsetAttribute: function (_2a, _2b) {
                        return this._setValueOrValues(_2a, _2b, [], true);
                    },
                    _setValueOrValues: function (_2c, _2d, _2e, _2f) {
                        this._assert(!this._saveInProgress);
                        this._assertIsItem(_2c);
                        this._assert(_1.isString(_2d));
                        this._assert(typeof _2e !== "undefined");
                        var _30 = this._getIdentifierAttribute();
                        if (_2d == _30) {
                            throw new Error("ItemFileWriteStore does not have support for changing the value of an item's identifier.");
                        }
                        var _31 = this._getValueOrValues(_2c, _2d);
                        var _32 = this.getIdentity(_2c);
                        if (!this._pending._modifiedItems[_32]) {
                            var _33 = {};
                            for (var key in _2c) {
                                if ((key === this._storeRefPropName) || (key === this._itemNumPropName) || (key === this._rootItemPropName)) {
                                    _33[key] = _2c[key];
                                } else {
                                    if (key === this._reverseRefMap) {
                                        _33[key] = _1.clone(_2c[key]);
                                    } else {
                                        _33[key] = _2c[key].slice(0, _2c[key].length);
                                    }
                                }
                            }
                            this._pending._modifiedItems[_32] = _33;
                        }
                        var _34 = false;
                        if (_1.isArray(_2e) && _2e.length === 0) {
                            _34 = delete _2c[_2d];
                            _2e = undefined;
                            if (this.referenceIntegrity && _31) {
                                var _35 = _31;
                                if (!_1.isArray(_35)) {
                                    _35 = [_35];
                                }
                                for (var i = 0; i < _35.length; i++) {
                                    var _36 = _35[i];
                                    if (this.isItem(_36)) {
                                        this._removeReferenceFromMap(_36, _2c, _2d);
                                    }
                                }
                            }
                        } else {
                            var _37;
                            if (_1.isArray(_2e)) {
                                _37 = _2e.slice(0, _2e.length);
                            } else {
                                _37 = [_2e];
                            }
                            if (this.referenceIntegrity) {
                                if (_31) {
                                    var _35 = _31;
                                    if (!_1.isArray(_35)) {
                                        _35 = [_35];
                                    }
                                    var map = {};
                                    _3.forEach(_35, function (_38) {
                                        if (this.isItem(_38)) {
                                            var id = this.getIdentity(_38);
                                            map[id.toString()] = true;
                                        }
                                    }, this);
                                    _3.forEach(_37, function (_39) {
                                        if (this.isItem(_39)) {
                                            var id = this.getIdentity(_39);
                                            if (map[id.toString()]) {
                                                delete map[id.toString()];
                                            } else {
                                                this._addReferenceToMap(_39, _2c, _2d);
                                            }
                                        }
                                    }, this);
                                    for (var rId in map) {
                                        var _3a;
                                        if (this._itemsByIdentity) {
                                            _3a = this._itemsByIdentity[rId];
                                        } else {
                                            _3a = this._arrayOfAllItems[rId];
                                        }
                                        this._removeReferenceFromMap(_3a, _2c, _2d);
                                    }
                                } else {
                                    for (var i = 0; i < _37.length; i++) {
                                        var _36 = _37[i];
                                        if (this.isItem(_36)) {
                                            this._addReferenceToMap(_36, _2c, _2d);
                                        }
                                    }
                                }
                            }
                            _2c[_2d] = _37;
                            _34 = true;
                        }
                        if (_2f) {
                            this.onSet(_2c, _2d, _31, _2e);
                        }
                        return _34;
                    },
                    _addReferenceToMap: function (_3b, _3c, _3d) {
                        var _3e = this.getIdentity(_3c);
                        var _3f = _3b[this._reverseRefMap];
                        if (!_3f) {
                            _3f = _3b[this._reverseRefMap] = {};
                        }
                        var _40 = _3f[_3e];
                        if (!_40) {
                            _40 = _3f[_3e] = {};
                        }
                        _40[_3d] = true;
                    },
                    _removeReferenceFromMap: function (_41, _42, _43) {
                        var _44 = this.getIdentity(_42);
                        var _45 = _41[this._reverseRefMap];
                        var _46;
                        if (_45) {
                            for (_46 in _45) {
                                if (_46 == _44) {
                                    delete _45[_46][_43];
                                    if (this._isEmpty(_45[_46])) {
                                        delete _45[_46];
                                    }
                                }
                            }
                            if (this._isEmpty(_45)) {
                                delete _41[this._reverseRefMap];
                            }
                        }
                    },
                    _dumpReferenceMap: function () {
                        var i;
                        for (i = 0; i < this._arrayOfAllItems.length; i++) {
                            var _47 = this._arrayOfAllItems[i];
                            if (_47 && _47[this._reverseRefMap]) {}
                        }
                    },
                    _getValueOrValues: function (_48, _49) {
                        var _4a = undefined;
                        if (this.hasAttribute(_48, _49)) {
                            var _4b = this.getValues(_48, _49);
                            if (_4b.length == 1) {
                                _4a = _4b[0];
                            } else {
                                _4a = _4b;
                            }
                        }
                        return _4a;
                    },
                    _flatten: function (_4c) {
                        if (this.isItem(_4c)) {
                            return {
                                _reference: this.getIdentity(_4c)
                            };
                        } else {
                            if (typeof _4c === "object") {
                                for (var _4d in this._datatypeMap) {
                                    var _4e = this._datatypeMap[_4d];
                                    if (_1.isObject(_4e) && !_1.isFunction(_4e)) {
                                        if (_4c instanceof _4e.type) {
                                            if (!_4e.serialize) {
                                                throw new Error("ItemFileWriteStore:  No serializer defined for type mapping: [" + _4d + "]");
                                            }
                                            return {
                                                _type: _4d,
                                                _value: _4e.serialize(_4c)
                                            };
                                        }
                                    } else {
                                        if (_4c instanceof _4e) {
                                            return {
                                                _type: _4d,
                                                _value: _4c.toString()
                                            };
                                        }
                                    }
                                }
                            }
                            return _4c;
                        }
                    },
                    _getNewFileContentString: function () {
                        var _4f = {};
                        var _50 = this._getIdentifierAttribute();
                        if (_50 !== Number) {
                            _4f.identifier = _50;
                        }
                        if (this._labelAttr) {
                            _4f.label = this._labelAttr;
                        }
                        _4f.items = [];
                        for (var i = 0; i < this._arrayOfAllItems.length; ++i) {
                            var _51 = this._arrayOfAllItems[i];
                            if (_51 !== null) {
                                var _52 = {};
                                for (var key in _51) {
                                    if (key !== this._storeRefPropName && key !== this._itemNumPropName && key !== this._reverseRefMap && key !== this._rootItemPropName) {
                                        var _53 = this.getValues(_51, key);
                                        if (_53.length == 1) {
                                            _52[key] = this._flatten(_53[0]);
                                        } else {
                                            var _54 = [];
                                            for (var j = 0; j < _53.length; ++j) {
                                                _54.push(this._flatten(_53[j]));
                                                _52[key] = _54;
                                            }
                                        }
                                    }
                                }
                                _4f.items.push(_52);
                            }
                        }
                        var _55 = true;
                        return _4.toJson(_4f, _55);
                    },
                    _isEmpty: function (_56) {
                        var _57 = true;
                        if (_1.isObject(_56)) {
                            var i;
                            for (i in _56) {
                                _57 = false;
                                break;
                            }
                        } else {
                            if (_1.isArray(_56)) {
                                if (_56.length > 0) {
                                    _57 = false;
                                }
                            }
                        }
                        return _57;
                    },
                    save: function (_58) {
                        this._assert(!this._saveInProgress);
                        this._saveInProgress = true;
                        var _59 = this;
                        var _5a = function () {
                                _59._pending = {
                                    _newItems: {},
                                    _modifiedItems: {},
                                    _deletedItems: {}
                                };
                                _59._saveInProgress = false;
                                if (_58 && _58.onComplete) {
                                    var _5b = _58.scope || _5.global;
                                    _58.onComplete.call(_5b);
                                }
                            };
                        var _5c = function (err) {
                                _59._saveInProgress = false;
                                if (_58 && _58.onError) {
                                    var _5d = _58.scope || _5.global;
                                    _58.onError.call(_5d, err);
                                }
                            };
                        if (this._saveEverything) {
                            var _5e = this._getNewFileContentString();
                            this._saveEverything(_5a, _5c, _5e);
                        }
                        if (this._saveCustom) {
                            this._saveCustom(_5a, _5c);
                        }
                        if (!this._saveEverything && !this._saveCustom) {
                            _5a();
                        }
                    },
                    revert: function () {
                        this._assert(!this._saveInProgress);
                        var _5f;
                        for (_5f in this._pending._modifiedItems) {
                            var _60 = this._pending._modifiedItems[_5f];
                            var _61 = null;
                            if (this._itemsByIdentity) {
                                _61 = this._itemsByIdentity[_5f];
                            } else {
                                _61 = this._arrayOfAllItems[_5f];
                            }
                            _60[this._storeRefPropName] = this;
                            for (var key in _61) {
                                delete _61[key];
                            }
                            _1.mixin(_61, _60);
                        }
                        var _62;
                        for (_5f in this._pending._deletedItems) {
                            _62 = this._pending._deletedItems[_5f];
                            _62[this._storeRefPropName] = this;
                            var _63 = _62[this._itemNumPropName];
                            if (_62["backup_" + this._reverseRefMap]) {
                                _62[this._reverseRefMap] = _62["backup_" + this._reverseRefMap];
                                delete _62["backup_" + this._reverseRefMap];
                            }
                            this._arrayOfAllItems[_63] = _62;
                            if (this._itemsByIdentity) {
                                this._itemsByIdentity[_5f] = _62;
                            }
                            if (_62[this._rootItemPropName]) {
                                this._arrayOfTopLevelItems.push(_62);
                            }
                        }
                        for (_5f in this._pending._deletedItems) {
                            _62 = this._pending._deletedItems[_5f];
                            if (_62["backupRefs_" + this._reverseRefMap]) {
                                _3.forEach(_62["backupRefs_" + this._reverseRefMap], function (_64) {
                                    var _65;
                                    if (this._itemsByIdentity) {
                                        _65 = this._itemsByIdentity[_64.id];
                                    } else {
                                        _65 = this._arrayOfAllItems[_64.id];
                                    }
                                    this._addReferenceToMap(_65, _62, _64.attr);
                                }, this);
                                delete _62["backupRefs_" + this._reverseRefMap];
                            }
                        }
                        for (_5f in this._pending._newItems) {
                            var _66 = this._pending._newItems[_5f];
                            _66[this._storeRefPropName] = null;
                            this._arrayOfAllItems[_66[this._itemNumPropName]] = null;
                            if (_66[this._rootItemPropName]) {
                                this._removeArrayElement(this._arrayOfTopLevelItems, _66);
                            }
                            if (this._itemsByIdentity) {
                                delete this._itemsByIdentity[_5f];
                            }
                        }
                        this._pending = {
                            _newItems: {},
                            _modifiedItems: {},
                            _deletedItems: {}
                        };
                        return true;
                    },
                    isDirty: function (_67) {
                        if (_67) {
                            var _68 = this.getIdentity(_67);
                            return new Boolean(this._pending._newItems[_68] || this._pending._modifiedItems[_68] || this._pending._deletedItems[_68]).valueOf();
                        } else {
                            return !this._isEmpty(this._pending._newItems) || !this._isEmpty(this._pending._modifiedItems) || !this._isEmpty(this._pending._deletedItems);
                        }
                    },
                    onSet: function (_69, _6a, _6b, _6c) {},
                    onNew: function (_6d, _6e) {},
                    onDelete: function (_6f) {},
                    close: function (_70) {
                        if (this.clearOnClose) {
                            if (!this.isDirty()) {
                                this.inherited(arguments);
                            } else {
                                throw new Error("dojo.data.ItemFileWriteStore: There are unsaved changes present in the store.  Please save or revert the changes before invoking close.");
                            }
                        }
                    }
                });
            });
        },
        "dojo/data/ItemFileReadStore": function () {
            define(["../_base/kernel", "../_base/lang", "../_base/declare", "../_base/array", "../_base/xhr", "../Evented", "../_base/window", "./util/filter", "./util/simpleFetch", "../date/stamp"], function (_71, _72, _73, _74, xhr, _75, _76, _77, _78, _79) {
                var _7a = _73("dojo.data.ItemFileReadStore", [_75], {
                    constructor: function (_7b) {
                        this._arrayOfAllItems = [];
                        this._arrayOfTopLevelItems = [];
                        this._loadFinished = false;
                        this._jsonFileUrl = _7b.url;
                        this._ccUrl = _7b.url;
                        this.url = _7b.url;
                        this._jsonData = _7b.data;
                        this.data = null;
                        this._datatypeMap = _7b.typeMap || {};
                        if (!this._datatypeMap["Date"]) {
                            this._datatypeMap["Date"] = {
                                type: Date,
                                deserialize: function (_7c) {
                                    return _79.fromISOString(_7c);
                                }
                            };
                        }
                        this._features = {
                            "dojo.data.api.Read": true,
                            "dojo.data.api.Identity": true
                        };
                        this._itemsByIdentity = null;
                        this._storeRefPropName = "_S";
                        this._itemNumPropName = "_0";
                        this._rootItemPropName = "_RI";
                        this._reverseRefMap = "_RRM";
                        this._loadInProgress = false;
                        this._queuedFetches = [];
                        if (_7b.urlPreventCache !== undefined) {
                            this.urlPreventCache = _7b.urlPreventCache ? true : false;
                        }
                        if (_7b.hierarchical !== undefined) {
                            this.hierarchical = _7b.hierarchical ? true : false;
                        }
                        if (_7b.clearOnClose) {
                            this.clearOnClose = true;
                        }
                        if ("failOk" in _7b) {
                            this.failOk = _7b.failOk ? true : false;
                        }
                    },
                    url: "",
                    _ccUrl: "",
                    data: null,
                    typeMap: null,
                    clearOnClose: false,
                    urlPreventCache: false,
                    failOk: false,
                    hierarchical: true,
                    _assertIsItem: function (_7d) {
                        if (!this.isItem(_7d)) {
                            throw new Error("dojo.data.ItemFileReadStore: Invalid item argument.");
                        }
                    },
                    _assertIsAttribute: function (_7e) {
                        if (typeof _7e !== "string") {
                            throw new Error("dojo.data.ItemFileReadStore: Invalid attribute argument.");
                        }
                    },
                    getValue: function (_7f, _80, _81) {
                        var _82 = this.getValues(_7f, _80);
                        return (_82.length > 0) ? _82[0] : _81;
                    },
                    getValues: function (_83, _84) {
                        this._assertIsItem(_83);
                        this._assertIsAttribute(_84);
                        return (_83[_84] || []).slice(0);
                    },
                    getAttributes: function (_85) {
                        this._assertIsItem(_85);
                        var _86 = [];
                        for (var key in _85) {
                            if ((key !== this._storeRefPropName) && (key !== this._itemNumPropName) && (key !== this._rootItemPropName) && (key !== this._reverseRefMap)) {
                                _86.push(key);
                            }
                        }
                        return _86;
                    },
                    hasAttribute: function (_87, _88) {
                        this._assertIsItem(_87);
                        this._assertIsAttribute(_88);
                        return (_88 in _87);
                    },
                    containsValue: function (_89, _8a, _8b) {
                        var _8c = undefined;
                        if (typeof _8b === "string") {
                            _8c = _77.patternToRegExp(_8b, false);
                        }
                        return this._containsValue(_89, _8a, _8b, _8c);
                    },
                    _containsValue: function (_8d, _8e, _8f, _90) {
                        return _74.some(this.getValues(_8d, _8e), function (_91) {
                            if (_91 !== null && !_72.isObject(_91) && _90) {
                                if (_91.toString().match(_90)) {
                                    return true;
                                }
                            } else {
                                if (_8f === _91) {
                                    return true;
                                }
                            }
                        });
                    },
                    isItem: function (_92) {
                        if (_92 && _92[this._storeRefPropName] === this) {
                            if (this._arrayOfAllItems[_92[this._itemNumPropName]] === _92) {
                                return true;
                            }
                        }
                        return false;
                    },
                    isItemLoaded: function (_93) {
                        return this.isItem(_93);
                    },
                    loadItem: function (_94) {
                        this._assertIsItem(_94.item);
                    },
                    getFeatures: function () {
                        return this._features;
                    },
                    getLabel: function (_95) {
                        if (this._labelAttr && this.isItem(_95)) {
                            return this.getValue(_95, this._labelAttr);
                        }
                        return undefined;
                    },
                    getLabelAttributes: function (_96) {
                        if (this._labelAttr) {
                            return [this._labelAttr];
                        }
                        return null;
                    },
                    _fetchItems: function (_97, _98, _99) {
                        var _9a = this,
                            _9b = function (_9c, _9d) {
                                var _9e = [],
                                    i, key;
                                if (_9c.query) {
                                    var _9f, _a0 = _9c.queryOptions ? _9c.queryOptions.ignoreCase : false;
                                    var _a1 = {};
                                    for (key in _9c.query) {
                                        _9f = _9c.query[key];
                                        if (typeof _9f === "string") {
                                            _a1[key] = _77.patternToRegExp(_9f, _a0);
                                        } else {
                                            if (_9f instanceof RegExp) {
                                                _a1[key] = _9f;
                                            }
                                        }
                                    }
                                    for (i = 0; i < _9d.length; ++i) {
                                        var _a2 = true;
                                        var _a3 = _9d[i];
                                        if (_a3 === null) {
                                            _a2 = false;
                                        } else {
                                            for (key in _9c.query) {
                                                _9f = _9c.query[key];
                                                if (!_9a._containsValue(_a3, key, _9f, _a1[key])) {
                                                    _a2 = false;
                                                }
                                            }
                                        }
                                        if (_a2) {
                                            _9e.push(_a3);
                                        }
                                    }
                                    _98(_9e, _9c);
                                } else {
                                    for (i = 0; i < _9d.length; ++i) {
                                        var _a4 = _9d[i];
                                        if (_a4 !== null) {
                                            _9e.push(_a4);
                                        }
                                    }
                                    _98(_9e, _9c);
                                }
                            };
                        if (this._loadFinished) {
                            _9b(_97, this._getItemsArray(_97.queryOptions));
                        } else {
                            if (this._jsonFileUrl !== this._ccUrl) {
                                _71.deprecated("dojo.data.ItemFileReadStore: ", "To change the url, set the url property of the store," + " not _jsonFileUrl.  _jsonFileUrl support will be removed in 2.0");
                                this._ccUrl = this._jsonFileUrl;
                                this.url = this._jsonFileUrl;
                            } else {
                                if (this.url !== this._ccUrl) {
                                    this._jsonFileUrl = this.url;
                                    this._ccUrl = this.url;
                                }
                            }
                            if (this.data != null) {
                                this._jsonData = this.data;
                                this.data = null;
                            }
                            if (this._jsonFileUrl) {
                                if (this._loadInProgress) {
                                    this._queuedFetches.push({
                                        args: _97,
                                        filter: _9b
                                    });
                                } else {
                                    this._loadInProgress = true;
                                    var _a5 = {
                                        url: _9a._jsonFileUrl,
                                        handleAs: "json-comment-optional",
                                        preventCache: this.urlPreventCache,
                                        failOk: this.failOk
                                    };
                                    var _a6 = xhr.get(_a5);
                                    _a6.addCallback(function (_a7) {
                                        try {
                                            _9a._getItemsFromLoadedData(_a7);
                                            _9a._loadFinished = true;
                                            _9a._loadInProgress = false;
                                            _9b(_97, _9a._getItemsArray(_97.queryOptions));
                                            _9a._handleQueuedFetches();
                                        } catch (e) {
                                            _9a._loadFinished = true;
                                            _9a._loadInProgress = false;
                                            _99(e, _97);
                                        }
                                    });
                                    _a6.addErrback(function (_a8) {
                                        _9a._loadInProgress = false;
                                        _99(_a8, _97);
                                    });
                                    var _a9 = null;
                                    if (_97.abort) {
                                        _a9 = _97.abort;
                                    }
                                    _97.abort = function () {
                                        var df = _a6;
                                        if (df && df.fired === -1) {
                                            df.cancel();
                                            df = null;
                                        }
                                        if (_a9) {
                                            _a9.call(_97);
                                        }
                                    };
                                }
                            } else {
                                if (this._jsonData) {
                                    try {
                                        this._loadFinished = true;
                                        this._getItemsFromLoadedData(this._jsonData);
                                        this._jsonData = null;
                                        _9b(_97, this._getItemsArray(_97.queryOptions));
                                    } catch (e) {
                                        _99(e, _97);
                                    }
                                } else {
                                    _99(new Error("dojo.data.ItemFileReadStore: No JSON source data was provided as either URL or a nested Javascript object."), _97);
                                }
                            }
                        }
                    },
                    _handleQueuedFetches: function () {
                        if (this._queuedFetches.length > 0) {
                            for (var i = 0; i < this._queuedFetches.length; i++) {
                                var _aa = this._queuedFetches[i],
                                    _ab = _aa.args,
                                    _ac = _aa.filter;
                                if (_ac) {
                                    _ac(_ab, this._getItemsArray(_ab.queryOptions));
                                } else {
                                    this.fetchItemByIdentity(_ab);
                                }
                            }
                            this._queuedFetches = [];
                        }
                    },
                    _getItemsArray: function (_ad) {
                        if (_ad && _ad.deep) {
                            return this._arrayOfAllItems;
                        }
                        return this._arrayOfTopLevelItems;
                    },
                    close: function (_ae) {
                        if (this.clearOnClose && this._loadFinished && !this._loadInProgress) {
                            if (((this._jsonFileUrl == "" || this._jsonFileUrl == null) && (this.url == "" || this.url == null)) && this.data == null) {}
                            this._arrayOfAllItems = [];
                            this._arrayOfTopLevelItems = [];
                            this._loadFinished = false;
                            this._itemsByIdentity = null;
                            this._loadInProgress = false;
                            this._queuedFetches = [];
                        }
                    },
                    _getItemsFromLoadedData: function (_af) {
                        var _b0 = false,
                            _b1 = this;

                        function _b2(_b3) {
                            return (_b3 !== null) && (typeof _b3 === "object") && (!_72.isArray(_b3) || _b0) && (!_72.isFunction(_b3)) && (_b3.constructor == Object || _72.isArray(_b3)) && (typeof _b3._reference === "undefined") && (typeof _b3._type === "undefined") && (typeof _b3._value === "undefined") && _b1.hierarchical;
                        };

                        function _b4(_b5) {
                            _b1._arrayOfAllItems.push(_b5);
                            for (var _b6 in _b5) {
                                var _b7 = _b5[_b6];
                                if (_b7) {
                                    if (_72.isArray(_b7)) {
                                        var _b8 = _b7;
                                        for (var k = 0; k < _b8.length; ++k) {
                                            var _b9 = _b8[k];
                                            if (_b2(_b9)) {
                                                _b4(_b9);
                                            }
                                        }
                                    } else {
                                        if (_b2(_b7)) {
                                            _b4(_b7);
                                        }
                                    }
                                }
                            }
                        };
                        this._labelAttr = _af.label;
                        var i, _ba;
                        this._arrayOfAllItems = [];
                        this._arrayOfTopLevelItems = _af.items;
                        for (i = 0; i < this._arrayOfTopLevelItems.length; ++i) {
                            _ba = this._arrayOfTopLevelItems[i];
                            if (_72.isArray(_ba)) {
                                _b0 = true;
                            }
                            _b4(_ba);
                            _ba[this._rootItemPropName] = true;
                        }
                        var _bb = {},
                            key;
                        for (i = 0; i < this._arrayOfAllItems.length; ++i) {
                            _ba = this._arrayOfAllItems[i];
                            for (key in _ba) {
                                if (key !== this._rootItemPropName) {
                                    var _bc = _ba[key];
                                    if (_bc !== null) {
                                        if (!_72.isArray(_bc)) {
                                            _ba[key] = [_bc];
                                        }
                                    } else {
                                        _ba[key] = [null];
                                    }
                                }
                                _bb[key] = key;
                            }
                        }
                        while (_bb[this._storeRefPropName]) {
                            this._storeRefPropName += "_";
                        }
                        while (_bb[this._itemNumPropName]) {
                            this._itemNumPropName += "_";
                        }
                        while (_bb[this._reverseRefMap]) {
                            this._reverseRefMap += "_";
                        }
                        var _bd;
                        var _be = _af.identifier;
                        if (_be) {
                            this._itemsByIdentity = {};
                            this._features["dojo.data.api.Identity"] = _be;
                            for (i = 0; i < this._arrayOfAllItems.length; ++i) {
                                _ba = this._arrayOfAllItems[i];
                                _bd = _ba[_be];
                                var _bf = _bd[0];
                                if (!Object.hasOwnProperty.call(this._itemsByIdentity, _bf)) {
                                    this._itemsByIdentity[_bf] = _ba;
                                } else {
                                    if (this._jsonFileUrl) {
                                        throw new Error("dojo.data.ItemFileReadStore:  The json data as specified by: [" + this._jsonFileUrl + "] is malformed.  Items within the list have identifier: [" + _be + "].  Value collided: [" + _bf + "]");
                                    } else {
                                        if (this._jsonData) {
                                            throw new Error("dojo.data.ItemFileReadStore:  The json data provided by the creation arguments is malformed.  Items within the list have identifier: [" + _be + "].  Value collided: [" + _bf + "]");
                                        }
                                    }
                                }
                            }
                        } else {
                            this._features["dojo.data.api.Identity"] = Number;
                        }
                        for (i = 0; i < this._arrayOfAllItems.length; ++i) {
                            _ba = this._arrayOfAllItems[i];
                            _ba[this._storeRefPropName] = this;
                            _ba[this._itemNumPropName] = i;
                        }
                        for (i = 0; i < this._arrayOfAllItems.length; ++i) {
                            _ba = this._arrayOfAllItems[i];
                            for (key in _ba) {
                                _bd = _ba[key];
                                for (var j = 0; j < _bd.length; ++j) {
                                    _bc = _bd[j];
                                    if (_bc !== null && typeof _bc == "object") {
                                        if (("_type" in _bc) && ("_value" in _bc)) {
                                            var _c0 = _bc._type;
                                            var _c1 = this._datatypeMap[_c0];
                                            if (!_c1) {
                                                throw new Error("dojo.data.ItemFileReadStore: in the typeMap constructor arg, no object class was specified for the datatype '" + _c0 + "'");
                                            } else {
                                                if (_72.isFunction(_c1)) {
                                                    _bd[j] = new _c1(_bc._value);
                                                } else {
                                                    if (_72.isFunction(_c1.deserialize)) {
                                                        _bd[j] = _c1.deserialize(_bc._value);
                                                    } else {
                                                        throw new Error("dojo.data.ItemFileReadStore: Value provided in typeMap was neither a constructor, nor a an object with a deserialize function");
                                                    }
                                                }
                                            }
                                        }
                                        if (_bc._reference) {
                                            var _c2 = _bc._reference;
                                            if (!_72.isObject(_c2)) {
                                                _bd[j] = this._getItemByIdentity(_c2);
                                            } else {
                                                for (var k = 0; k < this._arrayOfAllItems.length; ++k) {
                                                    var _c3 = this._arrayOfAllItems[k],
                                                        _c4 = true;
                                                    for (var _c5 in _c2) {
                                                        if (_c3[_c5] != _c2[_c5]) {
                                                            _c4 = false;
                                                        }
                                                    }
                                                    if (_c4) {
                                                        _bd[j] = _c3;
                                                    }
                                                }
                                            }
                                            if (this.referenceIntegrity) {
                                                var _c6 = _bd[j];
                                                if (this.isItem(_c6)) {
                                                    this._addReferenceToMap(_c6, _ba, key);
                                                }
                                            }
                                        } else {
                                            if (this.isItem(_bc)) {
                                                if (this.referenceIntegrity) {
                                                    this._addReferenceToMap(_bc, _ba, key);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    _addReferenceToMap: function (_c7, _c8, _c9) {},
                    getIdentity: function (_ca) {
                        var _cb = this._features["dojo.data.api.Identity"];
                        if (_cb === Number) {
                            return _ca[this._itemNumPropName];
                        } else {
                            var _cc = _ca[_cb];
                            if (_cc) {
                                return _cc[0];
                            }
                        }
                        return null;
                    },
                    fetchItemByIdentity: function (_cd) {
                        var _ce, _cf;
                        if (!this._loadFinished) {
                            var _d0 = this;
                            if (this._jsonFileUrl !== this._ccUrl) {
                                _71.deprecated("dojo.data.ItemFileReadStore: ", "To change the url, set the url property of the store," + " not _jsonFileUrl.  _jsonFileUrl support will be removed in 2.0");
                                this._ccUrl = this._jsonFileUrl;
                                this.url = this._jsonFileUrl;
                            } else {
                                if (this.url !== this._ccUrl) {
                                    this._jsonFileUrl = this.url;
                                    this._ccUrl = this.url;
                                }
                            }
                            if (this.data != null && this._jsonData == null) {
                                this._jsonData = this.data;
                                this.data = null;
                            }
                            if (this._jsonFileUrl) {
                                if (this._loadInProgress) {
                                    this._queuedFetches.push({
                                        args: _cd
                                    });
                                } else {
                                    this._loadInProgress = true;
                                    var _d1 = {
                                        url: _d0._jsonFileUrl,
                                        handleAs: "json-comment-optional",
                                        preventCache: this.urlPreventCache,
                                        failOk: this.failOk
                                    };
                                    var _d2 = xhr.get(_d1);
                                    _d2.addCallback(function (_d3) {
                                        var _d4 = _cd.scope ? _cd.scope : _76.global;
                                        try {
                                            _d0._getItemsFromLoadedData(_d3);
                                            _d0._loadFinished = true;
                                            _d0._loadInProgress = false;
                                            _ce = _d0._getItemByIdentity(_cd.identity);
                                            if (_cd.onItem) {
                                                _cd.onItem.call(_d4, _ce);
                                            }
                                            _d0._handleQueuedFetches();
                                        } catch (error) {
                                            _d0._loadInProgress = false;
                                            if (_cd.onError) {
                                                _cd.onError.call(_d4, error);
                                            }
                                        }
                                    });
                                    _d2.addErrback(function (_d5) {
                                        _d0._loadInProgress = false;
                                        if (_cd.onError) {
                                            var _d6 = _cd.scope ? _cd.scope : _76.global;
                                            _cd.onError.call(_d6, _d5);
                                        }
                                    });
                                }
                            } else {
                                if (this._jsonData) {
                                    _d0._getItemsFromLoadedData(_d0._jsonData);
                                    _d0._jsonData = null;
                                    _d0._loadFinished = true;
                                    _ce = _d0._getItemByIdentity(_cd.identity);
                                    if (_cd.onItem) {
                                        _cf = _cd.scope ? _cd.scope : _76.global;
                                        _cd.onItem.call(_cf, _ce);
                                    }
                                }
                            }
                        } else {
                            _ce = this._getItemByIdentity(_cd.identity);
                            if (_cd.onItem) {
                                _cf = _cd.scope ? _cd.scope : _76.global;
                                _cd.onItem.call(_cf, _ce);
                            }
                        }
                    },
                    _getItemByIdentity: function (_d7) {
                        var _d8 = null;
                        if (this._itemsByIdentity) {
                            if (Object.hasOwnProperty.call(this._itemsByIdentity, _d7)) {
                                _d8 = this._itemsByIdentity[_d7];
                            }
                        } else {
                            if (Object.hasOwnProperty.call(this._arrayOfAllItems, _d7)) {
                                _d8 = this._arrayOfAllItems[_d7];
                            }
                        }
                        if (_d8 === undefined) {
                            _d8 = null;
                        }
                        return _d8;
                    },
                    getIdentityAttributes: function (_d9) {
                        var _da = this._features["dojo.data.api.Identity"];
                        if (_da === Number) {
                            return null;
                        } else {
                            return [_da];
                        }
                    },
                    _forceLoad: function () {
                        var _db = this;
                        if (this._jsonFileUrl !== this._ccUrl) {
                            _71.deprecated("dojo.data.ItemFileReadStore: ", "To change the url, set the url property of the store," + " not _jsonFileUrl.  _jsonFileUrl support will be removed in 2.0");
                            this._ccUrl = this._jsonFileUrl;
                            this.url = this._jsonFileUrl;
                        } else {
                            if (this.url !== this._ccUrl) {
                                this._jsonFileUrl = this.url;
                                this._ccUrl = this.url;
                            }
                        }
                        if (this.data != null) {
                            this._jsonData = this.data;
                            this.data = null;
                        }
                        if (this._jsonFileUrl) {
                            var _dc = {
                                url: this._jsonFileUrl,
                                handleAs: "json-comment-optional",
                                preventCache: this.urlPreventCache,
                                failOk: this.failOk,
                                sync: true
                            };
                            var _dd = xhr.get(_dc);
                            _dd.addCallback(function (_de) {
                                try {
                                    if (_db._loadInProgress !== true && !_db._loadFinished) {
                                        _db._getItemsFromLoadedData(_de);
                                        _db._loadFinished = true;
                                    } else {
                                        if (_db._loadInProgress) {
                                            throw new Error("dojo.data.ItemFileReadStore:  Unable to perform a synchronous load, an async load is in progress.");
                                        }
                                    }
                                } catch (e) {
                                    throw e;
                                }
                            });
                            _dd.addErrback(function (_df) {
                                throw _df;
                            });
                        } else {
                            if (this._jsonData) {
                                _db._getItemsFromLoadedData(_db._jsonData);
                                _db._jsonData = null;
                                _db._loadFinished = true;
                            }
                        }
                    }
                });
                _72.extend(_7a, _78);
                return _7a;
            });
        },
        "dojo/data/util/filter": function () {
            define(["dojo/_base/lang"], function (_e0) {
                var _e1 = _e0.getObject("dojo.data.util.filter", true);
                _e1.patternToRegExp = function (_e2, _e3) {
                    var rxp = "^";
                    var c = null;
                    for (var i = 0; i < _e2.length; i++) {
                        c = _e2.charAt(i);
                        switch (c) {
                        case "\\":
                            rxp += c;
                            i++;
                            rxp += _e2.charAt(i);
                            break;
                        case "*":
                            rxp += ".*";
                            break;
                        case "?":
                            rxp += ".";
                            break;
                        case "$":
                        case "^":
                        case "/":
                        case "+":
                        case ".":
                        case "|":
                        case "(":
                        case ")":
                        case "{":
                        case "}":
                        case "[":
                        case "]":
                            rxp += "\\";
                        default:
                            rxp += c;
                        }
                    }
                    rxp += "$";
                    if (_e3) {
                        return new RegExp(rxp, "mi");
                    } else {
                        return new RegExp(rxp, "m");
                    }
                };
                return _e1;
            });
        },
        "dojo/data/util/simpleFetch": function () {
            define(["dojo/_base/lang", "dojo/_base/window", "./sorter"], function (_e4, _e5, _e6) {
                var _e7 = _e4.getObject("dojo.data.util.simpleFetch", true);
                _e7.fetch = function (_e8) {
                    _e8 = _e8 || {};
                    if (!_e8.store) {
                        _e8.store = this;
                    }
                    var _e9 = this;
                    var _ea = function (_eb, _ec) {
                            if (_ec.onError) {
                                var _ed = _ec.scope || _e5.global;
                                _ec.onError.call(_ed, _eb, _ec);
                            }
                        };
                    var _ee = function (_ef, _f0) {
                            var _f1 = _f0.abort || null;
                            var _f2 = false;
                            var _f3 = _f0.start ? _f0.start : 0;
                            var _f4 = (_f0.count && (_f0.count !== Infinity)) ? (_f3 + _f0.count) : _ef.length;
                            _f0.abort = function () {
                                _f2 = true;
                                if (_f1) {
                                    _f1.call(_f0);
                                }
                            };
                            var _f5 = _f0.scope || _e5.global;
                            if (!_f0.store) {
                                _f0.store = _e9;
                            }
                            if (_f0.onBegin) {
                                _f0.onBegin.call(_f5, _ef.length, _f0);
                            }
                            if (_f0.sort) {
                                _ef.sort(_e6.createSortFunction(_f0.sort, _e9));
                            }
                            if (_f0.onItem) {
                                for (var i = _f3;
                                (i < _ef.length) && (i < _f4); ++i) {
                                    var _f6 = _ef[i];
                                    if (!_f2) {
                                        _f0.onItem.call(_f5, _f6, _f0);
                                    }
                                }
                            }
                            if (_f0.onComplete && !_f2) {
                                var _f7 = null;
                                if (!_f0.onItem) {
                                    _f7 = _ef.slice(_f3, _f4);
                                }
                                _f0.onComplete.call(_f5, _f7, _f0);
                            }
                        };
                    this._fetchItems(_e8, _ee, _ea);
                    return _e8;
                };
                return _e7;
            });
        },
        "dojo/data/util/sorter": function () {
            define(["dojo/_base/lang"], function (_f8) {
                var _f9 = _f8.getObject("dojo.data.util.sorter", true);
                _f9.basicComparator = function (a, b) {
                    var r = -1;
                    if (a === null) {
                        a = undefined;
                    }
                    if (b === null) {
                        b = undefined;
                    }
                    if (a == b) {
                        r = 0;
                    } else {
                        if (a > b || a == null) {
                            r = 1;
                        }
                    }
                    return r;
                };
                _f9.createSortFunction = function (_fa, _fb) {
                    var _fc = [];

                    function _fd(_fe, dir, _ff, s) {
                        return function (_100, _101) {
                            var a = s.getValue(_100, _fe);
                            var b = s.getValue(_101, _fe);
                            return dir * _ff(a, b);
                        };
                    };
                    var _102;
                    var map = _fb.comparatorMap;
                    var bc = _f9.basicComparator;
                    for (var i = 0; i < _fa.length; i++) {
                        _102 = _fa[i];
                        var attr = _102.attribute;
                        if (attr) {
                            var dir = (_102.descending) ? -1 : 1;
                            var comp = bc;
                            if (map) {
                                if (typeof attr !== "string" && ("toString" in attr)) {
                                    attr = attr.toString();
                                }
                                comp = map[attr] || bc;
                            }
                            _fc.push(_fd(attr, dir, comp, _fb));
                        }
                    }
                    return function (rowA, rowB) {
                        var i = 0;
                        while (i < _fc.length) {
                            var ret = _fc[i++](rowA, rowB);
                            if (ret !== 0) {
                                return ret;
                            }
                        }
                        return 0;
                    };
                };
                return _f9;
            });
        },
        "dojo/date/stamp": function () {
            define(["../_base/kernel", "../_base/lang", "../_base/array"], function (dojo, lang, _103) {
                lang.getObject("date.stamp", true, dojo);
                dojo.date.stamp.fromISOString = function (_104, _105) {
                    if (!dojo.date.stamp._isoRegExp) {
                        dojo.date.stamp._isoRegExp = /^(?:(\d{4})(?:-(\d{2})(?:-(\d{2}))?)?)?(?:T(\d{2}):(\d{2})(?::(\d{2})(.\d+)?)?((?:[+-](\d{2}):(\d{2}))|Z)?)?$/;
                    }
                    var _106 = dojo.date.stamp._isoRegExp.exec(_104),
                        _107 = null;
                    if (_106) {
                        _106.shift();
                        if (_106[1]) {
                            _106[1]--;
                        }
                        if (_106[6]) {
                            _106[6] *= 1000;
                        }
                        if (_105) {
                            _105 = new Date(_105);
                            _103.forEach(_103.map(["FullYear", "Month", "Date", "Hours", "Minutes", "Seconds", "Milliseconds"], function (prop) {
                                return _105["get" + prop]();
                            }), function (_108, _109) {
                                _106[_109] = _106[_109] || _108;
                            });
                        }
                        _107 = new Date(_106[0] || 1970, _106[1] || 0, _106[2] || 1, _106[3] || 0, _106[4] || 0, _106[5] || 0, _106[6] || 0);
                        if (_106[0] < 100) {
                            _107.setFullYear(_106[0] || 1970);
                        }
                        var _10a = 0,
                            _10b = _106[7] && _106[7].charAt(0);
                        if (_10b != "Z") {
                            _10a = ((_106[8] || 0) * 60) + (Number(_106[9]) || 0);
                            if (_10b != "-") {
                                _10a *= -1;
                            }
                        }
                        if (_10b) {
                            _10a -= _107.getTimezoneOffset();
                        }
                        if (_10a) {
                            _107.setTime(_107.getTime() + _10a * 60000);
                        }
                    }
                    return _107;
                };
                dojo.date.stamp.toISOString = function (_10c, _10d) {
                    var _10e = function (n) {
                            return (n < 10) ? "0" + n : n;
                        };
                    _10d = _10d || {};
                    var _10f = [],
                        _110 = _10d.zulu ? "getUTC" : "get",
                        date = "";
                    if (_10d.selector != "time") {
                        var year = _10c[_110 + "FullYear"]();
                        date = ["0000".substr((year + "").length) + year, _10e(_10c[_110 + "Month"]() + 1), _10e(_10c[_110 + "Date"]())].join("-");
                    }
                    _10f.push(date);
                    if (_10d.selector != "date") {
                        var time = [_10e(_10c[_110 + "Hours"]()), _10e(_10c[_110 + "Minutes"]()), _10e(_10c[_110 + "Seconds"]())].join(":");
                        var _111 = _10c[_110 + "Milliseconds"]();
                        if (_10d.milliseconds) {
                            time += "." + (_111 < 100 ? "0" : "") + _10e(_111);
                        }
                        if (_10d.zulu) {
                            time += "Z";
                        } else {
                            if (_10d.selector != "time") {
                                var _112 = _10c.getTimezoneOffset();
                                var _113 = Math.abs(_112);
                                time += (_112 > 0 ? "-" : "+") + _10e(Math.floor(_113 / 60)) + ":" + _10e(_113 % 60);
                            }
                        }
                        _10f.push(time);
                    }
                    return _10f.join("T");
                };
                return dojo.date.stamp;
            });
        },
        "dojox/grid/EnhancedGrid": function () {
            define("dojox/grid/EnhancedGrid", ["dojo/_base/kernel", "../main", "dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/_base/sniff", "dojo/dom", "dojo/dom-geometry", "dojo/i18n", "./DataGrid", "./DataSelection", "./enhanced/_PluginManager", "./enhanced/plugins/_SelectionPreserver", "dojo/i18n!./enhanced/nls/EnhancedGrid"], function (dojo, _114, _115, lang, _116, has, dom, _117, i18n, _118, _119, _11a, _11b) {
                dojo.experimental("dojox.grid.EnhancedGrid");
                var _11c = _115("dojox.grid.EnhancedGrid", _118, {
                    plugins: null,
                    pluginMgr: null,
                    _pluginMgrClass: _11a,
                    postMixInProperties: function () {
                        this._nls = i18n.getLocalization("dojox.grid.enhanced", "EnhancedGrid", this.lang);
                        this.inherited(arguments);
                    },
                    postCreate: function () {
                        this.pluginMgr = new this._pluginMgrClass(this);
                        this.pluginMgr.preInit();
                        this.inherited(arguments);
                        this.pluginMgr.postInit();
                    },
                    plugin: function (name) {
                        return this.pluginMgr.getPlugin(name);
                    },
                    startup: function () {
                        this.inherited(arguments);
                        this.pluginMgr.startup();
                    },
                    createSelection: function () {
                        this.selection = new _114.grid.enhanced.DataSelection(this);
                    },
                    canSort: function (_11d, _11e) {
                        return true;
                    },
                    doKeyEvent: function (e) {
                        try {
                            var view = this.focus.focusView;
                            view.content.decorateEvent(e);
                            if (!e.cell) {
                                view.header.decorateEvent(e);
                            }
                        } catch (e) {}
                        this.inherited(arguments);
                    },
                    doApplyCellEdit: function (_11f, _120, _121) {
                        if (!_121) {
                            this.invalidated[_120] = true;
                            return;
                        }
                        this.inherited(arguments);
                    },
                    mixin: function (_122, _123) {
                        var _124 = {};
                        for (var p in _123) {
                            if (p == "_inherited" || p == "declaredClass" || p == "constructor" || _123["privates"] && _123["privates"][p]) {
                                continue;
                            }
                            _124[p] = _123[p];
                        }
                        lang.mixin(_122, _124);
                    },
                    _copyAttr: function (idx, attr) {
                        if (!attr) {
                            return;
                        }
                        return this.inherited(arguments);
                    },
                    _getHeaderHeight: function () {
                        this.inherited(arguments);
                        return _117.getMarginBox(this.viewsHeaderNode).h;
                    },
                    _fetch: function (_125, _126) {
                        if (this.items) {
                            return this.inherited(arguments);
                        }
                        _125 = _125 || 0;
                        if (this.store && !this._pending_requests[_125]) {
                            if (!this._isLoaded && !this._isLoading) {
                                this._isLoading = true;
                                this.showMessage(this.loadingMessage);
                            }
                            this._pending_requests[_125] = true;
                            try {
                                var req = {
                                    start: _125,
                                    count: this.rowsPerPage,
                                    query: this.query,
                                    sort: this.getSortProps(),
                                    queryOptions: this.queryOptions,
                                    isRender: _126,
                                    onBegin: lang.hitch(this, "_onFetchBegin"),
                                    onComplete: lang.hitch(this, "_onFetchComplete"),
                                    onError: lang.hitch(this, "_onFetchError")
                                };
                                this._storeLayerFetch(req);
                            } catch (e) {
                                this._onFetchError(e, {
                                    start: _125,
                                    count: this.rowsPerPage
                                });
                            }
                        }
                        return 0;
                    },
                    _storeLayerFetch: function (req) {
                        this.store.fetch(req);
                    },
                    getCellByField: function (_127) {
                        return _116.filter(this.layout.cells, function (cell) {
                            return cell.field == _127;
                        })[0];
                    },
                    onMouseUp: function (e) {},
                    createView: function () {
                        var view = this.inherited(arguments);
                        if (has("mozilla")) {
                            var _128 = function (_129, _12a) {
                                    for (var n = _129; n && _12a(n); n = n.parentNode) {}
                                    return n;
                                };
                            var _12b = function (_12c) {
                                    var name = _12c.toUpperCase();
                                    return function (node) {
                                        return node.tagName != name;
                                    };
                                };
                            var func = view.header.getCellX;
                            view.header.getCellX = function (e) {
                                var x = func.call(view.header, e);
                                var n = _128(e.target, _12b("th"));
                                if (n && n !== e.target && dom.isDescendant(e.target, n)) {
                                    x += n.firstChild.offsetLeft;
                                }
                                return x;
                            };
                        }
                        return view;
                    },
                    destroy: function () {
                        delete this._nls;
                        this.pluginMgr.destroy();
                        this.inherited(arguments);
                    }
                });
                _115("dojox.grid.enhanced.DataSelection", _119, {
                    constructor: function (grid) {
                        if (grid.keepSelection) {
                            if (this.preserver) {
                                this.preserver.destroy();
                            }
                            this.preserver = new _11b(this);
                        }
                    },
                    _range: function (_12d, inTo) {
                        this.grid._selectingRange = true;
                        this.inherited(arguments);
                        this.grid._selectingRange = false;
                        this.onChanged();
                    },
                    deselectAll: function (_12e) {
                        this.grid._selectingRange = true;
                        this.inherited(arguments);
                        this.grid._selectingRange = false;
                        this.onChanged();
                    }
                });
                _11c.markupFactory = function (_12f, node, ctor, _130) {
                    return _114.grid._Grid.markupFactory(_12f, node, ctor, lang.partial(_118.cell_markupFactory, _130));
                };
                _11c.registerPlugin = function (_131, _132) {
                    _11a.registerPlugin(_131, _132);
                };
                return _11c;
            });
        },
        "dojox/main": function () {
            define("dojox/main", ["dojo/_base/kernel"], function (dojo) {
                return dojo.dojox;
            });
        },
        "dojo/i18n": function () {
            define(["./_base/kernel", "require", "./has", "./_base/array", "./_base/config", "./_base/lang", "./_base/xhr"], function (dojo, _133, has, _134, _135, lang, xhr) {
                var _136 = dojo.i18n = {},
                    _137 = /(^.*(^|\/)nls)(\/|$)([^\/]*)\/?([^\/]*)/,
                    _138 = function (root, _139, _13a, _13b) {
                        for (var _13c = [_13a + _13b], _13d = _139.split("-"), _13e = "", i = 0; i < _13d.length; i++) {
                            _13e += (_13e ? "-" : "") + _13d[i];
                            if (!root || root[_13e]) {
                                _13c.push(_13a + _13e + "/" + _13b);
                            }
                        }
                        return _13c;
                    },
                    _13f = {},
                    _140 = dojo.getL10nName = function (_141, _142, _143) {
                        _143 = _143 ? _143.toLowerCase() : dojo.locale;
                        _141 = "dojo/i18n!" + _141.replace(/\./g, "/");
                        _142 = _142.replace(/\./g, "/");
                        return (/root/i.test(_143)) ? (_141 + "/nls/" + _142) : (_141 + "/nls/" + _143 + "/" + _142);
                    },
                    _144 = function (_145, _146, _147, _148, _149, load) {
                        _145([_146], function (root) {
                            var _14a = _13f[_146 + "/"] = lang.clone(root.root),
                                _14b = _138(!root._v1x && root, _149, _147, _148);
                            _145(_14b, function () {
                                for (var i = 1; i < _14b.length; i++) {
                                    _13f[_14b[i]] = _14a = lang.mixin(lang.clone(_14a), arguments[i]);
                                }
                                var _14c = _146 + "/" + _149;
                                _13f[_14c] = _14a;
                                load && load(lang.delegate(_14a));
                            });
                        });
                    },
                    _14d = function (id, _14e) {
                        var _14f = _137.exec(id),
                            _150 = _14f[1];
                        return /^\./.test(_150) ? _14e(_150) + "/" + id.substring(_150.length) : id;
                    },
                    _151 = function () {},
                    load = function (id, _152, load) {
                        var _153 = _137.exec(id),
                            _154 = _153[1] + "/",
                            _155 = _153[5] || _153[4],
                            _156 = _154 + _155,
                            _157 = (_153[5] && _153[4]),
                            _158 = _157 || dojo.locale,
                            _159 = _156 + "/" + _158;
                        if (_157) {
                            _151(_159);
                            if (_13f[_159]) {
                                load(_13f[_159]);
                            } else {
                                _144(_152, _156, _154, _155, _158, load);
                            }
                            return;
                        }
                        var _15a = _135.extraLocale || [];
                        _15a = lang.isArray(_15a) ? _15a : [_15a];
                        _15a.push(_158);
                        var _15b = _15a.length,
                            _15c;
                        _134.forEach(_15a, function (_15d) {
                            _144(_152, _156, _154, _155, _15d, function (_15e) {
                                if (_15d == _158) {
                                    _15c = _15e;
                                }
                                if (!--_15b) {
                                    load(_15c);
                                }
                            });
                        });
                    };
                if (has("dojo-unit-tests")) {
                    var _15f = _136.unitTests = [];
                }
                true || has.add("dojo-v1x-i18n-Api", 1);
                if (1) {
                    var _160 = {},
                        _161 = new Function("bundle", "__evalError", "__checkForLegacyModules", "__mid", "var __amdResult, define = function(x){__amdResult= x;};" + "return [(function(){" + "try{eval(arguments[0]);}catch(e){}" + "if(__amdResult)return 0;" + "if((__checkForLegacyModules = __checkForLegacyModules(__mid)))return __checkForLegacyModules;" + "try{return eval('('+arguments[0]+')');}" + "catch(e){__evalError.e = e; return __evalError;}" + "})(bundle),__amdResult];"),
                        _162 = function (url, _163, _164) {
                            if (_163 === _160) {
                                console.error("failed to evaluate i18n bundle; url=" + url, _160.e);
                                return {};
                            }
                            return _163 ? (/nls\/[^\/]+\/[^\/]+$/.test(url) ? _163 : {
                                root: _163,
                                _v1x: 1
                            }) : _164;
                        },
                        _165 = function (deps, _166) {
                            var _167 = [];
                            _134.forEach(deps, function (mid) {
                                var url = _133.toUrl(mid + ".js");
                                if (_13f[url]) {
                                    _167.push(_13f[url]);
                                } else {
                                    var _168 = _133.syncLoadNls(mid);
                                    if (_168) {
                                        _167.push(_168);
                                    } else {
                                        xhr.get({
                                            url: url,
                                            sync: true,
                                            load: function (text) {
                                                var _169 = _161(text, _160, _151, mid);
                                                _167.push(_13f[url] = _162(url, _169[0], _169[1]));
                                            },
                                            error: function () {
                                                _167.push(_13f[url] = {});
                                            }
                                        });
                                    }
                                }
                            });
                            _166 && _166.apply(null, _167);
                        },
                        _16a = _136.normalizeLocale = function (_16b) {
                            var _16c = _16b ? _16b.toLowerCase() : dojo.locale;
                            if (_16c == "root") {
                                _16c = "ROOT";
                            }
                            return _16c;
                        },
                        _16d = function (_16e, func) {
                            var _16f = _16e.split("-");
                            while (_16f.length) {
                                if (func(_16f.join("-"))) {
                                    return true;
                                }
                                _16f.pop();
                            }
                            return func("ROOT");
                        },
                        isXd = function (mid) {
                            return _133.isXdUrl(_133.toUrl(mid + ".js"));
                        };
                    _151 = function (_170) {
                        for (var _171, _172 = _170.split("/"), _173 = dojo.global[_172[0]], i = 1; _173 && i < _172.length - 1; _173 = _173[_172[i++]]) {}
                        if (_173) {
                            _171 = _173[_172[i]];
                            if (!_171) {
                                _171 = _173[_172[i].replace(/-/g, "_")];
                            }
                            if (_171) {
                                _13f[_170] = _171;
                            }
                        }
                        return _171;
                    };
                    _136.getLocalization = function (_174, _175, _176) {
                        var _177, _178 = _140(_174, _175, _176).substring(10);
                        load(_178, (1 && !isXd(_178) ? _165 : _133), function (_179) {
                            _177 = _179;
                        });
                        return _177;
                    };
                    _136._preloadLocalizations = function (_17a, _17b) {
                        function _17c(_17d) {
                            _17d = _16a(_17d);
                            _16d(_17d, function (loc) {
                                for (var mid, i = 0; i < _17b.length; i++) {
                                    if (_17b[i] == loc) {
                                        mid = _17a.replace(/\./g, "/") + "_" + loc;
                                        (isXd(mid) ? _133 : _165)([mid]);
                                        return true;
                                    }
                                }
                                return false;
                            });
                        };
                        _17c();
                        var _17e = dojo.config.extraLocale || [];
                        for (var i = 0; i < _17e.length; i++) {
                            _17c(_17e[i]);
                        }
                    };
                    if (has("dojo-unit-tests")) {
                        _15f.push(function (doh) {
                            doh.register("tests.i18n.unit", function (t) {
                                var _17f;
                                _17f = _161("{prop:1}", _160);
                                t.is({
                                    prop: 1
                                }, _17f[0]);
                                t.is(undefined, _17f[1]);
                                _17f = _161("({prop:1})", _160);
                                t.is({
                                    prop: 1
                                }, _17f[0]);
                                t.is(undefined, _17f[1]);
                                _17f = _161("{'prop-x':1}", _160);
                                t.is({
                                    "prop-x": 1
                                }, _17f[0]);
                                t.is(undefined, _17f[1]);
                                _17f = _161("({'prop-x':1})", _160);
                                t.is({
                                    "prop-x": 1
                                }, _17f[0]);
                                t.is(undefined, _17f[1]);
                                _17f = _161("define({'prop-x':1})", _160);
                                t.is(0, _17f[0]);
                                t.is({
                                    "prop-x": 1
                                }, _17f[1]);
                                _17f = _161("define({'prop-x':1});", _160);
                                t.is(0, _17f[0]);
                                t.is({
                                    "prop-x": 1
                                }, _17f[1]);
                                _17f = _161("this is total nonsense and should throw an error", _160);
                                t.is(_160, _17f[0]);
                                t.is(undefined, _17f[1]);
                                t.is({}, _162("some/url", _17f[0], _17f[1]));
                            });
                        });
                    }
                }
                return lang.mixin(_136, {
                    dynamic: true,
                    normalize: _14d,
                    load: load,
                    cache: function (mid, _180) {
                        _13f[mid] = _180;
                    }
                });
            });
        },
        "dojox/grid/DataGrid": function () {
            define("dojox/grid/DataGrid", ["../main", "dojo/_base/array", "dojo/_base/lang", "dojo/_base/json", "dojo/_base/sniff", "dojo/_base/declare", "./_Grid", "./DataSelection", "dojo/_base/html"], function (_181, _182, lang, json, has, _183, _184, _185, html) {
                var _186 = _183("dojox.grid.DataGrid", _184, {
                    store: null,
                    query: null,
                    queryOptions: null,
                    fetchText: "...",
                    sortFields: null,
                    updateDelay: 1,
                    items: null,
                    _store_connects: null,
                    _by_idty: null,
                    _by_idx: null,
                    _cache: null,
                    _pages: null,
                    _pending_requests: null,
                    _bop: -1,
                    _eop: -1,
                    _requests: 0,
                    rowCount: 0,
                    _isLoaded: false,
                    _isLoading: false,
                    keepSelection: false,
                    postCreate: function () {
                        this._pages = [];
                        this._store_connects = [];
                        this._by_idty = {};
                        this._by_idx = [];
                        this._cache = [];
                        this._pending_requests = {};
                        this._setStore(this.store);
                        this.inherited(arguments);
                    },
                    destroy: function () {
                        this.selection.destroy();
                        this.inherited(arguments);
                    },
                    createSelection: function () {
                        this.selection = new _185(this);
                    },
                    get: function (_187, _188) {
                        if (_188 && this.field == "_item" && !this.fields) {
                            return _188;
                        } else {
                            if (_188 && this.fields) {
                                var ret = [];
                                var s = this.grid.store;
                                _182.forEach(this.fields, function (f) {
                                    ret = ret.concat(s.getValues(_188, f));
                                });
                                return ret;
                            } else {
                                if (!_188 && typeof _187 === "string") {
                                    return this.inherited(arguments);
                                }
                            }
                        }
                        return (!_188 ? this.defaultValue : (!this.field ? this.value : (this.field == "_item" ? _188 : this.grid.store.getValue(_188, this.field))));
                    },
                    _checkUpdateStatus: function () {
                        if (this.updateDelay > 0) {
                            var _189 = false;
                            if (this._endUpdateDelay) {
                                clearTimeout(this._endUpdateDelay);
                                delete this._endUpdateDelay;
                                _189 = true;
                            }
                            if (!this.updating) {
                                this.beginUpdate();
                                _189 = true;
                            }
                            if (_189) {
                                var _18a = this;
                                this._endUpdateDelay = setTimeout(function () {
                                    delete _18a._endUpdateDelay;
                                    _18a.endUpdate();
                                }, this.updateDelay);
                            }
                        }
                    },
                    _onSet: function (item, _18b, _18c, _18d) {
                        this._checkUpdateStatus();
                        var idx = this.getItemIndex(item);
                        if (idx > -1) {
                            this.updateRow(idx);
                        }
                    },
                    _createItem: function (item, _18e) {
                        var idty = this._hasIdentity ? this.store.getIdentity(item) : json.toJson(this.query) + ":idx:" + _18e + ":sort:" + json.toJson(this.getSortProps());
                        var o = this._by_idty[idty] = {
                            idty: idty,
                            item: item
                        };
                        return o;
                    },
                    _addItem: function (item, _18f, _190) {
                        this._by_idx[_18f] = this._createItem(item, _18f);
                        if (!_190) {
                            this.updateRow(_18f);
                        }
                    },
                    _onNew: function (item, _191) {
                        this._checkUpdateStatus();
                        var _192 = this.get("rowCount");
                        this._addingItem = true;
                        this.updateRowCount(_192 + 1);
                        this._addingItem = false;
                        this._addItem(item, _192);
                        this.showMessage();
                    },
                    _onDelete: function (item) {
                        this._checkUpdateStatus();
                        var idx = this._getItemIndex(item, true);
                        if (idx >= 0) {
                            this._pages = [];
                            this._bop = -1;
                            this._eop = -1;
                            var o = this._by_idx[idx];
                            this._by_idx.splice(idx, 1);
                            delete this._by_idty[o.idty];
                            this.updateRowCount(this.get("rowCount") - 1);
                            if (this.get("rowCount") === 0) {
                                this.showMessage(this.noDataMessage);
                            }
                        }
                        if (this.selection.isSelected(idx)) {
                            this.selection.deselect(idx);
                            this.selection.selected.splice(idx, 1);
                        }
                    },
                    _onRevert: function () {
                        this._refresh();
                    },
                    setStore: function (_193, _194, _195) {
                        if (this._requestsPending(0)) {
                            return;
                        }
                        this._setQuery(_194, _195);
                        this._setStore(_193);
                        this._refresh(true);
                    },
                    setQuery: function (_196, _197) {
                        if (this._requestsPending(0)) {
                            return;
                        }
                        this._setQuery(_196, _197);
                        this._refresh(true);
                    },
                    setItems: function (_198) {
                        this.items = _198;
                        this._setStore(this.store);
                        this._refresh(true);
                    },
                    _setQuery: function (_199, _19a) {
                        this.query = _199;
                        this.queryOptions = _19a || this.queryOptions;
                    },
                    _setStore: function (_19b) {
                        if (this.store && this._store_connects) {
                            _182.forEach(this._store_connects, this.disconnect, this);
                        }
                        this.store = _19b;
                        if (this.store) {
                            var f = this.store.getFeatures();
                            var h = [];
                            this._canEdit = !! f["dojo.data.api.Write"] && !! f["dojo.data.api.Identity"];
                            this._hasIdentity = !! f["dojo.data.api.Identity"];
                            if ( !! f["dojo.data.api.Notification"] && !this.items) {
                                h.push(this.connect(this.store, "onSet", "_onSet"));
                                h.push(this.connect(this.store, "onNew", "_onNew"));
                                h.push(this.connect(this.store, "onDelete", "_onDelete"));
                            }
                            if (this._canEdit) {
                                h.push(this.connect(this.store, "revert", "_onRevert"));
                            }
                            this._store_connects = h;
                        }
                    },
                    _onFetchBegin: function (size, req) {
                        if (!this.scroller) {
                            return;
                        }
                        if (this.rowCount != size) {
                            if (req.isRender) {
                                this.scroller.init(size, this.keepRows, this.rowsPerPage);
                                this.rowCount = size;
                                this._setAutoHeightAttr(this.autoHeight, true);
                                this._skipRowRenormalize = true;
                                this.prerender();
                                this._skipRowRenormalize = false;
                            } else {
                                this.updateRowCount(size);
                            }
                        }
                        if (!size) {
                            this.views.render();
                            this._resize();
                            this.showMessage(this.noDataMessage);
                            this.focus.initFocusView();
                        } else {
                            this.showMessage();
                        }
                    },
                    _onFetchComplete: function (_19c, req) {
                        if (!this.scroller) {
                            return;
                        }
                        if (_19c && _19c.length > 0) {
                            _182.forEach(_19c, function (item, idx) {
                                this._addItem(item, req.start + idx, true);
                            }, this);
                            this.updateRows(req.start, _19c.length);
                            if (req.isRender) {
                                this.setScrollTop(0);
                                this.postrender();
                            } else {
                                if (this._lastScrollTop) {
                                    this.setScrollTop(this._lastScrollTop);
                                }
                            }
                            if (has("ie")) {
                                html.setSelectable(this.domNode, this.selectable);
                            }
                        }
                        delete this._lastScrollTop;
                        if (!this._isLoaded) {
                            this._isLoading = false;
                            this._isLoaded = true;
                        }
                        this._pending_requests[req.start] = false;
                    },
                    _onFetchError: function (err, req) {
                        delete this._lastScrollTop;
                        if (!this._isLoaded) {
                            this._isLoading = false;
                            this._isLoaded = true;
                            this.showMessage(this.errorMessage);
                        }
                        this._pending_requests[req.start] = false;
                        this.onFetchError(err, req);
                    },
                    onFetchError: function (err, req) {},
                    _fetch: function (_19d, _19e) {
                        _19d = _19d || 0;
                        if (this.store && !this._pending_requests[_19d]) {
                            if (!this._isLoaded && !this._isLoading) {
                                this._isLoading = true;
                                this.showMessage(this.loadingMessage);
                            }
                            this._pending_requests[_19d] = true;
                            try {
                                if (this.items) {
                                    var _19f = this.items;
                                    var _1a0 = this.store;
                                    this.rowsPerPage = _19f.length;
                                    var req = {
                                        start: _19d,
                                        count: this.rowsPerPage,
                                        isRender: _19e
                                    };
                                    this._onFetchBegin(_19f.length, req);
                                    var _1a1 = 0;
                                    _182.forEach(_19f, function (i) {
                                        if (!_1a0.isItemLoaded(i)) {
                                            _1a1++;
                                        }
                                    });
                                    if (_1a1 === 0) {
                                        this._onFetchComplete(_19f, req);
                                    } else {
                                        var _1a2 = function (item) {
                                                _1a1--;
                                                if (_1a1 === 0) {
                                                    this._onFetchComplete(_19f, req);
                                                }
                                            };
                                        _182.forEach(_19f, function (i) {
                                            if (!_1a0.isItemLoaded(i)) {
                                                _1a0.loadItem({
                                                    item: i,
                                                    onItem: _1a2,
                                                    scope: this
                                                });
                                            }
                                        }, this);
                                    }
                                } else {
                                    this.store.fetch({
                                        start: _19d,
                                        count: this.rowsPerPage,
                                        query: this.query,
                                        sort: this.getSortProps(),
                                        queryOptions: this.queryOptions,
                                        isRender: _19e,
                                        onBegin: lang.hitch(this, "_onFetchBegin"),
                                        onComplete: lang.hitch(this, "_onFetchComplete"),
                                        onError: lang.hitch(this, "_onFetchError")
                                    });
                                }
                            } catch (e) {
                                this._onFetchError(e, {
                                    start: _19d,
                                    count: this.rowsPerPage
                                });
                            }
                        }
                    },
                    _clearData: function () {
                        this.updateRowCount(0);
                        this._by_idty = {};
                        this._by_idx = [];
                        this._pages = [];
                        this._bop = this._eop = -1;
                        this._isLoaded = false;
                        this._isLoading = false;
                    },
                    getItem: function (idx) {
                        var data = this._by_idx[idx];
                        if (!data || (data && !data.item)) {
                            this._preparePage(idx);
                            return null;
                        }
                        return data.item;
                    },
                    getItemIndex: function (item) {
                        return this._getItemIndex(item, false);
                    },
                    _getItemIndex: function (item, _1a3) {
                        if (!_1a3 && !this.store.isItem(item)) {
                            return -1;
                        }
                        var idty = this._hasIdentity ? this.store.getIdentity(item) : null;
                        for (var i = 0, l = this._by_idx.length; i < l; i++) {
                            var d = this._by_idx[i];
                            if (d && ((idty && d.idty == idty) || (d.item === item))) {
                                return i;
                            }
                        }
                        return -1;
                    },
                    filter: function (_1a4, _1a5) {
                        this.query = _1a4;
                        if (_1a5) {
                            this._clearData();
                        }
                        this._fetch();
                    },
                    _getItemAttr: function (idx, attr) {
                        var item = this.getItem(idx);
                        return (!item ? this.fetchText : this.store.getValue(item, attr));
                    },
                    _render: function () {
                        if (this.domNode.parentNode) {
                            this.scroller.init(this.get("rowCount"), this.keepRows, this.rowsPerPage);
                            this.prerender();
                            this._fetch(0, true);
                        }
                    },
                    _requestsPending: function (_1a6) {
                        return this._pending_requests[_1a6];
                    },
                    _rowToPage: function (_1a7) {
                        return (this.rowsPerPage ? Math.floor(_1a7 / this.rowsPerPage) : _1a7);
                    },
                    _pageToRow: function (_1a8) {
                        return (this.rowsPerPage ? this.rowsPerPage * _1a8 : _1a8);
                    },
                    _preparePage: function (_1a9) {
                        if ((_1a9 < this._bop || _1a9 >= this._eop) && !this._addingItem) {
                            var _1aa = this._rowToPage(_1a9);
                            this._needPage(_1aa);
                            this._bop = _1aa * this.rowsPerPage;
                            this._eop = this._bop + (this.rowsPerPage || this.get("rowCount"));
                        }
                    },
                    _needPage: function (_1ab) {
                        if (!this._pages[_1ab]) {
                            this._pages[_1ab] = true;
                            this._requestPage(_1ab);
                        }
                    },
                    _requestPage: function (_1ac) {
                        var row = this._pageToRow(_1ac);
                        var _1ad = Math.min(this.rowsPerPage, this.get("rowCount") - row);
                        if (_1ad > 0) {
                            this._requests++;
                            if (!this._requestsPending(row)) {
                                setTimeout(lang.hitch(this, "_fetch", row, false), 1);
                            }
                        }
                    },
                    getCellName: function (_1ae) {
                        return _1ae.field;
                    },
                    _refresh: function (_1af) {
                        this._clearData();
                        this._fetch(0, _1af);
                    },
                    sort: function () {
                        this.edit.apply();
                        this._lastScrollTop = this.scrollTop;
                        this._refresh();
                    },
                    canSort: function () {
                        return (!this._isLoading);
                    },
                    getSortProps: function () {
                        var c = this.getCell(this.getSortIndex());
                        if (!c) {
                            if (this.sortFields) {
                                return this.sortFields;
                            }
                            return null;
                        } else {
                            var desc = c["sortDesc"];
                            var si = !(this.sortInfo > 0);
                            if (typeof desc == "undefined") {
                                desc = si;
                            } else {
                                desc = si ? !desc : desc;
                            }
                            return [{
                                attribute: c.field,
                                descending: desc
                            }];
                        }
                    },
                    styleRowState: function (_1b0) {
                        if (this.store && this.store.getState) {
                            var _1b1 = this.store.getState(_1b0.index),
                                c = "";
                            for (var i = 0, ss = ["inflight", "error", "inserting"], s; s = ss[i]; i++) {
                                if (_1b1[s]) {
                                    c = " dojoxGridRow-" + s;
                                    break;
                                }
                            }
                            _1b0.customClasses += c;
                        }
                    },
                    onStyleRow: function (_1b2) {
                        this.styleRowState(_1b2);
                        this.inherited(arguments);
                    },
                    canEdit: function (_1b3, _1b4) {
                        return this._canEdit;
                    },
                    _copyAttr: function (idx, attr) {
                        var row = {};
                        var _1b5 = {};
                        var src = this.getItem(idx);
                        return this.store.getValue(src, attr);
                    },
                    doStartEdit: function (_1b6, _1b7) {
                        if (!this._cache[_1b7]) {
                            this._cache[_1b7] = this._copyAttr(_1b7, _1b6.field);
                        }
                        this.onStartEdit(_1b6, _1b7);
                    },
                    doApplyCellEdit: function (_1b8, _1b9, _1ba) {
                        this.store.fetchItemByIdentity({
                            identity: this._by_idx[_1b9].idty,
                            onItem: lang.hitch(this, function (item) {
                                var _1bb = this.store.getValue(item, _1ba);
                                if (typeof _1bb == "number") {
                                    _1b8 = isNaN(_1b8) ? _1b8 : parseFloat(_1b8);
                                } else {
                                    if (typeof _1bb == "boolean") {
                                        _1b8 = _1b8 == "true" ? true : _1b8 == "false" ? false : _1b8;
                                    } else {
                                        if (_1bb instanceof Date) {
                                            var _1bc = new Date(_1b8);
                                            _1b8 = isNaN(_1bc.getTime()) ? _1b8 : _1bc;
                                        }
                                    }
                                }
                                this.store.setValue(item, _1ba, _1b8);
                                this.onApplyCellEdit(_1b8, _1b9, _1ba);
                            })
                        });
                    },
                    doCancelEdit: function (_1bd) {
                        var _1be = this._cache[_1bd];
                        if (_1be) {
                            this.updateRow(_1bd);
                            delete this._cache[_1bd];
                        }
                        this.onCancelEdit.apply(this, arguments);
                    },
                    doApplyEdit: function (_1bf, _1c0) {
                        var _1c1 = this._cache[_1bf];
                        this.onApplyEdit(_1bf);
                    },
                    removeSelectedRows: function () {
                        if (this._canEdit) {
                            this.edit.apply();
                            var fx = lang.hitch(this, function (_1c2) {
                                if (_1c2.length) {
                                    _182.forEach(_1c2, this.store.deleteItem, this.store);
                                    this.selection.clear();
                                }
                            });
                            if (this.allItemsSelected) {
                                this.store.fetch({
                                    query: this.query,
                                    queryOptions: this.queryOptions,
                                    onComplete: fx
                                });
                            } else {
                                fx(this.selection.getSelected());
                            }
                        }
                    }
                });
                _186.cell_markupFactory = function (_1c3, node, _1c4) {
                    var _1c5 = lang.trim(html.attr(node, "field") || "");
                    if (_1c5) {
                        _1c4.field = _1c5;
                    }
                    _1c4.field = _1c4.field || _1c4.name;
                    var _1c6 = lang.trim(html.attr(node, "fields") || "");
                    if (_1c6) {
                        _1c4.fields = _1c6.split(",");
                    }
                    if (_1c3) {
                        _1c3(node, _1c4);
                    }
                };
                _186.markupFactory = function (_1c7, node, ctor, _1c8) {
                    return _184.markupFactory(_1c7, node, ctor, lang.partial(_186.cell_markupFactory, _1c8));
                };
                return _186;
            });
        },
        "dojox/grid/_Grid": function () {
            require({
                cache: {
                    "url:dojox/grid/resources/_Grid.html": "<div hidefocus=\"hidefocus\" role=\"grid\" dojoAttachEvent=\"onmouseout:_mouseOut\">\n\t<div class=\"dojoxGridMasterHeader\" dojoAttachPoint=\"viewsHeaderNode\" role=\"presentation\"></div>\n\t<div class=\"dojoxGridMasterView\" dojoAttachPoint=\"viewsNode\" role=\"presentation\"></div>\n\t<div class=\"dojoxGridMasterMessages\" style=\"display: none;\" dojoAttachPoint=\"messagesNode\"></div>\n\t<span dojoAttachPoint=\"lastFocusNode\" tabindex=\"0\"></span>\n</div>\n"
                }
            });
            define("dojox/grid/_Grid", ["dojo/_base/kernel", "../main", "dojo/_base/declare", "./_Events", "./_Scroller", "./_Layout", "./_View", "./_ViewManager", "./_RowManager", "./_FocusManager", "./_EditManager", "./Selection", "./_RowSelector", "./util", "dijit/_Widget", "dijit/_TemplatedMixin", "dijit/CheckedMenuItem", "dojo/text!./resources/_Grid.html", "dojo/string", "dojo/_base/array", "dojo/_base/lang", "dojo/_base/sniff", "dojox/html/metrics", "dojo/_base/html", "dojo/query", "dojo/dnd/common", "dojo/i18n!dijit/nls/loading"], function (dojo, _1c9, _1ca, _1cb, _1cc, _1cd, _1ce, _1cf, _1d0, _1d1, _1d2, _1d3, _1d4, util, _1d5, _1d6, _1d7, _1d8, _1d9, _1da, lang, has, _1db, html, _1dc) {
                if (!dojo.isCopyKey) {
                    dojo.isCopyKey = dojo.dnd.getCopyKeyState;
                }
                var _1dd = _1ca("dojox.grid._Grid", [_1d5, _1d6, _1cb], {
                    templateString: _1d8,
                    classTag: "dojoxGrid",
                    rowCount: 5,
                    keepRows: 75,
                    rowsPerPage: 25,
                    autoWidth: false,
                    initialWidth: "",
                    autoHeight: "",
                    rowHeight: 0,
                    autoRender: true,
                    defaultHeight: "15em",
                    height: "",
                    structure: null,
                    elasticView: -1,
                    singleClickEdit: false,
                    selectionMode: "extended",
                    rowSelector: "",
                    columnReordering: false,
                    headerMenu: null,
                    placeholderLabel: "GridColumns",
                    selectable: false,
                    _click: null,
                    loadingMessage: "<span class='dojoxGridLoading'>${loadingState}</span>",
                    errorMessage: "<span class='dojoxGridError'>${errorState}</span>",
                    noDataMessage: "",
                    escapeHTMLInData: true,
                    formatterScope: null,
                    editable: false,
                    sortInfo: 0,
                    themeable: true,
                    _placeholders: null,
                    _layoutClass: _1cd,
                    buildRendering: function () {
                        this.inherited(arguments);
                        if (!this.domNode.getAttribute("tabIndex")) {
                            this.domNode.tabIndex = "0";
                        }
                        this.createScroller();
                        this.createLayout();
                        this.createViews();
                        this.createManagers();
                        this.createSelection();
                        this.connect(this.selection, "onSelected", "onSelected");
                        this.connect(this.selection, "onDeselected", "onDeselected");
                        this.connect(this.selection, "onChanged", "onSelectionChanged");
                        _1db.initOnFontResize();
                        this.connect(_1db, "onFontResize", "textSizeChanged");
                        util.funnelEvents(this.domNode, this, "doKeyEvent", util.keyEvents);
                        if (this.selectionMode != "none") {
                            this.domNode.setAttribute("aria-multiselectable", this.selectionMode == "single" ? "false" : "true");
                        }
                        html.addClass(this.domNode, this.classTag);
                        if (!this.isLeftToRight()) {
                            html.addClass(this.domNode, this.classTag + "Rtl");
                        }
                    },
                    postMixInProperties: function () {
                        this.inherited(arguments);
                        var _1de = dojo.i18n.getLocalization("dijit", "loading", this.lang);
                        this.loadingMessage = _1d9.substitute(this.loadingMessage, _1de);
                        this.errorMessage = _1d9.substitute(this.errorMessage, _1de);
                        if (this.srcNodeRef && this.srcNodeRef.style.height) {
                            this.height = this.srcNodeRef.style.height;
                        }
                        this._setAutoHeightAttr(this.autoHeight, true);
                        this.lastScrollTop = this.scrollTop = 0;
                    },
                    postCreate: function () {
                        this._placeholders = [];
                        this._setHeaderMenuAttr(this.headerMenu);
                        this._setStructureAttr(this.structure);
                        this._click = [];
                        this.inherited(arguments);
                        if (this.domNode && this.autoWidth && this.initialWidth) {
                            this.domNode.style.width = this.initialWidth;
                        }
                        if (this.domNode && !this.editable) {
                            html.attr(this.domNode, "aria-readonly", "true");
                        }
                    },
                    destroy: function () {
                        this.domNode.onReveal = null;
                        this.domNode.onSizeChange = null;
                        delete this._click;
                        if (this.scroller) {
                            this.scroller.destroy();
                            delete this.scroller;
                        }
                        this.edit.destroy();
                        delete this.edit;
                        this.views.destroyViews();
                        if (this.focus) {
                            this.focus.destroy();
                            delete this.focus;
                        }
                        if (this.headerMenu && this._placeholders.length) {
                            _1da.forEach(this._placeholders, function (p) {
                                p.unReplace(true);
                            });
                            this.headerMenu.unBindDomNode(this.viewsHeaderNode);
                        }
                        this.inherited(arguments);
                    },
                    _setAutoHeightAttr: function (ah, _1df) {
                        if (typeof ah == "string") {
                            if (!ah || ah == "false") {
                                ah = false;
                            } else {
                                if (ah == "true") {
                                    ah = true;
                                } else {
                                    ah = window.parseInt(ah, 10);
                                }
                            }
                        }
                        if (typeof ah == "number") {
                            if (isNaN(ah)) {
                                ah = false;
                            }
                            if (ah < 0) {
                                ah = true;
                            } else {
                                if (ah === 0) {
                                    ah = false;
                                }
                            }
                        }
                        this.autoHeight = ah;
                        if (typeof ah == "boolean") {
                            this._autoHeight = ah;
                        } else {
                            if (typeof ah == "number") {
                                this._autoHeight = (ah >= this.get("rowCount"));
                            } else {
                                this._autoHeight = false;
                            }
                        }
                        if (this._started && !_1df) {
                            this.render();
                        }
                    },
                    _getRowCountAttr: function () {
                        return this.updating && this.invalidated && this.invalidated.rowCount != undefined ? this.invalidated.rowCount : this.rowCount;
                    },
                    textSizeChanged: function () {
                        this.render();
                    },
                    sizeChange: function () {
                        this.update();
                    },
                    createManagers: function () {
                        this.rows = new _1d0(this);
                        this.focus = new _1d1(this);
                        this.edit = new _1d2(this);
                    },
                    createSelection: function () {
                        this.selection = new _1d3(this);
                    },
                    createScroller: function () {
                        this.scroller = new _1cc();
                        this.scroller.grid = this;
                        this.scroller.renderRow = lang.hitch(this, "renderRow");
                        this.scroller.removeRow = lang.hitch(this, "rowRemoved");
                    },
                    createLayout: function () {
                        this.layout = new this._layoutClass(this);
                        this.connect(this.layout, "moveColumn", "onMoveColumn");
                    },
                    onMoveColumn: function () {
                        this.render();
                    },
                    onResizeColumn: function (_1e0) {},
                    createViews: function () {
                        this.views = new _1cf(this);
                        this.views.createView = lang.hitch(this, "createView");
                    },
                    createView: function (_1e1, idx) {
                        var c = lang.getObject(_1e1);
                        var view = new c({
                            grid: this,
                            index: idx
                        });
                        this.viewsNode.appendChild(view.domNode);
                        this.viewsHeaderNode.appendChild(view.headerNode);
                        this.views.addView(view);
                        html.attr(this.domNode, "align", this.isLeftToRight() ? "left" : "right");
                        return view;
                    },
                    buildViews: function () {
                        for (var i = 0, vs;
                        (vs = this.layout.structure[i]); i++) {
                            this.createView(vs.type || _1c9._scopeName + ".grid._View", i).setStructure(vs);
                        }
                        this.scroller.setContentNodes(this.views.getContentNodes());
                    },
                    _setStructureAttr: function (_1e2) {
                        var s = _1e2;
                        if (s && lang.isString(s)) {
                            dojo.deprecated("dojox.grid._Grid.set('structure', 'objVar')", "use dojox.grid._Grid.set('structure', objVar) instead", "2.0");
                            s = lang.getObject(s);
                        }
                        this.structure = s;
                        if (!s) {
                            if (this.layout.structure) {
                                s = this.layout.structure;
                            } else {
                                return;
                            }
                        }
                        this.views.destroyViews();
                        this.focus.focusView = null;
                        if (s !== this.layout.structure) {
                            this.layout.setStructure(s);
                        }
                        this._structureChanged();
                    },
                    setStructure: function (_1e3) {
                        dojo.deprecated("dojox.grid._Grid.setStructure(obj)", "use dojox.grid._Grid.set('structure', obj) instead.", "2.0");
                        this._setStructureAttr(_1e3);
                    },
                    getColumnTogglingItems: function () {
                        var _1e4, _1e5 = [];
                        _1e4 = _1da.map(this.layout.cells, function (cell) {
                            if (!cell.menuItems) {
                                cell.menuItems = [];
                            }
                            var self = this;
                            var item = new _1d7({
                                label: cell.name,
                                checked: !cell.hidden,
                                _gridCell: cell,
                                onChange: function (_1e6) {
                                    if (self.layout.setColumnVisibility(this._gridCell.index, _1e6)) {
                                        var _1e7 = this._gridCell.menuItems;
                                        if (_1e7.length > 1) {
                                            _1da.forEach(_1e7, function (item) {
                                                if (item !== this) {
                                                    item.setAttribute("checked", _1e6);
                                                }
                                            }, this);
                                        }
                                        _1e6 = _1da.filter(self.layout.cells, function (c) {
                                            if (c.menuItems.length > 1) {
                                                _1da.forEach(c.menuItems, "item.set('disabled', false);");
                                            } else {
                                                c.menuItems[0].set("disabled", false);
                                            }
                                            return !c.hidden;
                                        });
                                        if (_1e6.length == 1) {
                                            _1da.forEach(_1e6[0].menuItems, "item.set('disabled', true);");
                                        }
                                    }
                                },
                                destroy: function () {
                                    var _1e8 = _1da.indexOf(this._gridCell.menuItems, this);
                                    this._gridCell.menuItems.splice(_1e8, 1);
                                    delete this._gridCell;
                                    _1d7.prototype.destroy.apply(this, arguments);
                                }
                            });
                            cell.menuItems.push(item);
                            if (!cell.hidden) {
                                _1e5.push(item);
                            }
                            return item;
                        }, this);
                        if (_1e5.length == 1) {
                            _1e5[0].set("disabled", true);
                        }
                        return _1e4;
                    },
                    _setHeaderMenuAttr: function (menu) {
                        if (this._placeholders && this._placeholders.length) {
                            _1da.forEach(this._placeholders, function (p) {
                                p.unReplace(true);
                            });
                            this._placeholders = [];
                        }
                        if (this.headerMenu) {
                            this.headerMenu.unBindDomNode(this.viewsHeaderNode);
                        }
                        this.headerMenu = menu;
                        if (!menu) {
                            return;
                        }
                        this.headerMenu.bindDomNode(this.viewsHeaderNode);
                        if (this.headerMenu.getPlaceholders) {
                            this._placeholders = this.headerMenu.getPlaceholders(this.placeholderLabel);
                        }
                    },
                    setHeaderMenu: function (menu) {
                        dojo.deprecated("dojox.grid._Grid.setHeaderMenu(obj)", "use dojox.grid._Grid.set('headerMenu', obj) instead.", "2.0");
                        this._setHeaderMenuAttr(menu);
                    },
                    setupHeaderMenu: function () {
                        if (this._placeholders && this._placeholders.length) {
                            _1da.forEach(this._placeholders, function (p) {
                                if (p._replaced) {
                                    p.unReplace(true);
                                }
                                p.replace(this.getColumnTogglingItems());
                            }, this);
                        }
                    },
                    _fetch: function (_1e9) {
                        this.setScrollTop(0);
                    },
                    getItem: function (_1ea) {
                        return null;
                    },
                    showMessage: function (_1eb) {
                        if (_1eb) {
                            this.messagesNode.innerHTML = _1eb;
                            this.messagesNode.style.display = "";
                        } else {
                            this.messagesNode.innerHTML = "";
                            this.messagesNode.style.display = "none";
                        }
                    },
                    _structureChanged: function () {
                        this.buildViews();
                        if (this.autoRender && this._started) {
                            this.render();
                        }
                    },
                    hasLayout: function () {
                        return this.layout.cells.length;
                    },
                    resize: function (_1ec, _1ed) {
                        if (dojo.isIE && !_1ec && !_1ed && this._autoHeight) {
                            return;
                        }
                        this._pendingChangeSize = _1ec;
                        this._pendingResultSize = _1ed;
                        this.sizeChange();
                    },
                    _getPadBorder: function () {
                        this._padBorder = this._padBorder || html._getPadBorderExtents(this.domNode);
                        return this._padBorder;
                    },
                    _getHeaderHeight: function () {
                        var vns = this.viewsHeaderNode.style,
                            t = vns.display == "none" ? 0 : this.views.measureHeader();
                        vns.height = t + "px";
                        this.views.normalizeHeaderNodeHeight();
                        return t;
                    },
                    _resize: function (_1ee, _1ef) {
                        _1ee = _1ee || this._pendingChangeSize;
                        _1ef = _1ef || this._pendingResultSize;
                        delete this._pendingChangeSize;
                        delete this._pendingResultSize;
                        if (!this.domNode) {
                            return;
                        }
                        var pn = this.domNode.parentNode;
                        if (!pn || pn.nodeType != 1 || !this.hasLayout() || pn.style.visibility == "hidden" || pn.style.display == "none") {
                            return;
                        }
                        var _1f0 = this._getPadBorder();
                        var hh = undefined;
                        var h;
                        if (this._autoHeight) {
                            this.domNode.style.height = "auto";
                        } else {
                            if (typeof this.autoHeight == "number") {
                                h = hh = this._getHeaderHeight();
                                h += (this.scroller.averageRowHeight * this.autoHeight);
                                this.domNode.style.height = h + "px";
                            } else {
                                if (this.domNode.clientHeight <= _1f0.h) {
                                    if (pn == document.body) {
                                        this.domNode.style.height = this.defaultHeight;
                                    } else {
                                        if (this.height) {
                                            this.domNode.style.height = this.height;
                                        } else {
                                            this.fitTo = "parent";
                                        }
                                    }
                                }
                            }
                        }
                        if (_1ef) {
                            _1ee = _1ef;
                        }
                        if (!this._autoHeight && _1ee) {
                            html.marginBox(this.domNode, _1ee);
                            this.height = this.domNode.style.height;
                            delete this.fitTo;
                        } else {
                            if (this.fitTo == "parent") {
                                h = this._parentContentBoxHeight = this._parentContentBoxHeight || html._getContentBox(pn).h;
                                this.domNode.style.height = Math.max(0, h) + "px";
                            }
                        }
                        var _1f1 = _1da.some(this.views.views, function (v) {
                            return v.flexCells;
                        });
                        if (!this._autoHeight && (h || html._getContentBox(this.domNode).h) === 0) {
                            this.viewsHeaderNode.style.display = "none";
                        } else {
                            this.viewsHeaderNode.style.display = "block";
                            if (!_1f1 && hh === undefined) {
                                hh = this._getHeaderHeight();
                            }
                        }
                        if (_1f1) {
                            hh = undefined;
                        }
                        this.adaptWidth();
                        this.adaptHeight(hh);
                        this.postresize();
                    },
                    adaptWidth: function () {
                        var _1f2 = (!this.initialWidth && this.autoWidth);
                        var w = _1f2 ? 0 : this.domNode.clientWidth || (this.domNode.offsetWidth - this._getPadBorder().w),
                            vw = this.views.arrange(1, w);
                        this.views.onEach("adaptWidth");
                        if (_1f2) {
                            this.domNode.style.width = vw + "px";
                        }
                    },
                    adaptHeight: function (_1f3) {
                        var t = _1f3 === undefined ? this._getHeaderHeight() : _1f3;
                        var h = (this._autoHeight ? -1 : Math.max(this.domNode.clientHeight - t, 0) || 0);
                        this.views.onEach("setSize", [0, h]);
                        this.views.onEach("adaptHeight");
                        if (!this._autoHeight) {
                            var _1f4 = 0,
                                _1f5 = 0;
                            var _1f6 = _1da.filter(this.views.views, function (v) {
                                var has = v.hasHScrollbar();
                                if (has) {
                                    _1f4++;
                                } else {
                                    _1f5++;
                                }
                                return (!has);
                            });
                            if (_1f4 > 0 && _1f5 > 0) {
                                _1da.forEach(_1f6, function (v) {
                                    v.adaptHeight(true);
                                });
                            }
                        }
                        if (this.autoHeight === true || h != -1 || (typeof this.autoHeight == "number" && this.autoHeight >= this.get("rowCount"))) {
                            this.scroller.windowHeight = h;
                        } else {
                            this.scroller.windowHeight = Math.max(this.domNode.clientHeight - t, 0);
                        }
                    },
                    startup: function () {
                        if (this._started) {
                            return;
                        }
                        this.inherited(arguments);
                        if (this.autoRender) {
                            this.render();
                        }
                    },
                    render: function () {
                        if (!this.domNode) {
                            return;
                        }
                        if (!this._started) {
                            return;
                        }
                        if (!this.hasLayout()) {
                            this.scroller.init(0, this.keepRows, this.rowsPerPage);
                            return;
                        }
                        this.update = this.defaultUpdate;
                        this._render();
                    },
                    _render: function () {
                        this.scroller.init(this.get("rowCount"), this.keepRows, this.rowsPerPage);
                        this.prerender();
                        this.setScrollTop(0);
                        this.postrender();
                    },
                    prerender: function () {
                        this.keepRows = this._autoHeight ? 0 : this.keepRows;
                        this.scroller.setKeepInfo(this.keepRows);
                        this.views.render();
                        this._resize();
                    },
                    postrender: function () {
                        this.postresize();
                        this.focus.initFocusView();
                        html.setSelectable(this.domNode, this.selectable);
                    },
                    postresize: function () {
                        if (this._autoHeight) {
                            var size = Math.max(this.views.measureContent()) + "px";
                            this.viewsNode.style.height = size;
                        }
                    },
                    renderRow: function (_1f7, _1f8) {
                        this.views.renderRow(_1f7, _1f8, this._skipRowRenormalize);
                    },
                    rowRemoved: function (_1f9) {
                        this.views.rowRemoved(_1f9);
                    },
                    invalidated: null,
                    updating: false,
                    beginUpdate: function () {
                        this.invalidated = [];
                        this.updating = true;
                    },
                    endUpdate: function () {
                        this.updating = false;
                        var i = this.invalidated,
                            r;
                        if (i.all) {
                            this.update();
                        } else {
                            if (i.rowCount != undefined) {
                                this.updateRowCount(i.rowCount);
                            } else {
                                for (r in i) {
                                    this.updateRow(Number(r));
                                }
                            }
                        }
                        this.invalidated = [];
                    },
                    defaultUpdate: function () {
                        if (!this.domNode) {
                            return;
                        }
                        if (this.updating) {
                            this.invalidated.all = true;
                            return;
                        }
                        this.lastScrollTop = this.scrollTop;
                        this.prerender();
                        this.scroller.invalidateNodes();
                        this.setScrollTop(this.lastScrollTop);
                        this.postrender();
                    },
                    update: function () {
                        this.render();
                    },
                    updateRow: function (_1fa) {
                        _1fa = Number(_1fa);
                        if (this.updating) {
                            this.invalidated[_1fa] = true;
                        } else {
                            this.views.updateRow(_1fa);
                            this.scroller.rowHeightChanged(_1fa);
                        }
                    },
                    updateRows: function (_1fb, _1fc) {
                        _1fb = Number(_1fb);
                        _1fc = Number(_1fc);
                        var i;
                        if (this.updating) {
                            for (i = 0; i < _1fc; i++) {
                                this.invalidated[i + _1fb] = true;
                            }
                        } else {
                            for (i = 0; i < _1fc; i++) {
                                this.views.updateRow(i + _1fb, this._skipRowRenormalize);
                            }
                            this.scroller.rowHeightChanged(_1fb);
                        }
                    },
                    updateRowCount: function (_1fd) {
                        if (this.updating) {
                            this.invalidated.rowCount = _1fd;
                        } else {
                            this.rowCount = _1fd;
                            this._setAutoHeightAttr(this.autoHeight, true);
                            if (this.layout.cells.length) {
                                this.scroller.updateRowCount(_1fd);
                            }
                            this._resize();
                            if (this.layout.cells.length) {
                                this.setScrollTop(this.scrollTop);
                            }
                        }
                    },
                    updateRowStyles: function (_1fe) {
                        this.views.updateRowStyles(_1fe);
                    },
                    getRowNode: function (_1ff) {
                        if (this.focus.focusView && !(this.focus.focusView instanceof _1d4)) {
                            return this.focus.focusView.rowNodes[_1ff];
                        } else {
                            for (var i = 0, _200;
                            (_200 = this.views.views[i]); i++) {
                                if (!(_200 instanceof _1d4)) {
                                    return _200.rowNodes[_1ff];
                                }
                            }
                        }
                        return null;
                    },
                    rowHeightChanged: function (_201) {
                        this.views.renormalizeRow(_201);
                        this.scroller.rowHeightChanged(_201);
                    },
                    fastScroll: true,
                    delayScroll: false,
                    scrollRedrawThreshold: (has("ie") ? 100 : 50),
                    scrollTo: function (_202) {
                        if (!this.fastScroll) {
                            this.setScrollTop(_202);
                            return;
                        }
                        var _203 = Math.abs(this.lastScrollTop - _202);
                        this.lastScrollTop = _202;
                        if (_203 > this.scrollRedrawThreshold || this.delayScroll) {
                            this.delayScroll = true;
                            this.scrollTop = _202;
                            this.views.setScrollTop(_202);
                            if (this._pendingScroll) {
                                window.clearTimeout(this._pendingScroll);
                            }
                            var _204 = this;
                            this._pendingScroll = window.setTimeout(function () {
                                delete _204._pendingScroll;
                                _204.finishScrollJob();
                            }, 200);
                        } else {
                            this.setScrollTop(_202);
                        }
                    },
                    finishScrollJob: function () {
                        this.delayScroll = false;
                        this.setScrollTop(this.scrollTop);
                    },
                    setScrollTop: function (_205) {
                        this.scroller.scroll(this.views.setScrollTop(_205));
                    },
                    scrollToRow: function (_206) {
                        this.setScrollTop(this.scroller.findScrollTop(_206) + 1);
                    },
                    styleRowNode: function (_207, _208) {
                        if (_208) {
                            this.rows.styleRowNode(_207, _208);
                        }
                    },
                    _mouseOut: function (e) {
                        this.rows.setOverRow(-2);
                    },
                    getCell: function (_209) {
                        return this.layout.cells[_209];
                    },
                    setCellWidth: function (_20a, _20b) {
                        this.getCell(_20a).unitWidth = _20b;
                    },
                    getCellName: function (_20c) {
                        return "Cell " + _20c.index;
                    },
                    canSort: function (_20d) {},
                    sort: function () {},
                    getSortAsc: function (_20e) {
                        _20e = _20e == undefined ? this.sortInfo : _20e;
                        return Boolean(_20e > 0);
                    },
                    getSortIndex: function (_20f) {
                        _20f = _20f == undefined ? this.sortInfo : _20f;
                        return Math.abs(_20f) - 1;
                    },
                    setSortIndex: function (_210, _211) {
                        var si = _210 + 1;
                        if (_211 != undefined) {
                            si *= (_211 ? 1 : -1);
                        } else {
                            if (this.getSortIndex() == _210) {
                                si = -this.sortInfo;
                            }
                        }
                        this.setSortInfo(si);
                    },
                    setSortInfo: function (_212) {
                        if (this.canSort(_212)) {
                            this.sortInfo = _212;
                            this.sort();
                            this.update();
                        }
                    },
                    doKeyEvent: function (e) {
                        e.dispatch = "do" + e.type;
                        this.onKeyEvent(e);
                    },
                    _dispatch: function (m, e) {
                        if (m in this) {
                            return this[m](e);
                        }
                        return false;
                    },
                    dispatchKeyEvent: function (e) {
                        this._dispatch(e.dispatch, e);
                    },
                    dispatchContentEvent: function (e) {
                        this.edit.dispatchEvent(e) || e.sourceView.dispatchContentEvent(e) || this._dispatch(e.dispatch, e);
                    },
                    dispatchHeaderEvent: function (e) {
                        e.sourceView.dispatchHeaderEvent(e) || this._dispatch("doheader" + e.type, e);
                    },
                    dokeydown: function (e) {
                        this.onKeyDown(e);
                    },
                    doclick: function (e) {
                        if (e.cellNode) {
                            this.onCellClick(e);
                        } else {
                            this.onRowClick(e);
                        }
                    },
                    dodblclick: function (e) {
                        if (e.cellNode) {
                            this.onCellDblClick(e);
                        } else {
                            this.onRowDblClick(e);
                        }
                    },
                    docontextmenu: function (e) {
                        if (e.cellNode) {
                            this.onCellContextMenu(e);
                        } else {
                            this.onRowContextMenu(e);
                        }
                    },
                    doheaderclick: function (e) {
                        if (e.cellNode) {
                            this.onHeaderCellClick(e);
                        } else {
                            this.onHeaderClick(e);
                        }
                    },
                    doheaderdblclick: function (e) {
                        if (e.cellNode) {
                            this.onHeaderCellDblClick(e);
                        } else {
                            this.onHeaderDblClick(e);
                        }
                    },
                    doheadercontextmenu: function (e) {
                        if (e.cellNode) {
                            this.onHeaderCellContextMenu(e);
                        } else {
                            this.onHeaderContextMenu(e);
                        }
                    },
                    doStartEdit: function (_213, _214) {
                        this.onStartEdit(_213, _214);
                    },
                    doApplyCellEdit: function (_215, _216, _217) {
                        this.onApplyCellEdit(_215, _216, _217);
                    },
                    doCancelEdit: function (_218) {
                        this.onCancelEdit(_218);
                    },
                    doApplyEdit: function (_219) {
                        this.onApplyEdit(_219);
                    },
                    addRow: function () {
                        this.updateRowCount(this.get("rowCount") + 1);
                    },
                    removeSelectedRows: function () {
                        if (this.allItemsSelected) {
                            this.updateRowCount(0);
                        } else {
                            this.updateRowCount(Math.max(0, this.get("rowCount") - this.selection.getSelected().length));
                        }
                        this.selection.clear();
                    }
                });
                _1dd.markupFactory = function (_21a, node, ctor, _21b) {
                    var _21c = function (n) {
                            var w = html.attr(n, "width") || "auto";
                            if ((w != "auto") && (w.slice(-2) != "em") && (w.slice(-1) != "%")) {
                                w = parseInt(w, 10) + "px";
                            }
                            return w;
                        };
                    if (!_21a.structure && node.nodeName.toLowerCase() == "table") {
                        _21a.structure = _1dc("> colgroup", node).map(function (cg) {
                            var sv = html.attr(cg, "span");
                            var v = {
                                noscroll: (html.attr(cg, "noscroll") == "true") ? true : false,
                                __span: ( !! sv ? parseInt(sv, 10) : 1),
                                cells: []
                            };
                            if (html.hasAttr(cg, "width")) {
                                v.width = _21c(cg);
                            }
                            return v;
                        });
                        if (!_21a.structure.length) {
                            _21a.structure.push({
                                __span: Infinity,
                                cells: []
                            });
                        }
                        _1dc("thead > tr", node).forEach(function (tr, _21d) {
                            var _21e = 0;
                            var _21f = 0;
                            var _220;
                            var _221 = null;
                            _1dc("> th", tr).map(function (th) {
                                if (!_221) {
                                    _220 = 0;
                                    _221 = _21a.structure[0];
                                } else {
                                    if (_21e >= (_220 + _221.__span)) {
                                        _21f++;
                                        _220 += _221.__span;
                                        var _222 = _221;
                                        _221 = _21a.structure[_21f];
                                    }
                                }
                                var cell = {
                                    name: lang.trim(html.attr(th, "name") || th.innerHTML),
                                    colSpan: parseInt(html.attr(th, "colspan") || 1, 10),
                                    type: lang.trim(html.attr(th, "cellType") || ""),
                                    id: lang.trim(html.attr(th, "id") || "")
                                };
                                _21e += cell.colSpan;
                                var _223 = html.attr(th, "rowspan");
                                if (_223) {
                                    cell.rowSpan = _223;
                                }
                                if (html.hasAttr(th, "width")) {
                                    cell.width = _21c(th);
                                }
                                if (html.hasAttr(th, "relWidth")) {
                                    cell.relWidth = window.parseInt(html.attr(th, "relWidth"), 10);
                                }
                                if (html.hasAttr(th, "hidden")) {
                                    cell.hidden = (html.attr(th, "hidden") == "true" || html.attr(th, "hidden") === true);
                                }
                                if (_21b) {
                                    _21b(th, cell);
                                }
                                cell.type = cell.type ? lang.getObject(cell.type) : _1c9.grid.cells.Cell;
                                if (cell.type && cell.type.markupFactory) {
                                    cell.type.markupFactory(th, cell);
                                }
                                if (!_221.cells[_21d]) {
                                    _221.cells[_21d] = [];
                                }
                                _221.cells[_21d].push(cell);
                            });
                        });
                    }
                    return new ctor(_21a, node);
                };
                return _1dd;
            });
        },
        "dojox/grid/_Events": function () {
            define("dojox/grid/_Events", ["dojo/keys", "dojo/dom-class", "dojo/_base/declare", "dojo/_base/event", "dojo/_base/sniff"], function (keys, _224, _225, _226, has) {
                return _225("dojox.grid._Events", null, {
                    cellOverClass: "dojoxGridCellOver",
                    onKeyEvent: function (e) {
                        this.dispatchKeyEvent(e);
                    },
                    onContentEvent: function (e) {
                        this.dispatchContentEvent(e);
                    },
                    onHeaderEvent: function (e) {
                        this.dispatchHeaderEvent(e);
                    },
                    onStyleRow: function (_227) {
                        var i = _227;
                        i.customClasses += (i.odd ? " dojoxGridRowOdd" : "") + (i.selected ? " dojoxGridRowSelected" : "") + (i.over ? " dojoxGridRowOver" : "");
                        this.focus.styleRow(_227);
                        this.edit.styleRow(_227);
                    },
                    onKeyDown: function (e) {
                        if (e.altKey || e.metaKey) {
                            return;
                        }
                        var _228;
                        switch (e.keyCode) {
                        case keys.ESCAPE:
                            this.edit.cancel();
                            break;
                        case keys.ENTER:
                            if (!this.edit.isEditing()) {
                                _228 = this.focus.getHeaderIndex();
                                if (_228 >= 0) {
                                    this.setSortIndex(_228);
                                    break;
                                } else {
                                    this.selection.clickSelect(this.focus.rowIndex, dojo.isCopyKey(e), e.shiftKey);
                                }
                                _226.stop(e);
                            }
                            if (!e.shiftKey) {
                                var _229 = this.edit.isEditing();
                                this.edit.apply();
                                if (!_229) {
                                    this.edit.setEditCell(this.focus.cell, this.focus.rowIndex);
                                }
                            }
                            if (!this.edit.isEditing()) {
                                var _22a = this.focus.focusView || this.views.views[0];
                                _22a.content.decorateEvent(e);
                                this.onRowClick(e);
                                _226.stop(e);
                            }
                            break;
                        case keys.SPACE:
                            if (!this.edit.isEditing()) {
                                _228 = this.focus.getHeaderIndex();
                                if (_228 >= 0) {
                                    this.setSortIndex(_228);
                                    break;
                                } else {
                                    this.selection.clickSelect(this.focus.rowIndex, dojo.isCopyKey(e), e.shiftKey);
                                }
                                _226.stop(e);
                            }
                            break;
                        case keys.TAB:
                            this.focus[e.shiftKey ? "previousKey" : "nextKey"](e);
                            break;
                        case keys.LEFT_ARROW:
                        case keys.RIGHT_ARROW:
                            if (!this.edit.isEditing()) {
                                var _22b = e.keyCode;
                                _226.stop(e);
                                _228 = this.focus.getHeaderIndex();
                                if (_228 >= 0 && (e.shiftKey && e.ctrlKey)) {
                                    this.focus.colSizeAdjust(e, _228, (_22b == keys.LEFT_ARROW ? -1 : 1) * 5);
                                } else {
                                    var _22c = (_22b == keys.LEFT_ARROW) ? 1 : -1;
                                    if (this.isLeftToRight()) {
                                        _22c *= -1;
                                    }
                                    this.focus.move(0, _22c);
                                }
                            }
                            break;
                        case keys.UP_ARROW:
                            if (!this.edit.isEditing() && this.focus.rowIndex !== 0) {
                                _226.stop(e);
                                this.focus.move(-1, 0);
                            }
                            break;
                        case keys.DOWN_ARROW:
                            if (!this.edit.isEditing() && this.focus.rowIndex + 1 != this.rowCount) {
                                _226.stop(e);
                                this.focus.move(1, 0);
                            }
                            break;
                        case keys.PAGE_UP:
                            if (!this.edit.isEditing() && this.focus.rowIndex !== 0) {
                                _226.stop(e);
                                if (this.focus.rowIndex != this.scroller.firstVisibleRow + 1) {
                                    this.focus.move(this.scroller.firstVisibleRow - this.focus.rowIndex, 0);
                                } else {
                                    this.setScrollTop(this.scroller.findScrollTop(this.focus.rowIndex - 1));
                                    this.focus.move(this.scroller.firstVisibleRow - this.scroller.lastVisibleRow + 1, 0);
                                }
                            }
                            break;
                        case keys.PAGE_DOWN:
                            if (!this.edit.isEditing() && this.focus.rowIndex + 1 != this.rowCount) {
                                _226.stop(e);
                                if (this.focus.rowIndex != this.scroller.lastVisibleRow - 1) {
                                    this.focus.move(this.scroller.lastVisibleRow - this.focus.rowIndex - 1, 0);
                                } else {
                                    this.setScrollTop(this.scroller.findScrollTop(this.focus.rowIndex + 1));
                                    this.focus.move(this.scroller.lastVisibleRow - this.scroller.firstVisibleRow - 1, 0);
                                }
                            }
                            break;
                        default:
                            break;
                        }
                    },
                    onMouseOver: function (e) {
                        e.rowIndex == -1 ? this.onHeaderCellMouseOver(e) : this.onCellMouseOver(e);
                    },
                    onMouseOut: function (e) {
                        e.rowIndex == -1 ? this.onHeaderCellMouseOut(e) : this.onCellMouseOut(e);
                    },
                    onMouseDown: function (e) {
                        e.rowIndex == -1 ? this.onHeaderCellMouseDown(e) : this.onCellMouseDown(e);
                    },
                    onMouseOverRow: function (e) {
                        if (!this.rows.isOver(e.rowIndex)) {
                            this.rows.setOverRow(e.rowIndex);
                            e.rowIndex == -1 ? this.onHeaderMouseOver(e) : this.onRowMouseOver(e);
                        }
                    },
                    onMouseOutRow: function (e) {
                        if (this.rows.isOver(-1)) {
                            this.onHeaderMouseOut(e);
                        } else {
                            if (!this.rows.isOver(-2)) {
                                this.rows.setOverRow(-2);
                                this.onRowMouseOut(e);
                            }
                        }
                    },
                    onMouseDownRow: function (e) {
                        if (e.rowIndex != -1) {
                            this.onRowMouseDown(e);
                        }
                    },
                    onCellMouseOver: function (e) {
                        if (e.cellNode) {
                            _224.add(e.cellNode, this.cellOverClass);
                        }
                    },
                    onCellMouseOut: function (e) {
                        if (e.cellNode) {
                            _224.remove(e.cellNode, this.cellOverClass);
                        }
                    },
                    onCellMouseDown: function (e) {},
                    onCellClick: function (e) {
                        this._click[0] = this._click[1];
                        this._click[1] = e;
                        if (!this.edit.isEditCell(e.rowIndex, e.cellIndex)) {
                            this.focus.setFocusCell(e.cell, e.rowIndex);
                        }
                        if (this._click.length > 1 && this._click[0] == null) {
                            this._click.shift();
                        }
                        this.onRowClick(e);
                    },
                    onCellDblClick: function (e) {
                        var _22d;
                        if (this._click.length > 1 && has("ie")) {
                            _22d = this._click[1];
                        } else {
                            if (this._click.length > 1 && this._click[0].rowIndex != this._click[1].rowIndex) {
                                _22d = this._click[0];
                            } else {
                                _22d = e;
                            }
                        }
                        this.focus.setFocusCell(_22d.cell, _22d.rowIndex);
                        this.onRowClick(_22d);
                        this.edit.setEditCell(_22d.cell, _22d.rowIndex);
                        this.onRowDblClick(e);
                    },
                    onCellContextMenu: function (e) {
                        this.onRowContextMenu(e);
                    },
                    onCellFocus: function (_22e, _22f) {
                        this.edit.cellFocus(_22e, _22f);
                    },
                    onRowClick: function (e) {
                        this.edit.rowClick(e);
                        this.selection.clickSelectEvent(e);
                    },
                    onRowDblClick: function (e) {},
                    onRowMouseOver: function (e) {},
                    onRowMouseOut: function (e) {},
                    onRowMouseDown: function (e) {},
                    onRowContextMenu: function (e) {
                        _226.stop(e);
                    },
                    onHeaderMouseOver: function (e) {},
                    onHeaderMouseOut: function (e) {},
                    onHeaderCellMouseOver: function (e) {
                        if (e.cellNode) {
                            _224.add(e.cellNode, this.cellOverClass);
                        }
                    },
                    onHeaderCellMouseOut: function (e) {
                        if (e.cellNode) {
                            _224.remove(e.cellNode, this.cellOverClass);
                        }
                    },
                    onHeaderCellMouseDown: function (e) {},
                    onHeaderClick: function (e) {},
                    onHeaderCellClick: function (e) {
                        this.setSortIndex(e.cell.index);
                        this.onHeaderClick(e);
                    },
                    onHeaderDblClick: function (e) {},
                    onHeaderCellDblClick: function (e) {
                        this.onHeaderDblClick(e);
                    },
                    onHeaderCellContextMenu: function (e) {
                        this.onHeaderContextMenu(e);
                    },
                    onHeaderContextMenu: function (e) {
                        if (!this.headerMenu) {
                            _226.stop(e);
                        }
                    },
                    onStartEdit: function (_230, _231) {},
                    onApplyCellEdit: function (_232, _233, _234) {},
                    onCancelEdit: function (_235) {},
                    onApplyEdit: function (_236) {},
                    onCanSelect: function (_237) {
                        return true;
                    },
                    onCanDeselect: function (_238) {
                        return true;
                    },
                    onSelected: function (_239) {
                        this.updateRowStyles(_239);
                    },
                    onDeselected: function (_23a) {
                        this.updateRowStyles(_23a);
                    },
                    onSelectionChanged: function () {}
                });
            });
        },
        "dojox/grid/_Scroller": function () {
            define("dojox/grid/_Scroller", ["dijit/registry", "dojo/_base/declare", "dojo/_base/lang", "./util", "dojo/_base/html"], function (_23b, _23c, lang, util, html) {
                var _23d = function (_23e) {
                        var i = 0,
                            n, p = _23e.parentNode;
                        while ((n = p.childNodes[i++])) {
                            if (n == _23e) {
                                return i - 1;
                            }
                        }
                        return -1;
                    };
                var _23f = function (_240) {
                        if (!_240) {
                            return;
                        }
                        dojo.forEach(_23b.toArray(), function (w) {
                            if (w.domNode && html.isDescendant(w.domNode, _240, true)) {
                                w.destroy();
                            }
                        });
                    };
                var _241 = function (_242) {
                        var node = html.byId(_242);
                        return (node && node.tagName ? node.tagName.toLowerCase() : "");
                    };
                var _243 = function (_244, _245) {
                        var _246 = [];
                        var i = 0,
                            n;
                        while ((n = _244.childNodes[i])) {
                            i++;
                            if (_241(n) == _245) {
                                _246.push(n);
                            }
                        }
                        return _246;
                    };
                var _247 = function (_248) {
                        return _243(_248, "div");
                    };
                return _23c("dojox.grid._Scroller", null, {
                    constructor: function (_249) {
                        this.setContentNodes(_249);
                        this.pageHeights = [];
                        this.pageNodes = [];
                        this.stack = [];
                    },
                    rowCount: 0,
                    defaultRowHeight: 32,
                    keepRows: 100,
                    contentNode: null,
                    scrollboxNode: null,
                    defaultPageHeight: 0,
                    keepPages: 10,
                    pageCount: 0,
                    windowHeight: 0,
                    firstVisibleRow: 0,
                    lastVisibleRow: 0,
                    averageRowHeight: 0,
                    page: 0,
                    pageTop: 0,
                    init: function (_24a, _24b, _24c) {
                        switch (arguments.length) {
                        case 3:
                            this.rowsPerPage = _24c;
                        case 2:
                            this.keepRows = _24b;
                        case 1:
                            this.rowCount = _24a;
                        default:
                            break;
                        }
                        this.defaultPageHeight = this.defaultRowHeight * this.rowsPerPage;
                        this.pageCount = this._getPageCount(this.rowCount, this.rowsPerPage);
                        this.setKeepInfo(this.keepRows);
                        this.invalidate();
                        if (this.scrollboxNode) {
                            this.scrollboxNode.scrollTop = 0;
                            this.scroll(0);
                            this.scrollboxNode.onscroll = lang.hitch(this, "onscroll");
                        }
                    },
                    _getPageCount: function (_24d, _24e) {
                        return _24d ? (Math.ceil(_24d / _24e) || 1) : 0;
                    },
                    destroy: function () {
                        this.invalidateNodes();
                        delete this.contentNodes;
                        delete this.contentNode;
                        delete this.scrollboxNode;
                    },
                    setKeepInfo: function (_24f) {
                        this.keepRows = _24f;
                        this.keepPages = !this.keepRows ? this.keepPages : Math.max(Math.ceil(this.keepRows / this.rowsPerPage), 2);
                    },
                    setContentNodes: function (_250) {
                        this.contentNodes = _250;
                        this.colCount = (this.contentNodes ? this.contentNodes.length : 0);
                        this.pageNodes = [];
                        for (var i = 0; i < this.colCount; i++) {
                            this.pageNodes[i] = [];
                        }
                    },
                    getDefaultNodes: function () {
                        return this.pageNodes[0] || [];
                    },
                    invalidate: function () {
                        this._invalidating = true;
                        this.invalidateNodes();
                        this.pageHeights = [];
                        this.height = (this.pageCount ? (this.pageCount - 1) * this.defaultPageHeight + this.calcLastPageHeight() : 0);
                        this.resize();
                        this._invalidating = false;
                    },
                    updateRowCount: function (_251) {
                        this.invalidateNodes();
                        this.rowCount = _251;
                        var _252 = this.pageCount;
                        if (_252 === 0) {
                            this.height = 1;
                        }
                        this.pageCount = this._getPageCount(this.rowCount, this.rowsPerPage);
                        if (this.pageCount < _252) {
                            for (var i = _252 - 1; i >= this.pageCount; i--) {
                                this.height -= this.getPageHeight(i);
                                delete this.pageHeights[i];
                            }
                        } else {
                            if (this.pageCount > _252) {
                                this.height += this.defaultPageHeight * (this.pageCount - _252 - 1) + this.calcLastPageHeight();
                            }
                        }
                        this.resize();
                    },
                    pageExists: function (_253) {
                        return Boolean(this.getDefaultPageNode(_253));
                    },
                    measurePage: function (_254) {
                        if (this.grid.rowHeight) {
                            var _255 = this.grid.rowHeight + 1;
                            return ((_254 + 1) * this.rowsPerPage > this.rowCount ? this.rowCount - _254 * this.rowsPerPage : this.rowsPerPage) * _255;
                        }
                        var n = this.getDefaultPageNode(_254);
                        return (n && n.innerHTML) ? n.offsetHeight : undefined;
                    },
                    positionPage: function (_256, _257) {
                        for (var i = 0; i < this.colCount; i++) {
                            this.pageNodes[i][_256].style.top = _257 + "px";
                        }
                    },
                    repositionPages: function (_258) {
                        var _259 = this.getDefaultNodes();
                        var last = 0;
                        for (var i = 0; i < this.stack.length; i++) {
                            last = Math.max(this.stack[i], last);
                        }
                        var n = _259[_258];
                        var y = (n ? this.getPageNodePosition(n) + this.getPageHeight(_258) : 0);
                        for (var p = _258 + 1; p <= last; p++) {
                            n = _259[p];
                            if (n) {
                                if (this.getPageNodePosition(n) == y) {
                                    return;
                                }
                                this.positionPage(p, y);
                            }
                            y += this.getPageHeight(p);
                        }
                    },
                    installPage: function (_25a) {
                        for (var i = 0; i < this.colCount; i++) {
                            this.contentNodes[i].appendChild(this.pageNodes[i][_25a]);
                        }
                    },
                    preparePage: function (_25b, _25c) {
                        var p = (_25c ? this.popPage() : null);
                        for (var i = 0; i < this.colCount; i++) {
                            var _25d = this.pageNodes[i];
                            var _25e = (p === null ? this.createPageNode() : this.invalidatePageNode(p, _25d));
                            _25e.pageIndex = _25b;
                            _25d[_25b] = _25e;
                        }
                    },
                    renderPage: function (_25f) {
                        var _260 = [];
                        var i, j;
                        for (i = 0; i < this.colCount; i++) {
                            _260[i] = this.pageNodes[i][_25f];
                        }
                        for (i = 0, j = _25f * this.rowsPerPage;
                        (i < this.rowsPerPage) && (j < this.rowCount); i++, j++) {
                            this.renderRow(j, _260);
                        }
                    },
                    removePage: function (_261) {
                        for (var i = 0, j = _261 * this.rowsPerPage; i < this.rowsPerPage; i++, j++) {
                            this.removeRow(j);
                        }
                    },
                    destroyPage: function (_262) {
                        for (var i = 0; i < this.colCount; i++) {
                            var n = this.invalidatePageNode(_262, this.pageNodes[i]);
                            if (n) {
                                html.destroy(n);
                            }
                        }
                    },
                    pacify: function (_263) {},
                    pacifying: false,
                    pacifyTicks: 200,
                    setPacifying: function (_264) {
                        if (this.pacifying != _264) {
                            this.pacifying = _264;
                            this.pacify(this.pacifying);
                        }
                    },
                    startPacify: function () {
                        this.startPacifyTicks = new Date().getTime();
                    },
                    doPacify: function () {
                        var _265 = (new Date().getTime() - this.startPacifyTicks) > this.pacifyTicks;
                        this.setPacifying(true);
                        this.startPacify();
                        return _265;
                    },
                    endPacify: function () {
                        this.setPacifying(false);
                    },
                    resize: function () {
                        if (this.scrollboxNode) {
                            this.windowHeight = this.scrollboxNode.clientHeight;
                        }
                        for (var i = 0; i < this.colCount; i++) {
                            util.setStyleHeightPx(this.contentNodes[i], Math.max(1, this.height));
                        }
                        var _266 = (!this._invalidating);
                        if (!_266) {
                            var ah = this.grid.get("autoHeight");
                            if (typeof ah == "number" && ah <= Math.min(this.rowsPerPage, this.rowCount)) {
                                _266 = true;
                            }
                        }
                        if (_266) {
                            this.needPage(this.page, this.pageTop);
                        }
                        var _267 = (this.page < this.pageCount - 1) ? this.rowsPerPage : ((this.rowCount % this.rowsPerPage) || this.rowsPerPage);
                        var _268 = this.getPageHeight(this.page);
                        this.averageRowHeight = (_268 > 0 && _267 > 0) ? (_268 / _267) : 0;
                    },
                    calcLastPageHeight: function () {
                        if (!this.pageCount) {
                            return 0;
                        }
                        var _269 = this.pageCount - 1;
                        var _26a = ((this.rowCount % this.rowsPerPage) || (this.rowsPerPage)) * this.defaultRowHeight;
                        this.pageHeights[_269] = _26a;
                        return _26a;
                    },
                    updateContentHeight: function (inDh) {
                        this.height += inDh;
                        this.resize();
                    },
                    updatePageHeight: function (_26b, _26c, _26d) {
                        if (this.pageExists(_26b)) {
                            var oh = this.getPageHeight(_26b);
                            var h = (this.measurePage(_26b));
                            if (h === undefined) {
                                h = oh;
                            }
                            this.pageHeights[_26b] = h;
                            if (oh != h) {
                                this.updateContentHeight(h - oh);
                                var ah = this.grid.get("autoHeight");
                                if ((typeof ah == "number" && ah > this.rowCount) || (ah === true && !_26c)) {
                                    if (!_26d) {
                                        this.grid.sizeChange();
                                    } else {
                                        var ns = this.grid.viewsNode.style;
                                        ns.height = parseInt(ns.height) + h - oh + "px";
                                        this.repositionPages(_26b);
                                    }
                                } else {
                                    this.repositionPages(_26b);
                                }
                            }
                            return h;
                        }
                        return 0;
                    },
                    rowHeightChanged: function (_26e, _26f) {
                        this.updatePageHeight(Math.floor(_26e / this.rowsPerPage), false, _26f);
                    },
                    invalidateNodes: function () {
                        while (this.stack.length) {
                            this.destroyPage(this.popPage());
                        }
                    },
                    createPageNode: function () {
                        var p = document.createElement("div");
                        html.attr(p, "role", "presentation");
                        p.style.position = "absolute";
                        p.style[this.grid.isLeftToRight() ? "left" : "right"] = "0";
                        return p;
                    },
                    getPageHeight: function (_270) {
                        var ph = this.pageHeights[_270];
                        return (ph !== undefined ? ph : this.defaultPageHeight);
                    },
                    pushPage: function (_271) {
                        return this.stack.push(_271);
                    },
                    popPage: function () {
                        return this.stack.shift();
                    },
                    findPage: function (_272) {
                        var i = 0,
                            h = 0;
                        for (var ph = 0; i < this.pageCount; i++, h += ph) {
                            ph = this.getPageHeight(i);
                            if (h + ph >= _272) {
                                break;
                            }
                        }
                        this.page = i;
                        this.pageTop = h;
                    },
                    buildPage: function (_273, _274, _275) {
                        this.preparePage(_273, _274);
                        this.positionPage(_273, _275);
                        this.installPage(_273);
                        this.renderPage(_273);
                        this.pushPage(_273);
                    },
                    needPage: function (_276, _277) {
                        var h = this.getPageHeight(_276),
                            oh = h;
                        if (!this.pageExists(_276)) {
                            this.buildPage(_276, (!this.grid._autoHeight && this.keepPages && (this.stack.length >= this.keepPages)), _277);
                            h = this.updatePageHeight(_276, true);
                        } else {
                            this.positionPage(_276, _277);
                        }
                        return h;
                    },
                    onscroll: function () {
                        this.scroll(this.scrollboxNode.scrollTop);
                    },
                    scroll: function (_278) {
                        this.grid.scrollTop = _278;
                        if (this.colCount) {
                            this.startPacify();
                            this.findPage(_278);
                            var h = this.height;
                            var b = this.getScrollBottom(_278);
                            for (var p = this.page, y = this.pageTop;
                            (p < this.pageCount) && ((b < 0) || (y < b)); p++) {
                                y += this.needPage(p, y);
                            }
                            this.firstVisibleRow = this.getFirstVisibleRow(this.page, this.pageTop, _278);
                            this.lastVisibleRow = this.getLastVisibleRow(p - 1, y, b);
                            if (h != this.height) {
                                this.repositionPages(p - 1);
                            }
                            this.endPacify();
                        }
                    },
                    getScrollBottom: function (_279) {
                        return (this.windowHeight >= 0 ? _279 + this.windowHeight : -1);
                    },
                    processNodeEvent: function (e, _27a) {
                        var t = e.target;
                        while (t && (t != _27a) && t.parentNode && (t.parentNode.parentNode != _27a)) {
                            t = t.parentNode;
                        }
                        if (!t || !t.parentNode || (t.parentNode.parentNode != _27a)) {
                            return false;
                        }
                        var page = t.parentNode;
                        e.topRowIndex = page.pageIndex * this.rowsPerPage;
                        e.rowIndex = e.topRowIndex + _23d(t);
                        e.rowTarget = t;
                        return true;
                    },
                    processEvent: function (e) {
                        return this.processNodeEvent(e, this.contentNode);
                    },
                    renderRow: function (_27b, _27c) {},
                    removeRow: function (_27d) {},
                    getDefaultPageNode: function (_27e) {
                        return this.getDefaultNodes()[_27e];
                    },
                    positionPageNode: function (_27f, _280) {},
                    getPageNodePosition: function (_281) {
                        return _281.offsetTop;
                    },
                    invalidatePageNode: function (_282, _283) {
                        var p = _283[_282];
                        if (p) {
                            delete _283[_282];
                            this.removePage(_282, p);
                            _23f(p);
                            p.innerHTML = "";
                        }
                        return p;
                    },
                    getPageRow: function (_284) {
                        return _284 * this.rowsPerPage;
                    },
                    getLastPageRow: function (_285) {
                        return Math.min(this.rowCount, this.getPageRow(_285 + 1)) - 1;
                    },
                    getFirstVisibleRow: function (_286, _287, _288) {
                        if (!this.pageExists(_286)) {
                            return 0;
                        }
                        var row = this.getPageRow(_286);
                        var _289 = this.getDefaultNodes();
                        var rows = _247(_289[_286]);
                        for (var i = 0, l = rows.length; i < l && _287 < _288; i++, row++) {
                            _287 += rows[i].offsetHeight;
                        }
                        return (row ? row - 1 : row);
                    },
                    getLastVisibleRow: function (_28a, _28b, _28c) {
                        if (!this.pageExists(_28a)) {
                            return 0;
                        }
                        var _28d = this.getDefaultNodes();
                        var row = this.getLastPageRow(_28a);
                        var rows = _247(_28d[_28a]);
                        for (var i = rows.length - 1; i >= 0 && _28b > _28c; i--, row--) {
                            _28b -= rows[i].offsetHeight;
                        }
                        return row + 1;
                    },
                    findTopRow: function (_28e) {
                        var _28f = this.getDefaultNodes();
                        var rows = _247(_28f[this.page]);
                        for (var i = 0, l = rows.length, t = this.pageTop, h; i < l; i++) {
                            h = rows[i].offsetHeight;
                            t += h;
                            if (t >= _28e) {
                                this.offset = h - (t - _28e);
                                return i + this.page * this.rowsPerPage;
                            }
                        }
                        return -1;
                    },
                    findScrollTop: function (_290) {
                        var _291 = Math.floor(_290 / this.rowsPerPage);
                        var t = 0;
                        var i, l;
                        for (i = 0; i < _291; i++) {
                            t += this.getPageHeight(i);
                        }
                        this.pageTop = t;
                        this.page = _291;
                        this.needPage(_291, this.pageTop);
                        var _292 = this.getDefaultNodes();
                        var rows = _247(_292[_291]);
                        var r = _290 - this.rowsPerPage * _291;
                        for (i = 0, l = rows.length; i < l && i < r; i++) {
                            t += rows[i].offsetHeight;
                        }
                        return t;
                    },
                    dummy: 0
                });
            });
        },
        "dijit/registry": function () {
            define("dijit/registry", ["dojo/_base/array", "dojo/_base/sniff", "dojo/_base/unload", "dojo/_base/window", "."], function (_293, has, _294, win, _295) {
                var _296 = {},
                    hash = {};
                var _297 = {
                    length: 0,
                    add: function (_298) {
                        if (hash[_298.id]) {
                            throw new Error("Tried to register widget with id==" + _298.id + " but that id is already registered");
                        }
                        hash[_298.id] = _298;
                        this.length++;
                    },
                    remove: function (id) {
                        if (hash[id]) {
                            delete hash[id];
                            this.length--;
                        }
                    },
                    byId: function (id) {
                        return typeof id == "string" ? hash[id] : id;
                    },
                    byNode: function (node) {
                        return hash[node.getAttribute("widgetId")];
                    },
                    toArray: function () {
                        var ar = [];
                        for (var id in hash) {
                            ar.push(hash[id]);
                        }
                        return ar;
                    },
                    getUniqueId: function (_299) {
                        var id;
                        do {
                            id = _299 + "_" + (_299 in _296 ? ++_296[_299] : _296[_299] = 0);
                        } while (hash[id]);
                        return _295._scopeName == "dijit" ? id : _295._scopeName + "_" + id;
                    },
                    findWidgets: function (root) {
                        var _29a = [];

                        function _29b(root) {
                            for (var node = root.firstChild; node; node = node.nextSibling) {
                                if (node.nodeType == 1) {
                                    var _29c = node.getAttribute("widgetId");
                                    if (_29c) {
                                        var _29d = hash[_29c];
                                        if (_29d) {
                                            _29a.push(_29d);
                                        }
                                    } else {
                                        _29b(node);
                                    }
                                }
                            }
                        };
                        _29b(root);
                        return _29a;
                    },
                    _destroyAll: function () {
                        _295._curFocus = null;
                        _295._prevFocus = null;
                        _295._activeStack = [];
                        _293.forEach(_297.findWidgets(win.body()), function (_29e) {
                            if (!_29e._destroyed) {
                                if (_29e.destroyRecursive) {
                                    _29e.destroyRecursive();
                                } else {
                                    if (_29e.destroy) {
                                        _29e.destroy();
                                    }
                                }
                            }
                        });
                    },
                    getEnclosingWidget: function (node) {
                        while (node) {
                            var id = node.getAttribute && node.getAttribute("widgetId");
                            if (id) {
                                return hash[id];
                            }
                            node = node.parentNode;
                        }
                        return null;
                    },
                    _hash: hash
                };
                if (has("ie")) {
                    _294.addOnWindowUnload(function () {
                        _297._destroyAll();
                    });
                }
                _295.registry = _297;
                return _297;
            });
        },
        "dijit/main": function () {
            define("dijit/main", ["dojo/_base/kernel"], function (dojo) {
                return dojo.dijit;
            });
        },
        "dojox/grid/util": function () {
            define("dojox/grid/util", ["../main", "dojo/_base/lang", "dojo/dom"], function (_29f, lang, dom) {
                var dgu = lang.getObject("grid.util", true, _29f);
                dgu.na = "...";
                dgu.rowIndexTag = "gridRowIndex";
                dgu.gridViewTag = "gridView";
                dgu.fire = function (ob, ev, args) {
                    var fn = ob && ev && ob[ev];
                    return fn && (args ? fn.apply(ob, args) : ob[ev]());
                };
                dgu.setStyleHeightPx = function (_2a0, _2a1) {
                    if (_2a1 >= 0) {
                        var s = _2a0.style;
                        var v = _2a1 + "px";
                        if (_2a0 && s["height"] != v) {
                            s["height"] = v;
                        }
                    }
                };
                dgu.mouseEvents = ["mouseover", "mouseout", "mousedown", "mouseup", "click", "dblclick", "contextmenu"];
                dgu.keyEvents = ["keyup", "keydown", "keypress"];
                dgu.funnelEvents = function (_2a2, _2a3, _2a4, _2a5) {
                    var evts = (_2a5 ? _2a5 : dgu.mouseEvents.concat(dgu.keyEvents));
                    for (var i = 0, l = evts.length; i < l; i++) {
                        _2a3.connect(_2a2, "on" + evts[i], _2a4);
                    }
                };
                dgu.removeNode = function (_2a6) {
                    _2a6 = dom.byId(_2a6);
                    _2a6 && _2a6.parentNode && _2a6.parentNode.removeChild(_2a6);
                    return _2a6;
                };
                dgu.arrayCompare = function (inA, inB) {
                    for (var i = 0, l = inA.length; i < l; i++) {
                        if (inA[i] != inB[i]) {
                            return false;
                        }
                    }
                    return (inA.length == inB.length);
                };
                dgu.arrayInsert = function (_2a7, _2a8, _2a9) {
                    if (_2a7.length <= _2a8) {
                        _2a7[_2a8] = _2a9;
                    } else {
                        _2a7.splice(_2a8, 0, _2a9);
                    }
                };
                dgu.arrayRemove = function (_2aa, _2ab) {
                    _2aa.splice(_2ab, 1);
                };
                dgu.arraySwap = function (_2ac, inI, inJ) {
                    var _2ad = _2ac[inI];
                    _2ac[inI] = _2ac[inJ];
                    _2ac[inJ] = _2ad;
                };
                return _29f.grid.util;
            });
        },
        "dojox/grid/_Layout": function () {
            define("dojox/grid/_Layout", ["dojo/_base/kernel", "../main", "dojo/_base/declare", "dojo/_base/array", "dojo/_base/lang", "dojo/dom-geometry", "./cells", "./_RowSelector"], function (dojo, _2ae, _2af, _2b0, lang, _2b1) {
                return _2af("dojox.grid._Layout", null, {
                    constructor: function (_2b2) {
                        this.grid = _2b2;
                    },
                    cells: [],
                    structure: null,
                    defaultWidth: "6em",
                    moveColumn: function (_2b3, _2b4, _2b5, _2b6, _2b7) {
                        var _2b8 = this.structure[_2b3].cells[0];
                        var _2b9 = this.structure[_2b4].cells[0];
                        var cell = null;
                        var _2ba = 0;
                        var _2bb = 0;
                        for (var i = 0, c; c = _2b8[i]; i++) {
                            if (c.index == _2b5) {
                                _2ba = i;
                                break;
                            }
                        }
                        cell = _2b8.splice(_2ba, 1)[0];
                        cell.view = this.grid.views.views[_2b4];
                        for (i = 0, c = null; c = _2b9[i]; i++) {
                            if (c.index == _2b6) {
                                _2bb = i;
                                break;
                            }
                        }
                        if (!_2b7) {
                            _2bb += 1;
                        }
                        _2b9.splice(_2bb, 0, cell);
                        var _2bc = this.grid.getCell(this.grid.getSortIndex());
                        if (_2bc) {
                            _2bc._currentlySorted = this.grid.getSortAsc();
                        }
                        this.cells = [];
                        _2b5 = 0;
                        var v;
                        for (i = 0; v = this.structure[i]; i++) {
                            for (var j = 0, cs; cs = v.cells[j]; j++) {
                                for (var k = 0; c = cs[k]; k++) {
                                    c.index = _2b5;
                                    this.cells.push(c);
                                    if ("_currentlySorted" in c) {
                                        var si = _2b5 + 1;
                                        si *= c._currentlySorted ? 1 : -1;
                                        this.grid.sortInfo = si;
                                        delete c._currentlySorted;
                                    }
                                    _2b5++;
                                }
                            }
                        }
                        _2b0.forEach(this.cells, function (c) {
                            var _2bd = c.markup[2].split(" ");
                            var _2be = parseInt(_2bd[1].substring(5));
                            if (_2be != c.index) {
                                _2bd[1] = "idx=\"" + c.index + "\"";
                                c.markup[2] = _2bd.join(" ");
                            }
                        });
                        this.grid.setupHeaderMenu();
                    },
                    setColumnVisibility: function (_2bf, _2c0) {
                        var cell = this.cells[_2bf];
                        if (cell.hidden == _2c0) {
                            cell.hidden = !_2c0;
                            var v = cell.view,
                                w = v.viewWidth;
                            if (w && w != "auto") {
                                v._togglingColumn = _2b1.getMarginBox(cell.getHeaderNode()).w || 0;
                            }
                            v.update();
                            return true;
                        } else {
                            return false;
                        }
                    },
                    addCellDef: function (_2c1, _2c2, _2c3) {
                        var self = this;
                        var _2c4 = function (_2c5) {
                                var w = 0;
                                if (_2c5.colSpan > 1) {
                                    w = 0;
                                } else {
                                    w = _2c5.width || self._defaultCellProps.width || self.defaultWidth;
                                    if (!isNaN(w)) {
                                        w = w + "em";
                                    }
                                }
                                return w;
                            };
                        var _2c6 = {
                            grid: this.grid,
                            subrow: _2c1,
                            layoutIndex: _2c2,
                            index: this.cells.length
                        };
                        if (_2c3 && _2c3 instanceof _2ae.grid.cells._Base) {
                            var _2c7 = lang.clone(_2c3);
                            _2c6.unitWidth = _2c4(_2c7._props);
                            _2c7 = lang.mixin(_2c7, this._defaultCellProps, _2c3._props, _2c6);
                            return _2c7;
                        }
                        var _2c8 = _2c3.type || _2c3.cellType || this._defaultCellProps.type || this._defaultCellProps.cellType || _2ae.grid.cells.Cell;
                        if (lang.isString(_2c8)) {
                            _2c8 = lang.getObject(_2c8);
                        }
                        _2c6.unitWidth = _2c4(_2c3);
                        return new _2c8(lang.mixin({}, this._defaultCellProps, _2c3, _2c6));
                    },
                    addRowDef: function (_2c9, _2ca) {
                        var _2cb = [];
                        var _2cc = 0,
                            _2cd = 0,
                            _2ce = true;
                        for (var i = 0, def, cell;
                        (def = _2ca[i]); i++) {
                            cell = this.addCellDef(_2c9, i, def);
                            _2cb.push(cell);
                            this.cells.push(cell);
                            if (_2ce && cell.relWidth) {
                                _2cc += cell.relWidth;
                            } else {
                                if (cell.width) {
                                    var w = cell.width;
                                    if (typeof w == "string" && w.slice(-1) == "%") {
                                        _2cd += window.parseInt(w, 10);
                                    } else {
                                        if (w == "auto") {
                                            _2ce = false;
                                        }
                                    }
                                }
                            }
                        }
                        if (_2cc && _2ce) {
                            _2b0.forEach(_2cb, function (cell) {
                                if (cell.relWidth) {
                                    cell.width = cell.unitWidth = ((cell.relWidth / _2cc) * (100 - _2cd)) + "%";
                                }
                            });
                        }
                        return _2cb;
                    },
                    addRowsDef: function (_2cf) {
                        var _2d0 = [];
                        if (lang.isArray(_2cf)) {
                            if (lang.isArray(_2cf[0])) {
                                for (var i = 0, row; _2cf && (row = _2cf[i]); i++) {
                                    _2d0.push(this.addRowDef(i, row));
                                }
                            } else {
                                _2d0.push(this.addRowDef(0, _2cf));
                            }
                        }
                        return _2d0;
                    },
                    addViewDef: function (_2d1) {
                        this._defaultCellProps = _2d1.defaultCell || {};
                        if (_2d1.width && _2d1.width == "auto") {
                            delete _2d1.width;
                        }
                        return lang.mixin({}, _2d1, {
                            cells: this.addRowsDef(_2d1.rows || _2d1.cells)
                        });
                    },
                    setStructure: function (_2d2) {
                        this.fieldIndex = 0;
                        this.cells = [];
                        var s = this.structure = [];
                        if (this.grid.rowSelector) {
                            var sel = {
                                type: _2ae._scopeName + ".grid._RowSelector"
                            };
                            if (lang.isString(this.grid.rowSelector)) {
                                var _2d3 = this.grid.rowSelector;
                                if (_2d3 == "false") {
                                    sel = null;
                                } else {
                                    if (_2d3 != "true") {
                                        sel["width"] = _2d3;
                                    }
                                }
                            } else {
                                if (!this.grid.rowSelector) {
                                    sel = null;
                                }
                            }
                            if (sel) {
                                s.push(this.addViewDef(sel));
                            }
                        }
                        var _2d4 = function (def) {
                                return ("name" in def || "field" in def || "get" in def);
                            };
                        var _2d5 = function (def) {
                                if (lang.isArray(def)) {
                                    if (lang.isArray(def[0]) || _2d4(def[0])) {
                                        return true;
                                    }
                                }
                                return false;
                            };
                        var _2d6 = function (def) {
                                return (def !== null && lang.isObject(def) && ("cells" in def || "rows" in def || ("type" in def && !_2d4(def))));
                            };
                        if (lang.isArray(_2d2)) {
                            var _2d7 = false;
                            for (var i = 0, st;
                            (st = _2d2[i]); i++) {
                                if (_2d6(st)) {
                                    _2d7 = true;
                                    break;
                                }
                            }
                            if (!_2d7) {
                                s.push(this.addViewDef({
                                    cells: _2d2
                                }));
                            } else {
                                for (i = 0;
                                (st = _2d2[i]); i++) {
                                    if (_2d5(st)) {
                                        s.push(this.addViewDef({
                                            cells: st
                                        }));
                                    } else {
                                        if (_2d6(st)) {
                                            s.push(this.addViewDef(st));
                                        }
                                    }
                                }
                            }
                        } else {
                            if (_2d6(_2d2)) {
                                s.push(this.addViewDef(_2d2));
                            }
                        }
                        this.cellCount = this.cells.length;
                        this.grid.setupHeaderMenu();
                    }
                });
            });
        },
        "dojox/grid/cells": function () {
            define("dojox/grid/cells", ["../main", "./cells/_base"], function (_2d8) {
                return _2d8.grid.cells;
            });
        },
        "dojox/grid/cells/_base": function () {
            define("dojox/grid/cells/_base", ["dojo/_base/kernel", "dojo/_base/declare", "dojo/_base/lang", "dojo/_base/event", "dojo/_base/connect", "dojo/_base/array", "dojo/_base/sniff", "dojo/dom", "dojo/dom-attr", "dojo/dom-construct", "dijit/_Widget", "../util"], function (dojo, _2d9, lang, _2da, _2db, _2dc, has, dom, _2dd, _2de, _2df, util) {
                var _2e0 = _2d9("dojox.grid._DeferredTextWidget", _2df, {
                    deferred: null,
                    _destroyOnRemove: true,
                    postCreate: function () {
                        if (this.deferred) {
                            this.deferred.addBoth(lang.hitch(this, function (text) {
                                if (this.domNode) {
                                    this.domNode.innerHTML = text;
                                }
                            }));
                        }
                    }
                });
                var _2e1 = function (_2e2) {
                        try {
                            util.fire(_2e2, "focus");
                            util.fire(_2e2, "select");
                        } catch (e) {}
                    };
                var _2e3 = function () {
                        setTimeout(lang.hitch.apply(dojo, arguments), 0);
                    };
                var _2e4 = _2d9("dojox.grid.cells._Base", null, {
                    styles: "",
                    classes: "",
                    editable: false,
                    alwaysEditing: false,
                    formatter: null,
                    defaultValue: "...",
                    value: null,
                    hidden: false,
                    noresize: false,
                    draggable: true,
                    _valueProp: "value",
                    _formatPending: false,
                    constructor: function (_2e5) {
                        this._props = _2e5 || {};
                        lang.mixin(this, _2e5);
                        if (this.draggable === undefined) {
                            this.draggable = true;
                        }
                    },
                    _defaultFormat: function (_2e6, _2e7) {
                        var s = this.grid.formatterScope || this;
                        var f = this.formatter;
                        if (f && s && typeof f == "string") {
                            f = this.formatter = s[f];
                        }
                        var v = (_2e6 != this.defaultValue && f) ? f.apply(s, _2e7) : _2e6;
                        if (typeof v == "undefined") {
                            return this.defaultValue;
                        }
                        if (v && v.addBoth) {
                            v = new _2e0({
                                deferred: v
                            }, _2de.create("span", {
                                innerHTML: this.defaultValue
                            }));
                        }
                        if (v && v.declaredClass && v.startup) {
                            return "<div class='dojoxGridStubNode' linkWidget='" + v.id + "' cellIdx='" + this.index + "'>" + this.defaultValue + "</div>";
                        }
                        return v;
                    },
                    format: function (_2e8, _2e9) {
                        var f, i = this.grid.edit.info,
                            d = this.get ? this.get(_2e8, _2e9) : (this.value || this.defaultValue);
                        d = (d && d.replace && this.grid.escapeHTMLInData) ? d.replace(/&/g, "&amp;").replace(/</g, "&lt;") : d;
                        if (this.editable && (this.alwaysEditing || (i.rowIndex == _2e8 && i.cell == this))) {
                            return this.formatEditing(d, _2e8);
                        } else {
                            return this._defaultFormat(d, [d, _2e8, this]);
                        }
                    },
                    formatEditing: function (_2ea, _2eb) {},
                    getNode: function (_2ec) {
                        return this.view.getCellNode(_2ec, this.index);
                    },
                    getHeaderNode: function () {
                        return this.view.getHeaderCellNode(this.index);
                    },
                    getEditNode: function (_2ed) {
                        return (this.getNode(_2ed) || 0).firstChild || 0;
                    },
                    canResize: function () {
                        var uw = this.unitWidth;
                        return uw && (uw !== "auto");
                    },
                    isFlex: function () {
                        var uw = this.unitWidth;
                        return uw && lang.isString(uw) && (uw == "auto" || uw.slice(-1) == "%");
                    },
                    applyEdit: function (_2ee, _2ef) {
                        this.grid.edit.applyCellEdit(_2ee, this, _2ef);
                    },
                    cancelEdit: function (_2f0) {
                        this.grid.doCancelEdit(_2f0);
                    },
                    _onEditBlur: function (_2f1) {
                        if (this.grid.edit.isEditCell(_2f1, this.index)) {
                            this.grid.edit.apply();
                        }
                    },
                    registerOnBlur: function (_2f2, _2f3) {
                        if (this.commitOnBlur) {
                            _2db.connect(_2f2, "onblur", function (e) {
                                setTimeout(lang.hitch(this, "_onEditBlur", _2f3), 250);
                            });
                        }
                    },
                    needFormatNode: function (_2f4, _2f5) {
                        this._formatPending = true;
                        _2e3(this, "_formatNode", _2f4, _2f5);
                    },
                    cancelFormatNode: function () {
                        this._formatPending = false;
                    },
                    _formatNode: function (_2f6, _2f7) {
                        if (this._formatPending) {
                            this._formatPending = false;
                            if (!has("ie")) {
                                dom.setSelectable(this.grid.domNode, true);
                            }
                            this.formatNode(this.getEditNode(_2f7), _2f6, _2f7);
                        }
                    },
                    formatNode: function (_2f8, _2f9, _2fa) {
                        if (has("ie")) {
                            _2e3(this, "focus", _2fa, _2f8);
                        } else {
                            this.focus(_2fa, _2f8);
                        }
                    },
                    dispatchEvent: function (m, e) {
                        if (m in this) {
                            return this[m](e);
                        }
                    },
                    getValue: function (_2fb) {
                        return this.getEditNode(_2fb)[this._valueProp];
                    },
                    setValue: function (_2fc, _2fd) {
                        var n = this.getEditNode(_2fc);
                        if (n) {
                            n[this._valueProp] = _2fd;
                        }
                    },
                    focus: function (_2fe, _2ff) {
                        _2e1(_2ff || this.getEditNode(_2fe));
                    },
                    save: function (_300) {
                        this.value = this.value || this.getValue(_300);
                    },
                    restore: function (_301) {
                        this.setValue(_301, this.value);
                    },
                    _finish: function (_302) {
                        dom.setSelectable(this.grid.domNode, false);
                        this.cancelFormatNode();
                    },
                    apply: function (_303) {
                        this.applyEdit(this.getValue(_303), _303);
                        this._finish(_303);
                    },
                    cancel: function (_304) {
                        this.cancelEdit(_304);
                        this._finish(_304);
                    }
                });
                _2e4.markupFactory = function (node, _305) {
                    var _306 = lang.trim(_2dd.get(node, "formatter") || "");
                    if (_306) {
                        _305.formatter = lang.getObject(_306) || _306;
                    }
                    var get = lang.trim(_2dd.get(node, "get") || "");
                    if (get) {
                        _305.get = lang.getObject(get);
                    }
                    var _307 = function (attr, cell, _308) {
                            var _309 = lang.trim(_2dd.get(node, attr) || "");
                            if (_309) {
                                cell[_308 || attr] = !(_309.toLowerCase() == "false");
                            }
                        };
                    _307("sortDesc", _305);
                    _307("editable", _305);
                    _307("alwaysEditing", _305);
                    _307("noresize", _305);
                    _307("draggable", _305);
                    var _30a = lang.trim(_2dd.get(node, "loadingText") || _2dd.get(node, "defaultValue") || "");
                    if (_30a) {
                        _305.defaultValue = _30a;
                    }
                    var _30b = function (attr, cell, _30c) {
                            var _30d = lang.trim(_2dd.get(node, attr) || "") || undefined;
                            if (_30d) {
                                cell[_30c || attr] = _30d;
                            }
                        };
                    _30b("styles", _305);
                    _30b("headerStyles", _305);
                    _30b("cellStyles", _305);
                    _30b("classes", _305);
                    _30b("headerClasses", _305);
                    _30b("cellClasses", _305);
                };
                var Cell = _2d9("dojox.grid.cells.Cell", _2e4, {
                    constructor: function () {
                        this.keyFilter = this.keyFilter;
                    },
                    keyFilter: null,
                    formatEditing: function (_30e, _30f) {
                        this.needFormatNode(_30e, _30f);
                        return "<input class=\"dojoxGridInput\" type=\"text\" value=\"" + _30e + "\">";
                    },
                    formatNode: function (_310, _311, _312) {
                        this.inherited(arguments);
                        this.registerOnBlur(_310, _312);
                    },
                    doKey: function (e) {
                        if (this.keyFilter) {
                            var key = String.fromCharCode(e.charCode);
                            if (key.search(this.keyFilter) == -1) {
                                _2da.stop(e);
                            }
                        }
                    },
                    _finish: function (_313) {
                        this.inherited(arguments);
                        var n = this.getEditNode(_313);
                        try {
                            util.fire(n, "blur");
                        } catch (e) {}
                    }
                });
                Cell.markupFactory = function (node, _314) {
                    _2e4.markupFactory(node, _314);
                    var _315 = lang.trim(_2dd.get(node, "keyFilter") || "");
                    if (_315) {
                        _314.keyFilter = new RegExp(_315);
                    }
                };
                var _316 = _2d9("dojox.grid.cells.RowIndex", Cell, {
                    name: "Row",
                    postscript: function () {
                        this.editable = false;
                    },
                    get: function (_317) {
                        return _317 + 1;
                    }
                });
                _316.markupFactory = function (node, _318) {
                    Cell.markupFactory(node, _318);
                };
                var _319 = _2d9("dojox.grid.cells.Select", Cell, {
                    options: null,
                    values: null,
                    returnIndex: -1,
                    constructor: function (_31a) {
                        this.values = this.values || this.options;
                    },
                    formatEditing: function (_31b, _31c) {
                        this.needFormatNode(_31b, _31c);
                        var h = ["<select class=\"dojoxGridSelect\">"];
                        for (var i = 0, o, v;
                        ((o = this.options[i]) !== undefined) && ((v = this.values[i]) !== undefined); i++) {
                            v = v.replace ? v.replace(/&/g, "&amp;").replace(/</g, "&lt;") : v;
                            o = o.replace ? o.replace(/&/g, "&amp;").replace(/</g, "&lt;") : o;
                            h.push("<option", (_31b == v ? " selected" : ""), " value=\"" + v + "\"", ">", o, "</option>");
                        }
                        h.push("</select>");
                        return h.join("");
                    },
                    _defaultFormat: function (_31d, _31e) {
                        var v = this.inherited(arguments);
                        if (!this.formatter && this.values && this.options) {
                            var i = _2dc.indexOf(this.values, v);
                            if (i >= 0) {
                                v = this.options[i];
                            }
                        }
                        return v;
                    },
                    getValue: function (_31f) {
                        var n = this.getEditNode(_31f);
                        if (n) {
                            var i = n.selectedIndex,
                                o = n.options[i];
                            return this.returnIndex > -1 ? i : o.value || o.innerHTML;
                        }
                    }
                });
                _319.markupFactory = function (node, cell) {
                    Cell.markupFactory(node, cell);
                    var _320 = lang.trim(_2dd.get(node, "options") || "");
                    if (_320) {
                        var o = _320.split(",");
                        if (o[0] != _320) {
                            cell.options = o;
                        }
                    }
                    var _321 = lang.trim(_2dd.get(node, "values") || "");
                    if (_321) {
                        var v = _321.split(",");
                        if (v[0] != _321) {
                            cell.values = v;
                        }
                    }
                };
                var _322 = _2d9("dojox.grid.cells.AlwaysEdit", Cell, {
                    alwaysEditing: true,
                    _formatNode: function (_323, _324) {
                        this.formatNode(this.getEditNode(_324), _323, _324);
                    },
                    applyStaticValue: function (_325) {
                        var e = this.grid.edit;
                        e.applyCellEdit(this.getValue(_325), this, _325);
                        e.start(this, _325, true);
                    }
                });
                _322.markupFactory = function (node, cell) {
                    Cell.markupFactory(node, cell);
                };
                var Bool = _2d9("dojox.grid.cells.Bool", _322, {
                    _valueProp: "checked",
                    formatEditing: function (_326, _327) {
                        return "<input class=\"dojoxGridInput\" type=\"checkbox\"" + (_326 ? " checked=\"checked\"" : "") + " style=\"width: auto\" />";
                    },
                    doclick: function (e) {
                        if (e.target.tagName == "INPUT") {
                            this.applyStaticValue(e.rowIndex);
                        }
                    }
                });
                Bool.markupFactory = function (node, cell) {
                    _322.markupFactory(node, cell);
                };
                return _2e4;
            });
        },
        "dijit/_Widget": function () {
            define("dijit/_Widget", ["dojo/aspect", "dojo/_base/config", "dojo/_base/connect", "dojo/_base/declare", "dojo/_base/kernel", "dojo/_base/lang", "dojo/query", "dojo/ready", "./registry", "./_WidgetBase", "./_OnDijitClickMixin", "./_FocusMixin", "dojo/uacss", "./hccss"], function (_328, _329, _32a, _32b, _32c, lang, _32d, _32e, _32f, _330, _331, _332) {
                function _333() {};

                function _334(_335) {
                    return function (obj, _336, _337, _338) {
                        if (obj && typeof _336 == "string" && obj[_336] == _333) {
                            return obj.on(_336.substring(2).toLowerCase(), lang.hitch(_337, _338));
                        }
                        return _335.apply(_32a, arguments);
                    };
                };
                _328.around(_32a, "connect", _334);
                if (_32c.connect) {
                    _328.around(_32c, "connect", _334);
                }
                var _339 = _32b("dijit._Widget", [_330, _331, _332], {
                    onClick: _333,
                    onDblClick: _333,
                    onKeyDown: _333,
                    onKeyPress: _333,
                    onKeyUp: _333,
                    onMouseDown: _333,
                    onMouseMove: _333,
                    onMouseOut: _333,
                    onMouseOver: _333,
                    onMouseLeave: _333,
                    onMouseEnter: _333,
                    onMouseUp: _333,
                    constructor: function (_33a) {
                        this._toConnect = {};
                        for (var name in _33a) {
                            if (this[name] === _333) {
                                this._toConnect[name.replace(/^on/, "").toLowerCase()] = _33a[name];
                                delete _33a[name];
                            }
                        }
                    },
                    postCreate: function () {
                        this.inherited(arguments);
                        for (var name in this._toConnect) {
                            this.on(name, this._toConnect[name]);
                        }
                        delete this._toConnect;
                    },
                    on: function (type, func) {
                        if (this[this._onMap(type)] === _333) {
                            return _32a.connect(this.domNode, type.toLowerCase(), this, func);
                        }
                        return this.inherited(arguments);
                    },
                    _setFocusedAttr: function (val) {
                        this._focused = val;
                        this._set("focused", val);
                    },
                    setAttribute: function (attr, _33b) {
                        _32c.deprecated(this.declaredClass + "::setAttribute(attr, value) is deprecated. Use set() instead.", "", "2.0");
                        this.set(attr, _33b);
                    },
                    attr: function (name, _33c) {
                        if (_329.isDebug) {
                            var _33d = arguments.callee._ach || (arguments.callee._ach = {}),
                                _33e = (arguments.callee.caller || "unknown caller").toString();
                            if (!_33d[_33e]) {
                                _32c.deprecated(this.declaredClass + "::attr() is deprecated. Use get() or set() instead, called from " + _33e, "", "2.0");
                                _33d[_33e] = true;
                            }
                        }
                        var args = arguments.length;
                        if (args >= 2 || typeof name === "object") {
                            return this.set.apply(this, arguments);
                        } else {
                            return this.get(name);
                        }
                    },
                    getDescendants: function () {
                        _32c.deprecated(this.declaredClass + "::getDescendants() is deprecated. Use getChildren() instead.", "", "2.0");
                        return this.containerNode ? _32d("[widgetId]", this.containerNode).map(_32f.byNode) : [];
                    },
                    _onShow: function () {
                        this.onShow();
                    },
                    onShow: function () {},
                    onHide: function () {},
                    onClose: function () {
                        return true;
                    }
                });
                if (!_32c.isAsync) {
                    _32e(0, function () {
                        var _33f = ["dijit/_base"];
                        require(_33f);
                    });
                }
                return _339;
            });
        },
        "dijit/_WidgetBase": function () {
            define("dijit/_WidgetBase", ["require", "dojo/_base/array", "dojo/aspect", "dojo/_base/config", "dojo/_base/connect", "dojo/_base/declare", "dojo/dom", "dojo/dom-attr", "dojo/dom-class", "dojo/dom-construct", "dojo/dom-geometry", "dojo/dom-style", "dojo/_base/kernel", "dojo/_base/lang", "dojo/on", "dojo/ready", "dojo/Stateful", "dojo/topic", "dojo/_base/window", "./registry"], function (_340, _341, _342, _343, _344, _345, dom, _346, _347, _348, _349, _34a, _34b, lang, on, _34c, _34d, _34e, win, _34f) {
                if (!_34b.isAsync) {
                    _34c(0, function () {
                        var _350 = ["dijit/_base/manager"];
                        _340(_350);
                    });
                }
                var _351 = {};

                function _352(obj) {
                    var ret = {};
                    for (var attr in obj) {
                        ret[attr.toLowerCase()] = true;
                    }
                    return ret;
                };

                function _353(attr) {
                    return function (val) {
                        _346[val ? "set" : "remove"](this.domNode, attr, val);
                        this._set(attr, val);
                    };
                };
                return _345("dijit._WidgetBase", _34d, {
                    id: "",
                    _setIdAttr: "domNode",
                    lang: "",
                    _setLangAttr: _353("lang"),
                    dir: "",
                    _setDirAttr: _353("dir"),
                    textDir: "",
                    "class": "",
                    _setClassAttr: {
                        node: "domNode",
                        type: "class"
                    },
                    style: "",
                    title: "",
                    tooltip: "",
                    baseClass: "",
                    srcNodeRef: null,
                    domNode: null,
                    containerNode: null,
                    attributeMap: {},
                    _blankGif: _343.blankGif || _340.toUrl("dojo/resources/blank.gif"),
                    postscript: function (_354, _355) {
                        this.create(_354, _355);
                    },
                    create: function (_356, _357) {
                        this.srcNodeRef = dom.byId(_357);
                        this._connects = [];
                        this._supportingWidgets = [];
                        if (this.srcNodeRef && (typeof this.srcNodeRef.id == "string")) {
                            this.id = this.srcNodeRef.id;
                        }
                        if (_356) {
                            this.params = _356;
                            lang.mixin(this, _356);
                        }
                        this.postMixInProperties();
                        if (!this.id) {
                            this.id = _34f.getUniqueId(this.declaredClass.replace(/\./g, "_"));
                        }
                        _34f.add(this);
                        this.buildRendering();
                        if (this.domNode) {
                            this._applyAttributes();
                            var _358 = this.srcNodeRef;
                            if (_358 && _358.parentNode && this.domNode !== _358) {
                                _358.parentNode.replaceChild(this.domNode, _358);
                            }
                        }
                        if (this.domNode) {
                            this.domNode.setAttribute("widgetId", this.id);
                        }
                        this.postCreate();
                        if (this.srcNodeRef && !this.srcNodeRef.parentNode) {
                            delete this.srcNodeRef;
                        }
                        this._created = true;
                    },
                    _applyAttributes: function () {
                        var ctor = this.constructor,
                            list = ctor._setterAttrs;
                        if (!list) {
                            list = (ctor._setterAttrs = []);
                            for (var attr in this.attributeMap) {
                                list.push(attr);
                            }
                            var _359 = ctor.prototype;
                            for (var _35a in _359) {
                                if (_35a in this.attributeMap) {
                                    continue;
                                }
                                var _35b = "_set" + _35a.replace(/^[a-z]|-[a-zA-Z]/g, function (c) {
                                    return c.charAt(c.length - 1).toUpperCase();
                                }) + "Attr";
                                if (_35b in _359) {
                                    list.push(_35a);
                                }
                            }
                        }
                        _341.forEach(list, function (attr) {
                            if (this.params && attr in this.params) {} else {
                                if (this[attr]) {
                                    this.set(attr, this[attr]);
                                }
                            }
                        }, this);
                        for (var _35c in this.params) {
                            this.set(_35c, this[_35c]);
                        }
                    },
                    postMixInProperties: function () {},
                    buildRendering: function () {
                        if (!this.domNode) {
                            this.domNode = this.srcNodeRef || _348.create("div");
                        }
                        if (this.baseClass) {
                            var _35d = this.baseClass.split(" ");
                            if (!this.isLeftToRight()) {
                                _35d = _35d.concat(_341.map(_35d, function (name) {
                                    return name + "Rtl";
                                }));
                            }
                            _347.add(this.domNode, _35d);
                        }
                    },
                    postCreate: function () {},
                    startup: function () {
                        if (this._started) {
                            return;
                        }
                        this._started = true;
                        _341.forEach(this.getChildren(), function (obj) {
                            if (!obj._started && !obj._destroyed && lang.isFunction(obj.startup)) {
                                obj.startup();
                                obj._started = true;
                            }
                        });
                    },
                    destroyRecursive: function (_35e) {
                        this._beingDestroyed = true;
                        this.destroyDescendants(_35e);
                        this.destroy(_35e);
                    },
                    destroy: function (_35f) {
                        this._beingDestroyed = true;
                        this.uninitialize();
                        var c;
                        while ((c = this._connects.pop())) {
                            c.remove();
                        }
                        var w;
                        while ((w = this._supportingWidgets.pop())) {
                            if (w.destroyRecursive) {
                                w.destroyRecursive();
                            } else {
                                if (w.destroy) {
                                    w.destroy();
                                }
                            }
                        }
                        this.destroyRendering(_35f);
                        _34f.remove(this.id);
                        this._destroyed = true;
                    },
                    destroyRendering: function (_360) {
                        if (this.bgIframe) {
                            this.bgIframe.destroy(_360);
                            delete this.bgIframe;
                        }
                        if (this.domNode) {
                            if (_360) {
                                _346.remove(this.domNode, "widgetId");
                            } else {
                                _348.destroy(this.domNode);
                            }
                            delete this.domNode;
                        }
                        if (this.srcNodeRef) {
                            if (!_360) {
                                _348.destroy(this.srcNodeRef);
                            }
                            delete this.srcNodeRef;
                        }
                    },
                    destroyDescendants: function (_361) {
                        _341.forEach(this.getChildren(), function (_362) {
                            if (_362.destroyRecursive) {
                                _362.destroyRecursive(_361);
                            }
                        });
                    },
                    uninitialize: function () {
                        return false;
                    },
                    _setStyleAttr: function (_363) {
                        var _364 = this.domNode;
                        if (lang.isObject(_363)) {
                            _34a.set(_364, _363);
                        } else {
                            if (_364.style.cssText) {
                                _364.style.cssText += "; " + _363;
                            } else {
                                _364.style.cssText = _363;
                            }
                        }
                        this._set("style", _363);
                    },
                    _attrToDom: function (attr, _365, _366) {
                        _366 = arguments.length >= 3 ? _366 : this.attributeMap[attr];
                        _341.forEach(lang.isArray(_366) ? _366 : [_366], function (_367) {
                            var _368 = this[_367.node || _367 || "domNode"];
                            var type = _367.type || "attribute";
                            switch (type) {
                            case "attribute":
                                if (lang.isFunction(_365)) {
                                    _365 = lang.hitch(this, _365);
                                }
                                var _369 = _367.attribute ? _367.attribute : (/^on[A-Z][a-zA-Z]*$/.test(attr) ? attr.toLowerCase() : attr);
                                _346.set(_368, _369, _365);
                                break;
                            case "innerText":
                                _368.innerHTML = "";
                                _368.appendChild(win.doc.createTextNode(_365));
                                break;
                            case "innerHTML":
                                _368.innerHTML = _365;
                                break;
                            case "class":
                                _347.replace(_368, _365, this[attr]);
                                break;
                            }
                        }, this);
                    },
                    get: function (name) {
                        var _36a = this._getAttrNames(name);
                        return this[_36a.g] ? this[_36a.g]() : this[name];
                    },
                    set: function (name, _36b) {
                        if (typeof name === "object") {
                            for (var x in name) {
                                this.set(x, name[x]);
                            }
                            return this;
                        }
                        var _36c = this._getAttrNames(name),
                            _36d = this[_36c.s];
                        if (lang.isFunction(_36d)) {
                            var _36e = _36d.apply(this, Array.prototype.slice.call(arguments, 1));
                        } else {
                            var _36f = this.focusNode && !lang.isFunction(this.focusNode) ? "focusNode" : "domNode",
                                tag = this[_36f].tagName,
                                _370 = _351[tag] || (_351[tag] = _352(this[_36f])),
                                map = name in this.attributeMap ? this.attributeMap[name] : _36c.s in this ? this[_36c.s] : ((_36c.l in _370 && typeof _36b != "function") || /^aria-|^data-|^role$/.test(name)) ? _36f : null;
                            if (map != null) {
                                this._attrToDom(name, _36b, map);
                            }
                            this._set(name, _36b);
                        }
                        return _36e || this;
                    },
                    _attrPairNames: {},
                    _getAttrNames: function (name) {
                        var apn = this._attrPairNames;
                        if (apn[name]) {
                            return apn[name];
                        }
                        var uc = name.replace(/^[a-z]|-[a-zA-Z]/g, function (c) {
                            return c.charAt(c.length - 1).toUpperCase();
                        });
                        return (apn[name] = {
                            n: name + "Node",
                            s: "_set" + uc + "Attr",
                            g: "_get" + uc + "Attr",
                            l: uc.toLowerCase()
                        });
                    },
                    _set: function (name, _371) {
                        var _372 = this[name];
                        this[name] = _371;
                        if (this._watchCallbacks && this._created && _371 !== _372) {
                            this._watchCallbacks(name, _372, _371);
                        }
                    },
                    on: function (type, func) {
                        return _342.after(this, this._onMap(type), func, true);
                    },
                    _onMap: function (type) {
                        var ctor = this.constructor,
                            map = ctor._onMap;
                        if (!map) {
                            map = (ctor._onMap = {});
                            for (var attr in ctor.prototype) {
                                if (/^on/.test(attr)) {
                                    map[attr.replace(/^on/, "").toLowerCase()] = attr;
                                }
                            }
                        }
                        return map[type.toLowerCase()];
                    },
                    toString: function () {
                        return "[Widget " + this.declaredClass + ", " + (this.id || "NO ID") + "]";
                    },
                    getChildren: function () {
                        return this.containerNode ? _34f.findWidgets(this.containerNode) : [];
                    },
                    getParent: function () {
                        return _34f.getEnclosingWidget(this.domNode.parentNode);
                    },
                    connect: function (obj, _373, _374) {
                        var _375 = _344.connect(obj, _373, this, _374);
                        this._connects.push(_375);
                        return _375;
                    },
                    disconnect: function (_376) {
                        var i = _341.indexOf(this._connects, _376);
                        if (i != -1) {
                            _376.remove();
                            this._connects.splice(i, 1);
                        }
                    },
                    subscribe: function (t, _377) {
                        var _378 = _34e.subscribe(t, lang.hitch(this, _377));
                        this._connects.push(_378);
                        return _378;
                    },
                    unsubscribe: function (_379) {
                        this.disconnect(_379);
                    },
                    isLeftToRight: function () {
                        return this.dir ? (this.dir == "ltr") : _349.isBodyLtr();
                    },
                    isFocusable: function () {
                        return this.focus && (_34a.get(this.domNode, "display") != "none");
                    },
                    placeAt: function (_37a, _37b) {
                        if (_37a.declaredClass && _37a.addChild) {
                            _37a.addChild(this, _37b);
                        } else {
                            _348.place(this.domNode, _37a, _37b);
                        }
                        return this;
                    },
                    getTextDir: function (text, _37c) {
                        return _37c;
                    },
                    applyTextDir: function () {},
                    defer: function (fcn, _37d) {
                        var _37e = setTimeout(lang.hitch(this, function () {
                            _37e = null;
                            if (!this._destroyed) {
                                lang.hitch(this, fcn)();
                            }
                        }), _37d || 0);
                        return {
                            remove: function () {
                                if (_37e) {
                                    clearTimeout(_37e);
                                    _37e = null;
                                }
                                return null;
                            }
                        };
                    }
                });
            });
        },
        "dojo/Stateful": function () {
            define(["./_base/kernel", "./_base/declare", "./_base/lang", "./_base/array"], function (dojo, _37f, lang, _380) {
                return dojo.declare("dojo.Stateful", null, {
                    postscript: function (_381) {
                        if (_381) {
                            lang.mixin(this, _381);
                        }
                    },
                    get: function (name) {
                        return this[name];
                    },
                    set: function (name, _382) {
                        if (typeof name === "object") {
                            for (var x in name) {
                                this.set(x, name[x]);
                            }
                            return this;
                        }
                        var _383 = this[name];
                        this[name] = _382;
                        if (this._watchCallbacks) {
                            this._watchCallbacks(name, _383, _382);
                        }
                        return this;
                    },
                    watch: function (name, _384) {
                        var _385 = this._watchCallbacks;
                        if (!_385) {
                            var self = this;
                            _385 = this._watchCallbacks = function (name, _386, _387, _388) {
                                var _389 = function (_38a) {
                                        if (_38a) {
                                            _38a = _38a.slice();
                                            for (var i = 0, l = _38a.length; i < l; i++) {
                                                try {
                                                    _38a[i].call(self, name, _386, _387);
                                                } catch (e) {
                                                    console.error(e);
                                                }
                                            }
                                        }
                                    };
                                _389(_385["_" + name]);
                                if (!_388) {
                                    _389(_385["*"]);
                                }
                            };
                        }
                        if (!_384 && typeof name === "function") {
                            _384 = name;
                            name = "*";
                        } else {
                            name = "_" + name;
                        }
                        var _38b = _385[name];
                        if (typeof _38b !== "object") {
                            _38b = _385[name] = [];
                        }
                        _38b.push(_384);
                        return {
                            unwatch: function () {
                                _38b.splice(_380.indexOf(_38b, _384), 1);
                            }
                        };
                    }
                });
            });
        },
        "dijit/_OnDijitClickMixin": function () {
            define("dijit/_OnDijitClickMixin", ["dojo/on", "dojo/_base/array", "dojo/keys", "dojo/_base/declare", "dojo/_base/sniff", "dojo/_base/unload", "dojo/_base/window"], function (on, _38c, keys, _38d, has, _38e, win) {
                var _38f = null;
                if (has("ie")) {
                    (function () {
                        var _390 = function (evt) {
                                _38f = evt.srcElement;
                            };
                        win.doc.attachEvent("onkeydown", _390);
                        _38e.addOnWindowUnload(function () {
                            win.doc.detachEvent("onkeydown", _390);
                        });
                    })();
                } else {
                    win.doc.addEventListener("keydown", function (evt) {
                        _38f = evt.target;
                    }, true);
                }
                var _391 = function (node, _392) {
                        if (/input|button/i.test(node.nodeName)) {
                            return on(node, "click", _392);
                        } else {
                            function _393(e) {
                                return (e.keyCode == keys.ENTER || e.keyCode == keys.SPACE) && !e.ctrlKey && !e.shiftKey && !e.altKey && !e.metaKey;
                            };
                            var _394 = [on(node, "keypress", function (e) {
                                if (_393(e)) {
                                    _38f = e.target;
                                    e.preventDefault();
                                }
                            }), on(node, "keyup", function (e) {
                                if (_393(e) && e.target == _38f) {
                                    _38f = null;
                                    _392.call(this, e);
                                }
                            }), on(node, "click", function (e) {
                                _392.call(this, e);
                            })];
                            return {
                                remove: function () {
                                    _38c.forEach(_394, function (h) {
                                        h.remove();
                                    });
                                }
                            };
                        }
                    };
                return _38d("dijit._OnDijitClickMixin", null, {
                    connect: function (obj, _395, _396) {
                        return this.inherited(arguments, [obj, _395 == "ondijitclick" ? _391 : _395, _396]);
                    }
                });
            });
        },
        "dijit/_FocusMixin": function () {
            define("dijit/_FocusMixin", ["./focus", "./_WidgetBase", "dojo/_base/declare", "dojo/_base/lang"], function (_397, _398, _399, lang) {
                lang.extend(_398, {
                    focused: false,
                    onFocus: function () {},
                    onBlur: function () {},
                    _onFocus: function () {
                        this.onFocus();
                    },
                    _onBlur: function () {
                        this.onBlur();
                    }
                });
                return _399("dijit._FocusMixin", null, {
                    _focusManager: _397
                });
            });
        },
        "dijit/focus": function () {
            define("dijit/focus", ["dojo/aspect", "dojo/_base/declare", "dojo/dom", "dojo/dom-attr", "dojo/dom-construct", "dojo/Evented", "dojo/_base/lang", "dojo/on", "dojo/ready", "dojo/_base/sniff", "dojo/Stateful", "dojo/_base/unload", "dojo/_base/window", "dojo/window", "./a11y", "./registry", "."], function (_39a, _39b, dom, _39c, _39d, _39e, lang, on, _39f, has, _3a0, _3a1, win, _3a2, a11y, _3a3, _3a4) {
                var _3a5 = _39b([_3a0, _39e], {
                    curNode: null,
                    activeStack: [],
                    constructor: function () {
                        var _3a6 = lang.hitch(this, function (node) {
                            if (dom.isDescendant(this.curNode, node)) {
                                this.set("curNode", null);
                            }
                            if (dom.isDescendant(this.prevNode, node)) {
                                this.set("prevNode", null);
                            }
                        });
                        _39a.before(_39d, "empty", _3a6);
                        _39a.before(_39d, "destroy", _3a6);
                    },
                    registerIframe: function (_3a7) {
                        return this.registerWin(_3a7.contentWindow, _3a7);
                    },
                    registerWin: function (_3a8, _3a9) {
                        var _3aa = this;
                        var _3ab = function (evt) {
                                _3aa._justMouseDowned = true;
                                setTimeout(function () {
                                    _3aa._justMouseDowned = false;
                                }, 0);
                                if (has("ie") && evt && evt.srcElement && evt.srcElement.parentNode == null) {
                                    return;
                                }
                                _3aa._onTouchNode(_3a9 || evt.target || evt.srcElement, "mouse");
                            };
                        var doc = has("ie") ? _3a8.document.documentElement : _3a8.document;
                        if (doc) {
                            if (has("ie")) {
                                _3a8.document.body.attachEvent("onmousedown", _3ab);
                                var _3ac = function (evt) {
                                        var tag = evt.srcElement.tagName.toLowerCase();
                                        if (tag == "#document" || tag == "body") {
                                            return;
                                        }
                                        if (a11y.isTabNavigable(evt.srcElement)) {
                                            _3aa._onFocusNode(_3a9 || evt.srcElement);
                                        } else {
                                            _3aa._onTouchNode(_3a9 || evt.srcElement);
                                        }
                                    };
                                doc.attachEvent("onactivate", _3ac);
                                var _3ad = function (evt) {
                                        _3aa._onBlurNode(_3a9 || evt.srcElement);
                                    };
                                doc.attachEvent("ondeactivate", _3ad);
                                return {
                                    remove: function () {
                                        _3a8.document.detachEvent("onmousedown", _3ab);
                                        doc.detachEvent("onactivate", _3ac);
                                        doc.detachEvent("ondeactivate", _3ad);
                                        doc = null;
                                    }
                                };
                            } else {
                                doc.body.addEventListener("mousedown", _3ab, true);
                                doc.body.addEventListener("touchstart", _3ab, true);
                                var _3ae = function (evt) {
                                        _3aa._onFocusNode(_3a9 || evt.target);
                                    };
                                doc.addEventListener("focus", _3ae, true);
                                var _3af = function (evt) {
                                        _3aa._onBlurNode(_3a9 || evt.target);
                                    };
                                doc.addEventListener("blur", _3af, true);
                                return {
                                    remove: function () {
                                        doc.body.removeEventListener("mousedown", _3ab, true);
                                        doc.body.removeEventListener("touchstart", _3ab, true);
                                        doc.removeEventListener("focus", _3ae, true);
                                        doc.removeEventListener("blur", _3af, true);
                                        doc = null;
                                    }
                                };
                            }
                        }
                    },
                    _onBlurNode: function () {
                        this.set("prevNode", this.curNode);
                        this.set("curNode", null);
                        if (this._justMouseDowned) {
                            return;
                        }
                        if (this._clearActiveWidgetsTimer) {
                            clearTimeout(this._clearActiveWidgetsTimer);
                        }
                        this._clearActiveWidgetsTimer = setTimeout(lang.hitch(this, function () {
                            delete this._clearActiveWidgetsTimer;
                            this._setStack([]);
                            this.prevNode = null;
                        }), 100);
                    },
                    _onTouchNode: function (node, by) {
                        if (this._clearActiveWidgetsTimer) {
                            clearTimeout(this._clearActiveWidgetsTimer);
                            delete this._clearActiveWidgetsTimer;
                        }
                        var _3b0 = [];
                        try {
                            while (node) {
                                var _3b1 = _39c.get(node, "dijitPopupParent");
                                if (_3b1) {
                                    node = _3a3.byId(_3b1).domNode;
                                } else {
                                    if (node.tagName && node.tagName.toLowerCase() == "body") {
                                        if (node === win.body()) {
                                            break;
                                        }
                                        node = _3a2.get(node.ownerDocument).frameElement;
                                    } else {
                                        var id = node.getAttribute && node.getAttribute("widgetId"),
                                            _3b2 = id && _3a3.byId(id);
                                        if (_3b2 && !(by == "mouse" && _3b2.get("disabled"))) {
                                            _3b0.unshift(id);
                                        }
                                        node = node.parentNode;
                                    }
                                }
                            }
                        } catch (e) {}
                        this._setStack(_3b0, by);
                    },
                    _onFocusNode: function (node) {
                        if (!node) {
                            return;
                        }
                        if (node.nodeType == 9) {
                            return;
                        }
                        this._onTouchNode(node);
                        if (node == this.curNode) {
                            return;
                        }
                        this.set("curNode", node);
                    },
                    _setStack: function (_3b3, by) {
                        var _3b4 = this.activeStack;
                        this.set("activeStack", _3b3);
                        for (var _3b5 = 0; _3b5 < Math.min(_3b4.length, _3b3.length); _3b5++) {
                            if (_3b4[_3b5] != _3b3[_3b5]) {
                                break;
                            }
                        }
                        var _3b6;
                        for (var i = _3b4.length - 1; i >= _3b5; i--) {
                            _3b6 = _3a3.byId(_3b4[i]);
                            if (_3b6) {
                                _3b6._hasBeenBlurred = true;
                                _3b6.set("focused", false);
                                if (_3b6._focusManager == this) {
                                    _3b6._onBlur(by);
                                }
                                this.emit("widget-blur", _3b6, by);
                            }
                        }
                        for (i = _3b5; i < _3b3.length; i++) {
                            _3b6 = _3a3.byId(_3b3[i]);
                            if (_3b6) {
                                _3b6.set("focused", true);
                                if (_3b6._focusManager == this) {
                                    _3b6._onFocus(by);
                                }
                                this.emit("widget-focus", _3b6, by);
                            }
                        }
                    },
                    focus: function (node) {
                        if (node) {
                            try {
                                node.focus();
                            } catch (e) {}
                        }
                    }
                });
                var _3b7 = new _3a5();
                _39f(function () {
                    var _3b8 = _3b7.registerWin(win.doc.parentWindow || win.doc.defaultView);
                    if (has("ie")) {
                        _3a1.addOnWindowUnload(function () {
                            _3b8.remove();
                            _3b8 = null;
                        });
                    }
                });
                _3a4.focus = function (node) {
                    _3b7.focus(node);
                };
                for (var attr in _3b7) {
                    if (!/^_/.test(attr)) {
                        _3a4.focus[attr] = typeof _3b7[attr] == "function" ? lang.hitch(_3b7, attr) : _3b7[attr];
                    }
                }
                _3b7.watch(function (attr, _3b9, _3ba) {
                    _3a4.focus[attr] = _3ba;
                });
                return _3b7;
            });
        },
        "dojo/window": function () {
            define(["./_base/lang", "./_base/sniff", "./_base/window", "./dom", "./dom-geometry", "./dom-style"], function (lang, has, _3bb, dom, geom, _3bc) {
                var _3bd = lang.getObject("dojo.window", true);
                _3bd.getBox = function () {
                    var _3be = (_3bb.doc.compatMode == "BackCompat") ? _3bb.body() : _3bb.doc.documentElement,
                        _3bf = geom.docScroll(),
                        w, h;
                    if (has("touch")) {
                        var _3c0 = _3bb.doc.parentWindow || _3bb.doc.defaultView;
                        w = _3c0.innerWidth || _3be.clientWidth;
                        h = _3c0.innerHeight || _3be.clientHeight;
                    } else {
                        w = _3be.clientWidth;
                        h = _3be.clientHeight;
                    }
                    return {
                        l: _3bf.x,
                        t: _3bf.y,
                        w: w,
                        h: h
                    };
                };
                _3bd.get = function (doc) {
                    if (has("ie") && _3bd !== document.parentWindow) {
                        doc.parentWindow.execScript("document._parentWindow = window;", "Javascript");
                        var win = doc._parentWindow;
                        doc._parentWindow = null;
                        return win;
                    }
                    return doc.parentWindow || doc.defaultView;
                };
                _3bd.scrollIntoView = function (node, pos) {
                    try {
                        node = dom.byId(node);
                        var doc = node.ownerDocument || _3bb.doc,
                            body = doc.body || _3bb.body(),
                            html = doc.documentElement || body.parentNode,
                            isIE = has("ie"),
                            isWK = has("webkit");
                        if ((!(has("mozilla") || isIE || isWK || has("opera")) || node == body || node == html) && (typeof node.scrollIntoView != "undefined")) {
                            node.scrollIntoView(false);
                            return;
                        }
                        var _3c1 = doc.compatMode == "BackCompat",
                            _3c2 = (isIE >= 9 && node.ownerDocument.parentWindow.frameElement) ? ((html.clientHeight > 0 && html.clientWidth > 0 && (body.clientHeight == 0 || body.clientWidth == 0 || body.clientHeight > html.clientHeight || body.clientWidth > html.clientWidth)) ? html : body) : (_3c1 ? body : html),
                            _3c3 = isWK ? body : _3c2,
                            _3c4 = _3c2.clientWidth,
                            _3c5 = _3c2.clientHeight,
                            rtl = !geom.isBodyLtr(),
                            _3c6 = pos || geom.position(node),
                            el = node.parentNode,
                            _3c7 = function (el) {
                                return ((isIE <= 6 || (isIE && _3c1)) ? false : (_3bc.get(el, "position").toLowerCase() == "fixed"));
                            };
                        if (_3c7(node)) {
                            return;
                        }
                        while (el) {
                            if (el == body) {
                                el = _3c3;
                            }
                            var _3c8 = geom.position(el),
                                _3c9 = _3c7(el);
                            if (el == _3c3) {
                                _3c8.w = _3c4;
                                _3c8.h = _3c5;
                                if (_3c3 == html && isIE && rtl) {
                                    _3c8.x += _3c3.offsetWidth - _3c8.w;
                                }
                                if (_3c8.x < 0 || !isIE) {
                                    _3c8.x = 0;
                                }
                                if (_3c8.y < 0 || !isIE) {
                                    _3c8.y = 0;
                                }
                            } else {
                                var pb = geom.getPadBorderExtents(el);
                                _3c8.w -= pb.w;
                                _3c8.h -= pb.h;
                                _3c8.x += pb.l;
                                _3c8.y += pb.t;
                                var _3ca = el.clientWidth,
                                    _3cb = _3c8.w - _3ca;
                                if (_3ca > 0 && _3cb > 0) {
                                    _3c8.w = _3ca;
                                    _3c8.x += (rtl && (isIE || el.clientLeft > pb.l)) ? _3cb : 0;
                                }
                                _3ca = el.clientHeight;
                                _3cb = _3c8.h - _3ca;
                                if (_3ca > 0 && _3cb > 0) {
                                    _3c8.h = _3ca;
                                }
                            }
                            if (_3c9) {
                                if (_3c8.y < 0) {
                                    _3c8.h += _3c8.y;
                                    _3c8.y = 0;
                                }
                                if (_3c8.x < 0) {
                                    _3c8.w += _3c8.x;
                                    _3c8.x = 0;
                                }
                                if (_3c8.y + _3c8.h > _3c5) {
                                    _3c8.h = _3c5 - _3c8.y;
                                }
                                if (_3c8.x + _3c8.w > _3c4) {
                                    _3c8.w = _3c4 - _3c8.x;
                                }
                            }
                            var l = _3c6.x - _3c8.x,
                                t = _3c6.y - Math.max(_3c8.y, 0),
                                r = l + _3c6.w - _3c8.w,
                                bot = t + _3c6.h - _3c8.h;
                            if (r * l > 0) {
                                var s = Math[l < 0 ? "max" : "min"](l, r);
                                if (rtl && ((isIE == 8 && !_3c1) || isIE >= 9)) {
                                    s = -s;
                                }
                                _3c6.x += el.scrollLeft;
                                el.scrollLeft += s;
                                _3c6.x -= el.scrollLeft;
                            }
                            if (bot * t > 0) {
                                _3c6.y += el.scrollTop;
                                el.scrollTop += Math[t < 0 ? "max" : "min"](t, bot);
                                _3c6.y -= el.scrollTop;
                            }
                            el = (el != _3c3) && !_3c9 && el.parentNode;
                        }
                    } catch (error) {
                        console.error("scrollIntoView: " + error);
                        node.scrollIntoView(false);
                    }
                };
                return _3bd;
            });
        },
        "dijit/a11y": function () {
            define("dijit/a11y", ["dojo/_base/array", "dojo/_base/config", "dojo/_base/declare", "dojo/dom", "dojo/dom-attr", "dojo/dom-style", "dojo/_base/sniff", "./_base/manager", "."], function (_3cc, _3cd, _3ce, dom, _3cf, _3d0, has, _3d1, _3d2) {
                var _3d3 = (_3d2._isElementShown = function (elem) {
                    var s = _3d0.get(elem);
                    return (s.visibility != "hidden") && (s.visibility != "collapsed") && (s.display != "none") && (_3cf.get(elem, "type") != "hidden");
                });
                _3d2.hasDefaultTabStop = function (elem) {
                    switch (elem.nodeName.toLowerCase()) {
                    case "a":
                        return _3cf.has(elem, "href");
                    case "area":
                    case "button":
                    case "input":
                    case "object":
                    case "select":
                    case "textarea":
                        return true;
                    case "iframe":
                        var body;
                        try {
                            var _3d4 = elem.contentDocument;
                            if ("designMode" in _3d4 && _3d4.designMode == "on") {
                                return true;
                            }
                            body = _3d4.body;
                        } catch (e1) {
                            try {
                                body = elem.contentWindow.document.body;
                            } catch (e2) {
                                return false;
                            }
                        }
                        return body && (body.contentEditable == "true" || (body.firstChild && body.firstChild.contentEditable == "true"));
                    default:
                        return elem.contentEditable == "true";
                    }
                };
                var _3d5 = (_3d2.isTabNavigable = function (elem) {
                    if (_3cf.get(elem, "disabled")) {
                        return false;
                    } else {
                        if (_3cf.has(elem, "tabIndex")) {
                            return _3cf.get(elem, "tabIndex") >= 0;
                        } else {
                            return _3d2.hasDefaultTabStop(elem);
                        }
                    }
                });
                _3d2._getTabNavigable = function (root) {
                    var _3d6, last, _3d7, _3d8, _3d9, _3da, _3db = {};

                    function _3dc(node) {
                        return node && node.tagName.toLowerCase() == "input" && node.type && node.type.toLowerCase() == "radio" && node.name && node.name.toLowerCase();
                    };
                    var _3dd = function (_3de) {
                            for (var _3df = _3de.firstChild; _3df; _3df = _3df.nextSibling) {
                                if (_3df.nodeType != 1 || (has("ie") && _3df.scopeName !== "HTML") || !_3d3(_3df)) {
                                    continue;
                                }
                                if (_3d5(_3df)) {
                                    var _3e0 = _3cf.get(_3df, "tabIndex");
                                    if (!_3cf.has(_3df, "tabIndex") || _3e0 == 0) {
                                        if (!_3d6) {
                                            _3d6 = _3df;
                                        }
                                        last = _3df;
                                    } else {
                                        if (_3e0 > 0) {
                                            if (!_3d7 || _3e0 < _3d8) {
                                                _3d8 = _3e0;
                                                _3d7 = _3df;
                                            }
                                            if (!_3d9 || _3e0 >= _3da) {
                                                _3da = _3e0;
                                                _3d9 = _3df;
                                            }
                                        }
                                    }
                                    var rn = _3dc(_3df);
                                    if (_3cf.get(_3df, "checked") && rn) {
                                        _3db[rn] = _3df;
                                    }
                                }
                                if (_3df.nodeName.toUpperCase() != "SELECT") {
                                    _3dd(_3df);
                                }
                            }
                        };
                    if (_3d3(root)) {
                        _3dd(root);
                    }
                    function rs(node) {
                        return _3db[_3dc(node)] || node;
                    };
                    return {
                        first: rs(_3d6),
                        last: rs(last),
                        lowest: rs(_3d7),
                        highest: rs(_3d9)
                    };
                };
                _3d2.getFirstInTabbingOrder = function (root) {
                    var _3e1 = _3d2._getTabNavigable(dom.byId(root));
                    return _3e1.lowest ? _3e1.lowest : _3e1.first;
                };
                _3d2.getLastInTabbingOrder = function (root) {
                    var _3e2 = _3d2._getTabNavigable(dom.byId(root));
                    return _3e2.last ? _3e2.last : _3e2.highest;
                };
                return {
                    hasDefaultTabStop: _3d2.hasDefaultTabStop,
                    isTabNavigable: _3d2.isTabNavigable,
                    _getTabNavigable: _3d2._getTabNavigable,
                    getFirstInTabbingOrder: _3d2.getFirstInTabbingOrder,
                    getLastInTabbingOrder: _3d2.getLastInTabbingOrder
                };
            });
        },
        "dijit/_base/manager": function () {
            define("dijit/_base/manager", ["dojo/_base/array", "dojo/_base/config", "../registry", ".."], function (_3e3, _3e4, _3e5, _3e6) {
                _3e3.forEach(["byId", "getUniqueId", "findWidgets", "_destroyAll", "byNode", "getEnclosingWidget"], function (name) {
                    _3e6[name] = _3e5[name];
                });
                _3e6.defaultDuration = _3e4["defaultDuration"] || 200;
                return _3e6;
            });
        },
        "dojo/uacss": function () {
            define(["./dom-geometry", "./_base/lang", "./ready", "./_base/sniff", "./_base/window"], function (_3e7, lang, _3e8, has, _3e9) {
                var html = _3e9.doc.documentElement,
                    ie = has("ie"),
                    _3ea = has("opera"),
                    maj = Math.floor,
                    ff = has("ff"),
                    _3eb = _3e7.boxModel.replace(/-/, ""),
                    _3ec = {
                        "dj_ie": ie,
                        "dj_ie6": maj(ie) == 6,
                        "dj_ie7": maj(ie) == 7,
                        "dj_ie8": maj(ie) == 8,
                        "dj_ie9": maj(ie) == 9,
                        "dj_quirks": has("quirks"),
                        "dj_iequirks": ie && has("quirks"),
                        "dj_opera": _3ea,
                        "dj_khtml": has("khtml"),
                        "dj_webkit": has("webkit"),
                        "dj_safari": has("safari"),
                        "dj_chrome": has("chrome"),
                        "dj_gecko": has("mozilla"),
                        "dj_ff3": maj(ff) == 3
                    };
                _3ec["dj_" + _3eb] = true;
                var _3ed = "";
                for (var clz in _3ec) {
                    if (_3ec[clz]) {
                        _3ed += clz + " ";
                    }
                }
                html.className = lang.trim(html.className + " " + _3ed);
                _3e8(90, function () {
                    if (!_3e7.isBodyLtr()) {
                        var _3ee = "dj_rtl dijitRtl " + _3ed.replace(/ /g, "-rtl ");
                        html.className = lang.trim(html.className + " " + _3ee + "dj_rtl dijitRtl " + _3ed.replace(/ /g, "-rtl "));
                    }
                });
                return has;
            });
        },
        "dijit/hccss": function () {
            define("dijit/hccss", ["require", "dojo/_base/config", "dojo/dom-class", "dojo/dom-construct", "dojo/dom-style", "dojo/ready", "dojo/_base/sniff", "dojo/_base/window"], function (_3ef, _3f0, _3f1, _3f2, _3f3, _3f4, has, win) {
                if (has("ie") || has("mozilla")) {
                    _3f4(90, function () {
                        var div = _3f2.create("div", {
                            id: "a11yTestNode",
                            style: {
                                cssText: "border: 1px solid;" + "border-color:red green;" + "position: absolute;" + "height: 5px;" + "top: -999px;" + "background-image: url(\"" + (_3f0.blankGif || _3ef.toUrl("dojo/resources/blank.gif")) + "\");"
                            }
                        }, win.body());
                        var cs = _3f3.getComputedStyle(div);
                        if (cs) {
                            var _3f5 = cs.backgroundImage;
                            var _3f6 = (cs.borderTopColor == cs.borderRightColor) || (_3f5 != null && (_3f5 == "none" || _3f5 == "url(invalid-url:)"));
                            if (_3f6) {
                                _3f1.add(win.body(), "dijit_a11y");
                            }
                            if (has("ie")) {
                                div.outerHTML = "";
                            } else {
                                win.body().removeChild(div);
                            }
                        }
                    });
                }
            });
        },
        "dojox/grid/_RowSelector": function () {
            define("dojox/grid/_RowSelector", ["dojo/_base/declare", "./_View"], function (_3f7, _3f8) {
                return _3f7("dojox.grid._RowSelector", _3f8, {
                    defaultWidth: "2em",
                    noscroll: true,
                    padBorderWidth: 2,
                    buildRendering: function () {
                        this.inherited("buildRendering", arguments);
                        this.scrollboxNode.style.overflow = "hidden";
                        this.headerNode.style.visibility = "hidden";
                    },
                    getWidth: function () {
                        return this.viewWidth || this.defaultWidth;
                    },
                    buildRowContent: function (_3f9, _3fa) {
                        var w = this.contentWidth || 0;
                        _3fa.innerHTML = "<table class=\"dojoxGridRowbarTable\" style=\"width:" + w + "px;height:1px;\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" role=\"presentation\"><tr><td class=\"dojoxGridRowbarInner\">&nbsp;</td></tr></table>";
                    },
                    renderHeader: function () {},
                    updateRow: function () {},
                    resize: function () {
                        this.adaptHeight();
                    },
                    adaptWidth: function () {
                        if (!("contentWidth" in this) && this.contentNode) {
                            this.contentWidth = this.contentNode.offsetWidth - this.padBorderWidth;
                        }
                    },
                    doStyleRowNode: function (_3fb, _3fc) {
                        var n = ["dojoxGridRowbar dojoxGridNonNormalizedCell"];
                        if (this.grid.rows.isOver(_3fb)) {
                            n.push("dojoxGridRowbarOver");
                        }
                        if (this.grid.selection.isSelected(_3fb)) {
                            n.push("dojoxGridRowbarSelected");
                        }
                        _3fc.className = n.join(" ");
                    },
                    domouseover: function (e) {
                        this.grid.onMouseOverRow(e);
                    },
                    domouseout: function (e) {
                        if (!this.isIntraRowEvent(e)) {
                            this.grid.onMouseOutRow(e);
                        }
                    }
                });
            });
        },
        "dojox/grid/_View": function () {
            require({
                cache: {
                    "url:dojox/grid/resources/View.html": "<div class=\"dojoxGridView\" role=\"presentation\">\n\t<div class=\"dojoxGridHeader\" dojoAttachPoint=\"headerNode\" role=\"presentation\">\n\t\t<div dojoAttachPoint=\"headerNodeContainer\" style=\"width:9000em\" role=\"presentation\">\n\t\t\t<div dojoAttachPoint=\"headerContentNode\" role=\"row\"></div>\n\t\t</div>\n\t</div>\n\t<input type=\"checkbox\" class=\"dojoxGridHiddenFocus\" dojoAttachPoint=\"hiddenFocusNode\" role=\"presentation\" />\n\t<input type=\"checkbox\" class=\"dojoxGridHiddenFocus\" role=\"presentation\" />\n\t<div class=\"dojoxGridScrollbox\" dojoAttachPoint=\"scrollboxNode\" role=\"presentation\">\n\t\t<div class=\"dojoxGridContent\" dojoAttachPoint=\"contentNode\" hidefocus=\"hidefocus\" role=\"presentation\"></div>\n\t</div>\n</div>\n"
                }
            });
            define("dojox/grid/_View", ["dojo", "dijit/registry", "../main", "dojo/_base/declare", "dojo/_base/array", "dojo/_base/lang", "dojo/_base/connect", "dojo/_base/sniff", "dojo/query", "dojo/_base/window", "dojo/text!./resources/View.html", "dojo/dnd/Source", "dijit/_Widget", "dijit/_TemplatedMixin", "dojox/html/metrics", "./util", "dojo/_base/html", "./_Builder", "dojo/dnd/Avatar", "dojo/dnd/Manager"], function (dojo, _3fd, _3fe, _3ff, _400, lang, _401, has, _402, win, _403, _404, _405, _406, _407, util, html, _408, _409) {
                var _40a = function (_40b, _40c) {
                        return _40b.style.cssText == undefined ? _40b.getAttribute("style") : _40b.style.cssText;
                    };
                var _40d = _3ff("dojox.grid._View", [_405, _406], {
                    defaultWidth: "18em",
                    viewWidth: "",
                    templateString: _403,
                    themeable: false,
                    classTag: "dojoxGrid",
                    marginBottom: 0,
                    rowPad: 2,
                    _togglingColumn: -1,
                    _headerBuilderClass: _408._HeaderBuilder,
                    _contentBuilderClass: _408._ContentBuilder,
                    postMixInProperties: function () {
                        this.rowNodes = {};
                    },
                    postCreate: function () {
                        this.connect(this.scrollboxNode, "onscroll", "doscroll");
                        util.funnelEvents(this.contentNode, this, "doContentEvent", ["mouseover", "mouseout", "click", "dblclick", "contextmenu", "mousedown"]);
                        util.funnelEvents(this.headerNode, this, "doHeaderEvent", ["dblclick", "mouseover", "mouseout", "mousemove", "mousedown", "click", "contextmenu"]);
                        this.content = new this._contentBuilderClass(this);
                        this.header = new this._headerBuilderClass(this);
                        if (!this.grid.isLeftToRight()) {
                            this.headerNodeContainer.style.width = "";
                        }
                    },
                    destroy: function () {
                        html.destroy(this.headerNode);
                        delete this.headerNode;
                        for (var i in this.rowNodes) {
                            this._cleanupRowWidgets(this.rowNodes[i]);
                            html.destroy(this.rowNodes[i]);
                        }
                        this.rowNodes = {};
                        if (this.source) {
                            this.source.destroy();
                        }
                        this.inherited(arguments);
                    },
                    focus: function () {
                        if (has("ie") || has("webkit") || has("opera")) {
                            this.hiddenFocusNode.focus();
                        } else {
                            this.scrollboxNode.focus();
                        }
                    },
                    setStructure: function (_40e) {
                        var vs = (this.structure = _40e);
                        if (vs.width && !isNaN(vs.width)) {
                            this.viewWidth = vs.width + "em";
                        } else {
                            this.viewWidth = vs.width || (vs.noscroll ? "auto" : this.viewWidth);
                        }
                        this._onBeforeRow = vs.onBeforeRow ||
                        function () {};
                        this._onAfterRow = vs.onAfterRow ||
                        function () {};
                        this.noscroll = vs.noscroll;
                        if (this.noscroll) {
                            this.scrollboxNode.style.overflow = "hidden";
                        }
                        this.simpleStructure = Boolean(vs.cells.length == 1);
                        this.testFlexCells();
                        this.updateStructure();
                    },
                    _cleanupRowWidgets: function (_40f) {
                        if (_40f) {
                            _400.forEach(_402("[widgetId]", _40f).map(_3fd.byNode), function (w) {
                                if (w._destroyOnRemove) {
                                    w.destroy();
                                    delete w;
                                } else {
                                    if (w.domNode && w.domNode.parentNode) {
                                        w.domNode.parentNode.removeChild(w.domNode);
                                    }
                                }
                            });
                        }
                    },
                    onBeforeRow: function (_410, _411) {
                        this._onBeforeRow(_410, _411);
                        if (_410 >= 0) {
                            this._cleanupRowWidgets(this.getRowNode(_410));
                        }
                    },
                    onAfterRow: function (_412, _413, _414) {
                        this._onAfterRow(_412, _413, _414);
                        var g = this.grid;
                        _400.forEach(_402(".dojoxGridStubNode", _414), function (n) {
                            if (n && n.parentNode) {
                                var lw = n.getAttribute("linkWidget");
                                var _415 = window.parseInt(html.attr(n, "cellIdx"), 10);
                                var _416 = g.getCell(_415);
                                var w = _3fd.byId(lw);
                                if (w) {
                                    n.parentNode.replaceChild(w.domNode, n);
                                    if (!w._started) {
                                        w.startup();
                                    }
                                    dojo.destroy(n);
                                } else {
                                    n.innerHTML = "";
                                }
                            }
                        }, this);
                    },
                    testFlexCells: function () {
                        this.flexCells = false;
                        for (var j = 0, row;
                        (row = this.structure.cells[j]); j++) {
                            for (var i = 0, cell;
                            (cell = row[i]); i++) {
                                cell.view = this;
                                this.flexCells = this.flexCells || cell.isFlex();
                            }
                        }
                        return this.flexCells;
                    },
                    updateStructure: function () {
                        this.header.update();
                        this.content.update();
                    },
                    getScrollbarWidth: function () {
                        var _417 = this.hasVScrollbar();
                        var _418 = html.style(this.scrollboxNode, "overflow");
                        if (this.noscroll || !_418 || _418 == "hidden") {
                            _417 = false;
                        } else {
                            if (_418 == "scroll") {
                                _417 = true;
                            }
                        }
                        return (_417 ? _407.getScrollbar().w : 0);
                    },
                    getColumnsWidth: function () {
                        var h = this.headerContentNode;
                        return h && h.firstChild ? h.firstChild.offsetWidth : 0;
                    },
                    setColumnsWidth: function (_419) {
                        this.headerContentNode.firstChild.style.width = _419 + "px";
                        if (this.viewWidth) {
                            this.viewWidth = _419 + "px";
                        }
                    },
                    getWidth: function () {
                        return this.viewWidth || (this.getColumnsWidth() + this.getScrollbarWidth()) + "px";
                    },
                    getContentWidth: function () {
                        return Math.max(0, html._getContentBox(this.domNode).w - this.getScrollbarWidth()) + "px";
                    },
                    render: function () {
                        this.scrollboxNode.style.height = "";
                        this.renderHeader();
                        if (this._togglingColumn >= 0) {
                            this.setColumnsWidth(this.getColumnsWidth() - this._togglingColumn);
                            this._togglingColumn = -1;
                        }
                        var _41a = this.grid.layout.cells;
                        var _41b = lang.hitch(this, function (node, _41c) {
                            !this.grid.isLeftToRight() && (_41c = !_41c);
                            var inc = _41c ? -1 : 1;
                            var idx = this.header.getCellNodeIndex(node) + inc;
                            var cell = _41a[idx];
                            while (cell && cell.getHeaderNode() && cell.getHeaderNode().style.display == "none") {
                                idx += inc;
                                cell = _41a[idx];
                            }
                            if (cell) {
                                return cell.getHeaderNode();
                            }
                            return null;
                        });
                        if (this.grid.columnReordering && this.simpleStructure) {
                            if (this.source) {
                                this.source.destroy();
                            }
                            var _41d = "dojoxGrid_bottomMarker";
                            var _41e = "dojoxGrid_topMarker";
                            if (this.bottomMarker) {
                                html.destroy(this.bottomMarker);
                            }
                            this.bottomMarker = html.byId(_41d);
                            if (this.topMarker) {
                                html.destroy(this.topMarker);
                            }
                            this.topMarker = html.byId(_41e);
                            if (!this.bottomMarker) {
                                this.bottomMarker = html.create("div", {
                                    "id": _41d,
                                    "class": "dojoxGridColPlaceBottom"
                                }, win.body());
                                this._hide(this.bottomMarker);
                                this.topMarker = html.create("div", {
                                    "id": _41e,
                                    "class": "dojoxGridColPlaceTop"
                                }, win.body());
                                this._hide(this.topMarker);
                            }
                            this.arrowDim = html.contentBox(this.bottomMarker);
                            var _41f = html.contentBox(this.headerContentNode.firstChild.rows[0]).h;
                            this.source = new _404(this.headerContentNode.firstChild.rows[0], {
                                horizontal: true,
                                accept: ["gridColumn_" + this.grid.id],
                                viewIndex: this.index,
                                generateText: false,
                                onMouseDown: lang.hitch(this, function (e) {
                                    this.header.decorateEvent(e);
                                    if ((this.header.overRightResizeArea(e) || this.header.overLeftResizeArea(e)) && this.header.canResize(e) && !this.header.moveable) {
                                        this.header.beginColumnResize(e);
                                    } else {
                                        if (this.grid.headerMenu) {
                                            this.grid.headerMenu.onCancel(true);
                                        }
                                        if (e.button === (has("ie") < 9 ? 1 : 0)) {
                                            _404.prototype.onMouseDown.call(this.source, e);
                                        }
                                    }
                                }),
                                onMouseOver: lang.hitch(this, function (e) {
                                    var src = this.source;
                                    if (src._getChildByEvent(e)) {
                                        _404.prototype.onMouseOver.apply(src, arguments);
                                    }
                                }),
                                _markTargetAnchor: lang.hitch(this, function (_420) {
                                    var src = this.source;
                                    if (src.current == src.targetAnchor && src.before == _420) {
                                        return;
                                    }
                                    if (src.targetAnchor && _41b(src.targetAnchor, src.before)) {
                                        src._removeItemClass(_41b(src.targetAnchor, src.before), src.before ? "After" : "Before");
                                    }
                                    _404.prototype._markTargetAnchor.call(src, _420);
                                    var _421 = _420 ? src.targetAnchor : _41b(src.targetAnchor, src.before);
                                    var _422 = 0;
                                    if (!_421) {
                                        _421 = src.targetAnchor;
                                        _422 = html.contentBox(_421).w + this.arrowDim.w / 2 + 2;
                                    }
                                    var pos = html.position(_421, true);
                                    var left = Math.floor(pos.x - this.arrowDim.w / 2 + _422);
                                    html.style(this.bottomMarker, "visibility", "visible");
                                    html.style(this.topMarker, "visibility", "visible");
                                    html.style(this.bottomMarker, {
                                        "left": left + "px",
                                        "top": (_41f + pos.y) + "px"
                                    });
                                    html.style(this.topMarker, {
                                        "left": left + "px",
                                        "top": (pos.y - this.arrowDim.h) + "px"
                                    });
                                    if (src.targetAnchor && _41b(src.targetAnchor, src.before)) {
                                        src._addItemClass(_41b(src.targetAnchor, src.before), src.before ? "After" : "Before");
                                    }
                                }),
                                _unmarkTargetAnchor: lang.hitch(this, function () {
                                    var src = this.source;
                                    if (!src.targetAnchor) {
                                        return;
                                    }
                                    if (src.targetAnchor && _41b(src.targetAnchor, src.before)) {
                                        src._removeItemClass(_41b(src.targetAnchor, src.before), src.before ? "After" : "Before");
                                    }
                                    this._hide(this.bottomMarker);
                                    this._hide(this.topMarker);
                                    _404.prototype._unmarkTargetAnchor.call(src);
                                }),
                                destroy: lang.hitch(this, function () {
                                    _401.disconnect(this._source_conn);
                                    _401.unsubscribe(this._source_sub);
                                    _404.prototype.destroy.call(this.source);
                                    if (this.bottomMarker) {
                                        html.destroy(this.bottomMarker);
                                        delete this.bottomMarker;
                                    }
                                    if (this.topMarker) {
                                        html.destroy(this.topMarker);
                                        delete this.topMarker;
                                    }
                                }),
                                onDndCancel: lang.hitch(this, function () {
                                    _404.prototype.onDndCancel.call(this.source);
                                    this._hide(this.bottomMarker);
                                    this._hide(this.topMarker);
                                })
                            });
                            this._source_conn = _401.connect(this.source, "onDndDrop", this, "_onDndDrop");
                            this._source_sub = _401.subscribe("/dnd/drop/before", this, "_onDndDropBefore");
                            this.source.startup();
                        }
                    },
                    _hide: function (node) {
                        html.style(node, {
                            top: "-10000px",
                            "visibility": "hidden"
                        });
                    },
                    _onDndDropBefore: function (_423, _424, copy) {
                        if (dojo.dnd.manager().target !== this.source) {
                            return;
                        }
                        this.source._targetNode = this.source.targetAnchor;
                        this.source._beforeTarget = this.source.before;
                        var _425 = this.grid.views.views;
                        var _426 = _425[_423.viewIndex];
                        var _427 = _425[this.index];
                        if (_427 != _426) {
                            _426.convertColPctToFixed();
                            _427.convertColPctToFixed();
                        }
                    },
                    _onDndDrop: function (_428, _429, copy) {
                        if (dojo.dnd.manager().target !== this.source) {
                            if (dojo.dnd.manager().source === this.source) {
                                this._removingColumn = true;
                            }
                            return;
                        }
                        this._hide(this.bottomMarker);
                        this._hide(this.topMarker);
                        var _42a = function (n) {
                                return n ? html.attr(n, "idx") : null;
                            };
                        var w = html.marginBox(_429[0]).w;
                        if (_428.viewIndex !== this.index) {
                            var _42b = this.grid.views.views;
                            var _42c = _42b[_428.viewIndex];
                            var _42d = _42b[this.index];
                            if (_42c.viewWidth && _42c.viewWidth != "auto") {
                                _42c.setColumnsWidth(_42c.getColumnsWidth() - w);
                            }
                            if (_42d.viewWidth && _42d.viewWidth != "auto") {
                                _42d.setColumnsWidth(_42d.getColumnsWidth());
                            }
                        }
                        var stn = this.source._targetNode;
                        var stb = this.source._beforeTarget;
                        !this.grid.isLeftToRight() && (stb = !stb);
                        var _42e = this.grid.layout;
                        var idx = this.index;
                        delete this.source._targetNode;
                        delete this.source._beforeTarget;
                        _42e.moveColumn(_428.viewIndex, idx, _42a(_429[0]), _42a(stn), stb);
                    },
                    renderHeader: function () {
                        this.headerContentNode.innerHTML = this.header.generateHtml(this._getHeaderContent);
                        if (this.flexCells) {
                            this.contentWidth = this.getContentWidth();
                            this.headerContentNode.firstChild.style.width = this.contentWidth;
                        }
                        util.fire(this, "onAfterRow", [-1, this.structure.cells, this.headerContentNode]);
                    },
                    _getHeaderContent: function (_42f) {
                        var n = _42f.name || _42f.grid.getCellName(_42f);
                        if (/^\s+$/.test(n)) {
                            n = "&nbsp;";
                        }
                        var ret = ["<div class=\"dojoxGridSortNode"];
                        if (_42f.index != _42f.grid.getSortIndex()) {
                            ret.push("\">");
                        } else {
                            ret = ret.concat([" ", _42f.grid.sortInfo > 0 ? "dojoxGridSortUp" : "dojoxGridSortDown", "\"><div class=\"dojoxGridArrowButtonChar\">", _42f.grid.sortInfo > 0 ? "&#9650;" : "&#9660;", "</div><div class=\"dojoxGridArrowButtonNode\" role=\"presentation\"></div>", "<div class=\"dojoxGridColCaption\">"]);
                        }
                        ret = ret.concat([n, "</div></div>"]);
                        return ret.join("");
                    },
                    resize: function () {
                        this.adaptHeight();
                        this.adaptWidth();
                    },
                    hasHScrollbar: function (_430) {
                        var _431 = this._hasHScroll || false;
                        if (this._hasHScroll == undefined || _430) {
                            if (this.noscroll) {
                                this._hasHScroll = false;
                            } else {
                                var _432 = html.style(this.scrollboxNode, "overflow");
                                if (_432 == "hidden") {
                                    this._hasHScroll = false;
                                } else {
                                    if (_432 == "scroll") {
                                        this._hasHScroll = true;
                                    } else {
                                        this._hasHScroll = (this.scrollboxNode.offsetWidth - this.getScrollbarWidth() < this.contentNode.offsetWidth);
                                    }
                                }
                            }
                        }
                        if (_431 !== this._hasHScroll) {
                            this.grid.update();
                        }
                        return this._hasHScroll;
                    },
                    hasVScrollbar: function (_433) {
                        var _434 = this._hasVScroll || false;
                        if (this._hasVScroll == undefined || _433) {
                            if (this.noscroll) {
                                this._hasVScroll = false;
                            } else {
                                var _435 = html.style(this.scrollboxNode, "overflow");
                                if (_435 == "hidden") {
                                    this._hasVScroll = false;
                                } else {
                                    if (_435 == "scroll") {
                                        this._hasVScroll = true;
                                    } else {
                                        this._hasVScroll = (this.scrollboxNode.scrollHeight > this.scrollboxNode.clientHeight);
                                    }
                                }
                            }
                        }
                        if (_434 !== this._hasVScroll) {
                            this.grid.update();
                        }
                        return this._hasVScroll;
                    },
                    convertColPctToFixed: function () {
                        var _436 = false;
                        this.grid.initialWidth = "";
                        var _437 = _402("th", this.headerContentNode);
                        var _438 = _400.map(_437, function (c, vIdx) {
                            var w = c.style.width;
                            html.attr(c, "vIdx", vIdx);
                            if (w && w.slice(-1) == "%") {
                                _436 = true;
                            } else {
                                if (w && w.slice(-2) == "px") {
                                    return window.parseInt(w, 10);
                                }
                            }
                            return html.contentBox(c).w;
                        });
                        if (_436) {
                            _400.forEach(this.grid.layout.cells, function (cell, idx) {
                                if (cell.view == this) {
                                    var _439 = cell.view.getHeaderCellNode(cell.index);
                                    if (_439 && html.hasAttr(_439, "vIdx")) {
                                        var vIdx = window.parseInt(html.attr(_439, "vIdx"));
                                        this.setColWidth(idx, _438[vIdx]);
                                        html.removeAttr(_439, "vIdx");
                                    }
                                }
                            }, this);
                            return true;
                        }
                        return false;
                    },
                    adaptHeight: function (_43a) {
                        if (!this.grid._autoHeight) {
                            var h = (this.domNode.style.height && parseInt(this.domNode.style.height.replace(/px/, ""), 10)) || this.domNode.clientHeight;
                            var self = this;
                            var _43b = function () {
                                    var v;
                                    for (var i in self.grid.views.views) {
                                        v = self.grid.views.views[i];
                                        if (v !== self && v.hasHScrollbar()) {
                                            return true;
                                        }
                                    }
                                    return false;
                                };
                            if (_43a || (this.noscroll && _43b())) {
                                h -= _407.getScrollbar().h;
                            }
                            util.setStyleHeightPx(this.scrollboxNode, h);
                        }
                        this.hasVScrollbar(true);
                    },
                    adaptWidth: function () {
                        if (this.flexCells) {
                            this.contentWidth = this.getContentWidth();
                            this.headerContentNode.firstChild.style.width = this.contentWidth;
                        }
                        var w = this.scrollboxNode.offsetWidth - this.getScrollbarWidth();
                        if (!this._removingColumn) {
                            w = Math.max(w, this.getColumnsWidth()) + "px";
                        } else {
                            w = Math.min(w, this.getColumnsWidth()) + "px";
                            this._removingColumn = false;
                        }
                        var cn = this.contentNode;
                        cn.style.width = w;
                        this.hasHScrollbar(true);
                    },
                    setSize: function (w, h) {
                        var ds = this.domNode.style;
                        var hs = this.headerNode.style;
                        if (w) {
                            ds.width = w;
                            hs.width = w;
                        }
                        ds.height = (h >= 0 ? h + "px" : "");
                    },
                    renderRow: function (_43c) {
                        var _43d = this.createRowNode(_43c);
                        this.buildRow(_43c, _43d);
                        return _43d;
                    },
                    createRowNode: function (_43e) {
                        var node = document.createElement("div");
                        node.className = this.classTag + "Row";
                        if (this instanceof _3fe.grid._RowSelector) {
                            html.attr(node, "role", "presentation");
                        } else {
                            html.attr(node, "role", "row");
                            if (this.grid.selectionMode != "none") {
                                node.setAttribute("aria-selected", "false");
                            }
                        }
                        node[util.gridViewTag] = this.id;
                        node[util.rowIndexTag] = _43e;
                        this.rowNodes[_43e] = node;
                        return node;
                    },
                    buildRow: function (_43f, _440) {
                        this.buildRowContent(_43f, _440);
                        this.styleRow(_43f, _440);
                    },
                    buildRowContent: function (_441, _442) {
                        _442.innerHTML = this.content.generateHtml(_441, _441);
                        if (this.flexCells && this.contentWidth) {
                            _442.firstChild.style.width = this.contentWidth;
                        }
                        util.fire(this, "onAfterRow", [_441, this.structure.cells, _442]);
                    },
                    rowRemoved: function (_443) {
                        if (_443 >= 0) {
                            this._cleanupRowWidgets(this.getRowNode(_443));
                        }
                        this.grid.edit.save(this, _443);
                        delete this.rowNodes[_443];
                    },
                    getRowNode: function (_444) {
                        return this.rowNodes[_444];
                    },
                    getCellNode: function (_445, _446) {
                        var row = this.getRowNode(_445);
                        if (row) {
                            return this.content.getCellNode(row, _446);
                        }
                    },
                    getHeaderCellNode: function (_447) {
                        if (this.headerContentNode) {
                            return this.header.getCellNode(this.headerContentNode, _447);
                        }
                    },
                    styleRow: function (_448, _449) {
                        _449._style = _40a(_449);
                        this.styleRowNode(_448, _449);
                    },
                    styleRowNode: function (_44a, _44b) {
                        if (_44b) {
                            this.doStyleRowNode(_44a, _44b);
                        }
                    },
                    doStyleRowNode: function (_44c, _44d) {
                        this.grid.styleRowNode(_44c, _44d);
                    },
                    updateRow: function (_44e) {
                        var _44f = this.getRowNode(_44e);
                        if (_44f) {
                            _44f.style.height = "";
                            this.buildRow(_44e, _44f);
                        }
                        return _44f;
                    },
                    updateRowStyles: function (_450) {
                        this.styleRowNode(_450, this.getRowNode(_450));
                    },
                    lastTop: 0,
                    firstScroll: 0,
                    doscroll: function (_451) {
                        var _452 = this.grid.isLeftToRight();
                        if (this.firstScroll < 2) {
                            if ((!_452 && this.firstScroll == 1) || (_452 && this.firstScroll === 0)) {
                                var s = html.marginBox(this.headerNodeContainer);
                                if (has("ie")) {
                                    this.headerNodeContainer.style.width = s.w + this.getScrollbarWidth() + "px";
                                } else {
                                    if (has("mozilla")) {
                                        this.headerNodeContainer.style.width = s.w - this.getScrollbarWidth() + "px";
                                        this.scrollboxNode.scrollLeft = _452 ? this.scrollboxNode.clientWidth - this.scrollboxNode.scrollWidth : this.scrollboxNode.scrollWidth - this.scrollboxNode.clientWidth;
                                    }
                                }
                            }
                            this.firstScroll++;
                        }
                        this.headerNode.scrollLeft = this.scrollboxNode.scrollLeft;
                        var top = this.scrollboxNode.scrollTop;
                        if (top !== this.lastTop) {
                            this.grid.scrollTo(top);
                        }
                    },
                    setScrollTop: function (_453) {
                        this.lastTop = _453;
                        this.scrollboxNode.scrollTop = _453;
                        return this.scrollboxNode.scrollTop;
                    },
                    doContentEvent: function (e) {
                        if (this.content.decorateEvent(e)) {
                            this.grid.onContentEvent(e);
                        }
                    },
                    doHeaderEvent: function (e) {
                        if (this.header.decorateEvent(e)) {
                            this.grid.onHeaderEvent(e);
                        }
                    },
                    dispatchContentEvent: function (e) {
                        return this.content.dispatchEvent(e);
                    },
                    dispatchHeaderEvent: function (e) {
                        return this.header.dispatchEvent(e);
                    },
                    setColWidth: function (_454, _455) {
                        this.grid.setCellWidth(_454, _455 + "px");
                    },
                    update: function () {
                        if (!this.domNode) {
                            return;
                        }
                        this.content.update();
                        this.grid.update();
                        var left = this.scrollboxNode.scrollLeft;
                        this.scrollboxNode.scrollLeft = left;
                        this.headerNode.scrollLeft = left;
                    }
                });
                var _456 = _3ff("dojox.grid._GridAvatar", _409, {
                    construct: function () {
                        var dd = win.doc;
                        var a = dd.createElement("table");
                        a.cellPadding = a.cellSpacing = "0";
                        a.className = "dojoxGridDndAvatar";
                        a.style.position = "absolute";
                        a.style.zIndex = 1999;
                        a.style.margin = "0px";
                        var b = dd.createElement("tbody");
                        var tr = dd.createElement("tr");
                        var td = dd.createElement("td");
                        var img = dd.createElement("td");
                        tr.className = "dojoxGridDndAvatarItem";
                        img.className = "dojoxGridDndAvatarItemImage";
                        img.style.width = "16px";
                        var _457 = this.manager.source,
                            node;
                        if (_457.creator) {
                            node = _457._normalizedCreator(_457.getItem(this.manager.nodes[0].id).data, "avatar").node;
                        } else {
                            node = this.manager.nodes[0].cloneNode(true);
                            var _458, _459;
                            if (node.tagName.toLowerCase() == "tr") {
                                _458 = dd.createElement("table");
                                _459 = dd.createElement("tbody");
                                _459.appendChild(node);
                                _458.appendChild(_459);
                                node = _458;
                            } else {
                                if (node.tagName.toLowerCase() == "th") {
                                    _458 = dd.createElement("table");
                                    _459 = dd.createElement("tbody");
                                    var r = dd.createElement("tr");
                                    _458.cellPadding = _458.cellSpacing = "0";
                                    r.appendChild(node);
                                    _459.appendChild(r);
                                    _458.appendChild(_459);
                                    node = _458;
                                }
                            }
                        }
                        node.id = "";
                        td.appendChild(node);
                        tr.appendChild(img);
                        tr.appendChild(td);
                        html.style(tr, "opacity", 0.9);
                        b.appendChild(tr);
                        a.appendChild(b);
                        this.node = a;
                        var m = dojo.dnd.manager();
                        this.oldOffsetY = m.OFFSET_Y;
                        m.OFFSET_Y = 1;
                    },
                    destroy: function () {
                        dojo.dnd.manager().OFFSET_Y = this.oldOffsetY;
                        this.inherited(arguments);
                    }
                });
                var _45a = dojo.dnd.manager().makeAvatar;
                dojo.dnd.manager().makeAvatar = function () {
                    var src = this.source;
                    if (src.viewIndex !== undefined && !html.hasClass(win.body(), "dijit_a11y")) {
                        return new _456(this);
                    }
                    return _45a.call(dojo.dnd.manager());
                };
                return _40d;
            });
        },
        "dojo/text": function () {
            define(["./_base/kernel", "require", "./has", "./_base/xhr"], function (dojo, _45b, has, xhr) {
                var _45c;
                if (1) {
                    _45c = function (url, sync, load) {
                        xhr("GET", {
                            url: url,
                            sync: !! sync,
                            load: load
                        });
                    };
                } else {
                    if (_45b.getText) {
                        _45c = _45b.getText;
                    } else {
                        console.error("dojo/text plugin failed to load because loader does not support getText");
                    }
                }
                var _45d = {},
                    _45e = function (text) {
                        if (text) {
                            text = text.replace(/^\s*<\?xml(\s)+version=[\'\"](\d)*.(\d)*[\'\"](\s)*\?>/im, "");
                            var _45f = text.match(/<body[^>]*>\s*([\s\S]+)\s*<\/body>/im);
                            if (_45f) {
                                text = _45f[1];
                            }
                        } else {
                            text = "";
                        }
                        return text;
                    },
                    _460 = {},
                    _461 = {},
                    _462 = {
                        dynamic: true,
                        normalize: function (id, _463) {
                            var _464 = id.split("!"),
                                url = _464[0];
                            return (/^\./.test(url) ? _463(url) : url) + (_464[1] ? "!" + _464[1] : "");
                        },
                        load: function (id, _465, load) {
                            var _466 = id.split("!"),
                                _467 = _466.length > 1,
                                _468 = _466[0],
                                url = _465.toUrl(_466[0]),
                                text = _460,
                                _469 = function (text) {
                                    load(_467 ? _45e(text) : text);
                                };
                            if (_468 in _45d) {
                                text = _45d[_468];
                            } else {
                                if (url in _465.cache) {
                                    text = _465.cache[url];
                                } else {
                                    if (url in _45d) {
                                        text = _45d[url];
                                    }
                                }
                            }
                            if (text === _460) {
                                if (_461[url]) {
                                    _461[url].push(_469);
                                } else {
                                    var _46a = _461[url] = [_469];
                                    _45c(url, !_465.async, function (text) {
                                        _45d[_468] = _45d[url] = text;
                                        for (var i = 0; i < _46a.length;) {
                                            _46a[i++](text);
                                        }
                                        delete _461[url];
                                    });
                                }
                            } else {
                                _469(text);
                            }
                        }
                    };
                dojo.cache = function (_46b, url, _46c) {
                    var key;
                    if (typeof _46b == "string") {
                        if (/\//.test(_46b)) {
                            key = _46b;
                            _46c = url;
                        } else {
                            key = _45b.toUrl(_46b.replace(/\./g, "/") + (url ? ("/" + url) : ""));
                        }
                    } else {
                        key = _46b + "";
                        _46c = url;
                    }
                    var val = (_46c != undefined && typeof _46c != "string") ? _46c.value : _46c,
                        _46d = _46c && _46c.sanitize;
                    if (typeof val == "string") {
                        _45d[key] = val;
                        return _46d ? _45e(val) : val;
                    } else {
                        if (val === null) {
                            delete _45d[key];
                            return null;
                        } else {
                            if (!(key in _45d)) {
                                _45c(key, true, function (text) {
                                    _45d[key] = text;
                                });
                            }
                            return _46d ? _45e(_45d[key]) : _45d[key];
                        }
                    }
                };
                return _462;
            });
        },
        "url:dojox/grid/resources/View.html": "<div class=\"dojoxGridView\" role=\"presentation\">\n\t<div class=\"dojoxGridHeader\" dojoAttachPoint=\"headerNode\" role=\"presentation\">\n\t\t<div dojoAttachPoint=\"headerNodeContainer\" style=\"width:9000em\" role=\"presentation\">\n\t\t\t<div dojoAttachPoint=\"headerContentNode\" role=\"row\"></div>\n\t\t</div>\n\t</div>\n\t<input type=\"checkbox\" class=\"dojoxGridHiddenFocus\" dojoAttachPoint=\"hiddenFocusNode\" role=\"presentation\" />\n\t<input type=\"checkbox\" class=\"dojoxGridHiddenFocus\" role=\"presentation\" />\n\t<div class=\"dojoxGridScrollbox\" dojoAttachPoint=\"scrollboxNode\" role=\"presentation\">\n\t\t<div class=\"dojoxGridContent\" dojoAttachPoint=\"contentNode\" hidefocus=\"hidefocus\" role=\"presentation\"></div>\n\t</div>\n</div>\n",
        "dojo/dnd/Source": function () {
            define(["../main", "./Selector", "./Manager"], function (dojo, _46e, _46f) {
                if (!dojo.isAsync) {
                    dojo.ready(0, function () {
                        var _470 = ["dojo/dnd/AutoSource", "dojo/dnd/Target"];
                        require(_470);
                    });
                }
                return dojo.declare("dojo.dnd.Source", _46e, {
                    isSource: true,
                    horizontal: false,
                    copyOnly: false,
                    selfCopy: false,
                    selfAccept: true,
                    skipForm: false,
                    withHandles: false,
                    autoSync: false,
                    delay: 0,
                    accept: ["text"],
                    generateText: true,
                    constructor: function (node, _471) {
                        dojo.mixin(this, dojo.mixin({}, _471));
                        var type = this.accept;
                        if (type.length) {
                            this.accept = {};
                            for (var i = 0; i < type.length; ++i) {
                                this.accept[type[i]] = 1;
                            }
                        }
                        this.isDragging = false;
                        this.mouseDown = false;
                        this.targetAnchor = null;
                        this.targetBox = null;
                        this.before = true;
                        this._lastX = 0;
                        this._lastY = 0;
                        this.sourceState = "";
                        if (this.isSource) {
                            dojo.addClass(this.node, "dojoDndSource");
                        }
                        this.targetState = "";
                        if (this.accept) {
                            dojo.addClass(this.node, "dojoDndTarget");
                        }
                        if (this.horizontal) {
                            dojo.addClass(this.node, "dojoDndHorizontal");
                        }
                        this.topics = [dojo.subscribe("/dnd/source/over", this, "onDndSourceOver"), dojo.subscribe("/dnd/start", this, "onDndStart"), dojo.subscribe("/dnd/drop", this, "onDndDrop"), dojo.subscribe("/dnd/cancel", this, "onDndCancel")];
                    },
                    checkAcceptance: function (_472, _473) {
                        if (this == _472) {
                            return !this.copyOnly || this.selfAccept;
                        }
                        for (var i = 0; i < _473.length; ++i) {
                            var type = _472.getItem(_473[i].id).type;
                            var flag = false;
                            for (var j = 0; j < type.length; ++j) {
                                if (type[j] in this.accept) {
                                    flag = true;
                                    break;
                                }
                            }
                            if (!flag) {
                                return false;
                            }
                        }
                        return true;
                    },
                    copyState: function (_474, self) {
                        if (_474) {
                            return true;
                        }
                        if (arguments.length < 2) {
                            self = this == _46f.manager().target;
                        }
                        if (self) {
                            if (this.copyOnly) {
                                return this.selfCopy;
                            }
                        } else {
                            return this.copyOnly;
                        }
                        return false;
                    },
                    destroy: function () {
                        dojo.dnd.Source.superclass.destroy.call(this);
                        dojo.forEach(this.topics, dojo.unsubscribe);
                        this.targetAnchor = null;
                    },
                    onMouseMove: function (e) {
                        if (this.isDragging && this.targetState == "Disabled") {
                            return;
                        }
                        dojo.dnd.Source.superclass.onMouseMove.call(this, e);
                        var m = _46f.manager();
                        if (!this.isDragging) {
                            if (this.mouseDown && this.isSource && (Math.abs(e.pageX - this._lastX) > this.delay || Math.abs(e.pageY - this._lastY) > this.delay)) {
                                var _475 = this.getSelectedNodes();
                                if (_475.length) {
                                    m.startDrag(this, _475, this.copyState(dojo.isCopyKey(e), true));
                                }
                            }
                        }
                        if (this.isDragging) {
                            var _476 = false;
                            if (this.current) {
                                if (!this.targetBox || this.targetAnchor != this.current) {
                                    this.targetBox = dojo.position(this.current, true);
                                }
                                if (this.horizontal) {
                                    _476 = (e.pageX - this.targetBox.x) < (this.targetBox.w / 2);
                                } else {
                                    _476 = (e.pageY - this.targetBox.y) < (this.targetBox.h / 2);
                                }
                            }
                            if (this.current != this.targetAnchor || _476 != this.before) {
                                this._markTargetAnchor(_476);
                                m.canDrop(!this.current || m.source != this || !(this.current.id in this.selection));
                            }
                        }
                    },
                    onMouseDown: function (e) {
                        if (!this.mouseDown && this._legalMouseDown(e) && (!this.skipForm || !dojo.dnd.isFormElement(e))) {
                            this.mouseDown = true;
                            this._lastX = e.pageX;
                            this._lastY = e.pageY;
                            dojo.dnd.Source.superclass.onMouseDown.call(this, e);
                        }
                    },
                    onMouseUp: function (e) {
                        if (this.mouseDown) {
                            this.mouseDown = false;
                            dojo.dnd.Source.superclass.onMouseUp.call(this, e);
                        }
                    },
                    onDndSourceOver: function (_477) {
                        if (this != _477) {
                            this.mouseDown = false;
                            if (this.targetAnchor) {
                                this._unmarkTargetAnchor();
                            }
                        } else {
                            if (this.isDragging) {
                                var m = _46f.manager();
                                m.canDrop(this.targetState != "Disabled" && (!this.current || m.source != this || !(this.current.id in this.selection)));
                            }
                        }
                    },
                    onDndStart: function (_478, _479, copy) {
                        if (this.autoSync) {
                            this.sync();
                        }
                        if (this.isSource) {
                            this._changeState("Source", this == _478 ? (copy ? "Copied" : "Moved") : "");
                        }
                        var _47a = this.accept && this.checkAcceptance(_478, _479);
                        this._changeState("Target", _47a ? "" : "Disabled");
                        if (this == _478) {
                            _46f.manager().overSource(this);
                        }
                        this.isDragging = true;
                    },
                    onDndDrop: function (_47b, _47c, copy, _47d) {
                        if (this == _47d) {
                            this.onDrop(_47b, _47c, copy);
                        }
                        this.onDndCancel();
                    },
                    onDndCancel: function () {
                        if (this.targetAnchor) {
                            this._unmarkTargetAnchor();
                            this.targetAnchor = null;
                        }
                        this.before = true;
                        this.isDragging = false;
                        this.mouseDown = false;
                        this._changeState("Source", "");
                        this._changeState("Target", "");
                    },
                    onDrop: function (_47e, _47f, copy) {
                        if (this != _47e) {
                            this.onDropExternal(_47e, _47f, copy);
                        } else {
                            this.onDropInternal(_47f, copy);
                        }
                    },
                    onDropExternal: function (_480, _481, copy) {
                        var _482 = this._normalizedCreator;
                        if (this.creator) {
                            this._normalizedCreator = function (node, hint) {
                                return _482.call(this, _480.getItem(node.id).data, hint);
                            };
                        } else {
                            if (copy) {
                                this._normalizedCreator = function (node, hint) {
                                    var t = _480.getItem(node.id);
                                    var n = node.cloneNode(true);
                                    n.id = dojo.dnd.getUniqueId();
                                    return {
                                        node: n,
                                        data: t.data,
                                        type: t.type
                                    };
                                };
                            } else {
                                this._normalizedCreator = function (node, hint) {
                                    var t = _480.getItem(node.id);
                                    _480.delItem(node.id);
                                    return {
                                        node: node,
                                        data: t.data,
                                        type: t.type
                                    };
                                };
                            }
                        }
                        this.selectNone();
                        if (!copy && !this.creator) {
                            _480.selectNone();
                        }
                        this.insertNodes(true, _481, this.before, this.current);
                        if (!copy && this.creator) {
                            _480.deleteSelectedNodes();
                        }
                        this._normalizedCreator = _482;
                    },
                    onDropInternal: function (_483, copy) {
                        var _484 = this._normalizedCreator;
                        if (this.current && this.current.id in this.selection) {
                            return;
                        }
                        if (copy) {
                            if (this.creator) {
                                this._normalizedCreator = function (node, hint) {
                                    return _484.call(this, this.getItem(node.id).data, hint);
                                };
                            } else {
                                this._normalizedCreator = function (node, hint) {
                                    var t = this.getItem(node.id);
                                    var n = node.cloneNode(true);
                                    n.id = dojo.dnd.getUniqueId();
                                    return {
                                        node: n,
                                        data: t.data,
                                        type: t.type
                                    };
                                };
                            }
                        } else {
                            if (!this.current) {
                                return;
                            }
                            this._normalizedCreator = function (node, hint) {
                                var t = this.getItem(node.id);
                                return {
                                    node: node,
                                    data: t.data,
                                    type: t.type
                                };
                            };
                        }
                        this._removeSelection();
                        this.insertNodes(true, _483, this.before, this.current);
                        this._normalizedCreator = _484;
                    },
                    onDraggingOver: function () {},
                    onDraggingOut: function () {},
                    onOverEvent: function () {
                        dojo.dnd.Source.superclass.onOverEvent.call(this);
                        _46f.manager().overSource(this);
                        if (this.isDragging && this.targetState != "Disabled") {
                            this.onDraggingOver();
                        }
                    },
                    onOutEvent: function () {
                        dojo.dnd.Source.superclass.onOutEvent.call(this);
                        _46f.manager().outSource(this);
                        if (this.isDragging && this.targetState != "Disabled") {
                            this.onDraggingOut();
                        }
                    },
                    _markTargetAnchor: function (_485) {
                        if (this.current == this.targetAnchor && this.before == _485) {
                            return;
                        }
                        if (this.targetAnchor) {
                            this._removeItemClass(this.targetAnchor, this.before ? "Before" : "After");
                        }
                        this.targetAnchor = this.current;
                        this.targetBox = null;
                        this.before = _485;
                        if (this.targetAnchor) {
                            this._addItemClass(this.targetAnchor, this.before ? "Before" : "After");
                        }
                    },
                    _unmarkTargetAnchor: function () {
                        if (!this.targetAnchor) {
                            return;
                        }
                        this._removeItemClass(this.targetAnchor, this.before ? "Before" : "After");
                        this.targetAnchor = null;
                        this.targetBox = null;
                        this.before = true;
                    },
                    _markDndStatus: function (copy) {
                        this._changeState("Source", copy ? "Copied" : "Moved");
                    },
                    _legalMouseDown: function (e) {
                        if (!dojo.mouseButtons.isLeft(e)) {
                            return false;
                        }
                        if (!this.withHandles) {
                            return true;
                        }
                        for (var node = e.target; node && node !== this.node; node = node.parentNode) {
                            if (dojo.hasClass(node, "dojoDndHandle")) {
                                return true;
                            }
                            if (dojo.hasClass(node, "dojoDndItem") || dojo.hasClass(node, "dojoDndIgnore")) {
                                break;
                            }
                        }
                        return false;
                    }
                });
            });
        },
        "dojo/dnd/Selector": function () {
            define(["../main", "./common", "./Container"], function (dojo) {
                dojo.declare("dojo.dnd.Selector", dojo.dnd.Container, {
                    constructor: function (node, _486) {
                        if (!_486) {
                            _486 = {};
                        }
                        this.singular = _486.singular;
                        this.autoSync = _486.autoSync;
                        this.selection = {};
                        this.anchor = null;
                        this.simpleSelection = false;
                        this.events.push(dojo.connect(this.node, "onmousedown", this, "onMouseDown"), dojo.connect(this.node, "onmouseup", this, "onMouseUp"));
                    },
                    singular: false,
                    getSelectedNodes: function () {
                        var t = new dojo.NodeList();
                        var e = dojo.dnd._empty;
                        for (var i in this.selection) {
                            if (i in e) {
                                continue;
                            }
                            t.push(dojo.byId(i));
                        }
                        return t;
                    },
                    selectNone: function () {
                        return this._removeSelection()._removeAnchor();
                    },
                    selectAll: function () {
                        this.forInItems(function (data, id) {
                            this._addItemClass(dojo.byId(id), "Selected");
                            this.selection[id] = 1;
                        }, this);
                        return this._removeAnchor();
                    },
                    deleteSelectedNodes: function () {
                        var e = dojo.dnd._empty;
                        for (var i in this.selection) {
                            if (i in e) {
                                continue;
                            }
                            var n = dojo.byId(i);
                            this.delItem(i);
                            dojo.destroy(n);
                        }
                        this.anchor = null;
                        this.selection = {};
                        return this;
                    },
                    forInSelectedItems: function (f, o) {
                        o = o || dojo.global;
                        var s = this.selection,
                            e = dojo.dnd._empty;
                        for (var i in s) {
                            if (i in e) {
                                continue;
                            }
                            f.call(o, this.getItem(i), i, this);
                        }
                    },
                    sync: function () {
                        dojo.dnd.Selector.superclass.sync.call(this);
                        if (this.anchor) {
                            if (!this.getItem(this.anchor.id)) {
                                this.anchor = null;
                            }
                        }
                        var t = [],
                            e = dojo.dnd._empty;
                        for (var i in this.selection) {
                            if (i in e) {
                                continue;
                            }
                            if (!this.getItem(i)) {
                                t.push(i);
                            }
                        }
                        dojo.forEach(t, function (i) {
                            delete this.selection[i];
                        }, this);
                        return this;
                    },
                    insertNodes: function (_487, data, _488, _489) {
                        var _48a = this._normalizedCreator;
                        this._normalizedCreator = function (item, hint) {
                            var t = _48a.call(this, item, hint);
                            if (_487) {
                                if (!this.anchor) {
                                    this.anchor = t.node;
                                    this._removeItemClass(t.node, "Selected");
                                    this._addItemClass(this.anchor, "Anchor");
                                } else {
                                    if (this.anchor != t.node) {
                                        this._removeItemClass(t.node, "Anchor");
                                        this._addItemClass(t.node, "Selected");
                                    }
                                }
                                this.selection[t.node.id] = 1;
                            } else {
                                this._removeItemClass(t.node, "Selected");
                                this._removeItemClass(t.node, "Anchor");
                            }
                            return t;
                        };
                        dojo.dnd.Selector.superclass.insertNodes.call(this, data, _488, _489);
                        this._normalizedCreator = _48a;
                        return this;
                    },
                    destroy: function () {
                        dojo.dnd.Selector.superclass.destroy.call(this);
                        this.selection = this.anchor = null;
                    },
                    onMouseDown: function (e) {
                        if (this.autoSync) {
                            this.sync();
                        }
                        if (!this.current) {
                            return;
                        }
                        if (!this.singular && !dojo.isCopyKey(e) && !e.shiftKey && (this.current.id in this.selection)) {
                            this.simpleSelection = true;
                            if (e.button === dojo.mouseButtons.LEFT) {
                                dojo.stopEvent(e);
                            }
                            return;
                        }
                        if (!this.singular && e.shiftKey) {
                            if (!dojo.isCopyKey(e)) {
                                this._removeSelection();
                            }
                            var c = this.getAllNodes();
                            if (c.length) {
                                if (!this.anchor) {
                                    this.anchor = c[0];
                                    this._addItemClass(this.anchor, "Anchor");
                                }
                                this.selection[this.anchor.id] = 1;
                                if (this.anchor != this.current) {
                                    var i = 0;
                                    for (; i < c.length; ++i) {
                                        var node = c[i];
                                        if (node == this.anchor || node == this.current) {
                                            break;
                                        }
                                    }
                                    for (++i; i < c.length; ++i) {
                                        var node = c[i];
                                        if (node == this.anchor || node == this.current) {
                                            break;
                                        }
                                        this._addItemClass(node, "Selected");
                                        this.selection[node.id] = 1;
                                    }
                                    this._addItemClass(this.current, "Selected");
                                    this.selection[this.current.id] = 1;
                                }
                            }
                        } else {
                            if (this.singular) {
                                if (this.anchor == this.current) {
                                    if (dojo.isCopyKey(e)) {
                                        this.selectNone();
                                    }
                                } else {
                                    this.selectNone();
                                    this.anchor = this.current;
                                    this._addItemClass(this.anchor, "Anchor");
                                    this.selection[this.current.id] = 1;
                                }
                            } else {
                                if (dojo.isCopyKey(e)) {
                                    if (this.anchor == this.current) {
                                        delete this.selection[this.anchor.id];
                                        this._removeAnchor();
                                    } else {
                                        if (this.current.id in this.selection) {
                                            this._removeItemClass(this.current, "Selected");
                                            delete this.selection[this.current.id];
                                        } else {
                                            if (this.anchor) {
                                                this._removeItemClass(this.anchor, "Anchor");
                                                this._addItemClass(this.anchor, "Selected");
                                            }
                                            this.anchor = this.current;
                                            this._addItemClass(this.current, "Anchor");
                                            this.selection[this.current.id] = 1;
                                        }
                                    }
                                } else {
                                    if (!(this.current.id in this.selection)) {
                                        this.selectNone();
                                        this.anchor = this.current;
                                        this._addItemClass(this.current, "Anchor");
                                        this.selection[this.current.id] = 1;
                                    }
                                }
                            }
                        }
                        dojo.stopEvent(e);
                    },
                    onMouseUp: function (e) {
                        if (!this.simpleSelection) {
                            return;
                        }
                        this.simpleSelection = false;
                        this.selectNone();
                        if (this.current) {
                            this.anchor = this.current;
                            this._addItemClass(this.anchor, "Anchor");
                            this.selection[this.current.id] = 1;
                        }
                    },
                    onMouseMove: function (e) {
                        this.simpleSelection = false;
                    },
                    onOverEvent: function () {
                        this.onmousemoveEvent = dojo.connect(this.node, "onmousemove", this, "onMouseMove");
                    },
                    onOutEvent: function () {
                        dojo.disconnect(this.onmousemoveEvent);
                        delete this.onmousemoveEvent;
                    },
                    _removeSelection: function () {
                        var e = dojo.dnd._empty;
                        for (var i in this.selection) {
                            if (i in e) {
                                continue;
                            }
                            var node = dojo.byId(i);
                            if (node) {
                                this._removeItemClass(node, "Selected");
                            }
                        }
                        this.selection = {};
                        return this;
                    },
                    _removeAnchor: function () {
                        if (this.anchor) {
                            this._removeItemClass(this.anchor, "Anchor");
                            this.anchor = null;
                        }
                        return this;
                    }
                });
                return dojo.dnd.Selector;
            });
        },
        "dojo/dnd/common": function () {
            define(["../main"], function (dojo) {
                dojo.getObject("dnd", true, dojo);
                dojo.dnd.getCopyKeyState = dojo.isCopyKey;
                dojo.dnd._uniqueId = 0;
                dojo.dnd.getUniqueId = function () {
                    var id;
                    do {
                        id = dojo._scopeName + "Unique" + (++dojo.dnd._uniqueId);
                    } while (dojo.byId(id));
                    return id;
                };
                dojo.dnd._empty = {};
                dojo.dnd.isFormElement = function (e) {
                    var t = e.target;
                    if (t.nodeType == 3) {
                        t = t.parentNode;
                    }
                    return " button textarea input select option ".indexOf(" " + t.tagName.toLowerCase() + " ") >= 0;
                };
                return dojo.dnd;
            });
        },
        "dojo/dnd/Container": function () {
            define(["../main", "../Evented", "./common", "../parser"], function (dojo, _48b) {
                dojo.declare("dojo.dnd.Container", _48b, {
                    skipForm: false,
                    constructor: function (node, _48c) {
                        this.node = dojo.byId(node);
                        if (!_48c) {
                            _48c = {};
                        }
                        this.creator = _48c.creator || null;
                        this.skipForm = _48c.skipForm;
                        this.parent = _48c.dropParent && dojo.byId(_48c.dropParent);
                        this.map = {};
                        this.current = null;
                        this.containerState = "";
                        dojo.addClass(this.node, "dojoDndContainer");
                        if (!(_48c && _48c._skipStartup)) {
                            this.startup();
                        }
                        this.events = [dojo.connect(this.node, "onmouseover", this, "onMouseOver"), dojo.connect(this.node, "onmouseout", this, "onMouseOut"), dojo.connect(this.node, "ondragstart", this, "onSelectStart"), dojo.connect(this.node, "onselectstart", this, "onSelectStart")];
                    },
                    creator: function () {},
                    getItem: function (key) {
                        return this.map[key];
                    },
                    setItem: function (key, data) {
                        this.map[key] = data;
                    },
                    delItem: function (key) {
                        delete this.map[key];
                    },
                    forInItems: function (f, o) {
                        o = o || dojo.global;
                        var m = this.map,
                            e = dojo.dnd._empty;
                        for (var i in m) {
                            if (i in e) {
                                continue;
                            }
                            f.call(o, m[i], i, this);
                        }
                        return o;
                    },
                    clearItems: function () {
                        this.map = {};
                    },
                    getAllNodes: function () {
                        return dojo.query("> .dojoDndItem", this.parent);
                    },
                    sync: function () {
                        var map = {};
                        this.getAllNodes().forEach(function (node) {
                            if (node.id) {
                                var item = this.getItem(node.id);
                                if (item) {
                                    map[node.id] = item;
                                    return;
                                }
                            } else {
                                node.id = dojo.dnd.getUniqueId();
                            }
                            var type = node.getAttribute("dndType"),
                                data = node.getAttribute("dndData");
                            map[node.id] = {
                                data: data || node.innerHTML,
                                type: type ? type.split(/\s*,\s*/) : ["text"]
                            };
                        }, this);
                        this.map = map;
                        return this;
                    },
                    insertNodes: function (data, _48d, _48e) {
                        if (!this.parent.firstChild) {
                            _48e = null;
                        } else {
                            if (_48d) {
                                if (!_48e) {
                                    _48e = this.parent.firstChild;
                                }
                            } else {
                                if (_48e) {
                                    _48e = _48e.nextSibling;
                                }
                            }
                        }
                        if (_48e) {
                            for (var i = 0; i < data.length; ++i) {
                                var t = this._normalizedCreator(data[i]);
                                this.setItem(t.node.id, {
                                    data: t.data,
                                    type: t.type
                                });
                                this.parent.insertBefore(t.node, _48e);
                            }
                        } else {
                            for (var i = 0; i < data.length; ++i) {
                                var t = this._normalizedCreator(data[i]);
                                this.setItem(t.node.id, {
                                    data: t.data,
                                    type: t.type
                                });
                                this.parent.appendChild(t.node);
                            }
                        }
                        return this;
                    },
                    destroy: function () {
                        dojo.forEach(this.events, dojo.disconnect);
                        this.clearItems();
                        this.node = this.parent = this.current = null;
                    },
                    markupFactory: function (_48f, node, ctor) {
                        _48f._skipStartup = true;
                        return new ctor(node, _48f);
                    },
                    startup: function () {
                        if (!this.parent) {
                            this.parent = this.node;
                            if (this.parent.tagName.toLowerCase() == "table") {
                                var c = this.parent.getElementsByTagName("tbody");
                                if (c && c.length) {
                                    this.parent = c[0];
                                }
                            }
                        }
                        this.defaultCreator = dojo.dnd._defaultCreator(this.parent);
                        this.sync();
                    },
                    onMouseOver: function (e) {
                        var n = e.relatedTarget;
                        while (n) {
                            if (n == this.node) {
                                break;
                            }
                            try {
                                n = n.parentNode;
                            } catch (x) {
                                n = null;
                            }
                        }
                        if (!n) {
                            this._changeState("Container", "Over");
                            this.onOverEvent();
                        }
                        n = this._getChildByEvent(e);
                        if (this.current == n) {
                            return;
                        }
                        if (this.current) {
                            this._removeItemClass(this.current, "Over");
                        }
                        if (n) {
                            this._addItemClass(n, "Over");
                        }
                        this.current = n;
                    },
                    onMouseOut: function (e) {
                        for (var n = e.relatedTarget; n;) {
                            if (n == this.node) {
                                return;
                            }
                            try {
                                n = n.parentNode;
                            } catch (x) {
                                n = null;
                            }
                        }
                        if (this.current) {
                            this._removeItemClass(this.current, "Over");
                            this.current = null;
                        }
                        this._changeState("Container", "");
                        this.onOutEvent();
                    },
                    onSelectStart: function (e) {
                        if (!this.skipForm || !dojo.dnd.isFormElement(e)) {
                            dojo.stopEvent(e);
                        }
                    },
                    onOverEvent: function () {},
                    onOutEvent: function () {},
                    _changeState: function (type, _490) {
                        var _491 = "dojoDnd" + type;
                        var _492 = type.toLowerCase() + "State";
                        dojo.replaceClass(this.node, _491 + _490, _491 + this[_492]);
                        this[_492] = _490;
                    },
                    _addItemClass: function (node, type) {
                        dojo.addClass(node, "dojoDndItem" + type);
                    },
                    _removeItemClass: function (node, type) {
                        dojo.removeClass(node, "dojoDndItem" + type);
                    },
                    _getChildByEvent: function (e) {
                        var node = e.target;
                        if (node) {
                            for (var _493 = node.parentNode; _493; node = _493, _493 = node.parentNode) {
                                if (_493 == this.parent && dojo.hasClass(node, "dojoDndItem")) {
                                    return node;
                                }
                            }
                        }
                        return null;
                    },
                    _normalizedCreator: function (item, hint) {
                        var t = (this.creator || this.defaultCreator).call(this, item, hint);
                        if (!dojo.isArray(t.type)) {
                            t.type = ["text"];
                        }
                        if (!t.node.id) {
                            t.node.id = dojo.dnd.getUniqueId();
                        }
                        dojo.addClass(t.node, "dojoDndItem");
                        return t;
                    }
                });
                dojo.dnd._createNode = function (tag) {
                    if (!tag) {
                        return dojo.dnd._createSpan;
                    }
                    return function (text) {
                        return dojo.create(tag, {
                            innerHTML: text
                        });
                    };
                };
                dojo.dnd._createTrTd = function (text) {
                    var tr = dojo.create("tr");
                    dojo.create("td", {
                        innerHTML: text
                    }, tr);
                    return tr;
                };
                dojo.dnd._createSpan = function (text) {
                    return dojo.create("span", {
                        innerHTML: text
                    });
                };
                dojo.dnd._defaultCreatorNodes = {
                    ul: "li",
                    ol: "li",
                    div: "div",
                    p: "div"
                };
                dojo.dnd._defaultCreator = function (node) {
                    var tag = node.tagName.toLowerCase();
                    var c = tag == "tbody" || tag == "thead" ? dojo.dnd._createTrTd : dojo.dnd._createNode(dojo.dnd._defaultCreatorNodes[tag]);
                    return function (item, hint) {
                        var _494 = item && dojo.isObject(item),
                            data, type, n;
                        if (_494 && item.tagName && item.nodeType && item.getAttribute) {
                            data = item.getAttribute("dndData") || item.innerHTML;
                            type = item.getAttribute("dndType");
                            type = type ? type.split(/\s*,\s*/) : ["text"];
                            n = item;
                        } else {
                            data = (_494 && item.data) ? item.data : item;
                            type = (_494 && item.type) ? item.type : ["text"];
                            n = (hint == "avatar" ? dojo.dnd._createSpan : c)(String(data));
                        }
                        if (!n.id) {
                            n.id = dojo.dnd.getUniqueId();
                        }
                        return {
                            node: n,
                            data: data,
                            type: type
                        };
                    };
                };
                return dojo.dnd.Container;
            });
        },
        "dojo/parser": function () {
            define(["./_base/kernel", "./_base/lang", "./_base/array", "./_base/html", "./_base/window", "./_base/url", "./_base/json", "./aspect", "./date/stamp", "./query", "./on", "./ready"], function (dojo, _495, _496, _497, _498, _499, _49a, _49b, _49c, _49d, don) {
                new Date("X");
                var _49e = {
                    "dom-attributes-explicit": document.createElement("div").attributes.length < 40
                };

                function has(_49f) {
                    return _49e[_49f];
                };
                dojo.parser = new function () {
                    var _4a0 = {};

                    function _4a1(_4a2) {
                        var map = {};
                        for (var name in _4a2) {
                            if (name.charAt(0) == "_") {
                                continue;
                            }
                            map[name.toLowerCase()] = name;
                        }
                        return map;
                    };
                    _49b.after(_495, "extend", function () {
                        _4a0 = {};
                    }, true);
                    var _4a3 = {};
                    this._functionFromScript = function (_4a4, _4a5) {
                        var _4a6 = "";
                        var _4a7 = "";
                        var _4a8 = (_4a4.getAttribute(_4a5 + "args") || _4a4.getAttribute("args"));
                        if (_4a8) {
                            _496.forEach(_4a8.split(/\s*,\s*/), function (part, idx) {
                                _4a6 += "var " + part + " = arguments[" + idx + "]; ";
                            });
                        }
                        var _4a9 = _4a4.getAttribute("with");
                        if (_4a9 && _4a9.length) {
                            _496.forEach(_4a9.split(/\s*,\s*/), function (part) {
                                _4a6 += "with(" + part + "){";
                                _4a7 += "}";
                            });
                        }
                        return new Function(_4a6 + _4a4.innerHTML + _4a7);
                    };
                    this.instantiate = function (_4aa, _4ab, args) {
                        var _4ac = [],
                            _4ab = _4ab || {};
                        args = args || {};
                        var _4ad = (args.scope || dojo._scopeName) + "Type",
                            _4ae = "data-" + (args.scope || dojo._scopeName) + "-",
                            _4af = _4ae + "type",
                            _4b0 = _4ae + "props",
                            _4b1 = _4ae + "attach-point",
                            _4b2 = _4ae + "attach-event",
                            _4b3 = _4ae + "id";
                        var _4b4 = {};
                        _496.forEach([_4b0, _4af, _4ad, _4b3, "jsId", _4b1, _4b2, "dojoAttachPoint", "dojoAttachEvent", "class", "style"], function (name) {
                            _4b4[name.toLowerCase()] = name.replace(args.scope, "dojo");
                        });
                        _496.forEach(_4aa, function (obj) {
                            if (!obj) {
                                return;
                            }
                            var node = obj.node || obj,
                                type = _4ad in _4ab ? _4ab[_4ad] : obj.node ? obj.type : (node.getAttribute(_4af) || node.getAttribute(_4ad)),
                                ctor = _4a3[type] || (_4a3[type] = _495.getObject(type)),
                                _4b5 = ctor && ctor.prototype;
                            if (!ctor) {
                                throw new Error("Could not load class '" + type);
                            }
                            var _4b6 = {};
                            if (args.defaults) {
                                _495.mixin(_4b6, args.defaults);
                            }
                            if (obj.inherited) {
                                _495.mixin(_4b6, obj.inherited);
                            }
                            var _4b7;
                            if (has("dom-attributes-explicit")) {
                                _4b7 = node.attributes;
                            } else {
                                var _4b8 = /^input$|^img$/i.test(node.nodeName) ? node : node.cloneNode(false),
                                    _4b9 = _4b8.outerHTML.replace(/=[^\s"']+|="[^"]*"|='[^']*'/g, "").replace(/^\s*<[a-zA-Z0-9]*/, "").replace(/>.*$/, "");
                                _4b7 = _496.map(_4b9.split(/\s+/), function (name) {
                                    var _4ba = name.toLowerCase();
                                    return {
                                        name: name,
                                        value: (node.nodeName == "LI" && name == "value") || _4ba == "enctype" ? node.getAttribute(_4ba) : node.getAttributeNode(_4ba).value,
                                        specified: true
                                    };
                                });
                            }
                            var i = 0,
                                item;
                            while (item = _4b7[i++]) {
                                if (!item || !item.specified) {
                                    continue;
                                }
                                var name = item.name,
                                    _4bb = name.toLowerCase(),
                                    _4bc = item.value;
                                if (_4bb in _4b4) {
                                    switch (_4b4[_4bb]) {
                                    case "data-dojo-props":
                                        var _4bd = _4bc;
                                        break;
                                    case "data-dojo-id":
                                    case "jsId":
                                        var _4be = _4bc;
                                        break;
                                    case "data-dojo-attach-point":
                                    case "dojoAttachPoint":
                                        _4b6.dojoAttachPoint = _4bc;
                                        break;
                                    case "data-dojo-attach-event":
                                    case "dojoAttachEvent":
                                        _4b6.dojoAttachEvent = _4bc;
                                        break;
                                    case "class":
                                        _4b6["class"] = node.className;
                                        break;
                                    case "style":
                                        _4b6["style"] = node.style && node.style.cssText;
                                        break;
                                    }
                                } else {
                                    if (!(name in _4b5)) {
                                        var map = (_4a0[type] || (_4a0[type] = _4a1(_4b5)));
                                        name = map[_4bb] || name;
                                    }
                                    if (name in _4b5) {
                                        switch (typeof _4b5[name]) {
                                        case "string":
                                            _4b6[name] = _4bc;
                                            break;
                                        case "number":
                                            _4b6[name] = _4bc.length ? Number(_4bc) : NaN;
                                            break;
                                        case "boolean":
                                            _4b6[name] = _4bc.toLowerCase() != "false";
                                            break;
                                        case "function":
                                            if (_4bc === "" || _4bc.search(/[^\w\.]+/i) != -1) {
                                                _4b6[name] = new Function(_4bc);
                                            } else {
                                                _4b6[name] = _495.getObject(_4bc, false) || new Function(_4bc);
                                            }
                                            break;
                                        default:
                                            var pVal = _4b5[name];
                                            _4b6[name] = (pVal && "length" in pVal) ? (_4bc ? _4bc.split(/\s*,\s*/) : []) : (pVal instanceof Date) ? (_4bc == "" ? new Date("") : _4bc == "now" ? new Date() : _49c.fromISOString(_4bc)) : (pVal instanceof dojo._Url) ? (dojo.baseUrl + _4bc) : _49a.fromJson(_4bc);
                                        }
                                    } else {
                                        _4b6[name] = _4bc;
                                    }
                                }
                            }
                            if (_4bd) {
                                try {
                                    _4bd = _49a.fromJson.call(args.propsThis, "{" + _4bd + "}");
                                    _495.mixin(_4b6, _4bd);
                                } catch (e) {
                                    throw new Error(e.toString() + " in data-dojo-props='" + _4bd + "'");
                                }
                            }
                            _495.mixin(_4b6, _4ab);
                            var _4bf = obj.node ? obj.scripts : (ctor && (ctor._noScript || _4b5._noScript) ? [] : _49d("> script[type^='dojo/']", node));
                            var _4c0 = [],
                                _4c1 = [],
                                _4c2 = [],
                                on = [];
                            if (_4bf) {
                                for (i = 0; i < _4bf.length; i++) {
                                    var _4c3 = _4bf[i];
                                    node.removeChild(_4c3);
                                    var _4c4 = (_4c3.getAttribute(_4ae + "event") || _4c3.getAttribute("event")),
                                        prop = _4c3.getAttribute(_4ae + "prop"),
                                        type = _4c3.getAttribute("type"),
                                        nf = this._functionFromScript(_4c3, _4ae);
                                    if (_4c4) {
                                        if (type == "dojo/connect") {
                                            _4c0.push({
                                                event: _4c4,
                                                func: nf
                                            });
                                        } else {
                                            if (type == "dojo/on") {
                                                on.push({
                                                    event: _4c4,
                                                    func: nf
                                                });
                                            } else {
                                                _4b6[_4c4] = nf;
                                            }
                                        }
                                    } else {
                                        if (type == "dojo/watch") {
                                            _4c2.push({
                                                prop: prop,
                                                func: nf
                                            });
                                        } else {
                                            _4c1.push(nf);
                                        }
                                    }
                                }
                            }
                            var _4c5 = ctor.markupFactory || _4b5.markupFactory;
                            var _4c6 = _4c5 ? _4c5(_4b6, node, ctor) : new ctor(_4b6, node);
                            _4ac.push(_4c6);
                            if (_4be) {
                                _495.setObject(_4be, _4c6);
                            }
                            for (i = 0; i < _4c0.length; i++) {
                                _49b.after(_4c6, _4c0[i].event, dojo.hitch(_4c6, _4c0[i].func), true);
                            }
                            for (i = 0; i < _4c1.length; i++) {
                                _4c1[i].call(_4c6);
                            }
                            for (i = 0; i < _4c2.length; i++) {
                                _4c6.watch(_4c2[i].prop, _4c2[i].func);
                            }
                            for (i = 0; i < on.length; i++) {
                                don(_4c6, on[i].event, on[i].func);
                            }
                        }, this);
                        if (!_4ab._started) {
                            _496.forEach(_4ac, function (_4c7) {
                                if (!args.noStart && _4c7 && _495.isFunction(_4c7.startup) && !_4c7._started) {
                                    _4c7.startup();
                                }
                            });
                        }
                        return _4ac;
                    };
                    this.parse = function (_4c8, args) {
                        var root;
                        if (!args && _4c8 && _4c8.rootNode) {
                            args = _4c8;
                            root = args.rootNode;
                        } else {
                            root = _4c8;
                        }
                        root = root ? _497.byId(root) : _498.body();
                        args = args || {};
                        var _4c9 = (args.scope || dojo._scopeName) + "Type",
                            _4ca = "data-" + (args.scope || dojo._scopeName) + "-",
                            _4cb = _4ca + "type",
                            _4cc = _4ca + "textdir";
                        var list = [];
                        var node = root.firstChild;
                        var _4cd = args && args.inherited;
                        if (!_4cd) {
                            function _4ce(node, attr) {
                                return (node.getAttribute && node.getAttribute(attr)) || (node !== _498.doc && node !== _498.doc.documentElement && node.parentNode ? _4ce(node.parentNode, attr) : null);
                            };
                            _4cd = {
                                dir: _4ce(root, "dir"),
                                lang: _4ce(root, "lang"),
                                textDir: _4ce(root, _4cc)
                            };
                            for (var key in _4cd) {
                                if (!_4cd[key]) {
                                    delete _4cd[key];
                                }
                            }
                        }
                        var _4cf = {
                            inherited: _4cd
                        };
                        var _4d0;
                        var _4d1;

                        function _4d2(_4d3) {
                            if (!_4d3.inherited) {
                                _4d3.inherited = {};
                                var node = _4d3.node,
                                    _4d4 = _4d2(_4d3.parent);
                                var _4d5 = {
                                    dir: node.getAttribute("dir") || _4d4.dir,
                                    lang: node.getAttribute("lang") || _4d4.lang,
                                    textDir: node.getAttribute(_4cc) || _4d4.textDir
                                };
                                for (var key in _4d5) {
                                    if (_4d5[key]) {
                                        _4d3.inherited[key] = _4d5[key];
                                    }
                                }
                            }
                            return _4d3.inherited;
                        };
                        while (true) {
                            if (!node) {
                                if (!_4cf || !_4cf.node) {
                                    break;
                                }
                                node = _4cf.node.nextSibling;
                                _4d0 = _4cf.scripts;
                                _4d1 = false;
                                _4cf = _4cf.parent;
                                continue;
                            }
                            if (node.nodeType != 1) {
                                node = node.nextSibling;
                                continue;
                            }
                            if (_4d0 && node.nodeName.toLowerCase() == "script") {
                                type = node.getAttribute("type");
                                if (type && /^dojo\/\w/i.test(type)) {
                                    _4d0.push(node);
                                }
                                node = node.nextSibling;
                                continue;
                            }
                            if (_4d1) {
                                node = node.nextSibling;
                                continue;
                            }
                            var type = node.getAttribute(_4cb) || node.getAttribute(_4c9);
                            var _4d6 = node.firstChild;
                            if (!type && (!_4d6 || (_4d6.nodeType == 3 && !_4d6.nextSibling))) {
                                node = node.nextSibling;
                                continue;
                            }
                            var _4d7 = {
                                node: node,
                                scripts: _4d0,
                                parent: _4cf
                            };
                            var ctor = type && (_4a3[type] || (_4a3[type] = _495.getObject(type))),
                                _4d8 = ctor && !ctor.prototype._noScript ? [] : null;
                            if (type) {
                                list.push({
                                    "type": type,
                                    node: node,
                                    scripts: _4d8,
                                    inherited: _4d2(_4d7)
                                });
                            }
                            node = _4d6;
                            _4d0 = _4d8;
                            _4d1 = ctor && ctor.prototype.stopParser && !(args && args.template);
                            _4cf = _4d7;
                        }
                        var _4d9 = args && args.template ? {
                            template: true
                        } : null;
                        return this.instantiate(list, _4d9, args);
                    };
                }();
                if (dojo.config.parseOnLoad) {
                    dojo.ready(100, dojo.parser, "parse");
                }
                return dojo.parser;
            });
        },
        "dojo/_base/url": function () {
            define(["./kernel"], function (dojo) {
                var ore = new RegExp("^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$"),
                    ire = new RegExp("^((([^\\[:]+):)?([^@]+)@)?(\\[([^\\]]+)\\]|([^\\[:]*))(:([0-9]+))?$"),
                    _4da = function () {
                        var n = null,
                            _4db = arguments,
                            uri = [_4db[0]];
                        for (var i = 1; i < _4db.length; i++) {
                            if (!_4db[i]) {
                                continue;
                            }
                            var _4dc = new _4da(_4db[i] + ""),
                                _4dd = new _4da(uri[0] + "");
                            if (_4dc.path == "" && !_4dc.scheme && !_4dc.authority && !_4dc.query) {
                                if (_4dc.fragment != n) {
                                    _4dd.fragment = _4dc.fragment;
                                }
                                _4dc = _4dd;
                            } else {
                                if (!_4dc.scheme) {
                                    _4dc.scheme = _4dd.scheme;
                                    if (!_4dc.authority) {
                                        _4dc.authority = _4dd.authority;
                                        if (_4dc.path.charAt(0) != "/") {
                                            var path = _4dd.path.substring(0, _4dd.path.lastIndexOf("/") + 1) + _4dc.path;
                                            var segs = path.split("/");
                                            for (var j = 0; j < segs.length; j++) {
                                                if (segs[j] == ".") {
                                                    if (j == segs.length - 1) {
                                                        segs[j] = "";
                                                    } else {
                                                        segs.splice(j, 1);
                                                        j--;
                                                    }
                                                } else {
                                                    if (j > 0 && !(j == 1 && segs[0] == "") && segs[j] == ".." && segs[j - 1] != "..") {
                                                        if (j == (segs.length - 1)) {
                                                            segs.splice(j, 1);
                                                            segs[j - 1] = "";
                                                        } else {
                                                            segs.splice(j - 1, 2);
                                                            j -= 2;
                                                        }
                                                    }
                                                }
                                            }
                                            _4dc.path = segs.join("/");
                                        }
                                    }
                                }
                            }
                            uri = [];
                            if (_4dc.scheme) {
                                uri.push(_4dc.scheme, ":");
                            }
                            if (_4dc.authority) {
                                uri.push("//", _4dc.authority);
                            }
                            uri.push(_4dc.path);
                            if (_4dc.query) {
                                uri.push("?", _4dc.query);
                            }
                            if (_4dc.fragment) {
                                uri.push("#", _4dc.fragment);
                            }
                        }
                        this.uri = uri.join("");
                        var r = this.uri.match(ore);
                        this.scheme = r[2] || (r[1] ? "" : n);
                        this.authority = r[4] || (r[3] ? "" : n);
                        this.path = r[5];
                        this.query = r[7] || (r[6] ? "" : n);
                        this.fragment = r[9] || (r[8] ? "" : n);
                        if (this.authority != n) {
                            r = this.authority.match(ire);
                            this.user = r[3] || n;
                            this.password = r[4] || n;
                            this.host = r[6] || r[7];
                            this.port = r[9] || n;
                        }
                    };
                _4da.prototype.toString = function () {
                    return this.uri;
                };
                return dojo._Url = _4da;
            });
        },
        "dojo/dnd/Manager": function () {
            define(["../main", "../Evented", "./common", "./autoscroll", "./Avatar"], function (dojo, _4de) {
                var _4df = dojo.declare("dojo.dnd.Manager", [_4de], {
                    constructor: function () {
                        this.avatar = null;
                        this.source = null;
                        this.nodes = [];
                        this.copy = true;
                        this.target = null;
                        this.canDropFlag = false;
                        this.events = [];
                    },
                    OFFSET_X: 16,
                    OFFSET_Y: 16,
                    overSource: function (_4e0) {
                        if (this.avatar) {
                            this.target = (_4e0 && _4e0.targetState != "Disabled") ? _4e0 : null;
                            this.canDropFlag = Boolean(this.target);
                            this.avatar.update();
                        }
                        dojo.publish("/dnd/source/over", [_4e0]);
                    },
                    outSource: function (_4e1) {
                        if (this.avatar) {
                            if (this.target == _4e1) {
                                this.target = null;
                                this.canDropFlag = false;
                                this.avatar.update();
                                dojo.publish("/dnd/source/over", [null]);
                            }
                        } else {
                            dojo.publish("/dnd/source/over", [null]);
                        }
                    },
                    startDrag: function (_4e2, _4e3, copy) {
                        this.source = _4e2;
                        this.nodes = _4e3;
                        this.copy = Boolean(copy);
                        this.avatar = this.makeAvatar();
                        dojo.body().appendChild(this.avatar.node);
                        dojo.publish("/dnd/start", [_4e2, _4e3, this.copy]);
                        this.events = [dojo.connect(dojo.doc, "onmousemove", this, "onMouseMove"), dojo.connect(dojo.doc, "onmouseup", this, "onMouseUp"), dojo.connect(dojo.doc, "onkeydown", this, "onKeyDown"), dojo.connect(dojo.doc, "onkeyup", this, "onKeyUp"), dojo.connect(dojo.doc, "ondragstart", dojo.stopEvent), dojo.connect(dojo.body(), "onselectstart", dojo.stopEvent)];
                        var c = "dojoDnd" + (copy ? "Copy" : "Move");
                        dojo.addClass(dojo.body(), c);
                    },
                    canDrop: function (flag) {
                        var _4e4 = Boolean(this.target && flag);
                        if (this.canDropFlag != _4e4) {
                            this.canDropFlag = _4e4;
                            this.avatar.update();
                        }
                    },
                    stopDrag: function () {
                        dojo.removeClass(dojo.body(), ["dojoDndCopy", "dojoDndMove"]);
                        dojo.forEach(this.events, dojo.disconnect);
                        this.events = [];
                        this.avatar.destroy();
                        this.avatar = null;
                        this.source = this.target = null;
                        this.nodes = [];
                    },
                    makeAvatar: function () {
                        return new dojo.dnd.Avatar(this);
                    },
                    updateAvatar: function () {
                        this.avatar.update();
                    },
                    onMouseMove: function (e) {
                        var a = this.avatar;
                        if (a) {
                            dojo.dnd.autoScrollNodes(e);
                            var s = a.node.style;
                            s.left = (e.pageX + this.OFFSET_X) + "px";
                            s.top = (e.pageY + this.OFFSET_Y) + "px";
                            var copy = Boolean(this.source.copyState(dojo.isCopyKey(e)));
                            if (this.copy != copy) {
                                this._setCopyStatus(copy);
                            }
                        }
                    },
                    onMouseUp: function (e) {
                        if (this.avatar) {
                            if (this.target && this.canDropFlag) {
                                var copy = Boolean(this.source.copyState(dojo.isCopyKey(e))),
                                    _4e5 = [this.source, this.nodes, copy, this.target, e];
                                dojo.publish("/dnd/drop/before", _4e5);
                                dojo.publish("/dnd/drop", _4e5);
                            } else {
                                dojo.publish("/dnd/cancel");
                            }
                            this.stopDrag();
                        }
                    },
                    onKeyDown: function (e) {
                        if (this.avatar) {
                            switch (e.keyCode) {
                            case dojo.keys.CTRL:
                                var copy = Boolean(this.source.copyState(true));
                                if (this.copy != copy) {
                                    this._setCopyStatus(copy);
                                }
                                break;
                            case dojo.keys.ESCAPE:
                                dojo.publish("/dnd/cancel");
                                this.stopDrag();
                                break;
                            }
                        }
                    },
                    onKeyUp: function (e) {
                        if (this.avatar && e.keyCode == dojo.keys.CTRL) {
                            var copy = Boolean(this.source.copyState(false));
                            if (this.copy != copy) {
                                this._setCopyStatus(copy);
                            }
                        }
                    },
                    _setCopyStatus: function (copy) {
                        this.copy = copy;
                        this.source._markDndStatus(this.copy);
                        this.updateAvatar();
                        dojo.replaceClass(dojo.body(), "dojoDnd" + (this.copy ? "Copy" : "Move"), "dojoDnd" + (this.copy ? "Move" : "Copy"));
                    }
                });
                dojo.dnd._manager = null;
                _4df.manager = dojo.dnd.manager = function () {
                    if (!dojo.dnd._manager) {
                        dojo.dnd._manager = new dojo.dnd.Manager();
                    }
                    return dojo.dnd._manager;
                };
                return _4df;
            });
        },
        "dojo/dnd/autoscroll": function () {
            define(["../main", "../window"], function (dojo) {
                dojo.getObject("dnd", true, dojo);
                dojo.dnd.getViewport = dojo.window.getBox;
                dojo.dnd.V_TRIGGER_AUTOSCROLL = 32;
                dojo.dnd.H_TRIGGER_AUTOSCROLL = 32;
                dojo.dnd.V_AUTOSCROLL_VALUE = 16;
                dojo.dnd.H_AUTOSCROLL_VALUE = 16;
                dojo.dnd.autoScroll = function (e) {
                    var v = dojo.window.getBox(),
                        dx = 0,
                        dy = 0;
                    if (e.clientX < dojo.dnd.H_TRIGGER_AUTOSCROLL) {
                        dx = -dojo.dnd.H_AUTOSCROLL_VALUE;
                    } else {
                        if (e.clientX > v.w - dojo.dnd.H_TRIGGER_AUTOSCROLL) {
                            dx = dojo.dnd.H_AUTOSCROLL_VALUE;
                        }
                    }
                    if (e.clientY < dojo.dnd.V_TRIGGER_AUTOSCROLL) {
                        dy = -dojo.dnd.V_AUTOSCROLL_VALUE;
                    } else {
                        if (e.clientY > v.h - dojo.dnd.V_TRIGGER_AUTOSCROLL) {
                            dy = dojo.dnd.V_AUTOSCROLL_VALUE;
                        }
                    }
                    window.scrollBy(dx, dy);
                };
                dojo.dnd._validNodes = {
                    "div": 1,
                    "p": 1,
                    "td": 1
                };
                dojo.dnd._validOverflow = {
                    "auto": 1,
                    "scroll": 1
                };
                dojo.dnd.autoScrollNodes = function (e) {
                    var b, t, w, h, rx, ry, dx = 0,
                        dy = 0,
                        _4e6, _4e7;
                    for (var n = e.target; n;) {
                        if (n.nodeType == 1 && (n.tagName.toLowerCase() in dojo.dnd._validNodes)) {
                            var s = dojo.getComputedStyle(n),
                                _4e8 = (s.overflow.toLowerCase() in dojo.dnd._validOverflow),
                                _4e9 = (s.overflowX.toLowerCase() in dojo.dnd._validOverflow),
                                _4ea = (s.overflowY.toLowerCase() in dojo.dnd._validOverflow);
                            if (_4e8 || _4e9 || _4ea) {
                                b = dojo._getContentBox(n, s);
                                t = dojo.position(n, true);
                            }
                            if (_4e8 || _4e9) {
                                w = Math.min(dojo.dnd.H_TRIGGER_AUTOSCROLL, b.w / 2);
                                rx = e.pageX - t.x;
                                if (dojo.isWebKit || dojo.isOpera) {
                                    rx += dojo.body().scrollLeft;
                                }
                                dx = 0;
                                if (rx > 0 && rx < b.w) {
                                    if (rx < w) {
                                        dx = -w;
                                    } else {
                                        if (rx > b.w - w) {
                                            dx = w;
                                        }
                                    }
                                    _4e6 = n.scrollLeft;
                                    n.scrollLeft = n.scrollLeft + dx;
                                }
                            }
                            if (_4e8 || _4ea) {
                                h = Math.min(dojo.dnd.V_TRIGGER_AUTOSCROLL, b.h / 2);
                                ry = e.pageY - t.y;
                                if (dojo.isWebKit || dojo.isOpera) {
                                    ry += dojo.body().scrollTop;
                                }
                                dy = 0;
                                if (ry > 0 && ry < b.h) {
                                    if (ry < h) {
                                        dy = -h;
                                    } else {
                                        if (ry > b.h - h) {
                                            dy = h;
                                        }
                                    }
                                    _4e7 = n.scrollTop;
                                    n.scrollTop = n.scrollTop + dy;
                                }
                            }
                            if (dx || dy) {
                                return;
                            }
                        }
                        try {
                            n = n.parentNode;
                        } catch (x) {
                            n = null;
                        }
                    }
                    dojo.dnd.autoScroll(e);
                };
                return dojo.dnd;
            });
        },
        "dojo/dnd/Avatar": function () {
            define(["../main", "./common"], function (dojo) {
                dojo.declare("dojo.dnd.Avatar", null, {
                    constructor: function (_4eb) {
                        this.manager = _4eb;
                        this.construct();
                    },
                    construct: function () {
                        this.isA11y = dojo.hasClass(dojo.body(), "dijit_a11y");
                        var a = dojo.create("table", {
                            "class": "dojoDndAvatar",
                            style: {
                                position: "absolute",
                                zIndex: "1999",
                                margin: "0px"
                            }
                        }),
                            _4ec = this.manager.source,
                            node, b = dojo.create("tbody", null, a),
                            tr = dojo.create("tr", null, b),
                            td = dojo.create("td", null, tr),
                            icon = this.isA11y ? dojo.create("span", {
                                id: "a11yIcon",
                                innerHTML: this.manager.copy ? "+" : "<"
                            }, td) : null,
                            span = dojo.create("span", {
                                innerHTML: _4ec.generateText ? this._generateText() : ""
                            }, td),
                            k = Math.min(5, this.manager.nodes.length),
                            i = 0;
                        dojo.attr(tr, {
                            "class": "dojoDndAvatarHeader",
                            style: {
                                opacity: 0.9
                            }
                        });
                        for (; i < k; ++i) {
                            if (_4ec.creator) {
                                node = _4ec._normalizedCreator(_4ec.getItem(this.manager.nodes[i].id).data, "avatar").node;
                            } else {
                                node = this.manager.nodes[i].cloneNode(true);
                                if (node.tagName.toLowerCase() == "tr") {
                                    var _4ed = dojo.create("table"),
                                        _4ee = dojo.create("tbody", null, _4ed);
                                    _4ee.appendChild(node);
                                    node = _4ed;
                                }
                            }
                            node.id = "";
                            tr = dojo.create("tr", null, b);
                            td = dojo.create("td", null, tr);
                            td.appendChild(node);
                            dojo.attr(tr, {
                                "class": "dojoDndAvatarItem",
                                style: {
                                    opacity: (9 - i) / 10
                                }
                            });
                        }
                        this.node = a;
                    },
                    destroy: function () {
                        dojo.destroy(this.node);
                        this.node = false;
                    },
                    update: function () {
                        dojo[(this.manager.canDropFlag ? "add" : "remove") + "Class"](this.node, "dojoDndAvatarCanDrop");
                        if (this.isA11y) {
                            var icon = dojo.byId("a11yIcon");
                            var text = "+";
                            if (this.manager.canDropFlag && !this.manager.copy) {
                                text = "< ";
                            } else {
                                if (!this.manager.canDropFlag && !this.manager.copy) {
                                    text = "o";
                                } else {
                                    if (!this.manager.canDropFlag) {
                                        text = "x";
                                    }
                                }
                            }
                            icon.innerHTML = text;
                        }
                        dojo.query(("tr.dojoDndAvatarHeader td span" + (this.isA11y ? " span" : "")), this.node).forEach(function (node) {
                            node.innerHTML = this._generateText();
                        }, this);
                    },
                    _generateText: function () {
                        return this.manager.nodes.length.toString();
                    }
                });
                return dojo.dnd.Avatar;
            });
        },
        "dijit/_TemplatedMixin": function () {
            define("dijit/_TemplatedMixin", ["dojo/_base/lang", "dojo/touch", "./_WidgetBase", "dojo/string", "dojo/cache", "dojo/_base/array", "dojo/_base/declare", "dojo/dom-construct", "dojo/_base/sniff", "dojo/_base/unload", "dojo/_base/window"], function (lang, _4ef, _4f0, _4f1, _4f2, _4f3, _4f4, _4f5, has, _4f6, win) {
                var _4f7 = _4f4("dijit._TemplatedMixin", null, {
                    templateString: null,
                    templatePath: null,
                    _skipNodeCache: false,
                    _earlyTemplatedStartup: false,
                    constructor: function () {
                        this._attachPoints = [];
                        this._attachEvents = [];
                    },
                    _stringRepl: function (tmpl) {
                        var _4f8 = this.declaredClass,
                            _4f9 = this;
                        return _4f1.substitute(tmpl, this, function (_4fa, key) {
                            if (key.charAt(0) == "!") {
                                _4fa = lang.getObject(key.substr(1), false, _4f9);
                            }
                            if (typeof _4fa == "undefined") {
                                throw new Error(_4f8 + " template:" + key);
                            }
                            if (_4fa == null) {
                                return "";
                            }
                            return key.charAt(0) == "!" ? _4fa : _4fa.toString().replace(/"/g, "&quot;");
                        }, this);
                    },
                    buildRendering: function () {
                        if (!this.templateString) {
                            this.templateString = _4f2(this.templatePath, {
                                sanitize: true
                            });
                        }
                        var _4fb = _4f7.getCachedTemplate(this.templateString, this._skipNodeCache);
                        var node;
                        if (lang.isString(_4fb)) {
                            node = _4f5.toDom(this._stringRepl(_4fb));
                            if (node.nodeType != 1) {
                                throw new Error("Invalid template: " + _4fb);
                            }
                        } else {
                            node = _4fb.cloneNode(true);
                        }
                        this.domNode = node;
                        this.inherited(arguments);
                        this._attachTemplateNodes(node, function (n, p) {
                            return n.getAttribute(p);
                        });
                        this._beforeFillContent();
                        this._fillContent(this.srcNodeRef);
                    },
                    _beforeFillContent: function () {},
                    _fillContent: function (_4fc) {
                        var dest = this.containerNode;
                        if (_4fc && dest) {
                            while (_4fc.hasChildNodes()) {
                                dest.appendChild(_4fc.firstChild);
                            }
                        }
                    },
                    _attachTemplateNodes: function (_4fd, _4fe) {
                        var _4ff = lang.isArray(_4fd) ? _4fd : (_4fd.all || _4fd.getElementsByTagName("*"));
                        var x = lang.isArray(_4fd) ? 0 : -1;
                        for (; x < _4ff.length; x++) {
                            var _500 = (x == -1) ? _4fd : _4ff[x];
                            if (this.widgetsInTemplate && (_4fe(_500, "dojoType") || _4fe(_500, "data-dojo-type"))) {
                                continue;
                            }
                            var _501 = _4fe(_500, "dojoAttachPoint") || _4fe(_500, "data-dojo-attach-point");
                            if (_501) {
                                var _502, _503 = _501.split(/\s*,\s*/);
                                while ((_502 = _503.shift())) {
                                    if (lang.isArray(this[_502])) {
                                        this[_502].push(_500);
                                    } else {
                                        this[_502] = _500;
                                    }
                                    this._attachPoints.push(_502);
                                }
                            }
                            var _504 = _4fe(_500, "dojoAttachEvent") || _4fe(_500, "data-dojo-attach-event");
                            if (_504) {
                                var _505, _506 = _504.split(/\s*,\s*/);
                                var trim = lang.trim;
                                while ((_505 = _506.shift())) {
                                    if (_505) {
                                        var _507 = null;
                                        if (_505.indexOf(":") != -1) {
                                            var _508 = _505.split(":");
                                            _505 = trim(_508[0]);
                                            _507 = trim(_508[1]);
                                        } else {
                                            _505 = trim(_505);
                                        }
                                        if (!_507) {
                                            _507 = _505;
                                        }
                                        this._attachEvents.push(this.connect(_500, _4ef[_505] || _505, _507));
                                    }
                                }
                            }
                        }
                    },
                    destroyRendering: function () {
                        _4f3.forEach(this._attachPoints, function (_509) {
                            delete this[_509];
                        }, this);
                        this._attachPoints = [];
                        _4f3.forEach(this._attachEvents, this.disconnect, this);
                        this._attachEvents = [];
                        this.inherited(arguments);
                    }
                });
                _4f7._templateCache = {};
                _4f7.getCachedTemplate = function (_50a, _50b) {
                    var _50c = _4f7._templateCache;
                    var key = _50a;
                    var _50d = _50c[key];
                    if (_50d) {
                        try {
                            if (!_50d.ownerDocument || _50d.ownerDocument == win.doc) {
                                return _50d;
                            }
                        } catch (e) {}
                        _4f5.destroy(_50d);
                    }
                    _50a = _4f1.trim(_50a);
                    if (_50b || _50a.match(/\$\{([^\}]+)\}/g)) {
                        return (_50c[key] = _50a);
                    } else {
                        var node = _4f5.toDom(_50a);
                        if (node.nodeType != 1) {
                            throw new Error("Invalid template: " + _50a);
                        }
                        return (_50c[key] = node);
                    }
                };
                if (has("ie")) {
                    _4f6.addOnWindowUnload(function () {
                        var _50e = _4f7._templateCache;
                        for (var key in _50e) {
                            var _50f = _50e[key];
                            if (typeof _50f == "object") {
                                _4f5.destroy(_50f);
                            }
                            delete _50e[key];
                        }
                    });
                }
                lang.extend(_4f0, {
                    dojoAttachEvent: "",
                    dojoAttachPoint: ""
                });
                return _4f7;
            });
        },
        "dojo/touch": function () {
            define(["./_base/kernel", "./on", "./has", "./mouse"], function (dojo, on, has, _510) {
                function _511(type) {
                    return function (node, _512) {
                        return on(node, type, _512);
                    };
                };
                var _513 = has("touch");
                dojo.touch = {
                    press: _511(_513 ? "touchstart" : "mousedown"),
                    move: _511(_513 ? "touchmove" : "mousemove"),
                    release: _511(_513 ? "touchend" : "mouseup"),
                    cancel: _513 ? _511("touchcancel") : _510.leave
                };
                return dojo.touch;
            });
        },
        "dojo/string": function () {
            define(["./_base/kernel", "./_base/lang"], function (dojo, lang) {
                lang.getObject("string", true, dojo);
                dojo.string.rep = function (str, num) {
                    if (num <= 0 || !str) {
                        return "";
                    }
                    var buf = [];
                    for (;;) {
                        if (num & 1) {
                            buf.push(str);
                        }
                        if (!(num >>= 1)) {
                            break;
                        }
                        str += str;
                    }
                    return buf.join("");
                };
                dojo.string.pad = function (text, size, ch, end) {
                    if (!ch) {
                        ch = "0";
                    }
                    var out = String(text),
                        pad = dojo.string.rep(ch, Math.ceil((size - out.length) / ch.length));
                    return end ? out + pad : pad + out;
                };
                dojo.string.substitute = function (_514, map, _515, _516) {
                    _516 = _516 || dojo.global;
                    _515 = _515 ? lang.hitch(_516, _515) : function (v) {
                        return v;
                    };
                    return _514.replace(/\$\{([^\s\:\}]+)(?:\:([^\s\:\}]+))?\}/g, function (_517, key, _518) {
                        var _519 = lang.getObject(key, false, map);
                        if (_518) {
                            _519 = lang.getObject(_518, false, _516).call(_516, _519, key);
                        }
                        return _515(_519, key).toString();
                    });
                };
                dojo.string.trim = String.prototype.trim ? lang.trim : function (str) {
                    str = str.replace(/^\s+/, "");
                    for (var i = str.length - 1; i >= 0; i--) {
                        if (/\S/.test(str.charAt(i))) {
                            str = str.substring(0, i + 1);
                            break;
                        }
                    }
                    return str;
                };
                return dojo.string;
            });
        },
        "dojo/cache": function () {
            define(["./_base/kernel", "./text"], function (dojo, text) {
                return dojo.cache;
            });
        },
        "dojox/html/metrics": function () {
            define("dojox/html/metrics", ["dojo/_base/kernel", "dojo/_base/lang", "dojo/_base/sniff", "dojo/ready", "dojo/_base/unload", "dojo/_base/window", "dojo/dom-geometry"], function (_51a, lang, has, _51b, _51c, _51d, _51e) {
                var dhm = lang.getObject("dojox.html.metrics", true);
                var _51f = lang.getObject("dojox");
                dhm.getFontMeasurements = function () {
                    var _520 = {
                        "1em": 0,
                        "1ex": 0,
                        "100%": 0,
                        "12pt": 0,
                        "16px": 0,
                        "xx-small": 0,
                        "x-small": 0,
                        "small": 0,
                        "medium": 0,
                        "large": 0,
                        "x-large": 0,
                        "xx-large": 0
                    };
                    if (has("ie")) {
                        _51d.doc.documentElement.style.fontSize = "100%";
                    }
                    var div = _51d.doc.createElement("div");
                    var ds = div.style;
                    ds.position = "absolute";
                    ds.left = "-100px";
                    ds.top = "0";
                    ds.width = "30px";
                    ds.height = "1000em";
                    ds.borderWidth = "0";
                    ds.margin = "0";
                    ds.padding = "0";
                    ds.outline = "0";
                    ds.lineHeight = "1";
                    ds.overflow = "hidden";
                    _51d.body().appendChild(div);
                    for (var p in _520) {
                        ds.fontSize = p;
                        _520[p] = Math.round(div.offsetHeight * 12 / 16) * 16 / 12 / 1000;
                    }
                    _51d.body().removeChild(div);
                    div = null;
                    return _520;
                };
                var _521 = null;
                dhm.getCachedFontMeasurements = function (_522) {
                    if (_522 || !_521) {
                        _521 = dhm.getFontMeasurements();
                    }
                    return _521;
                };
                var _523 = null,
                    _524 = {};
                dhm.getTextBox = function (text, _525, _526) {
                    var m, s;
                    if (!_523) {
                        m = _523 = _51d.doc.createElement("div");
                        var c = _51d.doc.createElement("div");
                        c.appendChild(m);
                        s = c.style;
                        s.overflow = "scroll";
                        s.position = "absolute";
                        s.left = "0px";
                        s.top = "-10000px";
                        s.width = "1px";
                        s.height = "1px";
                        s.visibility = "hidden";
                        s.borderWidth = "0";
                        s.margin = "0";
                        s.padding = "0";
                        s.outline = "0";
                        _51d.body().appendChild(c);
                    } else {
                        m = _523;
                    }
                    m.className = "";
                    s = m.style;
                    s.borderWidth = "0";
                    s.margin = "0";
                    s.padding = "0";
                    s.outline = "0";
                    if (arguments.length > 1 && _525) {
                        for (var i in _525) {
                            if (i in _524) {
                                continue;
                            }
                            s[i] = _525[i];
                        }
                    }
                    if (arguments.length > 2 && _526) {
                        m.className = _526;
                    }
                    m.innerHTML = text;
                    var box = _51e.position(m);
                    box.w = m.parentNode.scrollWidth;
                    return box;
                };
                var _527 = {
                    w: 16,
                    h: 16
                };
                dhm.getScrollbar = function () {
                    return {
                        w: _527.w,
                        h: _527.h
                    };
                };
                dhm._fontResizeNode = null;
                dhm.initOnFontResize = function (_528) {
                    var f = dhm._fontResizeNode = _51d.doc.createElement("iframe");
                    var fs = f.style;
                    fs.position = "absolute";
                    fs.width = "5em";
                    fs.height = "10em";
                    fs.top = "-10000px";
                    if (has("ie")) {
                        f.onreadystatechange = function () {
                            if (f.contentWindow.document.readyState == "complete") {
                                f.onresize = f.contentWindow.parent[_51f._scopeName].html.metrics._fontresize;
                            }
                        };
                    } else {
                        f.onload = function () {
                            f.contentWindow.onresize = f.contentWindow.parent[_51f._scopeName].html.metrics._fontresize;
                        };
                    }
                    f.setAttribute("src", "javascript:'<html><head><script>if(\"loadFirebugConsole\" in window){window.loadFirebugConsole();}</script></head><body></body></html>'");
                    _51d.body().appendChild(f);
                    dhm.initOnFontResize = function () {};
                };
                dhm.onFontResize = function () {};
                dhm._fontresize = function () {
                    dhm.onFontResize();
                };
                _51c.addOnUnload(function () {
                    var f = dhm._fontResizeNode;
                    if (f) {
                        if (has("ie") && f.onresize) {
                            f.onresize = null;
                        } else {
                            if (f.contentWindow && f.contentWindow.onresize) {
                                f.contentWindow.onresize = null;
                            }
                        }
                        dhm._fontResizeNode = null;
                    }
                });
                _51b(function () {
                    try {
                        var n = _51d.doc.createElement("div");
                        n.style.cssText = "top:0;left:0;width:100px;height:100px;overflow:scroll;position:absolute;visibility:hidden;";
                        _51d.body().appendChild(n);
                        _527.w = n.offsetWidth - n.clientWidth;
                        _527.h = n.offsetHeight - n.clientHeight;
                        _51d.body().removeChild(n);
                        delete n;
                    } catch (e) {}
                    if ("fontSizeWatch" in _51a.config && !! _51a.config.fontSizeWatch) {
                        dhm.initOnFontResize();
                    }
                });
                return dhm;
            });
        },
        "dojox/grid/_Builder": function () {
            define("dojox/grid/_Builder", ["../main", "dojo/_base/array", "dojo/_base/lang", "dojo/_base/window", "dojo/_base/event", "dojo/_base/sniff", "dojo/_base/connect", "dojo/dnd/Moveable", "dojox/html/metrics", "./util", "dojo/_base/html"], function (_529, _52a, lang, win, _52b, has, _52c, _52d, _52e, util, html) {
                var dg = _529.grid;
                var _52f = function (td) {
                        return td.cellIndex >= 0 ? td.cellIndex : _52a.indexOf(td.parentNode.cells, td);
                    };
                var _530 = function (tr) {
                        return tr.rowIndex >= 0 ? tr.rowIndex : _52a.indexOf(tr.parentNode.childNodes, tr);
                    };
                var _531 = function (_532, _533) {
                        return _532 && ((_532.rows || 0)[_533] || _532.childNodes[_533]);
                    };
                var _534 = function (node) {
                        for (var n = node; n && n.tagName != "TABLE"; n = n.parentNode) {}
                        return n;
                    };
                var _535 = function (_536, _537) {
                        for (var n = _536; n && _537(n); n = n.parentNode) {}
                        return n;
                    };
                var _538 = function (_539) {
                        var name = _539.toUpperCase();
                        return function (node) {
                            return node.tagName != name;
                        };
                    };
                var _53a = util.rowIndexTag;
                var _53b = util.gridViewTag;
                var _53c = dg._Builder = lang.extend(function (view) {
                    if (view) {
                        this.view = view;
                        this.grid = view.grid;
                    }
                }, {
                    view: null,
                    _table: "<table class=\"dojoxGridRowTable\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" role=\"presentation\"",
                    getTableArray: function () {
                        var html = [this._table];
                        if (this.view.viewWidth) {
                            html.push([" style=\"width:", this.view.viewWidth, ";\""].join(""));
                        }
                        html.push(">");
                        return html;
                    },
                    generateCellMarkup: function (_53d, _53e, _53f, _540) {
                        var _541 = [],
                            html;
                        if (_540) {
                            var _542 = _53d.index != _53d.grid.getSortIndex() ? "" : _53d.grid.sortInfo > 0 ? "aria-sort=\"ascending\"" : "aria-sort=\"descending\"";
                            if (!_53d.id) {
                                _53d.id = this.grid.id + "Hdr" + _53d.index;
                            }
                            html = ["<th tabIndex=\"-1\" aria-readonly=\"true\" role=\"columnheader\"", _542, "id=\"", _53d.id, "\""];
                        } else {
                            var _543 = this.grid.editable && !_53d.editable ? "aria-readonly=\"true\"" : "";
                            html = ["<td tabIndex=\"-1\" role=\"gridcell\"", _543];
                        }
                        if (_53d.colSpan) {
                            html.push(" colspan=\"", _53d.colSpan, "\"");
                        }
                        if (_53d.rowSpan) {
                            html.push(" rowspan=\"", _53d.rowSpan, "\"");
                        }
                        html.push(" class=\"dojoxGridCell ");
                        if (_53d.classes) {
                            html.push(_53d.classes, " ");
                        }
                        if (_53f) {
                            html.push(_53f, " ");
                        }
                        _541.push(html.join(""));
                        _541.push("");
                        html = ["\" idx=\"", _53d.index, "\" style=\""];
                        if (_53e && _53e[_53e.length - 1] != ";") {
                            _53e += ";";
                        }
                        html.push(_53d.styles, _53e || "", _53d.hidden ? "display:none;" : "");
                        if (_53d.unitWidth) {
                            html.push("width:", _53d.unitWidth, ";");
                        }
                        _541.push(html.join(""));
                        _541.push("");
                        html = ["\""];
                        if (_53d.attrs) {
                            html.push(" ", _53d.attrs);
                        }
                        html.push(">");
                        _541.push(html.join(""));
                        _541.push("");
                        _541.push(_540 ? "</th>" : "</td>");
                        return _541;
                    },
                    isCellNode: function (_544) {
                        return Boolean(_544 && _544 != win.doc && html.attr(_544, "idx"));
                    },
                    getCellNodeIndex: function (_545) {
                        return _545 ? Number(html.attr(_545, "idx")) : -1;
                    },
                    getCellNode: function (_546, _547) {
                        for (var i = 0, row;
                        ((row = _531(_546.firstChild, i)) && row.cells); i++) {
                            for (var j = 0, cell;
                            (cell = row.cells[j]); j++) {
                                if (this.getCellNodeIndex(cell) == _547) {
                                    return cell;
                                }
                            }
                        }
                        return null;
                    },
                    findCellTarget: function (_548, _549) {
                        var n = _548;
                        while (n && (!this.isCellNode(n) || (n.offsetParent && _53b in n.offsetParent.parentNode && n.offsetParent.parentNode[_53b] != this.view.id)) && (n != _549)) {
                            n = n.parentNode;
                        }
                        return n != _549 ? n : null;
                    },
                    baseDecorateEvent: function (e) {
                        e.dispatch = "do" + e.type;
                        e.grid = this.grid;
                        e.sourceView = this.view;
                        e.cellNode = this.findCellTarget(e.target, e.rowNode);
                        e.cellIndex = this.getCellNodeIndex(e.cellNode);
                        e.cell = (e.cellIndex >= 0 ? this.grid.getCell(e.cellIndex) : null);
                    },
                    findTarget: function (_54a, _54b) {
                        var n = _54a;
                        while (n && (n != this.domNode) && (!(_54b in n) || (_53b in n && n[_53b] != this.view.id))) {
                            n = n.parentNode;
                        }
                        return (n != this.domNode) ? n : null;
                    },
                    findRowTarget: function (_54c) {
                        return this.findTarget(_54c, _53a);
                    },
                    isIntraNodeEvent: function (e) {
                        try {
                            return (e.cellNode && e.relatedTarget && html.isDescendant(e.relatedTarget, e.cellNode));
                        } catch (x) {
                            return false;
                        }
                    },
                    isIntraRowEvent: function (e) {
                        try {
                            var row = e.relatedTarget && this.findRowTarget(e.relatedTarget);
                            return !row && (e.rowIndex == -1) || row && (e.rowIndex == row.gridRowIndex);
                        } catch (x) {
                            return false;
                        }
                    },
                    dispatchEvent: function (e) {
                        if (e.dispatch in this) {
                            return this[e.dispatch](e);
                        }
                        return false;
                    },
                    domouseover: function (e) {
                        if (e.cellNode && (e.cellNode != this.lastOverCellNode)) {
                            this.lastOverCellNode = e.cellNode;
                            this.grid.onMouseOver(e);
                        }
                        this.grid.onMouseOverRow(e);
                    },
                    domouseout: function (e) {
                        if (e.cellNode && (e.cellNode == this.lastOverCellNode) && !this.isIntraNodeEvent(e, this.lastOverCellNode)) {
                            this.lastOverCellNode = null;
                            this.grid.onMouseOut(e);
                            if (!this.isIntraRowEvent(e)) {
                                this.grid.onMouseOutRow(e);
                            }
                        }
                    },
                    domousedown: function (e) {
                        if (e.cellNode) {
                            this.grid.onMouseDown(e);
                        }
                        this.grid.onMouseDownRow(e);
                    }
                });
                var _54d = dg._ContentBuilder = lang.extend(function (view) {
                    _53c.call(this, view);
                }, _53c.prototype, {
                    update: function () {
                        this.prepareHtml();
                    },
                    prepareHtml: function () {
                        var _54e = this.grid.get,
                            _54f = this.view.structure.cells;
                        for (var j = 0, row;
                        (row = _54f[j]); j++) {
                            for (var i = 0, cell;
                            (cell = row[i]); i++) {
                                cell.get = cell.get || (cell.value == undefined) && _54e;
                                cell.markup = this.generateCellMarkup(cell, cell.cellStyles, cell.cellClasses, false);
                                if (!this.grid.editable && cell.editable) {
                                    this.grid.editable = true;
                                }
                            }
                        }
                    },
                    generateHtml: function (_550, _551) {
                        var html = this.getTableArray(),
                            v = this.view,
                            _552 = v.structure.cells,
                            item = this.grid.getItem(_551);
                        util.fire(this.view, "onBeforeRow", [_551, _552]);
                        for (var j = 0, row;
                        (row = _552[j]); j++) {
                            if (row.hidden || row.header) {
                                continue;
                            }
                            html.push(!row.invisible ? "<tr>" : "<tr class=\"dojoxGridInvisible\">");
                            for (var i = 0, cell, m, cc, cs;
                            (cell = row[i]); i++) {
                                m = cell.markup;
                                cc = cell.customClasses = [];
                                cs = cell.customStyles = [];
                                m[5] = cell.format(_551, item);
                                if (has("ie") < 8 && (m[5] === null || m[5] === "" || /^\s+$/.test(m[5]))) {
                                    m[5] = "&nbsp;";
                                }
                                m[1] = cc.join(" ");
                                m[3] = cs.join(";");
                                html.push.apply(html, m);
                            }
                            html.push("</tr>");
                        }
                        html.push("</table>");
                        return html.join("");
                    },
                    decorateEvent: function (e) {
                        e.rowNode = this.findRowTarget(e.target);
                        if (!e.rowNode) {
                            return false;
                        }
                        e.rowIndex = e.rowNode[_53a];
                        this.baseDecorateEvent(e);
                        e.cell = this.grid.getCell(e.cellIndex);
                        return true;
                    }
                });
                var _553 = dg._HeaderBuilder = lang.extend(function (view) {
                    this.moveable = null;
                    _53c.call(this, view);
                }, _53c.prototype, {
                    _skipBogusClicks: false,
                    overResizeWidth: 4,
                    minColWidth: 1,
                    update: function () {
                        if (this.tableMap) {
                            this.tableMap.mapRows(this.view.structure.cells);
                        } else {
                            this.tableMap = new dg._TableMap(this.view.structure.cells);
                        }
                    },
                    generateHtml: function (_554, _555) {
                        var html = this.getTableArray(),
                            _556 = this.view.structure.cells;
                        util.fire(this.view, "onBeforeRow", [-1, _556]);
                        for (var j = 0, row;
                        (row = _556[j]); j++) {
                            if (row.hidden) {
                                continue;
                            }
                            html.push(!row.invisible ? "<tr>" : "<tr class=\"dojoxGridInvisible\">");
                            for (var i = 0, cell, _557;
                            (cell = row[i]); i++) {
                                cell.customClasses = [];
                                cell.customStyles = [];
                                if (this.view.simpleStructure) {
                                    if (cell.draggable) {
                                        if (cell.headerClasses) {
                                            if (cell.headerClasses.indexOf("dojoDndItem") == -1) {
                                                cell.headerClasses += " dojoDndItem";
                                            }
                                        } else {
                                            cell.headerClasses = "dojoDndItem";
                                        }
                                    }
                                    if (cell.attrs) {
                                        if (cell.attrs.indexOf("dndType='gridColumn_") == -1) {
                                            cell.attrs += " dndType='gridColumn_" + this.grid.id + "'";
                                        }
                                    } else {
                                        cell.attrs = "dndType='gridColumn_" + this.grid.id + "'";
                                    }
                                }
                                _557 = this.generateCellMarkup(cell, cell.headerStyles, cell.headerClasses, true);
                                _557[5] = (_555 != undefined ? _555 : _554(cell));
                                _557[3] = cell.customStyles.join(";");
                                _557[1] = cell.customClasses.join(" ");
                                html.push(_557.join(""));
                            }
                            html.push("</tr>");
                        }
                        html.push("</table>");
                        return html.join("");
                    },
                    getCellX: function (e) {
                        var n, x = e.layerX;
                        if (has("mozilla") || has("ie") >= 9) {
                            n = _535(e.target, _538("th"));
                            x -= (n && n.offsetLeft) || 0;
                            var t = e.sourceView.getScrollbarWidth();
                            if (!this.grid.isLeftToRight()) {
                                table = _535(n, _538("table"));
                                x -= (table && table.offsetLeft) || 0;
                            }
                        }
                        n = _535(e.target, function () {
                            if (!n || n == e.cellNode) {
                                return false;
                            }
                            x += (n.offsetLeft < 0 ? 0 : n.offsetLeft);
                            return true;
                        });
                        return x;
                    },
                    decorateEvent: function (e) {
                        this.baseDecorateEvent(e);
                        e.rowIndex = -1;
                        e.cellX = this.getCellX(e);
                        return true;
                    },
                    prepareResize: function (e, mod) {
                        do {
                            var i = e.cellIndex;
                            e.cellNode = (i ? e.cellNode.parentNode.cells[i + mod] : null);
                            e.cellIndex = (e.cellNode ? this.getCellNodeIndex(e.cellNode) : -1);
                        } while (e.cellNode && e.cellNode.style.display == "none");
                        return Boolean(e.cellNode);
                    },
                    canResize: function (e) {
                        if (!e.cellNode || e.cellNode.colSpan > 1) {
                            return false;
                        }
                        var cell = this.grid.getCell(e.cellIndex);
                        return !cell.noresize && cell.canResize();
                    },
                    overLeftResizeArea: function (e) {
                        if (html.hasClass(win.body(), "dojoDndMove")) {
                            return false;
                        }
                        if (has("ie")) {
                            var tN = e.target;
                            if (html.hasClass(tN, "dojoxGridArrowButtonNode") || html.hasClass(tN, "dojoxGridArrowButtonChar") || html.hasClass(tN, "dojoxGridColCaption")) {
                                return false;
                            }
                        }
                        if (this.grid.isLeftToRight()) {
                            return (e.cellIndex > 0) && (e.cellX > 0 && e.cellX < this.overResizeWidth) && this.prepareResize(e, -1);
                        }
                        var t = e.cellNode && (e.cellX > 0 && e.cellX < this.overResizeWidth);
                        return t;
                    },
                    overRightResizeArea: function (e) {
                        if (html.hasClass(win.body(), "dojoDndMove")) {
                            return false;
                        }
                        if (has("ie")) {
                            var tN = e.target;
                            if (html.hasClass(tN, "dojoxGridArrowButtonNode") || html.hasClass(tN, "dojoxGridArrowButtonChar") || html.hasClass(tN, "dojoxGridColCaption")) {
                                return false;
                            }
                        }
                        if (this.grid.isLeftToRight()) {
                            return e.cellNode && (e.cellX >= e.cellNode.offsetWidth - this.overResizeWidth);
                        }
                        return (e.cellIndex > 0) && (e.cellX >= e.cellNode.offsetWidth - this.overResizeWidth) && this.prepareResize(e, -1);
                    },
                    domousemove: function (e) {
                        if (!this.moveable) {
                            var c = (this.overRightResizeArea(e) ? "dojoxGridColResize" : (this.overLeftResizeArea(e) ? "dojoxGridColResize" : ""));
                            if (c && !this.canResize(e)) {
                                c = "dojoxGridColNoResize";
                            }
                            html.toggleClass(e.sourceView.headerNode, "dojoxGridColNoResize", (c == "dojoxGridColNoResize"));
                            html.toggleClass(e.sourceView.headerNode, "dojoxGridColResize", (c == "dojoxGridColResize"));
                            if (c) {
                                _52b.stop(e);
                            }
                        }
                    },
                    domousedown: function (e) {
                        if (!this.moveable) {
                            if ((this.overRightResizeArea(e) || this.overLeftResizeArea(e)) && this.canResize(e)) {
                                this.beginColumnResize(e);
                            } else {
                                this.grid.onMouseDown(e);
                                this.grid.onMouseOverRow(e);
                            }
                        }
                    },
                    doclick: function (e) {
                        if (this._skipBogusClicks) {
                            _52b.stop(e);
                            return true;
                        }
                        return false;
                    },
                    colResizeSetup: function (e, _558) {
                        var _559 = html.contentBox(e.sourceView.headerNode);
                        if (_558) {
                            this.lineDiv = document.createElement("div");
                            var vw = html.position(e.sourceView.headerNode, true);
                            var _55a = html.contentBox(e.sourceView.domNode);
                            var l = e.pageX;
                            if (!this.grid.isLeftToRight() && has("ie") < 8) {
                                l -= _52e.getScrollbar().w;
                            }
                            html.style(this.lineDiv, {
                                top: vw.y + "px",
                                left: l + "px",
                                height: (_55a.h + _559.h) + "px"
                            });
                            html.addClass(this.lineDiv, "dojoxGridResizeColLine");
                            this.lineDiv._origLeft = l;
                            win.body().appendChild(this.lineDiv);
                        }
                        var _55b = [],
                            _55c = this.tableMap.findOverlappingNodes(e.cellNode);
                        for (var i = 0, cell;
                        (cell = _55c[i]); i++) {
                            _55b.push({
                                node: cell,
                                index: this.getCellNodeIndex(cell),
                                width: cell.offsetWidth
                            });
                        }
                        var view = e.sourceView;
                        var adj = this.grid.isLeftToRight() ? 1 : -1;
                        var _55d = e.grid.views.views;
                        var _55e = [];
                        for (var j = view.idx + adj, _55f;
                        (_55f = _55d[j]); j = j + adj) {
                            _55e.push({
                                node: _55f.headerNode,
                                left: window.parseInt(_55f.headerNode.style.left)
                            });
                        }
                        var _560 = view.headerContentNode.firstChild;
                        var drag = {
                            scrollLeft: e.sourceView.headerNode.scrollLeft,
                            view: view,
                            node: e.cellNode,
                            index: e.cellIndex,
                            w: html.contentBox(e.cellNode).w,
                            vw: _559.w,
                            table: _560,
                            tw: html.contentBox(_560).w,
                            spanners: _55b,
                            followers: _55e
                        };
                        return drag;
                    },
                    beginColumnResize: function (e) {
                        this.moverDiv = document.createElement("div");
                        html.style(this.moverDiv, {
                            position: "absolute",
                            left: 0
                        });
                        win.body().appendChild(this.moverDiv);
                        html.addClass(this.grid.domNode, "dojoxGridColumnResizing");
                        var m = (this.moveable = new _52d(this.moverDiv));
                        var drag = this.colResizeSetup(e, true);
                        m.onMove = lang.hitch(this, "doResizeColumn", drag);
                        _52c.connect(m, "onMoveStop", lang.hitch(this, function () {
                            this.endResizeColumn(drag);
                            if (drag.node.releaseCapture) {
                                drag.node.releaseCapture();
                            }
                            this.moveable.destroy();
                            delete this.moveable;
                            this.moveable = null;
                            html.removeClass(this.grid.domNode, "dojoxGridColumnResizing");
                        }));
                        if (e.cellNode.setCapture) {
                            e.cellNode.setCapture();
                        }
                        m.onMouseDown(e);
                    },
                    doResizeColumn: function (_561, _562, _563) {
                        var _564 = _563.l;
                        var data = {
                            deltaX: _564,
                            w: _561.w + (this.grid.isLeftToRight() ? _564 : -_564),
                            vw: _561.vw + _564,
                            tw: _561.tw + _564
                        };
                        this.dragRecord = {
                            inDrag: _561,
                            mover: _562,
                            leftTop: _563
                        };
                        if (data.w >= this.minColWidth) {
                            if (!_562) {
                                this.doResizeNow(_561, data);
                            } else {
                                html.style(this.lineDiv, "left", (this.lineDiv._origLeft + data.deltaX) + "px");
                            }
                        }
                    },
                    endResizeColumn: function (_565) {
                        if (this.dragRecord) {
                            var _566 = this.dragRecord.leftTop;
                            var _567 = this.grid.isLeftToRight() ? _566.l : -_566.l;
                            _567 += Math.max(_565.w + _567, this.minColWidth) - (_565.w + _567);
                            if (has("webkit") && _565.spanners.length) {
                                _567 += html._getPadBorderExtents(_565.spanners[0].node).w;
                            }
                            var data = {
                                deltaX: _567,
                                w: _565.w + _567,
                                vw: _565.vw + _567,
                                tw: _565.tw + _567
                            };
                            this.doResizeNow(_565, data);
                            delete this.dragRecord;
                        }
                        html.destroy(this.lineDiv);
                        html.destroy(this.moverDiv);
                        html.destroy(this.moverDiv);
                        delete this.moverDiv;
                        this._skipBogusClicks = true;
                        _565.view.update();
                        this._skipBogusClicks = false;
                        this.grid.onResizeColumn(_565.index);
                    },
                    doResizeNow: function (_568, data) {
                        _568.view.convertColPctToFixed();
                        if (_568.view.flexCells && !_568.view.testFlexCells()) {
                            var t = _534(_568.node);
                            if (t) {
                                (t.style.width = "");
                            }
                        }
                        var i, s, sw, f, fl;
                        for (i = 0;
                        (s = _568.spanners[i]); i++) {
                            sw = s.width + data.deltaX;
                            if (sw > 0) {
                                s.node.style.width = sw + "px";
                                _568.view.setColWidth(s.index, sw);
                            }
                        }
                        if (this.grid.isLeftToRight() || !has("ie")) {
                            for (i = 0;
                            (f = _568.followers[i]); i++) {
                                fl = f.left + data.deltaX;
                                f.node.style.left = fl + "px";
                            }
                        }
                        _568.node.style.width = data.w + "px";
                        _568.view.setColWidth(_568.index, data.w);
                        _568.view.headerNode.style.width = data.vw + "px";
                        _568.view.setColumnsWidth(data.tw);
                        if (!this.grid.isLeftToRight()) {
                            _568.view.headerNode.scrollLeft = _568.scrollLeft + data.deltaX;
                        }
                    }
                });
                dg._TableMap = lang.extend(function (rows) {
                    this.mapRows(rows);
                }, {
                    map: null,
                    mapRows: function (_569) {
                        var _56a = _569.length;
                        if (!_56a) {
                            return;
                        }
                        this.map = [];
                        var row;
                        for (var k = 0;
                        (row = _569[k]); k++) {
                            this.map[k] = [];
                        }
                        for (var j = 0;
                        (row = _569[j]); j++) {
                            for (var i = 0, x = 0, cell, _56b, _56c;
                            (cell = row[i]); i++) {
                                while (this.map[j][x]) {
                                    x++;
                                }
                                this.map[j][x] = {
                                    c: i,
                                    r: j
                                };
                                _56c = cell.rowSpan || 1;
                                _56b = cell.colSpan || 1;
                                for (var y = 0; y < _56c; y++) {
                                    for (var s = 0; s < _56b; s++) {
                                        this.map[j + y][x + s] = this.map[j][x];
                                    }
                                }
                                x += _56b;
                            }
                        }
                    },
                    dumpMap: function () {
                        for (var j = 0, row, h = "";
                        (row = this.map[j]); j++, h = "") {
                            for (var i = 0, cell;
                            (cell = row[i]); i++) {
                                h += cell.r + "," + cell.c + "   ";
                            }
                        }
                    },
                    getMapCoords: function (_56d, _56e) {
                        for (var j = 0, row;
                        (row = this.map[j]); j++) {
                            for (var i = 0, cell;
                            (cell = row[i]); i++) {
                                if (cell.c == _56e && cell.r == _56d) {
                                    return {
                                        j: j,
                                        i: i
                                    };
                                }
                            }
                        }
                        return {
                            j: -1,
                            i: -1
                        };
                    },
                    getNode: function (_56f, _570, _571) {
                        var row = _56f && _56f.rows[_570];
                        return row && row.cells[_571];
                    },
                    _findOverlappingNodes: function (_572, _573, _574) {
                        var _575 = [];
                        var m = this.getMapCoords(_573, _574);
                        for (var j = 0, row;
                        (row = this.map[j]); j++) {
                            if (j == m.j) {
                                continue;
                            }
                            var rw = row[m.i];
                            var n = (rw ? this.getNode(_572, rw.r, rw.c) : null);
                            if (n) {
                                _575.push(n);
                            }
                        }
                        return _575;
                    },
                    findOverlappingNodes: function (_576) {
                        return this._findOverlappingNodes(_534(_576), _530(_576.parentNode), _52f(_576));
                    }
                });
                return {
                    _Builder: _53c,
                    _HeaderBuilder: _553,
                    _ContentBuilder: _54d
                };
            });
        },
        "dojo/dnd/Moveable": function () {
            define(["../main", "../Evented", "../touch", "./Mover"], function (dojo, _577, _578) {
                dojo.declare("dojo.dnd.Moveable", [_577], {
                    handle: "",
                    delay: 0,
                    skip: false,
                    constructor: function (node, _579) {
                        this.node = dojo.byId(node);
                        if (!_579) {
                            _579 = {};
                        }
                        this.handle = _579.handle ? dojo.byId(_579.handle) : null;
                        if (!this.handle) {
                            this.handle = this.node;
                        }
                        this.delay = _579.delay > 0 ? _579.delay : 0;
                        this.skip = _579.skip;
                        this.mover = _579.mover ? _579.mover : dojo.dnd.Mover;
                        this.events = [dojo.connect(this.handle, _578.press, this, "onMouseDown"), dojo.connect(this.handle, "ondragstart", this, "onSelectStart"), dojo.connect(this.handle, "onselectstart", this, "onSelectStart")];
                    },
                    markupFactory: function (_57a, node, ctor) {
                        return new ctor(node, _57a);
                    },
                    destroy: function () {
                        dojo.forEach(this.events, dojo.disconnect);
                        this.events = this.node = this.handle = null;
                    },
                    onMouseDown: function (e) {
                        if (this.skip && dojo.dnd.isFormElement(e)) {
                            return;
                        }
                        if (this.delay) {
                            this.events.push(dojo.connect(this.handle, _578.move, this, "onMouseMove"), dojo.connect(this.handle, _578.release, this, "onMouseUp"));
                            this._lastX = e.pageX;
                            this._lastY = e.pageY;
                        } else {
                            this.onDragDetected(e);
                        }
                        dojo.stopEvent(e);
                    },
                    onMouseMove: function (e) {
                        if (Math.abs(e.pageX - this._lastX) > this.delay || Math.abs(e.pageY - this._lastY) > this.delay) {
                            this.onMouseUp(e);
                            this.onDragDetected(e);
                        }
                        dojo.stopEvent(e);
                    },
                    onMouseUp: function (e) {
                        for (var i = 0; i < 2; ++i) {
                            dojo.disconnect(this.events.pop());
                        }
                        dojo.stopEvent(e);
                    },
                    onSelectStart: function (e) {
                        if (!this.skip || !dojo.dnd.isFormElement(e)) {
                            dojo.stopEvent(e);
                        }
                    },
                    onDragDetected: function (e) {
                        new this.mover(this.node, e, this);
                    },
                    onMoveStart: function (_57b) {
                        dojo.publish("/dnd/move/start", [_57b]);
                        dojo.addClass(dojo.body(), "dojoMove");
                        dojo.addClass(this.node, "dojoMoveItem");
                    },
                    onMoveStop: function (_57c) {
                        dojo.publish("/dnd/move/stop", [_57c]);
                        dojo.removeClass(dojo.body(), "dojoMove");
                        dojo.removeClass(this.node, "dojoMoveItem");
                    },
                    onFirstMove: function (_57d, e) {},
                    onMove: function (_57e, _57f, e) {
                        this.onMoving(_57e, _57f);
                        var s = _57e.node.style;
                        s.left = _57f.l + "px";
                        s.top = _57f.t + "px";
                        this.onMoved(_57e, _57f);
                    },
                    onMoving: function (_580, _581) {},
                    onMoved: function (_582, _583) {}
                });
                return dojo.dnd.Moveable;
            });
        },
        "dojo/dnd/Mover": function () {
            define(["../main", "../Evented", "../touch", "./common", "./autoscroll"], function (dojo, _584, _585) {
                dojo.declare("dojo.dnd.Mover", [_584], {
                    constructor: function (node, e, host) {
                        this.node = dojo.byId(node);
                        this.marginBox = {
                            l: e.pageX,
                            t: e.pageY
                        };
                        this.mouseButton = e.button;
                        var h = (this.host = host),
                            d = node.ownerDocument;
                        this.events = [dojo.connect(d, _585.move, this, "onFirstMove"), dojo.connect(d, _585.move, this, "onMouseMove"), dojo.connect(d, _585.release, this, "onMouseUp"), dojo.connect(d, "ondragstart", dojo.stopEvent), dojo.connect(d.body, "onselectstart", dojo.stopEvent)];
                        if (h && h.onMoveStart) {
                            h.onMoveStart(this);
                        }
                    },
                    onMouseMove: function (e) {
                        dojo.dnd.autoScroll(e);
                        var m = this.marginBox;
                        this.host.onMove(this, {
                            l: m.l + e.pageX,
                            t: m.t + e.pageY
                        }, e);
                        dojo.stopEvent(e);
                    },
                    onMouseUp: function (e) {
                        if (dojo.isWebKit && dojo.isMac && this.mouseButton == 2 ? e.button == 0 : this.mouseButton == e.button) {
                            this.destroy();
                        }
                        dojo.stopEvent(e);
                    },
                    onFirstMove: function (e) {
                        var s = this.node.style,
                            l, t, h = this.host;
                        switch (s.position) {
                        case "relative":
                        case "absolute":
                            l = Math.round(parseFloat(s.left)) || 0;
                            t = Math.round(parseFloat(s.top)) || 0;
                            break;
                        default:
                            s.position = "absolute";
                            var m = dojo.marginBox(this.node);
                            var b = dojo.doc.body;
                            var bs = dojo.getComputedStyle(b);
                            var bm = dojo._getMarginBox(b, bs);
                            var bc = dojo._getContentBox(b, bs);
                            l = m.l - (bc.l - bm.l);
                            t = m.t - (bc.t - bm.t);
                            break;
                        }
                        this.marginBox.l = l - this.marginBox.l;
                        this.marginBox.t = t - this.marginBox.t;
                        if (h && h.onFirstMove) {
                            h.onFirstMove(this, e);
                        }
                        dojo.disconnect(this.events.shift());
                    },
                    destroy: function () {
                        dojo.forEach(this.events, dojo.disconnect);
                        var h = this.host;
                        if (h && h.onMoveStop) {
                            h.onMoveStop(this);
                        }
                        this.events = this.node = this.host = null;
                    }
                });
                return dojo.dnd.Mover;
            });
        },
        "dojox/grid/_ViewManager": function () {
            define("dojox/grid/_ViewManager", ["dojo/_base/declare", "dojo/_base/sniff", "dojo/dom-class"], function (_586, has, _587) {
                return _586("dojox.grid._ViewManager", null, {
                    constructor: function (_588) {
                        this.grid = _588;
                    },
                    defaultWidth: 200,
                    views: [],
                    resize: function () {
                        this.onEach("resize");
                    },
                    render: function () {
                        this.onEach("render");
                    },
                    addView: function (_589) {
                        _589.idx = this.views.length;
                        this.views.push(_589);
                    },
                    destroyViews: function () {
                        for (var i = 0, v; v = this.views[i]; i++) {
                            v.destroy();
                        }
                        this.views = [];
                    },
                    getContentNodes: function () {
                        var _58a = [];
                        for (var i = 0, v; v = this.views[i]; i++) {
                            _58a.push(v.contentNode);
                        }
                        return _58a;
                    },
                    forEach: function (_58b) {
                        for (var i = 0, v; v = this.views[i]; i++) {
                            _58b(v, i);
                        }
                    },
                    onEach: function (_58c, _58d) {
                        _58d = _58d || [];
                        for (var i = 0, v; v = this.views[i]; i++) {
                            if (_58c in v) {
                                v[_58c].apply(v, _58d);
                            }
                        }
                    },
                    normalizeHeaderNodeHeight: function () {
                        var _58e = [];
                        for (var i = 0, v;
                        (v = this.views[i]); i++) {
                            if (v.headerContentNode.firstChild) {
                                _58e.push(v.headerContentNode);
                            }
                        }
                        this.normalizeRowNodeHeights(_58e);
                    },
                    normalizeRowNodeHeights: function (_58f) {
                        var h = 0;
                        var _590 = [];
                        if (this.grid.rowHeight) {
                            h = this.grid.rowHeight;
                        } else {
                            if (_58f.length <= 1) {
                                return;
                            }
                            for (var i = 0, n;
                            (n = _58f[i]); i++) {
                                if (!_587.contains(n, "dojoxGridNonNormalizedCell")) {
                                    _590[i] = n.firstChild.offsetHeight;
                                    h = Math.max(h, _590[i]);
                                }
                            }
                            h = (h >= 0 ? h : 0);
                            if ((has("mozilla") || has("ie") > 8) && h) {
                                h++;
                            }
                        }
                        for (i = 0;
                        (n = _58f[i]); i++) {
                            if (_590[i] != h) {
                                n.firstChild.style.height = h + "px";
                            }
                        }
                    },
                    resetHeaderNodeHeight: function () {
                        for (var i = 0, v, n;
                        (v = this.views[i]); i++) {
                            n = v.headerContentNode.firstChild;
                            if (n) {
                                n.style.height = "";
                            }
                        }
                    },
                    renormalizeRow: function (_591) {
                        var _592 = [];
                        for (var i = 0, v, n;
                        (v = this.views[i]) && (n = v.getRowNode(_591)); i++) {
                            n.firstChild.style.height = "";
                            _592.push(n);
                        }
                        this.normalizeRowNodeHeights(_592);
                    },
                    getViewWidth: function (_593) {
                        return this.views[_593].getWidth() || this.defaultWidth;
                    },
                    measureHeader: function () {
                        this.resetHeaderNodeHeight();
                        this.forEach(function (_594) {
                            _594.headerContentNode.style.height = "";
                        });
                        var h = 0;
                        this.forEach(function (_595) {
                            h = Math.max(_595.headerNode.offsetHeight, h);
                        });
                        return h;
                    },
                    measureContent: function () {
                        var h = 0;
                        this.forEach(function (_596) {
                            h = Math.max(_596.domNode.offsetHeight, h);
                        });
                        return h;
                    },
                    findClient: function (_597) {
                        var c = this.grid.elasticView || -1;
                        if (c < 0) {
                            for (var i = 1, v;
                            (v = this.views[i]); i++) {
                                if (v.viewWidth) {
                                    for (i = 1;
                                    (v = this.views[i]); i++) {
                                        if (!v.viewWidth) {
                                            c = i;
                                            break;
                                        }
                                    }
                                    break;
                                }
                            }
                        }
                        if (c < 0) {
                            c = Math.floor(this.views.length / 2);
                        }
                        return c;
                    },
                    arrange: function (l, w) {
                        var i, v, vw, len = this.views.length,
                            self = this;
                        var c = (w <= 0 ? len : this.findClient());
                        var _598 = function (v, l) {
                                var ds = v.domNode.style;
                                var hs = v.headerNode.style;
                                if (!self.grid.isLeftToRight()) {
                                    ds.right = l + "px";
                                    if (has("ff") < 4 || has("webkit")) {
                                        hs.right = l + v.getScrollbarWidth() + "px";
                                        hs.width = parseInt(hs.width, 10) - v.getScrollbarWidth() + "px";
                                    } else {
                                        hs.right = l + "px";
                                    }
                                } else {
                                    ds.left = l + "px";
                                    hs.left = l + "px";
                                }
                                ds.top = 0 + "px";
                                hs.top = 0;
                            };
                        for (i = 0;
                        (v = this.views[i]) && (i < c); i++) {
                            vw = this.getViewWidth(i);
                            v.setSize(vw, 0);
                            _598(v, l);
                            if (v.headerContentNode && v.headerContentNode.firstChild) {
                                vw = v.getColumnsWidth() + v.getScrollbarWidth();
                            } else {
                                vw = v.domNode.offsetWidth;
                            }
                            l += vw;
                        }
                        i++;
                        var r = w;
                        for (var j = len - 1;
                        (v = this.views[j]) && (i <= j); j--) {
                            vw = this.getViewWidth(j);
                            v.setSize(vw, 0);
                            vw = v.domNode.offsetWidth;
                            r -= vw;
                            _598(v, r);
                        }
                        if (c < len) {
                            v = this.views[c];
                            vw = Math.max(1, r - l);
                            v.setSize(vw + "px", 0);
                            _598(v, l);
                        }
                        return l;
                    },
                    renderRow: function (_599, _59a, _59b) {
                        var _59c = [];
                        for (var i = 0, v, n, _59d;
                        (v = this.views[i]) && (n = _59a[i]); i++) {
                            _59d = v.renderRow(_599);
                            n.appendChild(_59d);
                            _59c.push(_59d);
                        }
                        if (!_59b) {
                            this.normalizeRowNodeHeights(_59c);
                        }
                    },
                    rowRemoved: function (_59e) {
                        this.onEach("rowRemoved", [_59e]);
                    },
                    updateRow: function (_59f, _5a0) {
                        for (var i = 0, v; v = this.views[i]; i++) {
                            v.updateRow(_59f);
                        }
                        if (!_5a0) {
                            this.renormalizeRow(_59f);
                        }
                    },
                    updateRowStyles: function (_5a1) {
                        this.onEach("updateRowStyles", [_5a1]);
                    },
                    setScrollTop: function (_5a2) {
                        var top = _5a2;
                        for (var i = 0, v; v = this.views[i]; i++) {
                            top = v.setScrollTop(_5a2);
                            if (has("ie") && v.headerNode && v.scrollboxNode) {
                                v.headerNode.scrollLeft = v.scrollboxNode.scrollLeft;
                            }
                        }
                        return top;
                    },
                    getFirstScrollingView: function () {
                        for (var i = 0, v;
                        (v = this.views[i]); i++) {
                            if (v.hasHScrollbar() || v.hasVScrollbar()) {
                                return v;
                            }
                        }
                        return null;
                    }
                });
            });
        },
        "dojox/grid/_RowManager": function () {
            define("dojox/grid/_RowManager", ["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-class"], function (_5a3, lang, _5a4) {
                var _5a5 = function (_5a6, _5a7) {
                        if (_5a6.style.cssText == undefined) {
                            _5a6.setAttribute("style", _5a7);
                        } else {
                            _5a6.style.cssText = _5a7;
                        }
                    };
                return _5a3("dojox.grid._RowManager", null, {
                    constructor: function (_5a8) {
                        this.grid = _5a8;
                    },
                    linesToEms: 2,
                    overRow: -2,
                    prepareStylingRow: function (_5a9, _5aa) {
                        return {
                            index: _5a9,
                            node: _5aa,
                            odd: Boolean(_5a9 & 1),
                            selected: !! this.grid.selection.isSelected(_5a9),
                            over: this.isOver(_5a9),
                            customStyles: "",
                            customClasses: "dojoxGridRow"
                        };
                    },
                    styleRowNode: function (_5ab, _5ac) {
                        var row = this.prepareStylingRow(_5ab, _5ac);
                        this.grid.onStyleRow(row);
                        this.applyStyles(row);
                    },
                    applyStyles: function (_5ad) {
                        var i = _5ad;
                        i.node.className = i.customClasses;
                        var h = i.node.style.height;
                        _5a5(i.node, i.customStyles + ";" + (i.node._style || ""));
                        i.node.style.height = h;
                    },
                    updateStyles: function (_5ae) {
                        this.grid.updateRowStyles(_5ae);
                    },
                    setOverRow: function (_5af) {
                        var last = this.overRow;
                        this.overRow = _5af;
                        if ((last != this.overRow) && (lang.isString(last) || last >= 0)) {
                            this.updateStyles(last);
                        }
                        this.updateStyles(this.overRow);
                    },
                    isOver: function (_5b0) {
                        return (this.overRow == _5b0 && !_5a4.contains(this.grid.domNode, "dojoxGridColumnResizing"));
                    }
                });
            });
        },
        "dojox/grid/_FocusManager": function () {
            define("dojox/grid/_FocusManager", ["dojo/_base/array", "dojo/_base/lang", "dojo/_base/declare", "dojo/_base/connect", "dojo/_base/event", "dojo/_base/sniff", "dojo/query", "./util", "dojo/_base/html"], function (_5b1, lang, _5b2, _5b3, _5b4, has, _5b5, util, html) {
                return _5b2("dojox.grid._FocusManager", null, {
                    constructor: function (_5b6) {
                        this.grid = _5b6;
                        this.cell = null;
                        this.rowIndex = -1;
                        this._connects = [];
                        this._headerConnects = [];
                        this.headerMenu = this.grid.headerMenu;
                        this._connects.push(_5b3.connect(this.grid.domNode, "onfocus", this, "doFocus"));
                        this._connects.push(_5b3.connect(this.grid.domNode, "onblur", this, "doBlur"));
                        this._connects.push(_5b3.connect(this.grid.domNode, "mousedown", this, "_mouseDown"));
                        this._connects.push(_5b3.connect(this.grid.domNode, "mouseup", this, "_mouseUp"));
                        this._connects.push(_5b3.connect(this.grid.domNode, "oncontextmenu", this, "doContextMenu"));
                        this._connects.push(_5b3.connect(this.grid.lastFocusNode, "onfocus", this, "doLastNodeFocus"));
                        this._connects.push(_5b3.connect(this.grid.lastFocusNode, "onblur", this, "doLastNodeBlur"));
                        this._connects.push(_5b3.connect(this.grid, "_onFetchComplete", this, "_delayedCellFocus"));
                        this._connects.push(_5b3.connect(this.grid, "postrender", this, "_delayedHeaderFocus"));
                    },
                    destroy: function () {
                        _5b1.forEach(this._connects, _5b3.disconnect);
                        _5b1.forEach(this._headerConnects, _5b3.disconnect);
                        delete this.grid;
                        delete this.cell;
                    },
                    _colHeadNode: null,
                    _colHeadFocusIdx: null,
                    _contextMenuBindNode: null,
                    tabbingOut: false,
                    focusClass: "dojoxGridCellFocus",
                    focusView: null,
                    initFocusView: function () {
                        this.focusView = this.grid.views.getFirstScrollingView() || this.focusView || this.grid.views.views[0];
                        this._initColumnHeaders();
                    },
                    isFocusCell: function (_5b7, _5b8) {
                        return (this.cell == _5b7) && (this.rowIndex == _5b8);
                    },
                    isLastFocusCell: function () {
                        if (this.cell) {
                            return (this.rowIndex == this.grid.rowCount - 1) && (this.cell.index == this.grid.layout.cellCount - 1);
                        }
                        return false;
                    },
                    isFirstFocusCell: function () {
                        if (this.cell) {
                            return (this.rowIndex === 0) && (this.cell.index === 0);
                        }
                        return false;
                    },
                    isNoFocusCell: function () {
                        return (this.rowIndex < 0) || !this.cell;
                    },
                    isNavHeader: function () {
                        return ( !! this._colHeadNode);
                    },
                    getHeaderIndex: function () {
                        if (this._colHeadNode) {
                            return _5b1.indexOf(this._findHeaderCells(), this._colHeadNode);
                        } else {
                            return -1;
                        }
                    },
                    _focusifyCellNode: function (_5b9) {
                        var n = this.cell && this.cell.getNode(this.rowIndex);
                        if (n) {
                            html.toggleClass(n, this.focusClass, _5b9);
                            if (_5b9) {
                                var sl = this.scrollIntoView();
                                try {
                                    if (!this.grid.edit.isEditing()) {
                                        util.fire(n, "focus");
                                        if (sl) {
                                            this.cell.view.scrollboxNode.scrollLeft = sl;
                                        }
                                    }
                                } catch (e) {}
                            }
                        }
                    },
                    _delayedCellFocus: function () {
                        if (this.isNavHeader() || !this.grid.focused) {
                            return;
                        }
                        var n = this.cell && this.cell.getNode(this.rowIndex);
                        if (n) {
                            try {
                                if (!this.grid.edit.isEditing()) {
                                    html.toggleClass(n, this.focusClass, true);
                                    if (this._colHeadNode) {
                                        this.blurHeader();
                                    }
                                    util.fire(n, "focus");
                                }
                            } catch (e) {}
                        }
                    },
                    _delayedHeaderFocus: function () {
                        if (this.isNavHeader()) {
                            this.focusHeader();
                            this.grid.domNode.focus();
                        }
                    },
                    _initColumnHeaders: function () {
                        _5b1.forEach(this._headerConnects, _5b3.disconnect);
                        this._headerConnects = [];
                        var _5ba = this._findHeaderCells();
                        for (var i = 0; i < _5ba.length; i++) {
                            this._headerConnects.push(_5b3.connect(_5ba[i], "onfocus", this, "doColHeaderFocus"));
                            this._headerConnects.push(_5b3.connect(_5ba[i], "onblur", this, "doColHeaderBlur"));
                        }
                    },
                    _findHeaderCells: function () {
                        var _5bb = _5b5("th", this.grid.viewsHeaderNode);
                        var _5bc = [];
                        for (var i = 0; i < _5bb.length; i++) {
                            var _5bd = _5bb[i];
                            var _5be = html.hasAttr(_5bd, "tabIndex");
                            var _5bf = html.attr(_5bd, "tabIndex");
                            if (_5be && _5bf < 0) {
                                _5bc.push(_5bd);
                            }
                        }
                        return _5bc;
                    },
                    _setActiveColHeader: function (_5c0, _5c1, _5c2) {
                        this.grid.domNode.setAttribute("aria-activedescendant", _5c0.id);
                        if (_5c2 != null && _5c2 >= 0 && _5c2 != _5c1) {
                            html.toggleClass(this._findHeaderCells()[_5c2], this.focusClass, false);
                        }
                        html.toggleClass(_5c0, this.focusClass, true);
                        this._colHeadNode = _5c0;
                        this._colHeadFocusIdx = _5c1;
                        this._scrollHeader(this._colHeadFocusIdx);
                    },
                    scrollIntoView: function () {
                        var info = (this.cell ? this._scrollInfo(this.cell) : null);
                        if (!info || !info.s) {
                            return null;
                        }
                        var rt = this.grid.scroller.findScrollTop(this.rowIndex);
                        if (info.n && info.sr) {
                            if (info.n.offsetLeft + info.n.offsetWidth > info.sr.l + info.sr.w) {
                                info.s.scrollLeft = info.n.offsetLeft + info.n.offsetWidth - info.sr.w;
                            } else {
                                if (info.n.offsetLeft < info.sr.l) {
                                    info.s.scrollLeft = info.n.offsetLeft;
                                }
                            }
                        }
                        if (info.r && info.sr) {
                            if (rt + info.r.offsetHeight > info.sr.t + info.sr.h) {
                                this.grid.setScrollTop(rt + info.r.offsetHeight - info.sr.h);
                            } else {
                                if (rt < info.sr.t) {
                                    this.grid.setScrollTop(rt);
                                }
                            }
                        }
                        return info.s.scrollLeft;
                    },
                    _scrollInfo: function (cell, _5c3) {
                        if (cell) {
                            var cl = cell,
                                sbn = cl.view.scrollboxNode,
                                sbnr = {
                                    w: sbn.clientWidth,
                                    l: sbn.scrollLeft,
                                    t: sbn.scrollTop,
                                    h: sbn.clientHeight
                                },
                                rn = cl.view.getRowNode(this.rowIndex);
                            return {
                                c: cl,
                                s: sbn,
                                sr: sbnr,
                                n: (_5c3 ? _5c3 : cell.getNode(this.rowIndex)),
                                r: rn
                            };
                        }
                        return null;
                    },
                    _scrollHeader: function (_5c4) {
                        var info = null;
                        if (this._colHeadNode) {
                            var cell = this.grid.getCell(_5c4);
                            if (!cell) {
                                return;
                            }
                            info = this._scrollInfo(cell, cell.getNode(0));
                        }
                        if (info && info.s && info.sr && info.n) {
                            var _5c5 = info.sr.l + info.sr.w;
                            if (info.n.offsetLeft + info.n.offsetWidth > _5c5) {
                                info.s.scrollLeft = info.n.offsetLeft + info.n.offsetWidth - info.sr.w;
                            } else {
                                if (info.n.offsetLeft < info.sr.l) {
                                    info.s.scrollLeft = info.n.offsetLeft;
                                } else {
                                    if (has("ie") <= 7 && cell && cell.view.headerNode) {
                                        cell.view.headerNode.scrollLeft = info.s.scrollLeft;
                                    }
                                }
                            }
                        }
                    },
                    _isHeaderHidden: function () {
                        var _5c6 = this.focusView;
                        if (!_5c6) {
                            for (var i = 0, _5c7;
                            (_5c7 = this.grid.views.views[i]); i++) {
                                if (_5c7.headerNode) {
                                    _5c6 = _5c7;
                                    break;
                                }
                            }
                        }
                        return (_5c6 && html.getComputedStyle(_5c6.headerNode).display == "none");
                    },
                    colSizeAdjust: function (e, _5c8, _5c9) {
                        var _5ca = this._findHeaderCells();
                        var view = this.focusView;
                        if (!view) {
                            for (var i = 0, _5cb;
                            (_5cb = this.grid.views.views[i]); i++) {
                                if (_5cb.header.tableMap.map) {
                                    view = _5cb;
                                    break;
                                }
                            }
                        }
                        var _5cc = _5ca[_5c8];
                        if (!view || (_5c8 == _5ca.length - 1 && _5c8 === 0)) {
                            return;
                        }
                        view.content.baseDecorateEvent(e);
                        e.cellNode = _5cc;
                        e.cellIndex = view.content.getCellNodeIndex(e.cellNode);
                        e.cell = (e.cellIndex >= 0 ? this.grid.getCell(e.cellIndex) : null);
                        if (view.header.canResize(e)) {
                            var _5cd = {
                                l: _5c9
                            };
                            var drag = view.header.colResizeSetup(e, false);
                            view.header.doResizeColumn(drag, null, _5cd);
                            view.update();
                        }
                    },
                    styleRow: function (_5ce) {
                        return;
                    },
                    setFocusIndex: function (_5cf, _5d0) {
                        this.setFocusCell(this.grid.getCell(_5d0), _5cf);
                    },
                    setFocusCell: function (_5d1, _5d2) {
                        if (_5d1 && !this.isFocusCell(_5d1, _5d2)) {
                            this.tabbingOut = false;
                            if (this._colHeadNode) {
                                this.blurHeader();
                            }
                            this._colHeadNode = this._colHeadFocusIdx = null;
                            this.focusGridView();
                            this._focusifyCellNode(false);
                            this.cell = _5d1;
                            this.rowIndex = _5d2;
                            this._focusifyCellNode(true);
                        }
                        if (has("opera")) {
                            setTimeout(lang.hitch(this.grid, "onCellFocus", this.cell, this.rowIndex), 1);
                        } else {
                            this.grid.onCellFocus(this.cell, this.rowIndex);
                        }
                    },
                    next: function () {
                        if (this.cell) {
                            var row = this.rowIndex,
                                col = this.cell.index + 1,
                                cc = this.grid.layout.cellCount - 1,
                                rc = this.grid.rowCount - 1;
                            if (col > cc) {
                                col = 0;
                                row++;
                            }
                            if (row > rc) {
                                col = cc;
                                row = rc;
                            }
                            if (this.grid.edit.isEditing()) {
                                var _5d3 = this.grid.getCell(col);
                                if (!this.isLastFocusCell() && (!_5d3.editable || this.grid.canEdit && !this.grid.canEdit(_5d3, row))) {
                                    this.cell = _5d3;
                                    this.rowIndex = row;
                                    this.next();
                                    return;
                                }
                            }
                            this.setFocusIndex(row, col);
                        }
                    },
                    previous: function () {
                        if (this.cell) {
                            var row = (this.rowIndex || 0),
                                col = (this.cell.index || 0) - 1;
                            if (col < 0) {
                                col = this.grid.layout.cellCount - 1;
                                row--;
                            }
                            if (row < 0) {
                                row = 0;
                                col = 0;
                            }
                            if (this.grid.edit.isEditing()) {
                                var _5d4 = this.grid.getCell(col);
                                if (!this.isFirstFocusCell() && !_5d4.editable) {
                                    this.cell = _5d4;
                                    this.rowIndex = row;
                                    this.previous();
                                    return;
                                }
                            }
                            this.setFocusIndex(row, col);
                        }
                    },
                    move: function (_5d5, _5d6) {
                        var _5d7 = _5d6 < 0 ? -1 : 1;
                        if (this.isNavHeader()) {
                            var _5d8 = this._findHeaderCells();
                            var _5d9 = currentIdx = _5b1.indexOf(_5d8, this._colHeadNode);
                            currentIdx += _5d6;
                            while (currentIdx >= 0 && currentIdx < _5d8.length && _5d8[currentIdx].style.display == "none") {
                                currentIdx += _5d7;
                            }
                            if ((currentIdx >= 0) && (currentIdx < _5d8.length)) {
                                this._setActiveColHeader(_5d8[currentIdx], currentIdx, _5d9);
                            }
                        } else {
                            if (this.cell) {
                                var sc = this.grid.scroller,
                                    r = this.rowIndex,
                                    rc = this.grid.rowCount - 1,
                                    row = Math.min(rc, Math.max(0, r + _5d5));
                                if (_5d5) {
                                    if (_5d5 > 0) {
                                        if (row > sc.getLastPageRow(sc.page)) {
                                            this.grid.setScrollTop(this.grid.scrollTop + sc.findScrollTop(row) - sc.findScrollTop(r));
                                        }
                                    } else {
                                        if (_5d5 < 0) {
                                            if (row <= sc.getPageRow(sc.page)) {
                                                this.grid.setScrollTop(this.grid.scrollTop - sc.findScrollTop(r) - sc.findScrollTop(row));
                                            }
                                        }
                                    }
                                }
                                var cc = this.grid.layout.cellCount - 1,
                                    i = this.cell.index,
                                    col = Math.min(cc, Math.max(0, i + _5d6));
                                var cell = this.grid.getCell(col);
                                while (col >= 0 && col < cc && cell && cell.hidden === true) {
                                    col += _5d7;
                                    cell = this.grid.getCell(col);
                                }
                                if (!cell || cell.hidden === true) {
                                    col = i;
                                }
                                var n = cell.getNode(row);
                                if (!n && _5d5) {
                                    if ((row + _5d5) >= 0 && (row + _5d5) <= rc) {
                                        this.move(_5d5 > 0 ? ++_5d5 : --_5d5, _5d6);
                                    }
                                    return;
                                } else {
                                    if ((!n || html.style(n, "display") === "none") && _5d6) {
                                        if ((col + _5d5) >= 0 && (col + _5d5) <= cc) {
                                            this.move(_5d5, _5d6 > 0 ? ++_5d6 : --_5d6);
                                        }
                                        return;
                                    }
                                }
                                this.setFocusIndex(row, col);
                                if (_5d5) {
                                    this.grid.updateRow(r);
                                }
                            }
                        }
                    },
                    previousKey: function (e) {
                        if (this.grid.edit.isEditing()) {
                            _5b4.stop(e);
                            this.previous();
                        } else {
                            if (!this.isNavHeader() && !this._isHeaderHidden()) {
                                this.grid.domNode.focus();
                                _5b4.stop(e);
                            } else {
                                this.tabOut(this.grid.domNode);
                                if (this._colHeadFocusIdx != null) {
                                    html.toggleClass(this._findHeaderCells()[this._colHeadFocusIdx], this.focusClass, false);
                                    this._colHeadFocusIdx = null;
                                }
                                this._focusifyCellNode(false);
                            }
                        }
                    },
                    nextKey: function (e) {
                        var _5da = (this.grid.rowCount === 0);
                        if (e.target === this.grid.domNode && this._colHeadFocusIdx == null) {
                            this.focusHeader();
                            _5b4.stop(e);
                        } else {
                            if (this.isNavHeader()) {
                                this.blurHeader();
                                if (!this.findAndFocusGridCell()) {
                                    this.tabOut(this.grid.lastFocusNode);
                                }
                                this._colHeadNode = this._colHeadFocusIdx = null;
                            } else {
                                if (this.grid.edit.isEditing()) {
                                    _5b4.stop(e);
                                    this.next();
                                } else {
                                    this.tabOut(this.grid.lastFocusNode);
                                }
                            }
                        }
                    },
                    tabOut: function (_5db) {
                        this.tabbingOut = true;
                        _5db.focus();
                    },
                    focusGridView: function () {
                        util.fire(this.focusView, "focus");
                    },
                    focusGrid: function (_5dc) {
                        this.focusGridView();
                        this._focusifyCellNode(true);
                    },
                    findAndFocusGridCell: function () {
                        var _5dd = true;
                        var _5de = (this.grid.rowCount === 0);
                        if (this.isNoFocusCell() && !_5de) {
                            var _5df = 0;
                            var cell = this.grid.getCell(_5df);
                            if (cell.hidden) {
                                _5df = this.isNavHeader() ? this._colHeadFocusIdx : 0;
                            }
                            this.setFocusIndex(0, _5df);
                        } else {
                            if (this.cell && !_5de) {
                                if (this.focusView && !this.focusView.rowNodes[this.rowIndex]) {
                                    this.grid.scrollToRow(this.rowIndex);
                                }
                                this.focusGrid();
                            } else {
                                _5dd = false;
                            }
                        }
                        this._colHeadNode = this._colHeadFocusIdx = null;
                        return _5dd;
                    },
                    focusHeader: function () {
                        var _5e0 = this._findHeaderCells();
                        var _5e1 = this._colHeadFocusIdx;
                        if (this._isHeaderHidden()) {
                            this.findAndFocusGridCell();
                        } else {
                            if (!this._colHeadFocusIdx) {
                                if (this.isNoFocusCell()) {
                                    this._colHeadFocusIdx = 0;
                                } else {
                                    this._colHeadFocusIdx = this.cell.index;
                                }
                            }
                        }
                        this._colHeadNode = _5e0[this._colHeadFocusIdx];
                        while (this._colHeadNode && this._colHeadFocusIdx >= 0 && this._colHeadFocusIdx < _5e0.length && this._colHeadNode.style.display == "none") {
                            this._colHeadFocusIdx++;
                            this._colHeadNode = _5e0[this._colHeadFocusIdx];
                        }
                        if (this._colHeadNode && this._colHeadNode.style.display != "none") {
                            if (this.headerMenu && this._contextMenuBindNode != this.grid.domNode) {
                                this.headerMenu.unBindDomNode(this.grid.viewsHeaderNode);
                                this.headerMenu.bindDomNode(this.grid.domNode);
                                this._contextMenuBindNode = this.grid.domNode;
                            }
                            this._setActiveColHeader(this._colHeadNode, this._colHeadFocusIdx, _5e1);
                            this._scrollHeader(this._colHeadFocusIdx);
                            this._focusifyCellNode(false);
                        } else {
                            this.findAndFocusGridCell();
                        }
                    },
                    blurHeader: function () {
                        html.removeClass(this._colHeadNode, this.focusClass);
                        html.removeAttr(this.grid.domNode, "aria-activedescendant");
                        if (this.headerMenu && this._contextMenuBindNode == this.grid.domNode) {
                            var _5e2 = this.grid.viewsHeaderNode;
                            this.headerMenu.unBindDomNode(this.grid.domNode);
                            this.headerMenu.bindDomNode(_5e2);
                            this._contextMenuBindNode = _5e2;
                        }
                    },
                    doFocus: function (e) {
                        if (e && e.target != e.currentTarget) {
                            _5b4.stop(e);
                            return;
                        }
                        if (this._clickFocus) {
                            return;
                        }
                        if (!this.tabbingOut) {
                            this.focusHeader();
                        }
                        this.tabbingOut = false;
                        _5b4.stop(e);
                    },
                    doBlur: function (e) {
                        _5b4.stop(e);
                    },
                    doContextMenu: function (e) {
                        if (!this.headerMenu) {
                            _5b4.stop(e);
                        }
                    },
                    doLastNodeFocus: function (e) {
                        if (this.tabbingOut) {
                            this._focusifyCellNode(false);
                        } else {
                            if (this.grid.rowCount > 0) {
                                if (this.isNoFocusCell()) {
                                    this.setFocusIndex(0, 0);
                                }
                                this._focusifyCellNode(true);
                            } else {
                                this.focusHeader();
                            }
                        }
                        this.tabbingOut = false;
                        _5b4.stop(e);
                    },
                    doLastNodeBlur: function (e) {
                        _5b4.stop(e);
                    },
                    doColHeaderFocus: function (e) {
                        this._setActiveColHeader(e.target, html.attr(e.target, "idx"), this._colHeadFocusIdx);
                        this._scrollHeader(this.getHeaderIndex());
                        _5b4.stop(e);
                    },
                    doColHeaderBlur: function (e) {
                        html.toggleClass(e.target, this.focusClass, false);
                    },
                    _mouseDown: function (e) {
                        this._clickFocus = dojo.some(this.grid.views.views, function (v) {
                            return v.scrollboxNode === e.target;
                        });
                    },
                    _mouseUp: function (e) {
                        this._clickFocus = false;
                    }
                });
            });
        },
        "dojox/grid/_EditManager": function () {
            define("dojox/grid/_EditManager", ["dojo/_base/lang", "dojo/_base/array", "dojo/_base/declare", "dojo/_base/connect", "dojo/_base/sniff", "./util"], function (lang, _5e3, _5e4, _5e5, has, util) {
                return _5e4("dojox.grid._EditManager", null, {
                    constructor: function (_5e6) {
                        this.grid = _5e6;
                        if (has("ie")) {
                            this.connections = [_5e5.connect(document.body, "onfocus", lang.hitch(this, "_boomerangFocus"))];
                        } else {
                            this.connections = [_5e5.connect(this.grid, "onBlur", this, "apply")];
                        }
                    },
                    info: {},
                    destroy: function () {
                        _5e3.forEach(this.connections, _5e5.disconnect);
                    },
                    cellFocus: function (_5e7, _5e8) {
                        if (this.grid.singleClickEdit || this.isEditRow(_5e8)) {
                            this.setEditCell(_5e7, _5e8);
                        } else {
                            this.apply();
                        }
                        if (this.isEditing() || (_5e7 && _5e7.editable && _5e7.alwaysEditing)) {
                            this._focusEditor(_5e7, _5e8);
                        }
                    },
                    rowClick: function (e) {
                        if (this.isEditing() && !this.isEditRow(e.rowIndex)) {
                            this.apply();
                        }
                    },
                    styleRow: function (_5e9) {
                        if (_5e9.index == this.info.rowIndex) {
                            _5e9.customClasses += " dojoxGridRowEditing";
                        }
                    },
                    dispatchEvent: function (e) {
                        var c = e.cell,
                            ed = (c && c["editable"]) ? c : 0;
                        return ed && ed.dispatchEvent(e.dispatch, e);
                    },
                    isEditing: function () {
                        return this.info.rowIndex !== undefined;
                    },
                    isEditCell: function (_5ea, _5eb) {
                        return (this.info.rowIndex === _5ea) && (this.info.cell.index == _5eb);
                    },
                    isEditRow: function (_5ec) {
                        return this.info.rowIndex === _5ec;
                    },
                    setEditCell: function (_5ed, _5ee) {
                        if (!this.isEditCell(_5ee, _5ed.index) && this.grid.canEdit && this.grid.canEdit(_5ed, _5ee)) {
                            this.start(_5ed, _5ee, this.isEditRow(_5ee) || _5ed.editable);
                        }
                    },
                    _focusEditor: function (_5ef, _5f0) {
                        util.fire(_5ef, "focus", [_5f0]);
                    },
                    focusEditor: function () {
                        if (this.isEditing()) {
                            this._focusEditor(this.info.cell, this.info.rowIndex);
                        }
                    },
                    _boomerangWindow: 500,
                    _shouldCatchBoomerang: function () {
                        return this._catchBoomerang > new Date().getTime();
                    },
                    _boomerangFocus: function () {
                        if (this._shouldCatchBoomerang()) {
                            this.grid.focus.focusGrid();
                            this.focusEditor();
                            this._catchBoomerang = 0;
                        }
                    },
                    _doCatchBoomerang: function () {
                        if (has("ie")) {
                            this._catchBoomerang = new Date().getTime() + this._boomerangWindow;
                        }
                    },
                    start: function (_5f1, _5f2, _5f3) {
                        if (!this._isValidInput()) {
                            return;
                        }
                        this.grid.beginUpdate();
                        this.editorApply();
                        if (this.isEditing() && !this.isEditRow(_5f2)) {
                            this.applyRowEdit();
                            this.grid.updateRow(_5f2);
                        }
                        if (_5f3) {
                            this.info = {
                                cell: _5f1,
                                rowIndex: _5f2
                            };
                            this.grid.doStartEdit(_5f1, _5f2);
                            this.grid.updateRow(_5f2);
                        } else {
                            this.info = {};
                        }
                        this.grid.endUpdate();
                        this.grid.focus.focusGrid();
                        this._focusEditor(_5f1, _5f2);
                        this._doCatchBoomerang();
                    },
                    _editorDo: function (_5f4) {
                        var c = this.info.cell;
                        if (c && c.editable) {
                            c[_5f4](this.info.rowIndex);
                        }
                    },
                    editorApply: function () {
                        this._editorDo("apply");
                    },
                    editorCancel: function () {
                        this._editorDo("cancel");
                    },
                    applyCellEdit: function (_5f5, _5f6, _5f7) {
                        if (this.grid.canEdit(_5f6, _5f7)) {
                            this.grid.doApplyCellEdit(_5f5, _5f7, _5f6.field);
                        }
                    },
                    applyRowEdit: function () {
                        this.grid.doApplyEdit(this.info.rowIndex, this.info.cell.field);
                    },
                    apply: function () {
                        if (this.isEditing() && this._isValidInput()) {
                            this.grid.beginUpdate();
                            this.editorApply();
                            this.applyRowEdit();
                            this.info = {};
                            this.grid.endUpdate();
                            this.grid.focus.focusGrid();
                            this._doCatchBoomerang();
                        }
                    },
                    cancel: function () {
                        if (this.isEditing()) {
                            this.grid.beginUpdate();
                            this.editorCancel();
                            this.info = {};
                            this.grid.endUpdate();
                            this.grid.focus.focusGrid();
                            this._doCatchBoomerang();
                        }
                    },
                    save: function (_5f8, _5f9) {
                        var c = this.info.cell;
                        if (this.isEditRow(_5f8) && (!_5f9 || c.view == _5f9) && c.editable) {
                            c.save(c, this.info.rowIndex);
                        }
                    },
                    restore: function (_5fa, _5fb) {
                        var c = this.info.cell;
                        if (this.isEditRow(_5fb) && c.view == _5fa && c.editable) {
                            c.restore(this.info.rowIndex);
                        }
                    },
                    _isValidInput: function () {
                        var w = (this.info.cell || {}).widget;
                        if (!w || !w.isValid) {
                            return true;
                        }
                        w.focused = true;
                        return w.isValid(true);
                    }
                });
            });
        },
        "dojox/grid/Selection": function () {
            define("dojox/grid/Selection", ["dojo/_base/declare", "dojo/_base/array", "dojo/_base/lang", "dojo/dom-attr"], function (_5fc, _5fd, lang, _5fe) {
                return _5fc("dojox.grid.Selection", null, {
                    constructor: function (_5ff) {
                        this.grid = _5ff;
                        this.selected = [];
                        this.setMode(_5ff.selectionMode);
                    },
                    mode: "extended",
                    selected: null,
                    updating: 0,
                    selectedIndex: -1,
                    setMode: function (mode) {
                        if (this.selected.length) {
                            this.deselectAll();
                        }
                        if (mode != "extended" && mode != "multiple" && mode != "single" && mode != "none") {
                            this.mode = "extended";
                        } else {
                            this.mode = mode;
                        }
                    },
                    onCanSelect: function (_600) {
                        return this.grid.onCanSelect(_600);
                    },
                    onCanDeselect: function (_601) {
                        return this.grid.onCanDeselect(_601);
                    },
                    onSelected: function (_602) {},
                    onDeselected: function (_603) {},
                    onChanging: function () {},
                    onChanged: function () {},
                    isSelected: function (_604) {
                        if (this.mode == "none") {
                            return false;
                        }
                        return this.selected[_604];
                    },
                    getFirstSelected: function () {
                        if (!this.selected.length || this.mode == "none") {
                            return -1;
                        }
                        for (var i = 0, l = this.selected.length; i < l; i++) {
                            if (this.selected[i]) {
                                return i;
                            }
                        }
                        return -1;
                    },
                    getNextSelected: function (_605) {
                        if (this.mode == "none") {
                            return -1;
                        }
                        for (var i = _605 + 1, l = this.selected.length; i < l; i++) {
                            if (this.selected[i]) {
                                return i;
                            }
                        }
                        return -1;
                    },
                    getSelected: function () {
                        var _606 = [];
                        for (var i = 0, l = this.selected.length; i < l; i++) {
                            if (this.selected[i]) {
                                _606.push(i);
                            }
                        }
                        return _606;
                    },
                    getSelectedCount: function () {
                        var c = 0;
                        for (var i = 0; i < this.selected.length; i++) {
                            if (this.selected[i]) {
                                c++;
                            }
                        }
                        return c;
                    },
                    _beginUpdate: function () {
                        if (this.updating === 0) {
                            this.onChanging();
                        }
                        this.updating++;
                    },
                    _endUpdate: function () {
                        this.updating--;
                        if (this.updating === 0) {
                            this.onChanged();
                        }
                    },
                    select: function (_607) {
                        if (this.mode == "none") {
                            return;
                        }
                        if (this.mode != "multiple") {
                            this.deselectAll(_607);
                            this.addToSelection(_607);
                        } else {
                            this.toggleSelect(_607);
                        }
                    },
                    addToSelection: function (_608) {
                        if (this.mode == "none") {
                            return;
                        }
                        if (lang.isArray(_608)) {
                            _5fd.forEach(_608, this.addToSelection, this);
                            return;
                        }
                        _608 = Number(_608);
                        if (this.selected[_608]) {
                            this.selectedIndex = _608;
                        } else {
                            if (this.onCanSelect(_608) !== false) {
                                this.selectedIndex = _608;
                                var _609 = this.grid.getRowNode(_608);
                                if (_609) {
                                    _5fe.set(_609, "aria-selected", "true");
                                }
                                this._beginUpdate();
                                this.selected[_608] = true;
                                this.onSelected(_608);
                                this._endUpdate();
                            }
                        }
                    },
                    deselect: function (_60a) {
                        if (this.mode == "none") {
                            return;
                        }
                        if (lang.isArray(_60a)) {
                            _5fd.forEach(_60a, this.deselect, this);
                            return;
                        }
                        _60a = Number(_60a);
                        if (this.selectedIndex == _60a) {
                            this.selectedIndex = -1;
                        }
                        if (this.selected[_60a]) {
                            if (this.onCanDeselect(_60a) === false) {
                                return;
                            }
                            var _60b = this.grid.getRowNode(_60a);
                            if (_60b) {
                                _5fe.set(_60b, "aria-selected", "false");
                            }
                            this._beginUpdate();
                            delete this.selected[_60a];
                            this.onDeselected(_60a);
                            this._endUpdate();
                        }
                    },
                    setSelected: function (_60c, _60d) {
                        this[(_60d ? "addToSelection" : "deselect")](_60c);
                    },
                    toggleSelect: function (_60e) {
                        if (lang.isArray(_60e)) {
                            _5fd.forEach(_60e, this.toggleSelect, this);
                            return;
                        }
                        this.setSelected(_60e, !this.selected[_60e]);
                    },
                    _range: function (_60f, inTo, func) {
                        var s = (_60f >= 0 ? _60f : inTo),
                            e = inTo;
                        if (s > e) {
                            e = s;
                            s = inTo;
                        }
                        for (var i = s; i <= e; i++) {
                            func(i);
                        }
                    },
                    selectRange: function (_610, inTo) {
                        this._range(_610, inTo, lang.hitch(this, "addToSelection"));
                    },
                    deselectRange: function (_611, inTo) {
                        this._range(_611, inTo, lang.hitch(this, "deselect"));
                    },
                    insert: function (_612) {
                        this.selected.splice(_612, 0, false);
                        if (this.selectedIndex >= _612) {
                            this.selectedIndex++;
                        }
                    },
                    remove: function (_613) {
                        this.selected.splice(_613, 1);
                        if (this.selectedIndex >= _613) {
                            this.selectedIndex--;
                        }
                    },
                    deselectAll: function (_614) {
                        for (var i in this.selected) {
                            if ((i != _614) && (this.selected[i] === true)) {
                                this.deselect(i);
                            }
                        }
                    },
                    clickSelect: function (_615, _616, _617) {
                        if (this.mode == "none") {
                            return;
                        }
                        this._beginUpdate();
                        if (this.mode != "extended") {
                            this.select(_615);
                        } else {
                            var _618 = this.selectedIndex;
                            if (!_616) {
                                this.deselectAll(_615);
                            }
                            if (_617) {
                                this.selectRange(_618, _615);
                            } else {
                                if (_616) {
                                    this.toggleSelect(_615);
                                } else {
                                    this.addToSelection(_615);
                                }
                            }
                        }
                        this._endUpdate();
                    },
                    clickSelectEvent: function (e) {
                        this.clickSelect(e.rowIndex, dojo.isCopyKey(e), e.shiftKey);
                    },
                    clear: function () {
                        this._beginUpdate();
                        this.deselectAll();
                        this._endUpdate();
                    }
                });
            });
        },
        "dijit/CheckedMenuItem": function () {
            require({
                cache: {
                    "url:dijit/templates/CheckedMenuItem.html": "<tr class=\"dijitReset dijitMenuItem\" data-dojo-attach-point=\"focusNode\" role=\"menuitemcheckbox\" tabIndex=\"-1\"\n\t\tdata-dojo-attach-event=\"onmouseenter:_onHover,onmouseleave:_onUnhover,ondijitclick:_onClick\">\n\t<td class=\"dijitReset dijitMenuItemIconCell\" role=\"presentation\">\n\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitMenuItemIcon dijitCheckedMenuItemIcon\" data-dojo-attach-point=\"iconNode\"/>\n\t\t<span class=\"dijitCheckedMenuItemIconChar\">&#10003;</span>\n\t</td>\n\t<td class=\"dijitReset dijitMenuItemLabel\" colspan=\"2\" data-dojo-attach-point=\"containerNode,labelNode\"></td>\n\t<td class=\"dijitReset dijitMenuItemAccelKey\" style=\"display: none\" data-dojo-attach-point=\"accelKeyNode\"></td>\n\t<td class=\"dijitReset dijitMenuArrowCell\" role=\"presentation\">&#160;</td>\n</tr>\n"
                }
            });
            define("dijit/CheckedMenuItem", ["dojo/_base/declare", "dojo/dom-class", "./MenuItem", "dojo/text!./templates/CheckedMenuItem.html", "./hccss"], function (_619, _61a, _61b, _61c) {
                return _619("dijit.CheckedMenuItem", _61b, {
                    templateString: _61c,
                    checked: false,
                    _setCheckedAttr: function (_61d) {
                        _61a.toggle(this.domNode, "dijitCheckedMenuItemChecked", _61d);
                        this.domNode.setAttribute("aria-checked", _61d);
                        this._set("checked", _61d);
                    },
                    iconClass: "",
                    onChange: function () {},
                    _onClick: function (e) {
                        if (!this.disabled) {
                            this.set("checked", !this.checked);
                            this.onChange(this.checked);
                        }
                        this.inherited(arguments);
                    }
                });
            });
        },
        "dijit/MenuItem": function () {
            require({
                cache: {
                    "url:dijit/templates/MenuItem.html": "<tr class=\"dijitReset dijitMenuItem\" data-dojo-attach-point=\"focusNode\" role=\"menuitem\" tabIndex=\"-1\"\n\t\tdata-dojo-attach-event=\"onmouseenter:_onHover,onmouseleave:_onUnhover,ondijitclick:_onClick\">\n\t<td class=\"dijitReset dijitMenuItemIconCell\" role=\"presentation\">\n\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitIcon dijitMenuItemIcon\" data-dojo-attach-point=\"iconNode\"/>\n\t</td>\n\t<td class=\"dijitReset dijitMenuItemLabel\" colspan=\"2\" data-dojo-attach-point=\"containerNode\"></td>\n\t<td class=\"dijitReset dijitMenuItemAccelKey\" style=\"display: none\" data-dojo-attach-point=\"accelKeyNode\"></td>\n\t<td class=\"dijitReset dijitMenuArrowCell\" role=\"presentation\">\n\t\t<div data-dojo-attach-point=\"arrowWrapper\" style=\"visibility: hidden\">\n\t\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitMenuExpand\"/>\n\t\t\t<span class=\"dijitMenuExpandA11y\">+</span>\n\t\t</div>\n\t</td>\n</tr>\n"
                }
            });
            define("dijit/MenuItem", ["dojo/_base/declare", "dojo/dom", "dojo/dom-attr", "dojo/dom-class", "dojo/_base/event", "dojo/_base/kernel", "dojo/_base/sniff", "./_Widget", "./_TemplatedMixin", "./_Contained", "./_CssStateMixin", "dojo/text!./templates/MenuItem.html"], function (_61e, dom, _61f, _620, _621, _622, has, _623, _624, _625, _626, _627) {
                return _61e("dijit.MenuItem", [_623, _624, _625, _626], {
                    templateString: _627,
                    baseClass: "dijitMenuItem",
                    label: "",
                    _setLabelAttr: {
                        node: "containerNode",
                        type: "innerHTML"
                    },
                    iconClass: "dijitNoIcon",
                    _setIconClassAttr: {
                        node: "iconNode",
                        type: "class"
                    },
                    accelKey: "",
                    disabled: false,
                    _fillContent: function (_628) {
                        if (_628 && !("label" in this.params)) {
                            this.set("label", _628.innerHTML);
                        }
                    },
                    buildRendering: function () {
                        this.inherited(arguments);
                        var _629 = this.id + "_text";
                        _61f.set(this.containerNode, "id", _629);
                        if (this.accelKeyNode) {
                            _61f.set(this.accelKeyNode, "id", this.id + "_accel");
                            _629 += " " + this.id + "_accel";
                        }
                        this.domNode.setAttribute("aria-labelledby", _629);
                        dom.setSelectable(this.domNode, false);
                    },
                    _onHover: function () {
                        this.getParent().onItemHover(this);
                    },
                    _onUnhover: function () {
                        this.getParent().onItemUnhover(this);
                        this._set("hovering", false);
                    },
                    _onClick: function (evt) {
                        this.getParent().onItemClick(this, evt);
                        _621.stop(evt);
                    },
                    onClick: function () {},
                    focus: function () {
                        try {
                            if (has("ie") == 8) {
                                this.containerNode.focus();
                            }
                            this.focusNode.focus();
                        } catch (e) {}
                    },
                    _onFocus: function () {
                        this._setSelected(true);
                        this.getParent()._onItemFocus(this);
                        this.inherited(arguments);
                    },
                    _setSelected: function (_62a) {
                        _620.toggle(this.domNode, "dijitMenuItemSelected", _62a);
                    },
                    setLabel: function (_62b) {
                        _622.deprecated("dijit.MenuItem.setLabel() is deprecated.  Use set('label', ...) instead.", "", "2.0");
                        this.set("label", _62b);
                    },
                    setDisabled: function (_62c) {
                        _622.deprecated("dijit.Menu.setDisabled() is deprecated.  Use set('disabled', bool) instead.", "", "2.0");
                        this.set("disabled", _62c);
                    },
                    _setDisabledAttr: function (_62d) {
                        this.focusNode.setAttribute("aria-disabled", _62d ? "true" : "false");
                        this._set("disabled", _62d);
                    },
                    _setAccelKeyAttr: function (_62e) {
                        this.accelKeyNode.style.display = _62e ? "" : "none";
                        this.accelKeyNode.innerHTML = _62e;
                        _61f.set(this.containerNode, "colSpan", _62e ? "1" : "2");
                        this._set("accelKey", _62e);
                    }
                });
            });
        },
        "dijit/_Contained": function () {
            define("dijit/_Contained", ["dojo/_base/declare", "./registry"], function (_62f, _630) {
                return _62f("dijit._Contained", null, {
                    _getSibling: function (_631) {
                        var node = this.domNode;
                        do {
                            node = node[_631 + "Sibling"];
                        } while (node && node.nodeType != 1);
                        return node && _630.byNode(node);
                    },
                    getPreviousSibling: function () {
                        return this._getSibling("previous");
                    },
                    getNextSibling: function () {
                        return this._getSibling("next");
                    },
                    getIndexInParent: function () {
                        var p = this.getParent();
                        if (!p || !p.getIndexOfChild) {
                            return -1;
                        }
                        return p.getIndexOfChild(this);
                    }
                });
            });
        },
        "dijit/_CssStateMixin": function () {
            define("dijit/_CssStateMixin", ["dojo/touch", "dojo/_base/array", "dojo/_base/declare", "dojo/dom-class", "dojo/_base/lang", "dojo/_base/window"], function (_632, _633, _634, _635, lang, win) {
                return _634("dijit._CssStateMixin", [], {
                    cssStateNodes: {},
                    hovering: false,
                    active: false,
                    _applyAttributes: function () {
                        this.inherited(arguments);
                        _633.forEach(["onmouseenter", "onmouseleave", _632.press], function (e) {
                            this.connect(this.domNode, e, "_cssMouseEvent");
                        }, this);
                        _633.forEach(["disabled", "readOnly", "checked", "selected", "focused", "state", "hovering", "active"], function (attr) {
                            this.watch(attr, lang.hitch(this, "_setStateClass"));
                        }, this);
                        for (var ap in this.cssStateNodes) {
                            this._trackMouseState(this[ap], this.cssStateNodes[ap]);
                        }
                        this._setStateClass();
                    },
                    _cssMouseEvent: function (_636) {
                        if (!this.disabled) {
                            switch (_636.type) {
                            case "mouseenter":
                            case "mouseover":
                                this._set("hovering", true);
                                this._set("active", this._mouseDown);
                                break;
                            case "mouseleave":
                            case "mouseout":
                                this._set("hovering", false);
                                this._set("active", false);
                                break;
                            case "mousedown":
                            case "touchpress":
                                this._set("active", true);
                                this._mouseDown = true;
                                var _637 = this.connect(win.body(), _632.release, function () {
                                    this._mouseDown = false;
                                    this._set("active", false);
                                    this.disconnect(_637);
                                });
                                break;
                            }
                        }
                    },
                    _setStateClass: function () {
                        var _638 = this.baseClass.split(" ");

                        function _639(_63a) {
                            _638 = _638.concat(_633.map(_638, function (c) {
                                return c + _63a;
                            }), "dijit" + _63a);
                        };
                        if (!this.isLeftToRight()) {
                            _639("Rtl");
                        }
                        var _63b = this.checked == "mixed" ? "Mixed" : (this.checked ? "Checked" : "");
                        if (this.checked) {
                            _639(_63b);
                        }
                        if (this.state) {
                            _639(this.state);
                        }
                        if (this.selected) {
                            _639("Selected");
                        }
                        if (this.disabled) {
                            _639("Disabled");
                        } else {
                            if (this.readOnly) {
                                _639("ReadOnly");
                            } else {
                                if (this.active) {
                                    _639("Active");
                                } else {
                                    if (this.hovering) {
                                        _639("Hover");
                                    }
                                }
                            }
                        }
                        if (this.focused) {
                            _639("Focused");
                        }
                        var tn = this.stateNode || this.domNode,
                            _63c = {};
                        _633.forEach(tn.className.split(" "), function (c) {
                            _63c[c] = true;
                        });
                        if ("_stateClasses" in this) {
                            _633.forEach(this._stateClasses, function (c) {
                                delete _63c[c];
                            });
                        }
                        _633.forEach(_638, function (c) {
                            _63c[c] = true;
                        });
                        var _63d = [];
                        for (var c in _63c) {
                            _63d.push(c);
                        }
                        tn.className = _63d.join(" ");
                        this._stateClasses = _638;
                    },
                    _trackMouseState: function (node, _63e) {
                        var _63f = false,
                            _640 = false,
                            _641 = false;
                        var self = this,
                            cn = lang.hitch(this, "connect", node);

                        function _642() {
                            var _643 = ("disabled" in self && self.disabled) || ("readonly" in self && self.readonly);
                            _635.toggle(node, _63e + "Hover", _63f && !_640 && !_643);
                            _635.toggle(node, _63e + "Active", _640 && !_643);
                            _635.toggle(node, _63e + "Focused", _641 && !_643);
                        };
                        cn("onmouseenter", function () {
                            _63f = true;
                            _642();
                        });
                        cn("onmouseleave", function () {
                            _63f = false;
                            _640 = false;
                            _642();
                        });
                        cn(_632.press, function () {
                            _640 = true;
                            _642();
                        });
                        cn(_632.release, function () {
                            _640 = false;
                            _642();
                        });
                        cn("onfocus", function () {
                            _641 = true;
                            _642();
                        });
                        cn("onblur", function () {
                            _641 = false;
                            _642();
                        });
                        this.watch("disabled", _642);
                        this.watch("readOnly", _642);
                    }
                });
            });
        },
        "url:dijit/templates/MenuItem.html": "<tr class=\"dijitReset dijitMenuItem\" data-dojo-attach-point=\"focusNode\" role=\"menuitem\" tabIndex=\"-1\"\n\t\tdata-dojo-attach-event=\"onmouseenter:_onHover,onmouseleave:_onUnhover,ondijitclick:_onClick\">\n\t<td class=\"dijitReset dijitMenuItemIconCell\" role=\"presentation\">\n\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitIcon dijitMenuItemIcon\" data-dojo-attach-point=\"iconNode\"/>\n\t</td>\n\t<td class=\"dijitReset dijitMenuItemLabel\" colspan=\"2\" data-dojo-attach-point=\"containerNode\"></td>\n\t<td class=\"dijitReset dijitMenuItemAccelKey\" style=\"display: none\" data-dojo-attach-point=\"accelKeyNode\"></td>\n\t<td class=\"dijitReset dijitMenuArrowCell\" role=\"presentation\">\n\t\t<div data-dojo-attach-point=\"arrowWrapper\" style=\"visibility: hidden\">\n\t\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitMenuExpand\"/>\n\t\t\t<span class=\"dijitMenuExpandA11y\">+</span>\n\t\t</div>\n\t</td>\n</tr>\n",
        "url:dijit/templates/CheckedMenuItem.html": "<tr class=\"dijitReset dijitMenuItem\" data-dojo-attach-point=\"focusNode\" role=\"menuitemcheckbox\" tabIndex=\"-1\"\n\t\tdata-dojo-attach-event=\"onmouseenter:_onHover,onmouseleave:_onUnhover,ondijitclick:_onClick\">\n\t<td class=\"dijitReset dijitMenuItemIconCell\" role=\"presentation\">\n\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitMenuItemIcon dijitCheckedMenuItemIcon\" data-dojo-attach-point=\"iconNode\"/>\n\t\t<span class=\"dijitCheckedMenuItemIconChar\">&#10003;</span>\n\t</td>\n\t<td class=\"dijitReset dijitMenuItemLabel\" colspan=\"2\" data-dojo-attach-point=\"containerNode,labelNode\"></td>\n\t<td class=\"dijitReset dijitMenuItemAccelKey\" style=\"display: none\" data-dojo-attach-point=\"accelKeyNode\"></td>\n\t<td class=\"dijitReset dijitMenuArrowCell\" role=\"presentation\">&#160;</td>\n</tr>\n",
        "url:dojox/grid/resources/_Grid.html": "<div hidefocus=\"hidefocus\" role=\"grid\" dojoAttachEvent=\"onmouseout:_mouseOut\">\n\t<div class=\"dojoxGridMasterHeader\" dojoAttachPoint=\"viewsHeaderNode\" role=\"presentation\"></div>\n\t<div class=\"dojoxGridMasterView\" dojoAttachPoint=\"viewsNode\" role=\"presentation\"></div>\n\t<div class=\"dojoxGridMasterMessages\" style=\"display: none;\" dojoAttachPoint=\"messagesNode\"></div>\n\t<span dojoAttachPoint=\"lastFocusNode\" tabindex=\"0\"></span>\n</div>\n",
        "dijit/nls/loading": function () {
            define("dijit/nls/loading", {
                root: ({
                    loadingState: "Loading...",
                    errorState: "Sorry, an error occurred"
                }),
                "zh": true,
                "zh-tw": true,
                "tr": true,
                "th": true,
                "sv": true,
                "sl": true,
                "sk": true,
                "ru": true,
                "ro": true,
                "pt": true,
                "pt-pt": true,
                "pl": true,
                "nl": true,
                "nb": true,
                "ko": true,
                "kk": true,
                "ja": true,
                "it": true,
                "hu": true,
                "hr": true,
                "he": true,
                "fr": true,
                "fi": true,
                "es": true,
                "el": true,
                "de": true,
                "da": true,
                "cs": true,
                "ca": true,
                "az": true,
                "ar": true
            });
        },
        "dojox/grid/DataSelection": function () {
            define("dojox/grid/DataSelection", ["dojo/_base/declare", "./_SelectionPreserver", "./Selection"], function (_644, _645, _646) {
                return _644("dojox.grid.DataSelection", _646, {
                    constructor: function (grid) {
                        if (grid.keepSelection) {
                            this.preserver = new _645(this);
                        }
                    },
                    destroy: function () {
                        if (this.preserver) {
                            this.preserver.destroy();
                        }
                    },
                    getFirstSelected: function () {
                        var idx = _646.prototype.getFirstSelected.call(this);
                        if (idx == -1) {
                            return null;
                        }
                        return this.grid.getItem(idx);
                    },
                    getNextSelected: function (_647) {
                        var _648 = this.grid.getItemIndex(_647);
                        var idx = _646.prototype.getNextSelected.call(this, _648);
                        if (idx == -1) {
                            return null;
                        }
                        return this.grid.getItem(idx);
                    },
                    getSelected: function () {
                        var _649 = [];
                        for (var i = 0, l = this.selected.length; i < l; i++) {
                            if (this.selected[i]) {
                                _649.push(this.grid.getItem(i));
                            }
                        }
                        return _649;
                    },
                    addToSelection: function (_64a) {
                        if (this.mode == "none") {
                            return;
                        }
                        var idx = null;
                        if (typeof _64a == "number" || typeof _64a == "string") {
                            idx = _64a;
                        } else {
                            idx = this.grid.getItemIndex(_64a);
                        }
                        _646.prototype.addToSelection.call(this, idx);
                    },
                    deselect: function (_64b) {
                        if (this.mode == "none") {
                            return;
                        }
                        var idx = null;
                        if (typeof _64b == "number" || typeof _64b == "string") {
                            idx = _64b;
                        } else {
                            idx = this.grid.getItemIndex(_64b);
                        }
                        _646.prototype.deselect.call(this, idx);
                    },
                    deselectAll: function (_64c) {
                        var idx = null;
                        if (_64c || typeof _64c == "number") {
                            if (typeof _64c == "number" || typeof _64c == "string") {
                                idx = _64c;
                            } else {
                                idx = this.grid.getItemIndex(_64c);
                            }
                            _646.prototype.deselectAll.call(this, idx);
                        } else {
                            this.inherited(arguments);
                        }
                    }
                });
            });
        },
        "dojox/grid/_SelectionPreserver": function () {
            define("dojox/grid/_SelectionPreserver", ["dojo/_base/declare", "dojo/_base/connect", "dojo/_base/lang", "dojo/_base/array"], function (_64d, _64e, lang, _64f) {
                return _64d("dojox.grid._SelectionPreserver", null, {
                    constructor: function (_650) {
                        this.selection = _650;
                        var grid = this.grid = _650.grid;
                        this.reset();
                        this._connects = [_64e.connect(grid, "_setStore", this, "reset"), _64e.connect(grid, "_addItem", this, "_reSelectById"), _64e.connect(_650, "addToSelection", lang.hitch(this, "_selectById", true)), _64e.connect(_650, "deselect", lang.hitch(this, "_selectById", false)), _64e.connect(_650, "deselectAll", this, "reset")];
                    },
                    destroy: function () {
                        this.reset();
                        _64f.forEach(this._connects, _64e.disconnect);
                        delete this._connects;
                    },
                    reset: function () {
                        this._selectedById = {};
                    },
                    _reSelectById: function (item, _651) {
                        if (item && this.grid._hasIdentity) {
                            this.selection.selected[_651] = this._selectedById[this.grid.store.getIdentity(item)];
                        }
                    },
                    _selectById: function (_652, _653) {
                        if (this.selection.mode == "none" || !this.grid._hasIdentity) {
                            return;
                        }
                        var item = _653,
                            g = this.grid;
                        if (typeof _653 == "number" || typeof _653 == "string") {
                            var _654 = g._by_idx[_653];
                            item = _654 && _654.item;
                        }
                        if (item) {
                            this._selectedById[g.store.getIdentity(item)] = !! _652;
                        }
                        return item;
                    }
                });
            });
        },
        "dojox/grid/enhanced/_PluginManager": function () {
            define("dojox/grid/enhanced/_PluginManager", ["dojo/_base/kernel", "dojo/_base/lang", "dojo/_base/declare", "dojo/_base/array", "dojo/_base/connect", "./_Events", "./_FocusManager", "../util"], function (dojo, lang, _655, _656, _657, _658, _659, util) {
                var _65a = _655("dojox.grid.enhanced._PluginManager", null, {
                    _options: null,
                    _plugins: null,
                    _connects: null,
                    constructor: function (_65b) {
                        this.grid = _65b;
                        this._store = _65b.store;
                        this._options = {};
                        this._plugins = [];
                        this._connects = [];
                        this._parseProps(this.grid.plugins);
                        _65b.connect(_65b, "_setStore", lang.hitch(this, function (_65c) {
                            if (this._store !== _65c) {
                                this.forEach("onSetStore", [_65c, this._store]);
                                this._store = _65c;
                            }
                        }));
                    },
                    startup: function () {
                        this.forEach("onStartUp");
                    },
                    preInit: function () {
                        this.grid.focus.destroy();
                        this.grid.focus = new _659(this.grid);
                        new _658(this.grid);
                        this._init(true);
                        this.forEach("onPreInit");
                    },
                    postInit: function () {
                        this._init(false);
                        _656.forEach(this.grid.views.views, this._initView, this);
                        this._connects.push(_657.connect(this.grid.views, "addView", lang.hitch(this, this._initView)));
                        if (this._plugins.length > 0) {
                            var edit = this.grid.edit;
                            if (edit) {
                                edit.styleRow = function (_65d) {};
                            }
                        }
                        this.forEach("onPostInit");
                    },
                    forEach: function (func, args) {
                        _656.forEach(this._plugins, function (p) {
                            if (!p || !p[func]) {
                                return;
                            }
                            p[func].apply(p, args ? args : []);
                        });
                    },
                    _parseProps: function (_65e) {
                        if (!_65e) {
                            return;
                        }
                        var p, _65f = {},
                            _660 = this._options,
                            grid = this.grid;
                        var _661 = _65a.registry;
                        for (p in _65e) {
                            if (_65e[p]) {
                                this._normalize(p, _65e, _661, _65f);
                            }
                        }
                        if (_660.dnd || _660.indirectSelection) {
                            _660.columnReordering = false;
                        }
                        lang.mixin(grid, _660);
                    },
                    _normalize: function (p, _662, _663, _664) {
                        if (!_663[p]) {
                            throw new Error("Plugin " + p + " is required.");
                        }
                        if (_664[p]) {
                            throw new Error("Recursive cycle dependency is not supported.");
                        }
                        var _665 = this._options;
                        if (_665[p]) {
                            return _665[p];
                        }
                        _664[p] = true;
                        _665[p] = lang.mixin({}, _663[p], lang.isObject(_662[p]) ? _662[p] : {});
                        var _666 = _665[p]["dependency"];
                        if (_666) {
                            if (!lang.isArray(_666)) {
                                _666 = _665[p]["dependency"] = [_666];
                            }
                            _656.forEach(_666, function (_667) {
                                if (!this._normalize(_667, _662, _663, _664)) {
                                    throw new Error("Plugin " + _667 + " is required.");
                                }
                            }, this);
                        }
                        delete _664[p];
                        return _665[p];
                    },
                    _init: function (pre) {
                        var p, _668, _669 = this._options;
                        for (p in _669) {
                            _668 = _669[p]["preInit"];
                            if ((pre ? _668 : !_668) && _669[p]["class"] && !this.pluginExisted(p)) {
                                this.loadPlugin(p);
                            }
                        }
                    },
                    loadPlugin: function (name) {
                        var _66a = this._options[name];
                        if (!_66a) {
                            return null;
                        }
                        var _66b = this.getPlugin(name);
                        if (_66b) {
                            return _66b;
                        }
                        var _66c = _66a["dependency"];
                        _656.forEach(_66c, function (_66d) {
                            if (!this.loadPlugin(_66d)) {
                                throw new Error("Plugin " + _66d + " is required.");
                            }
                        }, this);
                        var cls = _66a["class"];
                        delete _66a["class"];
                        _66b = new this.getPluginClazz(cls)(this.grid, _66a);
                        this._plugins.push(_66b);
                        return _66b;
                    },
                    _initView: function (view) {
                        if (!view) {
                            return;
                        }
                        util.funnelEvents(view.contentNode, view, "doContentEvent", ["mouseup", "mousemove"]);
                        util.funnelEvents(view.headerNode, view, "doHeaderEvent", ["mouseup"]);
                    },
                    pluginExisted: function (name) {
                        return !!this.getPlugin(name);
                    },
                    getPlugin: function (name) {
                        var _66e = this._plugins;
                        name = name.toLowerCase();
                        for (var i = 0, len = _66e.length; i < len; i++) {
                            if (name == _66e[i]["name"].toLowerCase()) {
                                return _66e[i];
                            }
                        }
                        return null;
                    },
                    getPluginClazz: function (_66f) {
                        if (lang.isFunction(_66f)) {
                            return _66f;
                        }
                        var _670 = "Please make sure Plugin \"" + _66f + "\" is existed.";
                        try {
                            var cls = lang.getObject(_66f);
                            if (!cls) {
                                throw new Error(_670);
                            }
                            return cls;
                        } catch (e) {
                            throw new Error(_670);
                        }
                    },
                    isFixedCell: function (cell) {
                        return cell && (cell.isRowSelector || cell.fixedPos);
                    },
                    destroy: function () {
                        _656.forEach(this._connects, _657.disconnect);
                        this.forEach("destroy");
                        if (this.grid.unwrap) {
                            this.grid.unwrap();
                        }
                        delete this._connects;
                        delete this._plugins;
                        delete this._options;
                    }
                });
                _65a.registerPlugin = function (_671, _672) {
                    if (!_671) {
                        console.warn("Failed to register plugin, class missed!");
                        return;
                    }
                    var cls = _65a;
                    cls.registry = cls.registry || {};
                    cls.registry[_671.prototype.name] = lang.mixin({
                        "class": _671
                    }, (_672 ? _672 : {}));
                };
                return _65a;
            });
        },
        "dojox/grid/enhanced/_Events": function () {
            define("dojox/grid/enhanced/_Events", ["dojo/_base/kernel", "dojo/_base/declare", "dojo/keys", "dojo/_base/html", "dojo/_base/event", "dojox/grid/_Events"], function (dojo, _673, keys, html, _674, _675) {
                return _673("dojox.grid.enhanced._Events", null, {
                    _events: null,
                    headerCellActiveClass: "dojoxGridHeaderActive",
                    cellActiveClass: "dojoxGridCellActive",
                    rowActiveClass: "dojoxGridRowActive",
                    constructor: function (_676) {
                        this._events = new _675();
                        _676.mixin(_676, this);
                    },
                    dokeyup: function (e) {
                        this.focus.currentArea().keyup(e);
                    },
                    onKeyDown: function (e) {
                        if (e.altKey || e.metaKey) {
                            return;
                        }
                        var _677 = this.focus;
                        var _678 = this.edit.isEditing();
                        switch (e.keyCode) {
                        case keys.TAB:
                            if (e.ctrlKey) {
                                return;
                            }
                            _677.tab(e.shiftKey ? -1 : 1, e);
                            break;
                        case keys.UP_ARROW:
                        case keys.DOWN_ARROW:
                            if (_678) {
                                return;
                            }
                            _677.currentArea().move(e.keyCode == keys.UP_ARROW ? -1 : 1, 0, e);
                            break;
                        case keys.LEFT_ARROW:
                        case keys.RIGHT_ARROW:
                            if (_678) {
                                return;
                            }
                            var _679 = (e.keyCode == keys.LEFT_ARROW) ? 1 : -1;
                            if (html._isBodyLtr()) {
                                _679 *= -1;
                            }
                            _677.currentArea().move(0, _679, e);
                            break;
                        case keys.F10:
                            if (this.menus && e.shiftKey) {
                                this.onRowContextMenu(e);
                            }
                            break;
                        default:
                            _677.currentArea().keydown(e);
                            break;
                        }
                    },
                    domouseup: function (e) {
                        if (e.cellNode) {
                            this.onMouseUp(e);
                        } else {
                            this.onRowSelectorMouseUp(e);
                        }
                    },
                    domousedown: function (e) {
                        if (!e.cellNode) {
                            this.onRowSelectorMouseDown(e);
                        }
                    },
                    onMouseUp: function (e) {
                        this[e.rowIndex == -1 ? "onHeaderCellMouseUp" : "onCellMouseUp"](e);
                    },
                    onCellMouseDown: function (e) {
                        html.addClass(e.cellNode, this.cellActiveClass);
                        html.addClass(e.rowNode, this.rowActiveClass);
                    },
                    onCellMouseUp: function (e) {
                        html.removeClass(e.cellNode, this.cellActiveClass);
                        html.removeClass(e.rowNode, this.rowActiveClass);
                    },
                    onCellClick: function (e) {
                        this._events.onCellClick.call(this, e);
                        this.focus.contentMouseEvent(e);
                    },
                    onCellDblClick: function (e) {
                        if (this.pluginMgr.isFixedCell(e.cell)) {
                            return;
                        }
                        if (this._click.length > 1 && (!this._click[0] || !this._click[1])) {
                            this._click[0] = this._click[1] = e;
                        }
                        this._events.onCellDblClick.call(this, e);
                    },
                    onRowClick: function (e) {
                        this.edit.rowClick(e);
                        if (!e.cell || !this.plugin("indirectSelection")) {
                            this.selection.clickSelectEvent(e);
                        }
                    },
                    onRowContextMenu: function (e) {
                        if (!this.edit.isEditing() && this.menus) {
                            this.showMenu(e);
                        }
                    },
                    onSelectedRegionContextMenu: function (e) {
                        if (this.selectedRegionMenu) {
                            this.selectedRegionMenu._openMyself({
                                target: e.target,
                                coords: e.keyCode !== keys.F10 && "pageX" in e ? {
                                    x: e.pageX,
                                    y: e.pageY
                                } : null
                            });
                            _674.stop(e);
                        }
                    },
                    onHeaderCellMouseOut: function (e) {
                        if (e.cellNode) {
                            html.removeClass(e.cellNode, this.cellOverClass);
                            html.removeClass(e.cellNode, this.headerCellActiveClass);
                        }
                    },
                    onHeaderCellMouseDown: function (e) {
                        if (e.cellNode) {
                            html.addClass(e.cellNode, this.headerCellActiveClass);
                        }
                    },
                    onHeaderCellMouseUp: function (e) {
                        if (e.cellNode) {
                            html.removeClass(e.cellNode, this.headerCellActiveClass);
                        }
                    },
                    onHeaderCellClick: function (e) {
                        this.focus.currentArea("header");
                        if (!e.cell.isRowSelector) {
                            this._events.onHeaderCellClick.call(this, e);
                        }
                        this.focus.headerMouseEvent(e);
                    },
                    onRowSelectorMouseDown: function (e) {
                        this.focus.focusArea("rowHeader", e);
                    },
                    onRowSelectorMouseUp: function (e) {},
                    onMouseUpRow: function (e) {
                        if (e.rowIndex != -1) {
                            this.onRowMouseUp(e);
                        }
                    },
                    onRowMouseUp: function (e) {}
                });
            });
        },
        "dojox/grid/enhanced/_FocusManager": function () {
            define("dojox/grid/enhanced/_FocusManager", ["dojo/_base/kernel", "dojo/_base/lang", "dojo/_base/declare", "dojo/_base/array", "dojo/_base/connect", "dojo/_base/event", "dojo/_base/sniff", "dojo/_base/html", "dojo/keys", "dijit/a11y", "dijit/focus", "../_FocusManager"], function (dojo, lang, _67a, _67b, _67c, _67d, has, html, keys, _67e, _67f, _680) {
                var _681 = _67a("dojox.grid.enhanced._FocusArea", null, {
                    constructor: function (area, _682) {
                        this._fm = _682;
                        this._evtStack = [area.name];
                        var _683 = function () {
                                return true;
                            };
                        area.onFocus = area.onFocus || _683;
                        area.onBlur = area.onBlur || _683;
                        area.onMove = area.onMove || _683;
                        area.onKeyUp = area.onKeyUp || _683;
                        area.onKeyDown = area.onKeyDown || _683;
                        lang.mixin(this, area);
                    },
                    move: function (_684, _685, evt) {
                        if (this.name) {
                            var i, len = this._evtStack.length;
                            for (i = len - 1; i >= 0; --i) {
                                if (this._fm._areas[this._evtStack[i]].onMove(_684, _685, evt) === false) {
                                    return false;
                                }
                            }
                        }
                        return true;
                    },
                    _onKeyEvent: function (evt, _686) {
                        if (this.name) {
                            var i, len = this._evtStack.length;
                            for (i = len - 1; i >= 0; --i) {
                                if (this._fm._areas[this._evtStack[i]][_686](evt, false) === false) {
                                    return false;
                                }
                            }
                            for (i = 0; i < len; ++i) {
                                if (this._fm._areas[this._evtStack[i]][_686](evt, true) === false) {
                                    return false;
                                }
                            }
                        }
                        return true;
                    },
                    keydown: function (evt) {
                        return this._onKeyEvent(evt, "onKeyDown");
                    },
                    keyup: function (evt) {
                        return this._onKeyEvent(evt, "onKeyUp");
                    },
                    contentMouseEventPlanner: function () {
                        return 0;
                    },
                    headerMouseEventPlanner: function () {
                        return 0;
                    }
                });
                return _67a("dojox.grid.enhanced._FocusManager", _680, {
                    _stopEvent: function (evt) {
                        try {
                            if (evt && evt.preventDefault) {
                                _67d.stop(evt);
                            }
                        } catch (e) {}
                    },
                    constructor: function (grid) {
                        this.grid = grid;
                        this._areas = {};
                        this._areaQueue = [];
                        this._contentMouseEventHandlers = [];
                        this._headerMouseEventHandlers = [];
                        this._currentAreaIdx = -1;
                        this._gridBlured = true;
                        this._connects.push(_67c.connect(grid, "onBlur", this, "_doBlur"));
                        this._connects.push(_67c.connect(grid.scroller, "renderPage", this, "_delayedCellFocus"));
                        this.addArea({
                            name: "header",
                            onFocus: lang.hitch(this, this.focusHeader),
                            onBlur: lang.hitch(this, this._blurHeader),
                            onMove: lang.hitch(this, this._navHeader),
                            getRegions: lang.hitch(this, this._findHeaderCells),
                            onRegionFocus: lang.hitch(this, this.doColHeaderFocus),
                            onRegionBlur: lang.hitch(this, this.doColHeaderBlur),
                            onKeyDown: lang.hitch(this, this._onHeaderKeyDown)
                        });
                        this.addArea({
                            name: "content",
                            onFocus: lang.hitch(this, this._focusContent),
                            onBlur: lang.hitch(this, this._blurContent),
                            onMove: lang.hitch(this, this._navContent),
                            onKeyDown: lang.hitch(this, this._onContentKeyDown)
                        });
                        this.addArea({
                            name: "editableCell",
                            onFocus: lang.hitch(this, this._focusEditableCell),
                            onBlur: lang.hitch(this, this._blurEditableCell),
                            onKeyDown: lang.hitch(this, this._onEditableCellKeyDown),
                            onContentMouseEvent: lang.hitch(this, this._onEditableCellMouseEvent),
                            contentMouseEventPlanner: function (evt, _687) {
                                return -1;
                            }
                        });
                        this.placeArea("header");
                        this.placeArea("content");
                        this.placeArea("editableCell");
                        this.placeArea("editableCell", "above", "content");
                    },
                    destroy: function () {
                        for (var name in this._areas) {
                            var area = this._areas[name];
                            _67b.forEach(area._connects, _67c.disconnect);
                            area._connects = null;
                            if (area.uninitialize) {
                                area.uninitialize();
                            }
                        }
                        this.inherited(arguments);
                    },
                    addArea: function (area) {
                        if (area.name && lang.isString(area.name)) {
                            if (this._areas[area.name]) {
                                _67b.forEach(area._connects, _67c.disconnect);
                            }
                            this._areas[area.name] = new _681(area, this);
                            if (area.onHeaderMouseEvent) {
                                this._headerMouseEventHandlers.push(area.name);
                            }
                            if (area.onContentMouseEvent) {
                                this._contentMouseEventHandlers.push(area.name);
                            }
                        }
                    },
                    getArea: function (_688) {
                        return this._areas[_688];
                    },
                    _bindAreaEvents: function () {
                        var area, hdl, _689 = this._areas;
                        _67b.forEach(this._areaQueue, function (name) {
                            area = _689[name];
                            if (!area._initialized && lang.isFunction(area.initialize)) {
                                area.initialize();
                                area._initialized = true;
                            }
                            if (area.getRegions) {
                                area._regions = area.getRegions() || [];
                                _67b.forEach(area._connects || [], _67c.disconnect);
                                area._connects = [];
                                _67b.forEach(area._regions, function (r) {
                                    if (area.onRegionFocus) {
                                        hdl = _67c.connect(r, "onfocus", area.onRegionFocus);
                                        area._connects.push(hdl);
                                    }
                                    if (area.onRegionBlur) {
                                        hdl = _67c.connect(r, "onblur", area.onRegionBlur);
                                        area._connects.push(hdl);
                                    }
                                });
                            }
                        });
                    },
                    removeArea: function (_68a) {
                        var area = this._areas[_68a];
                        if (area) {
                            this.ignoreArea(_68a);
                            var i = _67b.indexOf(this._contentMouseEventHandlers, _68a);
                            if (i >= 0) {
                                this._contentMouseEventHandlers.splice(i, 1);
                            }
                            i = _67b.indexOf(this._headerMouseEventHandlers, _68a);
                            if (i >= 0) {
                                this._headerMouseEventHandlers.splice(i, 1);
                            }
                            _67b.forEach(area._connects, _67c.disconnect);
                            if (area.uninitialize) {
                                area.uninitialize();
                            }
                            delete this._areas[_68a];
                        }
                    },
                    currentArea: function (_68b, _68c) {
                        var idx, cai = this._currentAreaIdx;
                        if (lang.isString(_68b) && (idx = _67b.indexOf(this._areaQueue, _68b)) >= 0) {
                            if (cai != idx) {
                                this.tabbingOut = false;
                                if (_68c && cai >= 0 && cai < this._areaQueue.length) {
                                    this._areas[this._areaQueue[cai]].onBlur();
                                }
                                this._currentAreaIdx = idx;
                            }
                        } else {
                            return (cai < 0 || cai >= this._areaQueue.length) ? new _681({}, this) : this._areas[this._areaQueue[this._currentAreaIdx]];
                        }
                        return null;
                    },
                    placeArea: function (name, pos, _68d) {
                        if (!this._areas[name]) {
                            return;
                        }
                        var idx = _67b.indexOf(this._areaQueue, _68d);
                        switch (pos) {
                        case "after":
                            if (idx >= 0) {
                                ++idx;
                            }
                        case "before":
                            if (idx >= 0) {
                                this._areaQueue.splice(idx, 0, name);
                                break;
                            }
                        default:
                            this._areaQueue.push(name);
                            break;
                        case "above":
                            var _68e = true;
                        case "below":
                            var _68f = this._areas[_68d];
                            if (_68f) {
                                if (_68e) {
                                    _68f._evtStack.push(name);
                                } else {
                                    _68f._evtStack.splice(0, 0, name);
                                }
                            }
                        }
                    },
                    ignoreArea: function (name) {
                        this._areaQueue = _67b.filter(this._areaQueue, function (_690) {
                            return _690 != name;
                        });
                    },
                    focusArea: function (_691, evt) {
                        var idx;
                        if (typeof _691 == "number") {
                            idx = _691 < 0 ? this._areaQueue.length + _691 : _691;
                        } else {
                            idx = _67b.indexOf(this._areaQueue, lang.isString(_691) ? _691 : (_691 && _691.name));
                        }
                        if (idx < 0) {
                            idx = 0;
                        }
                        var step = idx - this._currentAreaIdx;
                        this._gridBlured = false;
                        if (step) {
                            this.tab(step, evt);
                        } else {
                            this.currentArea().onFocus(evt, step);
                        }
                    },
                    tab: function (step, evt) {
                        this._gridBlured = false;
                        this.tabbingOut = false;
                        if (step === 0) {
                            return;
                        }
                        var cai = this._currentAreaIdx;
                        var dir = step > 0 ? 1 : -1;
                        if (cai < 0 || cai >= this._areaQueue.length) {
                            cai = (this._currentAreaIdx += step);
                        } else {
                            var _692 = this._areas[this._areaQueue[cai]].onBlur(evt, step);
                            if (_692 === true) {
                                cai = (this._currentAreaIdx += step);
                            } else {
                                if (lang.isString(_692) && this._areas[_692]) {
                                    cai = this._currentAreaIdx = _67b.indexOf(this._areaQueue, _692);
                                }
                            }
                        }
                        for (; cai >= 0 && cai < this._areaQueue.length; cai += dir) {
                            this._currentAreaIdx = cai;
                            if (this._areaQueue[cai] && this._areas[this._areaQueue[cai]].onFocus(evt, step)) {
                                return;
                            }
                        }
                        this.tabbingOut = true;
                        if (step < 0) {
                            this._currentAreaIdx = -1;
                            _67f.focus(this.grid.domNode);
                        } else {
                            this._currentAreaIdx = this._areaQueue.length;
                            _67f.focus(this.grid.lastFocusNode);
                        }
                    },
                    _onMouseEvent: function (type, evt) {
                        var _693 = type.toLowerCase(),
                            _694 = this["_" + _693 + "MouseEventHandlers"],
                            res = _67b.map(_694, function (_695) {
                                return {
                                    "area": _695,
                                    "idx": this._areas[_695][_693 + "MouseEventPlanner"](evt, _694)
                                };
                            }, this).sort(function (a, b) {
                                return b.idx - a.idx;
                            }),
                            _696 = _67b.map(res, function (_697) {
                                return res.area;
                            }),
                            i = res.length;
                        while (--i >= 0) {
                            if (this._areas[res[i].area]["on" + type + "MouseEvent"](evt, _696) === false) {
                                return;
                            }
                        }
                    },
                    contentMouseEvent: function (evt) {
                        this._onMouseEvent("Content", evt);
                    },
                    headerMouseEvent: function (evt) {
                        this._onMouseEvent("Header", evt);
                    },
                    initFocusView: function () {
                        this.focusView = this.grid.views.getFirstScrollingView() || this.focusView || this.grid.views.views[0];
                        this._bindAreaEvents();
                    },
                    isNavHeader: function () {
                        return this._areaQueue[this._currentAreaIdx] == "header";
                    },
                    previousKey: function (e) {
                        this.tab(-1, e);
                    },
                    nextKey: function (e) {
                        this.tab(1, e);
                    },
                    setFocusCell: function (_698, _699) {
                        if (_698) {
                            this.currentArea(this.grid.edit.isEditing() ? "editableCell" : "content", true);
                            this._focusifyCellNode(false);
                            this.cell = _698;
                            this.rowIndex = _699;
                            this._focusifyCellNode(true);
                        }
                        this.grid.onCellFocus(this.cell, this.rowIndex);
                    },
                    doFocus: function (e) {
                        if (e && e.target == e.currentTarget && !this.tabbingOut) {
                            if (this._gridBlured) {
                                this._gridBlured = false;
                                if (this._currentAreaIdx < 0 || this._currentAreaIdx >= this._areaQueue.length) {
                                    this.focusArea(0, e);
                                } else {
                                    this.focusArea(this._currentAreaIdx, e);
                                }
                            }
                        } else {
                            this.tabbingOut = false;
                        }
                        _67d.stop(e);
                    },
                    _doBlur: function () {
                        this._gridBlured = true;
                    },
                    doLastNodeFocus: function (e) {
                        if (this.tabbingOut) {
                            this.tabbingOut = false;
                        } else {
                            this.focusArea(-1, e);
                        }
                    },
                    _delayedHeaderFocus: function () {
                        if (this.isNavHeader() && !has("ie")) {
                            this.focusHeader();
                        }
                    },
                    _delayedCellFocus: function () {
                        this.currentArea("header", true);
                        this.focusArea(this._currentAreaIdx);
                    },
                    _changeMenuBindNode: function (_69a, _69b) {
                        var hm = this.grid.headerMenu;
                        if (hm && this._contextMenuBindNode == _69a) {
                            hm.unBindDomNode(_69a);
                            hm.bindDomNode(_69b);
                            this._contextMenuBindNode = _69b;
                        }
                    },
                    focusHeader: function (evt, step) {
                        var _69c = false;
                        this.inherited(arguments);
                        if (this._colHeadNode && html.style(this._colHeadNode, "display") != "none") {
                            _67f.focus(this._colHeadNode);
                            this._stopEvent(evt);
                            _69c = true;
                        }
                        return _69c;
                    },
                    _blurHeader: function (evt, step) {
                        if (this._colHeadNode) {
                            html.removeClass(this._colHeadNode, this.focusClass);
                        }
                        html.removeAttr(this.grid.domNode, "aria-activedescendant");
                        this._changeMenuBindNode(this.grid.domNode, this.grid.viewsHeaderNode);
                        this._colHeadNode = this._colHeadFocusIdx = null;
                        return true;
                    },
                    _navHeader: function (_69d, _69e, evt) {
                        var _69f = _69e < 0 ? -1 : 1,
                            _6a0 = _67b.indexOf(this._findHeaderCells(), this._colHeadNode);
                        if (_6a0 >= 0 && (evt.shiftKey && evt.ctrlKey)) {
                            this.colSizeAdjust(evt, _6a0, _69f * 5);
                            return;
                        }
                        this.move(_69d, _69e);
                    },
                    _onHeaderKeyDown: function (e, _6a1) {
                        if (_6a1) {
                            var dk = keys;
                            switch (e.keyCode) {
                            case dk.ENTER:
                            case dk.SPACE:
                                var _6a2 = this.getHeaderIndex();
                                if (_6a2 >= 0 && !this.grid.pluginMgr.isFixedCell(e.cell)) {
                                    this.grid.setSortIndex(_6a2, null, e);
                                    _67d.stop(e);
                                }
                                break;
                            }
                        }
                        return true;
                    },
                    _setActiveColHeader: function () {
                        this.inherited(arguments);
                        _67f.focus(this._colHeadNode);
                    },
                    findAndFocusGridCell: function () {
                        this._focusContent();
                    },
                    _focusContent: function (evt, step) {
                        var _6a3 = true;
                        var _6a4 = (this.grid.rowCount === 0);
                        if (this.isNoFocusCell() && !_6a4) {
                            for (var i = 0, cell = this.grid.getCell(0); cell && cell.hidden; cell = this.grid.getCell(++i)) {}
                            this.setFocusIndex(0, cell ? i : 0);
                        } else {
                            if (this.cell && !_6a4) {
                                if (this.focusView && !this.focusView.rowNodes[this.rowIndex]) {
                                    this.grid.scrollToRow(this.rowIndex);
                                    this.focusGrid();
                                } else {
                                    this.setFocusIndex(this.rowIndex, this.cell.index);
                                }
                            } else {
                                _6a3 = false;
                            }
                        }
                        if (_6a3) {
                            this._stopEvent(evt);
                        }
                        return _6a3;
                    },
                    _blurContent: function (evt, step) {
                        this._focusifyCellNode(false);
                        return true;
                    },
                    _navContent: function (_6a5, _6a6, evt) {
                        if ((this.rowIndex === 0 && _6a5 < 0) || (this.rowIndex === this.grid.rowCount - 1 && _6a5 > 0)) {
                            return;
                        }
                        this._colHeadNode = null;
                        this.move(_6a5, _6a6, evt);
                        if (evt) {
                            _67d.stop(evt);
                        }
                    },
                    _onContentKeyDown: function (e, _6a7) {
                        if (_6a7) {
                            var dk = keys,
                                s = this.grid.scroller;
                            switch (e.keyCode) {
                            case dk.ENTER:
                            case dk.SPACE:
                                var g = this.grid;
                                if (g.indirectSelection) {
                                    break;
                                }
                                g.selection.clickSelect(this.rowIndex, _67c.isCopyKey(e), e.shiftKey);
                                g.onRowClick(e);
                                _67d.stop(e);
                                break;
                            case dk.PAGE_UP:
                                if (this.rowIndex !== 0) {
                                    if (this.rowIndex != s.firstVisibleRow + 1) {
                                        this._navContent(s.firstVisibleRow - this.rowIndex, 0);
                                    } else {
                                        this.grid.setScrollTop(s.findScrollTop(this.rowIndex - 1));
                                        this._navContent(s.firstVisibleRow - s.lastVisibleRow + 1, 0);
                                    }
                                    _67d.stop(e);
                                }
                                break;
                            case dk.PAGE_DOWN:
                                if (this.rowIndex + 1 != this.grid.rowCount) {
                                    _67d.stop(e);
                                    if (this.rowIndex != s.lastVisibleRow - 1) {
                                        this._navContent(s.lastVisibleRow - this.rowIndex - 1, 0);
                                    } else {
                                        this.grid.setScrollTop(s.findScrollTop(this.rowIndex + 1));
                                        this._navContent(s.lastVisibleRow - s.firstVisibleRow - 1, 0);
                                    }
                                    _67d.stop(e);
                                }
                                break;
                            }
                        }
                        return true;
                    },
                    _blurFromEditableCell: false,
                    _isNavigating: false,
                    _navElems: null,
                    _focusEditableCell: function (evt, step) {
                        var _6a8 = false;
                        if (this._isNavigating) {
                            _6a8 = true;
                        } else {
                            if (this.grid.edit.isEditing() && this.cell) {
                                if (this._blurFromEditableCell || !this._blurEditableCell(evt, step)) {
                                    this.setFocusIndex(this.rowIndex, this.cell.index);
                                    _6a8 = true;
                                }
                                this._stopEvent(evt);
                            }
                        }
                        return _6a8;
                    },
                    _applyEditableCell: function () {
                        try {
                            this.grid.edit.apply();
                        } catch (e) {
                            console.warn("_FocusManager._applyEditableCell() error:", e);
                        }
                    },
                    _blurEditableCell: function (evt, step) {
                        this._blurFromEditableCell = false;
                        if (this._isNavigating) {
                            var _6a9 = true;
                            if (evt) {
                                var _6aa = this._navElems;
                                var _6ab = _6aa.lowest || _6aa.first;
                                var _6ac = _6aa.last || _6aa.highest || _6ab;
                                var _6ad = has("ie") ? evt.srcElement : evt.target;
                                _6a9 = _6ad == (step > 0 ? _6ac : _6ab);
                            }
                            if (_6a9) {
                                this._isNavigating = false;
                                html.setSelectable(this.cell.getNode(this.rowIndex), false);
                                return "content";
                            }
                            return false;
                        } else {
                            if (this.grid.edit.isEditing() && this.cell) {
                                if (!step || typeof step != "number") {
                                    return false;
                                }
                                var dir = step > 0 ? 1 : -1;
                                var cc = this.grid.layout.cellCount;
                                for (var cell, col = this.cell.index + dir; col >= 0 && col < cc; col += dir) {
                                    cell = this.grid.getCell(col);
                                    if (cell.editable) {
                                        this.cell = cell;
                                        this._blurFromEditableCell = true;
                                        return false;
                                    }
                                }
                                if ((this.rowIndex > 0 || dir == 1) && (this.rowIndex < this.grid.rowCount || dir == -1)) {
                                    this.rowIndex += dir;
                                    for (col = dir > 0 ? 0 : cc - 1; col >= 0 && col < cc; col += dir) {
                                        cell = this.grid.getCell(col);
                                        if (cell.editable) {
                                            this.cell = cell;
                                            break;
                                        }
                                    }
                                    this._applyEditableCell();
                                    return "content";
                                }
                            }
                        }
                        return true;
                    },
                    _initNavigatableElems: function () {
                        this._navElems = _67e._getTabNavigable(this.cell.getNode(this.rowIndex));
                    },
                    _onEditableCellKeyDown: function (e, _6ae) {
                        var dk = keys,
                            g = this.grid,
                            edit = g.edit,
                            _6af = false,
                            _6b0 = true;
                        switch (e.keyCode) {
                        case dk.ENTER:
                            if (_6ae && edit.isEditing()) {
                                this._applyEditableCell();
                                _6af = true;
                                _67d.stop(e);
                            }
                        case dk.SPACE:
                            if (!_6ae && this._isNavigating) {
                                _6b0 = false;
                                break;
                            }
                            if (_6ae) {
                                if (!this.cell.editable && this.cell.navigatable) {
                                    this._initNavigatableElems();
                                    var _6b1 = this._navElems.lowest || this._navElems.first;
                                    if (_6b1) {
                                        this._isNavigating = true;
                                        html.setSelectable(this.cell.getNode(this.rowIndex), true);
                                        _67f.focus(_6b1);
                                        _67d.stop(e);
                                        this.currentArea("editableCell", true);
                                        break;
                                    }
                                }
                                if (!_6af && !edit.isEditing() && !g.pluginMgr.isFixedCell(this.cell)) {
                                    edit.setEditCell(this.cell, this.rowIndex);
                                }
                                if (_6af) {
                                    this.currentArea("content", true);
                                } else {
                                    if (this.cell.editable && g.canEdit()) {
                                        this.currentArea("editableCell", true);
                                    }
                                }
                            }
                            break;
                        case dk.PAGE_UP:
                        case dk.PAGE_DOWN:
                            if (!_6ae && edit.isEditing()) {
                                _6b0 = false;
                            }
                            break;
                        case dk.ESCAPE:
                            if (!_6ae) {
                                edit.cancel();
                                this.currentArea("content", true);
                            }
                        }
                        return _6b0;
                    },
                    _onEditableCellMouseEvent: function (evt) {
                        if (evt.type == "click") {
                            var cell = this.cell || evt.cell;
                            if (cell && !cell.editable && cell.navigatable) {
                                this._initNavigatableElems();
                                if (this._navElems.lowest || this._navElems.first) {
                                    var _6b2 = has("ie") ? evt.srcElement : evt.target;
                                    if (_6b2 != cell.getNode(evt.rowIndex)) {
                                        this._isNavigating = true;
                                        this.focusArea("editableCell", evt);
                                        html.setSelectable(cell.getNode(evt.rowIndex), true);
                                        _67f.focus(_6b2);
                                        return false;
                                    }
                                }
                            } else {
                                if (this.grid.singleClickEdit) {
                                    this.currentArea("editableCell");
                                    return false;
                                }
                            }
                        }
                        return true;
                    }
                });
            });
        },
        "dojox/grid/enhanced/plugins/_SelectionPreserver": function () {
            define("dojox/grid/enhanced/plugins/_SelectionPreserver", ["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/connect", "../../_SelectionPreserver"], function (_6b3, lang, _6b4, _6b5) {
                return _6b3("dojox.grid.enhanced.plugins._SelectionPreserver", _6b5, {
                    constructor: function (_6b6) {
                        var grid = this.grid;
                        grid.onSelectedById = this.onSelectedById;
                        this._oldClearData = grid._clearData;
                        var self = this;
                        grid._clearData = function () {
                            self._updateMapping(!grid._noInternalMapping);
                            self._trustSelection = [];
                            self._oldClearData.apply(grid, arguments);
                        };
                        this._connects.push(_6b4.connect(_6b6, "selectRange", lang.hitch(this, "_updateMapping", true, true, false)), _6b4.connect(_6b6, "deselectRange", lang.hitch(this, "_updateMapping", true, false, false)), _6b4.connect(_6b6, "deselectAll", lang.hitch(this, "_updateMapping", true, false, true)));
                    },
                    destroy: function () {
                        this.inherited(arguments);
                        this.grid._clearData = this._oldClearData;
                    },
                    reset: function () {
                        this.inherited(arguments);
                        this._idMap = [];
                        this._trustSelection = [];
                        this._defaultSelected = false;
                    },
                    _reSelectById: function (item, _6b7) {
                        var s = this.selection,
                            g = this.grid;
                        if (item && g._hasIdentity) {
                            var id = g.store.getIdentity(item);
                            if (this._selectedById[id] === undefined) {
                                if (!this._trustSelection[_6b7]) {
                                    s.selected[_6b7] = this._defaultSelected;
                                }
                            } else {
                                s.selected[_6b7] = this._selectedById[id];
                            }
                            this._idMap.push(id);
                            g.onSelectedById(id, _6b7, s.selected[_6b7]);
                        }
                    },
                    _selectById: function (_6b8, _6b9) {
                        if (!this.inherited(arguments)) {
                            this._trustSelection[_6b9] = true;
                        }
                    },
                    onSelectedById: function (id, _6ba, _6bb) {},
                    _updateMapping: function (_6bc, _6bd, _6be, from, to) {
                        var s = this.selection,
                            g = this.grid,
                            flag = 0,
                            _6bf = 0,
                            i, id;
                        for (i = g.rowCount - 1; i >= 0; --i) {
                            if (!g._by_idx[i]) {
                                ++_6bf;
                                flag += s.selected[i] ? 1 : -1;
                            } else {
                                id = g._by_idx[i].idty;
                                if (id && (_6bc || this._selectedById[id] === undefined)) {
                                    this._selectedById[id] = !! s.selected[i];
                                }
                            }
                        }
                        if (_6bf) {
                            this._defaultSelected = flag > 0;
                        }
                        if (!_6be && from !== undefined && to !== undefined) {
                            _6be = !g.usingPagination && Math.abs(to - from + 1) === g.rowCount;
                        }
                        if (_6be && (!g.usingPagination || g.selectionMode === "single")) {
                            for (i = this._idMap.length - 1; i >= 0; --i) {
                                this._selectedById[this._idMap[i]] = _6bd;
                            }
                        }
                    }
                });
            });
        },
        "dojox/grid/enhanced/nls/EnhancedGrid": function () {
            define("dojox/grid/enhanced/nls/EnhancedGrid", {
                root: ({
                    singleSort: "Single Sort",
                    nestedSort: "Nested Sort",
                    ascending: "Click to sort Ascending",
                    descending: "Click to sort Descending",
                    sortingState: "${0} - ${1}",
                    unsorted: "Do not sort this column",
                    indirectSelectionRadio: "Row ${0}, single selection, radio box",
                    indirectSelectionCheckBox: "Row ${0}, multiple selection, check box",
                    selectAll: "Select all"
                }),
                "ar": true,
                "ca": true,
                "cs": true,
                "da": true,
                "de": true,
                "el": true,
                "es": true,
                "fi": true,
                "fr": true,
                "he": true,
                "hr": true,
                "hu": true,
                "hr": true,
                "it": true,
                "ja": true,
                "kk": true,
                "ko": true,
                "nb": true,
                "nl": true,
                "pl": true,
                "pt": true,
                "pt-pt": true,
                "ro": true,
                "ru": true,
                "sk": true,
                "sl": true,
                "sv": true,
                "th": true,
                "tr": true,
                "zh": true,
                "zh-tw": true
            });
        },
        "dojox/grid/enhanced/plugins/Filter": function () {
            define("dojox/grid/enhanced/plugins/Filter", ["dojo/_base/declare", "dojo/_base/lang", "dojo/i18n", "../_Plugin", "./Dialog", "./filter/FilterLayer", "./filter/FilterBar", "./filter/FilterDefDialog", "./filter/FilterStatusTip", "./filter/ClearFilterConfirm", "../../EnhancedGrid", "dojo/i18n!../nls/Filter"], function (_6c0, lang, i18n, _6c1, _6c2, _6c3, _6c4, _6c5, _6c6, _6c7, _6c8) {
                var _6c9 = _6c0("dojox.grid.enhanced.plugins.Filter", _6c1, {
                    name: "filter",
                    constructor: function (grid, args) {
                        this.grid = grid;
                        this.nls = i18n.getLocalization("dojox.grid.enhanced", "Filter");
                        args = this.args = lang.isObject(args) ? args : {};
                        if (typeof args.ruleCount != "number" || args.ruleCount < 0) {
                            args.ruleCount = 3;
                        }
                        var rc = this.ruleCountToConfirmClearFilter = args.ruleCountToConfirmClearFilter;
                        if (rc === undefined) {
                            this.ruleCountToConfirmClearFilter = 2;
                        }
                        this._wrapStore();
                        var obj = {
                            "plugin": this
                        };
                        this.clearFilterDialog = new _6c2({
                            refNode: this.grid.domNode,
                            title: this.nls["clearFilterDialogTitle"],
                            content: new _6c7(obj)
                        });
                        this.filterDefDialog = new _6c5(obj);
                        this.filterBar = new _6c4(obj);
                        this.filterStatusTip = new _6c6(obj);
                        grid.onFilterDefined = function () {};
                        this.connect(grid.layer("filter"), "onFilterDefined", function (_6ca) {
                            grid.onFilterDefined(grid.getFilter(), grid.getFilterRelation());
                        });
                    },
                    destroy: function () {
                        this.inherited(arguments);
                        try {
                            this.grid.unwrap("filter");
                            this.filterBar.destroyRecursive();
                            this.filterBar = null;
                            this.clearFilterDialog.destroyRecursive();
                            this.clearFilterDialog = null;
                            this.filterStatusTip.destroy();
                            this.filterStatusTip = null;
                            this.filterDefDialog.destroy();
                            this.filterDefDialog = null;
                            this.grid = null;
                            this.nls = null;
                            this.args = null;
                        } catch (e) {
                            console.warn("Filter.destroy() error:", e);
                        }
                    },
                    _wrapStore: function () {
                        var g = this.grid;
                        var args = this.args;
                        var _6cb = args.isServerSide ? new _6c3.ServerSideFilterLayer(args) : new _6c3.ClientSideFilterLayer({
                            cacheSize: args.filterCacheSize,
                            fetchAll: args.fetchAllOnFirstFilter,
                            getter: this._clientFilterGetter
                        });
                        _6c3.wrap(g, "_storeLayerFetch", _6cb);
                        this.connect(g, "_onDelete", lang.hitch(_6cb, "invalidate"));
                    },
                    onSetStore: function (_6cc) {
                        this.filterDefDialog.clearFilter(true);
                    },
                    _clientFilterGetter: function (_6cd, cell, _6ce) {
                        return cell.get(_6ce, _6cd);
                    }
                });
                _6c8.registerPlugin(_6c9);
                return _6c9;
            });
        },
        "dojox/grid/enhanced/_Plugin": function () {
            define("dojox/grid/enhanced/_Plugin", ["dojo/_base/kernel", "dojo/_base/lang", "dojo/_base/declare", "dojo/_base/array", "dojo/_base/connect", "../EnhancedGrid"], function (dojo, lang, _6cf, _6d0, _6d1) {
                return _6cf("dojox.grid.enhanced._Plugin", null, {
                    name: "plugin",
                    grid: null,
                    option: {},
                    _connects: [],
                    _subscribes: [],
                    privates: {},
                    constructor: function (_6d2, _6d3) {
                        this.grid = _6d2;
                        this.option = _6d3;
                        this._connects = [];
                        this._subscribes = [];
                        this.privates = lang.mixin({}, dojox.grid.enhanced._Plugin.prototype);
                        this.init();
                    },
                    init: function () {},
                    onPreInit: function () {},
                    onPostInit: function () {},
                    onStartUp: function () {},
                    connect: function (obj, _6d4, _6d5) {
                        var conn = _6d1.connect(obj, _6d4, this, _6d5);
                        this._connects.push(conn);
                        return conn;
                    },
                    disconnect: function (_6d6) {
                        _6d0.some(this._connects, function (conn, i, _6d7) {
                            if (conn == _6d6) {
                                _6d1.disconnect(_6d6);
                                _6d7.splice(i, 1);
                                return true;
                            }
                            return false;
                        });
                    },
                    subscribe: function (_6d8, _6d9) {
                        var _6da = _6d1.subscribe(_6d8, this, _6d9);
                        this._subscribes.push(_6da);
                        return _6da;
                    },
                    unsubscribe: function (_6db) {
                        _6d0.some(this._subscribes, function (_6dc, i, _6dd) {
                            if (_6dc == _6db) {
                                _6d1.unsubscribe(_6db);
                                _6dd.splice(i, 1);
                                return true;
                            }
                            return false;
                        });
                    },
                    onSetStore: function (_6de) {},
                    destroy: function () {
                        _6d0.forEach(this._connects, _6d1.disconnect);
                        _6d0.forEach(this._subscribes, _6d1.unsubscribe);
                        delete this._connects;
                        delete this._subscribes;
                        delete this.option;
                        delete this.privates;
                    }
                });
            });
        },
        "dojox/grid/enhanced/plugins/Dialog": function () {
            define("dojox/grid/enhanced/plugins/Dialog", ["dojo/_base/declare", "dojo/_base/html", "dojo/window", "dijit/Dialog"], function (_6df, html, win, _6e0) {
                return _6df("dojox.grid.enhanced.plugins.Dialog", _6e0, {
                    refNode: null,
                    _position: function () {
                        if (this.refNode && !this._relativePosition) {
                            var _6e1 = html.position(html.byId(this.refNode)),
                                _6e2 = html.position(this.domNode),
                                _6e3 = win.getBox();
                            if (_6e2.w && _6e2.h) {
                                if (_6e1.x < 0) {
                                    _6e1.x = 0;
                                }
                                if (_6e1.x + _6e1.w > _6e3.w) {
                                    _6e1.w = _6e3.w - _6e1.x;
                                }
                                if (_6e1.y < 0) {
                                    _6e1.y = 0;
                                }
                                if (_6e1.y + _6e1.h > _6e3.h) {
                                    _6e1.h = _6e3.h - _6e1.y;
                                }
                                _6e1.x = _6e1.x + _6e1.w / 2 - _6e2.w / 2;
                                _6e1.y = _6e1.y + _6e1.h / 2 - _6e2.h / 2;
                                if (_6e1.x >= 0 && _6e1.x + _6e2.w <= _6e3.w && _6e1.y >= 0 && _6e1.y + _6e2.h <= _6e3.h) {
                                    this._relativePosition = _6e1;
                                }
                            }
                        }
                        this.inherited(arguments);
                    }
                });
            });
        },
        "dijit/Dialog": function () {
            require({
                cache: {
                    "url:dijit/templates/Dialog.html": "<div class=\"dijitDialog\" role=\"dialog\" aria-labelledby=\"${id}_title\">\n\t<div data-dojo-attach-point=\"titleBar\" class=\"dijitDialogTitleBar\">\n\t<span data-dojo-attach-point=\"titleNode\" class=\"dijitDialogTitle\" id=\"${id}_title\"></span>\n\t<span data-dojo-attach-point=\"closeButtonNode\" class=\"dijitDialogCloseIcon\" data-dojo-attach-event=\"ondijitclick: onCancel\" title=\"${buttonCancel}\" role=\"button\" tabIndex=\"-1\">\n\t\t<span data-dojo-attach-point=\"closeText\" class=\"closeText\" title=\"${buttonCancel}\">x</span>\n\t</span>\n\t</div>\n\t\t<div data-dojo-attach-point=\"containerNode\" class=\"dijitDialogPaneContent\"></div>\n</div>\n"
                }
            });
            define("dijit/Dialog", ["require", "dojo/_base/array", "dojo/_base/connect", "dojo/_base/declare", "dojo/_base/Deferred", "dojo/dom", "dojo/dom-class", "dojo/dom-geometry", "dojo/dom-style", "dojo/_base/event", "dojo/_base/fx", "dojo/i18n", "dojo/_base/kernel", "dojo/keys", "dojo/_base/lang", "dojo/on", "dojo/ready", "dojo/_base/sniff", "dojo/_base/window", "dojo/window", "dojo/dnd/Moveable", "dojo/dnd/TimedMoveable", "./focus", "./_base/manager", "./_Widget", "./_TemplatedMixin", "./_CssStateMixin", "./form/_FormMixin", "./_DialogMixin", "./DialogUnderlay", "./layout/ContentPane", "dojo/text!./templates/Dialog.html", ".", "dojo/i18n!./nls/common"], function (_6e4, _6e5, _6e6, _6e7, _6e8, dom, _6e9, _6ea, _6eb, _6ec, fx, i18n, _6ed, keys, lang, on, _6ee, has, win, _6ef, _6f0, _6f1, _6f2, _6f3, _6f4, _6f5, _6f6, _6f7, _6f8, _6f9, _6fa, _6fb, _6fc) {
                var _6fd = _6e7("dijit._DialogBase", [_6f5, _6f7, _6f8, _6f6], {
                    templateString: _6fb,
                    baseClass: "dijitDialog",
                    cssStateNodes: {
                        closeButtonNode: "dijitDialogCloseIcon"
                    },
                    _setTitleAttr: [{
                        node: "titleNode",
                        type: "innerHTML"
                    }, {
                        node: "titleBar",
                        type: "attribute"
                    }],
                    open: false,
                    duration: _6f3.defaultDuration,
                    refocus: true,
                    autofocus: true,
                    _firstFocusItem: null,
                    _lastFocusItem: null,
                    doLayout: false,
                    draggable: true,
                    "aria-describedby": "",
                    postMixInProperties: function () {
                        var _6fe = i18n.getLocalization("dijit", "common");
                        lang.mixin(this, _6fe);
                        this.inherited(arguments);
                    },
                    postCreate: function () {
                        _6eb.set(this.domNode, {
                            display: "none",
                            position: "absolute"
                        });
                        win.body().appendChild(this.domNode);
                        this.inherited(arguments);
                        this.connect(this, "onExecute", "hide");
                        this.connect(this, "onCancel", "hide");
                        this._modalconnects = [];
                    },
                    onLoad: function () {
                        this._position();
                        if (this.autofocus && _6ff.isTop(this)) {
                            this._getFocusItems(this.domNode);
                            _6f2.focus(this._firstFocusItem);
                        }
                        this.inherited(arguments);
                    },
                    _endDrag: function () {
                        var _700 = _6ea.position(this.domNode),
                            _701 = _6ef.getBox();
                        _700.y = Math.min(Math.max(_700.y, 0), (_701.h - _700.h));
                        _700.x = Math.min(Math.max(_700.x, 0), (_701.w - _700.w));
                        this._relativePosition = _700;
                        this._position();
                    },
                    _setup: function () {
                        var node = this.domNode;
                        if (this.titleBar && this.draggable) {
                            this._moveable = new((has("ie") == 6) ? _6f1 : _6f0)(node, {
                                handle: this.titleBar
                            });
                            this.connect(this._moveable, "onMoveStop", "_endDrag");
                        } else {
                            _6e9.add(node, "dijitDialogFixed");
                        }
                        this.underlayAttrs = {
                            dialogId: this.id,
                            "class": _6e5.map(this["class"].split(/\s/), function (s) {
                                return s + "_underlay";
                            }).join(" ")
                        };
                    },
                    _size: function () {
                        this._checkIfSingleChild();
                        if (this._singleChild) {
                            if (this._singleChildOriginalStyle) {
                                this._singleChild.domNode.style.cssText = this._singleChildOriginalStyle;
                            }
                            delete this._singleChildOriginalStyle;
                        } else {
                            _6eb.set(this.containerNode, {
                                width: "auto",
                                height: "auto"
                            });
                        }
                        var bb = _6ea.position(this.domNode);
                        var _702 = _6ef.getBox();
                        if (bb.w >= _702.w || bb.h >= _702.h) {
                            var w = Math.min(bb.w, Math.floor(_702.w * 0.75)),
                                h = Math.min(bb.h, Math.floor(_702.h * 0.75));
                            if (this._singleChild && this._singleChild.resize) {
                                this._singleChildOriginalStyle = this._singleChild.domNode.style.cssText;
                                this._singleChild.resize({
                                    w: w,
                                    h: h
                                });
                            } else {
                                _6eb.set(this.containerNode, {
                                    width: w + "px",
                                    height: h + "px",
                                    overflow: "auto",
                                    position: "relative"
                                });
                            }
                        } else {
                            if (this._singleChild && this._singleChild.resize) {
                                this._singleChild.resize();
                            }
                        }
                    },
                    _position: function () {
                        if (!_6e9.contains(win.body(), "dojoMove")) {
                            var node = this.domNode,
                                _703 = _6ef.getBox(),
                                p = this._relativePosition,
                                bb = p ? null : _6ea.position(node),
                                l = Math.floor(_703.l + (p ? p.x : (_703.w - bb.w) / 2)),
                                t = Math.floor(_703.t + (p ? p.y : (_703.h - bb.h) / 2));
                            _6eb.set(node, {
                                left: l + "px",
                                top: t + "px"
                            });
                        }
                    },
                    _onKey: function (evt) {
                        if (evt.charOrCode) {
                            var node = evt.target;
                            if (evt.charOrCode === keys.TAB) {
                                this._getFocusItems(this.domNode);
                            }
                            var _704 = (this._firstFocusItem == this._lastFocusItem);
                            if (node == this._firstFocusItem && evt.shiftKey && evt.charOrCode === keys.TAB) {
                                if (!_704) {
                                    _6f2.focus(this._lastFocusItem);
                                }
                                _6ec.stop(evt);
                            } else {
                                if (node == this._lastFocusItem && evt.charOrCode === keys.TAB && !evt.shiftKey) {
                                    if (!_704) {
                                        _6f2.focus(this._firstFocusItem);
                                    }
                                    _6ec.stop(evt);
                                } else {
                                    while (node) {
                                        if (node == this.domNode || _6e9.contains(node, "dijitPopup")) {
                                            if (evt.charOrCode == keys.ESCAPE) {
                                                this.onCancel();
                                            } else {
                                                return;
                                            }
                                        }
                                        node = node.parentNode;
                                    }
                                    if (evt.charOrCode !== keys.TAB) {
                                        _6ec.stop(evt);
                                    } else {
                                        if (!has("opera")) {
                                            try {
                                                this._firstFocusItem.focus();
                                            } catch (e) {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    show: function () {
                        if (this.open) {
                            return;
                        }
                        if (!this._started) {
                            this.startup();
                        }
                        if (!this._alreadyInitialized) {
                            this._setup();
                            this._alreadyInitialized = true;
                        }
                        if (this._fadeOutDeferred) {
                            this._fadeOutDeferred.cancel();
                        }
                        this._modalconnects.push(on(window, "scroll", lang.hitch(this, "layout")));
                        this._modalconnects.push(on(window, "resize", lang.hitch(this, function () {
                            var _705 = _6ef.getBox();
                            if (!this._oldViewport || _705.h != this._oldViewport.h || _705.w != this._oldViewport.w) {
                                this.layout();
                                this._oldViewport = _705;
                            }
                        })));
                        this._modalconnects.push(on(this.domNode, _6e6._keypress, lang.hitch(this, "_onKey")));
                        _6eb.set(this.domNode, {
                            opacity: 0,
                            display: ""
                        });
                        this._set("open", true);
                        this._onShow();
                        this._size();
                        this._position();
                        var _706;
                        this._fadeInDeferred = new _6e8(lang.hitch(this, function () {
                            _706.stop();
                            delete this._fadeInDeferred;
                        }));
                        _706 = fx.fadeIn({
                            node: this.domNode,
                            duration: this.duration,
                            beforeBegin: lang.hitch(this, function () {
                                _6ff.show(this, this.underlayAttrs);
                            }),
                            onEnd: lang.hitch(this, function () {
                                if (this.autofocus && _6ff.isTop(this)) {
                                    this._getFocusItems(this.domNode);
                                    _6f2.focus(this._firstFocusItem);
                                }
                                this._fadeInDeferred.callback(true);
                                delete this._fadeInDeferred;
                            })
                        }).play();
                        return this._fadeInDeferred;
                    },
                    hide: function () {
                        if (!this._alreadyInitialized) {
                            return;
                        }
                        if (this._fadeInDeferred) {
                            this._fadeInDeferred.cancel();
                        }
                        var _707;
                        this._fadeOutDeferred = new _6e8(lang.hitch(this, function () {
                            _707.stop();
                            delete this._fadeOutDeferred;
                        }));
                        this._fadeOutDeferred.then(lang.hitch(this, "onHide"));
                        _707 = fx.fadeOut({
                            node: this.domNode,
                            duration: this.duration,
                            onEnd: lang.hitch(this, function () {
                                this.domNode.style.display = "none";
                                _6ff.hide(this);
                                this._fadeOutDeferred.callback(true);
                                delete this._fadeOutDeferred;
                            })
                        }).play();
                        if (this._scrollConnected) {
                            this._scrollConnected = false;
                        }
                        var h;
                        while (h = this._modalconnects.pop()) {
                            h.remove();
                        }
                        if (this._relativePosition) {
                            delete this._relativePosition;
                        }
                        this._set("open", false);
                        return this._fadeOutDeferred;
                    },
                    layout: function () {
                        if (this.domNode.style.display != "none") {
                            if (_6fc._underlay) {
                                _6fc._underlay.layout();
                            }
                            this._position();
                        }
                    },
                    destroy: function () {
                        if (this._fadeInDeferred) {
                            this._fadeInDeferred.cancel();
                        }
                        if (this._fadeOutDeferred) {
                            this._fadeOutDeferred.cancel();
                        }
                        if (this._moveable) {
                            this._moveable.destroy();
                        }
                        var h;
                        while (h = this._modalconnects.pop()) {
                            h.remove();
                        }
                        _6ff.hide(this);
                        this.inherited(arguments);
                    }
                });
                var _708 = _6e7("dijit.Dialog", [_6fa, _6fd], {});
                _708._DialogBase = _6fd;
                var _6ff = _708._DialogLevelManager = {
                    _beginZIndex: 950,
                    show: function (_709, _70a) {
                        ds[ds.length - 1].focus = _6f2.curNode;
                        var _70b = _6fc._underlay;
                        if (!_70b || _70b._destroyed) {
                            _70b = _6fc._underlay = new _6f9(_70a);
                        } else {
                            _70b.set(_709.underlayAttrs);
                        }
                        var _70c = ds[ds.length - 1].dialog ? ds[ds.length - 1].zIndex + 2 : _708._DialogLevelManager._beginZIndex;
                        if (ds.length == 1) {
                            _70b.show();
                        }
                        _6eb.set(_6fc._underlay.domNode, "zIndex", _70c - 1);
                        _6eb.set(_709.domNode, "zIndex", _70c);
                        ds.push({
                            dialog: _709,
                            underlayAttrs: _70a,
                            zIndex: _70c
                        });
                    },
                    hide: function (_70d) {
                        if (ds[ds.length - 1].dialog == _70d) {
                            ds.pop();
                            var pd = ds[ds.length - 1];
                            if (ds.length == 1) {
                                if (!_6fc._underlay._destroyed) {
                                    _6fc._underlay.hide();
                                }
                            } else {
                                _6eb.set(_6fc._underlay.domNode, "zIndex", pd.zIndex - 1);
                                _6fc._underlay.set(pd.underlayAttrs);
                            }
                            if (_70d.refocus) {
                                var _70e = pd.focus;
                                if (pd.dialog && (!_70e || !dom.isDescendant(_70e, pd.dialog.domNode))) {
                                    pd.dialog._getFocusItems(pd.dialog.domNode);
                                    _70e = pd.dialog._firstFocusItem;
                                }
                                if (_70e) {
                                    _70e.focus();
                                }
                            }
                        } else {
                            var idx = _6e5.indexOf(_6e5.map(ds, function (elem) {
                                return elem.dialog;
                            }), _70d);
                            if (idx != -1) {
                                ds.splice(idx, 1);
                            }
                        }
                    },
                    isTop: function (_70f) {
                        return ds[ds.length - 1].dialog == _70f;
                    }
                };
                var ds = _708._dialogStack = [{
                    dialog: null,
                    focus: null,
                    underlayAttrs: null
                }];
                if (!_6ed.isAsync) {
                    _6ee(0, function () {
                        var _710 = ["dijit/TooltipDialog"];
                        _6e4(_710);
                    });
                }
                return _708;
            });
        },
        "dojo/dnd/TimedMoveable": function () {
            define(["../main", "./Moveable"], function (dojo) {
                var _711 = dojo.dnd.Moveable.prototype.onMove;
                dojo.declare("dojo.dnd.TimedMoveable", dojo.dnd.Moveable, {
                    timeout: 40,
                    constructor: function (node, _712) {
                        if (!_712) {
                            _712 = {};
                        }
                        if (_712.timeout && typeof _712.timeout == "number" && _712.timeout >= 0) {
                            this.timeout = _712.timeout;
                        }
                    },
                    onMoveStop: function (_713) {
                        if (_713._timer) {
                            clearTimeout(_713._timer);
                            _711.call(this, _713, _713._leftTop);
                        }
                        dojo.dnd.Moveable.prototype.onMoveStop.apply(this, arguments);
                    },
                    onMove: function (_714, _715) {
                        _714._leftTop = _715;
                        if (!_714._timer) {
                            var _716 = this;
                            _714._timer = setTimeout(function () {
                                _714._timer = null;
                                _711.call(_716, _714, _714._leftTop);
                            }, this.timeout);
                        }
                    }
                });
                return dojo.dnd.TimedMoveable;
            });
        },
        "dijit/form/_FormMixin": function () {
            define("dijit/form/_FormMixin", ["dojo/_base/array", "dojo/_base/declare", "dojo/_base/kernel", "dojo/_base/lang", "dojo/window"], function (_717, _718, _719, lang, _71a) {
                return _718("dijit.form._FormMixin", null, {
                    state: "",
                    _getDescendantFormWidgets: function (_71b) {
                        var res = [];
                        _717.forEach(_71b || this.getChildren(), function (_71c) {
                            if ("value" in _71c) {
                                res.push(_71c);
                            } else {
                                res = res.concat(this._getDescendantFormWidgets(_71c.getChildren()));
                            }
                        }, this);
                        return res;
                    },
                    reset: function () {
                        _717.forEach(this._getDescendantFormWidgets(), function (_71d) {
                            if (_71d.reset) {
                                _71d.reset();
                            }
                        });
                    },
                    validate: function () {
                        var _71e = false;
                        return _717.every(_717.map(this._getDescendantFormWidgets(), function (_71f) {
                            _71f._hasBeenBlurred = true;
                            var _720 = _71f.disabled || !_71f.validate || _71f.validate();
                            if (!_720 && !_71e) {
                                _71a.scrollIntoView(_71f.containerNode || _71f.domNode);
                                _71f.focus();
                                _71e = true;
                            }
                            return _720;
                        }), function (item) {
                            return item;
                        });
                    },
                    setValues: function (val) {
                        _719.deprecated(this.declaredClass + "::setValues() is deprecated. Use set('value', val) instead.", "", "2.0");
                        return this.set("value", val);
                    },
                    _setValueAttr: function (obj) {
                        var map = {};
                        _717.forEach(this._getDescendantFormWidgets(), function (_721) {
                            if (!_721.name) {
                                return;
                            }
                            var _722 = map[_721.name] || (map[_721.name] = []);
                            _722.push(_721);
                        });
                        for (var name in map) {
                            if (!map.hasOwnProperty(name)) {
                                continue;
                            }
                            var _723 = map[name],
                                _724 = lang.getObject(name, false, obj);
                            if (_724 === undefined) {
                                continue;
                            }
                            if (!lang.isArray(_724)) {
                                _724 = [_724];
                            }
                            if (typeof _723[0].checked == "boolean") {
                                _717.forEach(_723, function (w) {
                                    w.set("value", _717.indexOf(_724, w.value) != -1);
                                });
                            } else {
                                if (_723[0].multiple) {
                                    _723[0].set("value", _724);
                                } else {
                                    _717.forEach(_723, function (w, i) {
                                        w.set("value", _724[i]);
                                    });
                                }
                            }
                        }
                    },
                    getValues: function () {
                        _719.deprecated(this.declaredClass + "::getValues() is deprecated. Use get('value') instead.", "", "2.0");
                        return this.get("value");
                    },
                    _getValueAttr: function () {
                        var obj = {};
                        _717.forEach(this._getDescendantFormWidgets(), function (_725) {
                            var name = _725.name;
                            if (!name || _725.disabled) {
                                return;
                            }
                            var _726 = _725.get("value");
                            if (typeof _725.checked == "boolean") {
                                if (/Radio/.test(_725.declaredClass)) {
                                    if (_726 !== false) {
                                        lang.setObject(name, _726, obj);
                                    } else {
                                        _726 = lang.getObject(name, false, obj);
                                        if (_726 === undefined) {
                                            lang.setObject(name, null, obj);
                                        }
                                    }
                                } else {
                                    var ary = lang.getObject(name, false, obj);
                                    if (!ary) {
                                        ary = [];
                                        lang.setObject(name, ary, obj);
                                    }
                                    if (_726 !== false) {
                                        ary.push(_726);
                                    }
                                }
                            } else {
                                var prev = lang.getObject(name, false, obj);
                                if (typeof prev != "undefined") {
                                    if (lang.isArray(prev)) {
                                        prev.push(_726);
                                    } else {
                                        lang.setObject(name, [prev, _726], obj);
                                    }
                                } else {
                                    lang.setObject(name, _726, obj);
                                }
                            }
                        });
                        return obj;
                    },
                    isValid: function () {
                        return this.state == "";
                    },
                    onValidStateChange: function () {},
                    _getState: function () {
                        var _727 = _717.map(this._descendants, function (w) {
                            return w.get("state") || "";
                        });
                        return _717.indexOf(_727, "Error") >= 0 ? "Error" : _717.indexOf(_727, "Incomplete") >= 0 ? "Incomplete" : "";
                    },
                    disconnectChildren: function () {
                        _717.forEach(this._childConnections || [], lang.hitch(this, "disconnect"));
                        _717.forEach(this._childWatches || [], function (w) {
                            w.unwatch();
                        });
                    },
                    connectChildren: function (_728) {
                        var _729 = this;
                        this.disconnectChildren();
                        this._descendants = this._getDescendantFormWidgets();
                        var set = _728 ?
                        function (name, val) {
                            _729[name] = val;
                        } : lang.hitch(this, "_set");
                        set("value", this.get("value"));
                        set("state", this._getState());
                        var _72a = (this._childConnections = []),
                            _72b = (this._childWatches = []);
                        _717.forEach(_717.filter(this._descendants, function (item) {
                            return item.validate;
                        }), function (_72c) {
                            _717.forEach(["state", "disabled"], function (attr) {
                                _72b.push(_72c.watch(attr, function () {
                                    _729.set("state", _729._getState());
                                }));
                            });
                        });
                        var _72d = function () {
                                if (_729._onChangeDelayTimer) {
                                    clearTimeout(_729._onChangeDelayTimer);
                                }
                                _729._onChangeDelayTimer = setTimeout(function () {
                                    delete _729._onChangeDelayTimer;
                                    _729._set("value", _729.get("value"));
                                }, 10);
                            };
                        _717.forEach(_717.filter(this._descendants, function (item) {
                            return item.onChange;
                        }), function (_72e) {
                            _72a.push(_729.connect(_72e, "onChange", _72d));
                            _72b.push(_72e.watch("disabled", _72d));
                        });
                    },
                    startup: function () {
                        this.inherited(arguments);
                        this.connectChildren(true);
                        this.watch("state", function (attr, _72f, _730) {
                            this.onValidStateChange(_730 == "");
                        });
                    },
                    destroy: function () {
                        this.disconnectChildren();
                        this.inherited(arguments);
                    }
                });
            });
        },
        "dijit/_DialogMixin": function () {
            define("dijit/_DialogMixin", ["dojo/_base/declare", "./a11y"], function (_731, a11y) {
                return _731("dijit._DialogMixin", null, {
                    execute: function () {},
                    onCancel: function () {},
                    onExecute: function () {},
                    _onSubmit: function () {
                        this.onExecute();
                        this.execute(this.get("value"));
                    },
                    _getFocusItems: function () {
                        var _732 = a11y._getTabNavigable(this.containerNode);
                        this._firstFocusItem = _732.lowest || _732.first || this.closeButtonNode || this.domNode;
                        this._lastFocusItem = _732.last || _732.highest || this._firstFocusItem;
                    }
                });
            });
        },
        "dijit/DialogUnderlay": function () {
            define("dijit/DialogUnderlay", ["dojo/_base/declare", "dojo/dom-attr", "dojo/_base/window", "dojo/window", "./_Widget", "./_TemplatedMixin", "./BackgroundIframe"], function (_733, _734, win, _735, _736, _737, _738) {
                return _733("dijit.DialogUnderlay", [_736, _737], {
                    templateString: "<div class='dijitDialogUnderlayWrapper'><div class='dijitDialogUnderlay' data-dojo-attach-point='node'></div></div>",
                    dialogId: "",
                    "class": "",
                    _setDialogIdAttr: function (id) {
                        _734.set(this.node, "id", id + "_underlay");
                        this._set("dialogId", id);
                    },
                    _setClassAttr: function (_739) {
                        this.node.className = "dijitDialogUnderlay " + _739;
                        this._set("class", _739);
                    },
                    postCreate: function () {
                        win.body().appendChild(this.domNode);
                    },
                    layout: function () {
                        var is = this.node.style,
                            os = this.domNode.style;
                        os.display = "none";
                        var _73a = _735.getBox();
                        os.top = _73a.t + "px";
                        os.left = _73a.l + "px";
                        is.width = _73a.w + "px";
                        is.height = _73a.h + "px";
                        os.display = "block";
                    },
                    show: function () {
                        this.domNode.style.display = "block";
                        this.layout();
                        this.bgIframe = new _738(this.domNode);
                    },
                    hide: function () {
                        this.bgIframe.destroy();
                        delete this.bgIframe;
                        this.domNode.style.display = "none";
                    }
                });
            });
        },
        "dijit/BackgroundIframe": function () {
            define("dijit/BackgroundIframe", ["require", ".", "dojo/_base/config", "dojo/dom-construct", "dojo/dom-style", "dojo/_base/lang", "dojo/on", "dojo/_base/sniff", "dojo/_base/window"], function (_73b, _73c, _73d, _73e, _73f, lang, on, has, win) {
                var _740 = new function () {
                        var _741 = [];
                        this.pop = function () {
                            var _742;
                            if (_741.length) {
                                _742 = _741.pop();
                                _742.style.display = "";
                            } else {
                                if (has("ie") < 9) {
                                    var burl = _73d["dojoBlankHtmlUrl"] || _73b.toUrl("dojo/resources/blank.html") || "javascript:\"\"";
                                    var html = "<iframe src='" + burl + "' role='presentation'" + " style='position: absolute; left: 0px; top: 0px;" + "z-index: -1; filter:Alpha(Opacity=\"0\");'>";
                                    _742 = win.doc.createElement(html);
                                } else {
                                    _742 = _73e.create("iframe");
                                    _742.src = "javascript:\"\"";
                                    _742.className = "dijitBackgroundIframe";
                                    _742.setAttribute("role", "presentation");
                                    _73f.set(_742, "opacity", 0.1);
                                }
                                _742.tabIndex = -1;
                            }
                            return _742;
                        };
                        this.push = function (_743) {
                            _743.style.display = "none";
                            _741.push(_743);
                        };
                    }();
                _73c.BackgroundIframe = function (node) {
                    if (!node.id) {
                        throw new Error("no id");
                    }
                    if (has("ie") || has("mozilla")) {
                        var _744 = (this.iframe = _740.pop());
                        node.appendChild(_744);
                        if (has("ie") < 7 || has("quirks")) {
                            this.resize(node);
                            this._conn = on(node, "resize", lang.hitch(this, function () {
                                this.resize(node);
                            }));
                        } else {
                            _73f.set(_744, {
                                width: "100%",
                                height: "100%"
                            });
                        }
                    }
                };
                lang.extend(_73c.BackgroundIframe, {
                    resize: function (node) {
                        if (this.iframe) {
                            _73f.set(this.iframe, {
                                width: node.offsetWidth + "px",
                                height: node.offsetHeight + "px"
                            });
                        }
                    },
                    destroy: function () {
                        if (this._conn) {
                            this._conn.remove();
                            this._conn = null;
                        }
                        if (this.iframe) {
                            _740.push(this.iframe);
                            delete this.iframe;
                        }
                    }
                });
                return _73c.BackgroundIframe;
            });
        },
        "dijit/layout/ContentPane": function () {
            define("dijit/layout/ContentPane", ["dojo/_base/kernel", "dojo/_base/lang", "../_Widget", "./_ContentPaneResizeMixin", "dojo/string", "dojo/html", "dojo/i18n!../nls/loading", "dojo/_base/array", "dojo/_base/declare", "dojo/_base/Deferred", "dojo/dom", "dojo/dom-attr", "dojo/_base/window", "dojo/_base/xhr", "dojo/i18n"], function (_745, lang, _746, _747, _748, html, _749, _74a, _74b, _74c, dom, _74d, win, xhr, i18n) {
                return _74b("dijit.layout.ContentPane", [_746, _747], {
                    href: "",
                    content: "",
                    extractContent: false,
                    parseOnLoad: true,
                    parserScope: _745._scopeName,
                    preventCache: false,
                    preload: false,
                    refreshOnShow: false,
                    loadingMessage: "<span class='dijitContentPaneLoading'><span class='dijitInline dijitIconLoading'></span>${loadingState}</span>",
                    errorMessage: "<span class='dijitContentPaneError'><span class='dijitInline dijitIconError'></span>${errorState}</span>",
                    isLoaded: false,
                    baseClass: "dijitContentPane",
                    ioArgs: {},
                    onLoadDeferred: null,
                    _setTitleAttr: null,
                    stopParser: true,
                    template: false,
                    create: function (_74e, _74f) {
                        if ((!_74e || !_74e.template) && _74f && !("href" in _74e) && !("content" in _74e)) {
                            var df = win.doc.createDocumentFragment();
                            _74f = dom.byId(_74f);
                            while (_74f.firstChild) {
                                df.appendChild(_74f.firstChild);
                            }
                            _74e = lang.delegate(_74e, {
                                content: df
                            });
                        }
                        this.inherited(arguments, [_74e, _74f]);
                    },
                    postMixInProperties: function () {
                        this.inherited(arguments);
                        var _750 = i18n.getLocalization("dijit", "loading", this.lang);
                        this.loadingMessage = _748.substitute(this.loadingMessage, _750);
                        this.errorMessage = _748.substitute(this.errorMessage, _750);
                    },
                    buildRendering: function () {
                        this.inherited(arguments);
                        if (!this.containerNode) {
                            this.containerNode = this.domNode;
                        }
                        this.domNode.title = "";
                        if (!_74d.get(this.domNode, "role")) {
                            this.domNode.setAttribute("role", "group");
                        }
                    },
                    startup: function () {
                        this.inherited(arguments);
                        if (this._contentSetter) {
                            _74a.forEach(this._contentSetter.parseResults, function (obj) {
                                if (!obj._started && !obj._destroyed && lang.isFunction(obj.startup)) {
                                    obj.startup();
                                    obj._started = true;
                                }
                            }, this);
                        }
                    },
                    setHref: function (href) {
                        _745.deprecated("dijit.layout.ContentPane.setHref() is deprecated. Use set('href', ...) instead.", "", "2.0");
                        return this.set("href", href);
                    },
                    _setHrefAttr: function (href) {
                        this.cancel();
                        this.onLoadDeferred = new _74c(lang.hitch(this, "cancel"));
                        this.onLoadDeferred.addCallback(lang.hitch(this, "onLoad"));
                        this._set("href", href);
                        if (this.preload || (this._created && this._isShown())) {
                            this._load();
                        } else {
                            this._hrefChanged = true;
                        }
                        return this.onLoadDeferred;
                    },
                    setContent: function (data) {
                        _745.deprecated("dijit.layout.ContentPane.setContent() is deprecated.  Use set('content', ...) instead.", "", "2.0");
                        this.set("content", data);
                    },
                    _setContentAttr: function (data) {
                        this._set("href", "");
                        this.cancel();
                        this.onLoadDeferred = new _74c(lang.hitch(this, "cancel"));
                        if (this._created) {
                            this.onLoadDeferred.addCallback(lang.hitch(this, "onLoad"));
                        }
                        this._setContent(data || "");
                        this._isDownloaded = false;
                        return this.onLoadDeferred;
                    },
                    _getContentAttr: function () {
                        return this.containerNode.innerHTML;
                    },
                    cancel: function () {
                        if (this._xhrDfd && (this._xhrDfd.fired == -1)) {
                            this._xhrDfd.cancel();
                        }
                        delete this._xhrDfd;
                        this.onLoadDeferred = null;
                    },
                    uninitialize: function () {
                        if (this._beingDestroyed) {
                            this.cancel();
                        }
                        this.inherited(arguments);
                    },
                    destroyRecursive: function (_751) {
                        if (this._beingDestroyed) {
                            return;
                        }
                        this.inherited(arguments);
                    },
                    _onShow: function () {
                        this.inherited(arguments);
                        if (this.href) {
                            if (!this._xhrDfd && (!this.isLoaded || this._hrefChanged || this.refreshOnShow)) {
                                return this.refresh();
                            }
                        }
                    },
                    refresh: function () {
                        this.cancel();
                        this.onLoadDeferred = new _74c(lang.hitch(this, "cancel"));
                        this.onLoadDeferred.addCallback(lang.hitch(this, "onLoad"));
                        this._load();
                        return this.onLoadDeferred;
                    },
                    _load: function () {
                        this._setContent(this.onDownloadStart(), true);
                        var self = this;
                        var _752 = {
                            preventCache: (this.preventCache || this.refreshOnShow),
                            url: this.href,
                            handleAs: "text"
                        };
                        if (lang.isObject(this.ioArgs)) {
                            lang.mixin(_752, this.ioArgs);
                        }
                        var hand = (this._xhrDfd = (this.ioMethod || xhr.get)(_752));
                        hand.addCallback(function (html) {
                            try {
                                self._isDownloaded = true;
                                self._setContent(html, false);
                                self.onDownloadEnd();
                            } catch (err) {
                                self._onError("Content", err);
                            }
                            delete self._xhrDfd;
                            return html;
                        });
                        hand.addErrback(function (err) {
                            if (!hand.canceled) {
                                self._onError("Download", err);
                            }
                            delete self._xhrDfd;
                            return err;
                        });
                        delete this._hrefChanged;
                    },
                    _onLoadHandler: function (data) {
                        this._set("isLoaded", true);
                        try {
                            this.onLoadDeferred.callback(data);
                        } catch (e) {
                            console.error("Error " + this.widgetId + " running custom onLoad code: " + e.message);
                        }
                    },
                    _onUnloadHandler: function () {
                        this._set("isLoaded", false);
                        try {
                            this.onUnload();
                        } catch (e) {
                            console.error("Error " + this.widgetId + " running custom onUnload code: " + e.message);
                        }
                    },
                    destroyDescendants: function (_753) {
                        if (this.isLoaded) {
                            this._onUnloadHandler();
                        }
                        var _754 = this._contentSetter;
                        _74a.forEach(this.getChildren(), function (_755) {
                            if (_755.destroyRecursive) {
                                _755.destroyRecursive(_753);
                            }
                        });
                        if (_754) {
                            _74a.forEach(_754.parseResults, function (_756) {
                                if (_756.destroyRecursive && _756.domNode && _756.domNode.parentNode == win.body()) {
                                    _756.destroyRecursive(_753);
                                }
                            });
                            delete _754.parseResults;
                        }
                        if (!_753) {
                            html._emptyNode(this.containerNode);
                        }
                        delete this._singleChild;
                    },
                    _setContent: function (cont, _757) {
                        this.destroyDescendants();
                        var _758 = this._contentSetter;
                        if (!(_758 && _758 instanceof html._ContentSetter)) {
                            _758 = this._contentSetter = new html._ContentSetter({
                                node: this.containerNode,
                                _onError: lang.hitch(this, this._onError),
                                onContentError: lang.hitch(this, function (e) {
                                    var _759 = this.onContentError(e);
                                    try {
                                        this.containerNode.innerHTML = _759;
                                    } catch (e) {
                                        console.error("Fatal " + this.id + " could not change content due to " + e.message, e);
                                    }
                                })
                            });
                        }
                        var _75a = lang.mixin({
                            cleanContent: this.cleanContent,
                            extractContent: this.extractContent,
                            parseContent: !cont.domNode && this.parseOnLoad,
                            parserScope: this.parserScope,
                            startup: false,
                            dir: this.dir,
                            lang: this.lang,
                            textDir: this.textDir
                        }, this._contentSetterParams || {});
                        _758.set((lang.isObject(cont) && cont.domNode) ? cont.domNode : cont, _75a);
                        delete this._contentSetterParams;
                        if (this.doLayout) {
                            this._checkIfSingleChild();
                        }
                        if (!_757) {
                            if (this._started) {
                                delete this._started;
                                this.startup();
                                this._scheduleLayout();
                            }
                            this._onLoadHandler(cont);
                        }
                    },
                    _onError: function (type, err, _75b) {
                        this.onLoadDeferred.errback(err);
                        var _75c = this["on" + type + "Error"].call(this, err);
                        if (_75b) {
                            console.error(_75b, err);
                        } else {
                            if (_75c) {
                                this._setContent(_75c, true);
                            }
                        }
                    },
                    onLoad: function () {},
                    onUnload: function () {},
                    onDownloadStart: function () {
                        return this.loadingMessage;
                    },
                    onContentError: function () {},
                    onDownloadError: function () {
                        return this.errorMessage;
                    },
                    onDownloadEnd: function () {}
                });
            });
        },
        "dijit/layout/_ContentPaneResizeMixin": function () {
            define("dijit/layout/_ContentPaneResizeMixin", ["dojo/_base/array", "dojo/_base/declare", "dojo/dom-attr", "dojo/dom-class", "dojo/dom-geometry", "dojo/_base/lang", "dojo/query", "dojo/_base/sniff", "dojo/_base/window", "../registry", "./utils", "../_Contained"], function (_75d, _75e, _75f, _760, _761, lang, _762, has, win, _763, _764, _765) {
                return _75e("dijit.layout._ContentPaneResizeMixin", null, {
                    doLayout: true,
                    isLayoutContainer: true,
                    startup: function () {
                        if (this._started) {
                            return;
                        }
                        var _766 = this.getParent();
                        this._childOfLayoutWidget = _766 && _766.isLayoutContainer;
                        this._needLayout = !this._childOfLayoutWidget;
                        this.inherited(arguments);
                        if (this._isShown()) {
                            this._onShow();
                        }
                        if (!this._childOfLayoutWidget) {
                            this.connect(has("ie") ? this.domNode : win.global, "onresize", function () {
                                this._needLayout = !this._childOfLayoutWidget;
                                this.resize();
                            });
                        }
                    },
                    _checkIfSingleChild: function () {
                        var _767 = _762("> *", this.containerNode).filter(function (node) {
                            return node.tagName !== "SCRIPT";
                        }),
                            _768 = _767.filter(function (node) {
                                return _75f.has(node, "data-dojo-type") || _75f.has(node, "dojoType") || _75f.has(node, "widgetId");
                            }),
                            _769 = _75d.filter(_768.map(_763.byNode), function (_76a) {
                                return _76a && _76a.domNode && _76a.resize;
                            });
                        if (_767.length == _768.length && _769.length == 1) {
                            this._singleChild = _769[0];
                        } else {
                            delete this._singleChild;
                        }
                        _760.toggle(this.containerNode, this.baseClass + "SingleChild", !! this._singleChild);
                    },
                    resize: function (_76b, _76c) {
                        if (!this._wasShown && this.open !== false) {
                            this._onShow();
                        }
                        this._resizeCalled = true;
                        this._scheduleLayout(_76b, _76c);
                    },
                    _scheduleLayout: function (_76d, _76e) {
                        if (this._isShown()) {
                            this._layout(_76d, _76e);
                        } else {
                            this._needLayout = true;
                            this._changeSize = _76d;
                            this._resultSize = _76e;
                        }
                    },
                    _layout: function (_76f, _770) {
                        if (_76f) {
                            _761.setMarginBox(this.domNode, _76f);
                        }
                        var cn = this.containerNode;
                        if (cn === this.domNode) {
                            var mb = _770 || {};
                            lang.mixin(mb, _76f || {});
                            if (!("h" in mb) || !("w" in mb)) {
                                mb = lang.mixin(_761.getMarginBox(cn), mb);
                            }
                            this._contentBox = _764.marginBox2contentBox(cn, mb);
                        } else {
                            this._contentBox = _761.getContentBox(cn);
                        }
                        this._layoutChildren();
                        delete this._needLayout;
                    },
                    _layoutChildren: function () {
                        if (this.doLayout) {
                            this._checkIfSingleChild();
                        }
                        if (this._singleChild && this._singleChild.resize) {
                            var cb = this._contentBox || _761.getContentBox(this.containerNode);
                            this._singleChild.resize({
                                w: cb.w,
                                h: cb.h
                            });
                        } else {
                            _75d.forEach(this.getChildren(), function (_771) {
                                if (_771.resize) {
                                    _771.resize();
                                }
                            });
                        }
                    },
                    _isShown: function () {
                        if (this._childOfLayoutWidget) {
                            if (this._resizeCalled && "open" in this) {
                                return this.open;
                            }
                            return this._resizeCalled;
                        } else {
                            if ("open" in this) {
                                return this.open;
                            } else {
                                var node = this.domNode,
                                    _772 = this.domNode.parentNode;
                                return (node.style.display != "none") && (node.style.visibility != "hidden") && !_760.contains(node, "dijitHidden") && _772 && _772.style && (_772.style.display != "none");
                            }
                        }
                    },
                    _onShow: function () {
                        if (this._needLayout) {
                            this._layout(this._changeSize, this._resultSize);
                        }
                        this.inherited(arguments);
                        this._wasShown = true;
                    }
                });
            });
        },
        "dijit/layout/utils": function () {
            define("dijit/layout/utils", ["dojo/_base/array", "dojo/dom-class", "dojo/dom-geometry", "dojo/dom-style", "dojo/_base/lang", ".."], function (_773, _774, _775, _776, lang, _777) {
                var _778 = lang.getObject("layout", true, _777);
                _778.marginBox2contentBox = function (node, mb) {
                    var cs = _776.getComputedStyle(node);
                    var me = _775.getMarginExtents(node, cs);
                    var pb = _775.getPadBorderExtents(node, cs);
                    return {
                        l: _776.toPixelValue(node, cs.paddingLeft),
                        t: _776.toPixelValue(node, cs.paddingTop),
                        w: mb.w - (me.w + pb.w),
                        h: mb.h - (me.h + pb.h)
                    };
                };

                function _779(word) {
                    return word.substring(0, 1).toUpperCase() + word.substring(1);
                };

                function size(_77a, dim) {
                    var _77b = _77a.resize ? _77a.resize(dim) : _775.setMarginBox(_77a.domNode, dim);
                    if (_77b) {
                        lang.mixin(_77a, _77b);
                    } else {
                        lang.mixin(_77a, _775.getMarginBox(_77a.domNode));
                        lang.mixin(_77a, dim);
                    }
                };
                _778.layoutChildren = function (_77c, dim, _77d, _77e, _77f) {
                    dim = lang.mixin({}, dim);
                    _774.add(_77c, "dijitLayoutContainer");
                    _77d = _773.filter(_77d, function (item) {
                        return item.region != "center" && item.layoutAlign != "client";
                    }).concat(_773.filter(_77d, function (item) {
                        return item.region == "center" || item.layoutAlign == "client";
                    }));
                    _773.forEach(_77d, function (_780) {
                        var elm = _780.domNode,
                            pos = (_780.region || _780.layoutAlign);
                        if (!pos) {
                            throw new Error("No region setting for " + _780.id);
                        }
                        var _781 = elm.style;
                        _781.left = dim.l + "px";
                        _781.top = dim.t + "px";
                        _781.position = "absolute";
                        _774.add(elm, "dijitAlign" + _779(pos));
                        var _782 = {};
                        if (_77e && _77e == _780.id) {
                            _782[_780.region == "top" || _780.region == "bottom" ? "h" : "w"] = _77f;
                        }
                        if (pos == "top" || pos == "bottom") {
                            _782.w = dim.w;
                            size(_780, _782);
                            dim.h -= _780.h;
                            if (pos == "top") {
                                dim.t += _780.h;
                            } else {
                                _781.top = dim.t + dim.h + "px";
                            }
                        } else {
                            if (pos == "left" || pos == "right") {
                                _782.h = dim.h;
                                size(_780, _782);
                                dim.w -= _780.w;
                                if (pos == "left") {
                                    dim.l += _780.w;
                                } else {
                                    _781.left = dim.l + dim.w + "px";
                                }
                            } else {
                                if (pos == "client" || pos == "center") {
                                    size(_780, dim);
                                }
                            }
                        }
                    });
                };
                return {
                    marginBox2contentBox: _778.marginBox2contentBox,
                    layoutChildren: _778.layoutChildren
                };
            });
        },
        "dojo/html": function () {
            define(["./_base/kernel", "./_base/lang", "./_base/array", "./_base/declare", "./dom", "./dom-construct", "./parser"], function (dojo, lang, _783, _784, dom, _785, _786) {
                lang.getObject("html", true, dojo);
                var _787 = 0;
                dojo.html._secureForInnerHtml = function (cont) {
                    return cont.replace(/(?:\s*<!DOCTYPE\s[^>]+>|<title[^>]*>[\s\S]*?<\/title>)/ig, "");
                };
                dojo.html._emptyNode = _785.empty;
                dojo.html._setNodeContent = function (node, cont) {
                    _785.empty(node);
                    if (cont) {
                        if (typeof cont == "string") {
                            cont = _785.toDom(cont, node.ownerDocument);
                        }
                        if (!cont.nodeType && lang.isArrayLike(cont)) {
                            for (var _788 = cont.length, i = 0; i < cont.length; i = _788 == cont.length ? i + 1 : 0) {
                                _785.place(cont[i], node, "last");
                            }
                        } else {
                            _785.place(cont, node, "last");
                        }
                    }
                    return node;
                };
                _784("dojo.html._ContentSetter", null, {
                    node: "",
                    content: "",
                    id: "",
                    cleanContent: false,
                    extractContent: false,
                    parseContent: false,
                    parserScope: dojo._scopeName,
                    startup: true,
                    constructor: function (_789, node) {
                        lang.mixin(this, _789 || {});
                        node = this.node = dom.byId(this.node || node);
                        if (!this.id) {
                            this.id = ["Setter", (node) ? node.id || node.tagName : "", _787++].join("_");
                        }
                    },
                    set: function (cont, _78a) {
                        if (undefined !== cont) {
                            this.content = cont;
                        }
                        if (_78a) {
                            this._mixin(_78a);
                        }
                        this.onBegin();
                        this.setContent();
                        this.onEnd();
                        return this.node;
                    },
                    setContent: function () {
                        var node = this.node;
                        if (!node) {
                            throw new Error(this.declaredClass + ": setContent given no node");
                        }
                        try {
                            node = dojo.html._setNodeContent(node, this.content);
                        } catch (e) {
                            var _78b = this.onContentError(e);
                            try {
                                node.innerHTML = _78b;
                            } catch (e) {
                                console.error("Fatal " + this.declaredClass + ".setContent could not change content due to " + e.message, e);
                            }
                        }
                        this.node = node;
                    },
                    empty: function () {
                        if (this.parseResults && this.parseResults.length) {
                            _783.forEach(this.parseResults, function (w) {
                                if (w.destroy) {
                                    w.destroy();
                                }
                            });
                            delete this.parseResults;
                        }
                        dojo.html._emptyNode(this.node);
                    },
                    onBegin: function () {
                        var cont = this.content;
                        if (lang.isString(cont)) {
                            if (this.cleanContent) {
                                cont = dojo.html._secureForInnerHtml(cont);
                            }
                            if (this.extractContent) {
                                var _78c = cont.match(/<body[^>]*>\s*([\s\S]+)\s*<\/body>/im);
                                if (_78c) {
                                    cont = _78c[1];
                                }
                            }
                        }
                        this.empty();
                        this.content = cont;
                        return this.node;
                    },
                    onEnd: function () {
                        if (this.parseContent) {
                            this._parse();
                        }
                        return this.node;
                    },
                    tearDown: function () {
                        delete this.parseResults;
                        delete this.node;
                        delete this.content;
                    },
                    onContentError: function (err) {
                        return "Error occured setting content: " + err;
                    },
                    _mixin: function (_78d) {
                        var _78e = {},
                            key;
                        for (key in _78d) {
                            if (key in _78e) {
                                continue;
                            }
                            this[key] = _78d[key];
                        }
                    },
                    _parse: function () {
                        var _78f = this.node;
                        try {
                            var _790 = {};
                            _783.forEach(["dir", "lang", "textDir"], function (name) {
                                if (this[name]) {
                                    _790[name] = this[name];
                                }
                            }, this);
                            this.parseResults = _786.parse({
                                rootNode: _78f,
                                noStart: !this.startup,
                                inherited: _790,
                                scope: this.parserScope
                            });
                        } catch (e) {
                            this._onError("Content", e, "Error parsing in _ContentSetter#" + this.id);
                        }
                    },
                    _onError: function (type, err, _791) {
                        var _792 = this["on" + type + "Error"].call(this, err);
                        if (_791) {
                            console.error(_791, err);
                        } else {
                            if (_792) {
                                dojo.html._setNodeContent(this.node, _792, true);
                            }
                        }
                    }
                });
                dojo.html.set = function (node, cont, _793) {
                    if (undefined == cont) {
                        console.warn("dojo.html.set: no cont argument provided, using empty string");
                        cont = "";
                    }
                    if (!_793) {
                        return dojo.html._setNodeContent(node, cont, true);
                    } else {
                        var op = new dojo.html._ContentSetter(lang.mixin(_793, {
                            content: cont,
                            node: node
                        }));
                        return op.set();
                    }
                };
                return dojo.html;
            });
        },
        "url:dijit/templates/Dialog.html": "<div class=\"dijitDialog\" role=\"dialog\" aria-labelledby=\"${id}_title\">\n\t<div data-dojo-attach-point=\"titleBar\" class=\"dijitDialogTitleBar\">\n\t<span data-dojo-attach-point=\"titleNode\" class=\"dijitDialogTitle\" id=\"${id}_title\"></span>\n\t<span data-dojo-attach-point=\"closeButtonNode\" class=\"dijitDialogCloseIcon\" data-dojo-attach-event=\"ondijitclick: onCancel\" title=\"${buttonCancel}\" role=\"button\" tabIndex=\"-1\">\n\t\t<span data-dojo-attach-point=\"closeText\" class=\"closeText\" title=\"${buttonCancel}\">x</span>\n\t</span>\n\t</div>\n\t\t<div data-dojo-attach-point=\"containerNode\" class=\"dijitDialogPaneContent\"></div>\n</div>\n",
        "dijit/nls/common": function () {
            define("dijit/nls/common", {
                root: ({
                    buttonOk: "OK",
                    buttonCancel: "Cancel",
                    buttonSave: "Save",
                    itemClose: "Close"
                }),
                "zh": true,
                "zh-tw": true,
                "tr": true,
                "th": true,
                "sv": true,
                "sl": true,
                "sk": true,
                "ru": true,
                "ro": true,
                "pt": true,
                "pt-pt": true,
                "pl": true,
                "nl": true,
                "nb": true,
                "ko": true,
                "kk": true,
                "ja": true,
                "it": true,
                "hu": true,
                "hr": true,
                "he": true,
                "fr": true,
                "fi": true,
                "es": true,
                "el": true,
                "de": true,
                "da": true,
                "cs": true,
                "ca": true,
                "az": true,
                "ar": true
            });
        },
        "dojox/grid/enhanced/plugins/filter/FilterLayer": function () {
            define("dojox/grid/enhanced/plugins/filter/FilterLayer", ["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/window", "dojo/_base/json", "../_StoreLayer"], function (_794, lang, win, json, _795) {
                var _796 = "filter",
                    _797 = "clear",
                    _798 = function (_799, func) {
                        return func ? lang.hitch(_799 || win.global, func) : function () {};
                    },
                    _79a = function (obj) {
                        var res = {};
                        if (obj && lang.isObject(obj)) {
                            for (var name in obj) {
                                res[name] = obj[name];
                            }
                        }
                        return res;
                    };
                var _79b = _794("dojox.grid.enhanced.plugins.filter._FilterLayerMixin", null, {
                    tags: ["sizeChange"],
                    name: function () {
                        return "filter";
                    },
                    onFilterDefined: function (_79c) {},
                    onFiltered: function (_79d, _79e) {}
                });
                var _79f = _794("dojox.grid.enhanced.plugins.filter.ServerSideFilterLayer", [_795._ServerSideLayer, _79b], {
                    constructor: function (args) {
                        this._onUserCommandLoad = args.setupFilterQuery || this._onUserCommandLoad;
                        this.filterDef(null);
                    },
                    filterDef: function (_7a0) {
                        if (_7a0) {
                            this._filter = _7a0;
                            var obj = _7a0.toObject();
                            this.command(_796, this._isStateful ? json.toJson(obj) : obj);
                            this.command(_797, null);
                            this.useCommands(true);
                            this.onFilterDefined(_7a0);
                        } else {
                            if (_7a0 === null) {
                                this._filter = null;
                                this.command(_796, null);
                                this.command(_797, true);
                                this.useCommands(true);
                                this.onFilterDefined(null);
                            }
                        }
                        return this._filter;
                    },
                    onCommandLoad: function (_7a1, _7a2) {
                        this.inherited(arguments);
                        var _7a3 = _7a2.onBegin;
                        if (this._isStateful) {
                            var _7a4;
                            if (_7a1) {
                                this.command(_796, null);
                                this.command(_797, null);
                                this.useCommands(false);
                                var _7a5 = _7a1.split(",");
                                if (_7a5.length >= 2) {
                                    _7a4 = this._filteredSize = parseInt(_7a5[0], 10);
                                    this.onFiltered(_7a4, parseInt(_7a5[1], 10));
                                } else {
                                    return;
                                }
                            } else {
                                _7a4 = this._filteredSize;
                            }
                            if (this.enabled()) {
                                _7a2.onBegin = function (size, req) {
                                    _798(_7a2.scope, _7a3)(_7a4, req);
                                };
                            }
                        } else {
                            var _7a6 = this;
                            _7a2.onBegin = function (size, req) {
                                if (!_7a6._filter) {
                                    _7a6._storeSize = size;
                                }
                                _7a6.onFiltered(size, _7a6._storeSize || size);
                                req.onBegin = _7a3;
                                _798(_7a2.scope, _7a3)(size, req);
                            };
                        }
                    }
                });
                var _7a7 = _794("dojox.grid.enhanced.plugins.filter.ClientSideFilterLayer", [_795._StoreLayer, _79b], {
                    _storeSize: -1,
                    _fetchAll: true,
                    constructor: function (args) {
                        this.filterDef(null);
                        args = lang.isObject(args) ? args : {};
                        this.fetchAllOnFirstFilter(args.fetchAll);
                        this._getter = lang.isFunction(args.getter) ? args.getter : this._defaultGetter;
                    },
                    _defaultGetter: function (_7a8, _7a9, _7aa, _7ab) {
                        return _7ab.getValue(_7a8, _7a9);
                    },
                    filterDef: function (_7ac) {
                        if (_7ac !== undefined) {
                            this._filter = _7ac;
                            this.invalidate();
                            this.onFilterDefined(_7ac);
                        }
                        return this._filter;
                    },
                    setGetter: function (_7ad) {
                        if (lang.isFunction(_7ad)) {
                            this._getter = _7ad;
                        }
                    },
                    fetchAllOnFirstFilter: function (_7ae) {
                        if (_7ae !== undefined) {
                            this._fetchAll = !! _7ae;
                        }
                        return this._fetchAll;
                    },
                    invalidate: function () {
                        this._items = [];
                        this._nextUnfetchedIdx = 0;
                        this._result = [];
                        this._indexMap = [];
                        this._resultStartIdx = 0;
                    },
                    _fetch: function (_7af, _7b0) {
                        if (!this._filter) {
                            var _7b1 = _7af.onBegin,
                                _7b2 = this;
                            _7af.onBegin = function (size, r) {
                                _798(_7af.scope, _7b1)(size, r);
                                _7b2.onFiltered(size, size);
                            };
                            this.originFetch(_7af);
                            return _7af;
                        }
                        try {
                            var _7b3 = _7b0 ? _7b0._nextResultItemIdx : _7af.start;
                            _7b3 = _7b3 || 0;
                            if (!_7b0) {
                                this._result = [];
                                this._resultStartIdx = _7b3;
                                var _7b4;
                                if (lang.isArray(_7af.sort) && _7af.sort.length > 0 && (_7b4 = json.toJson(_7af.sort)) != this._lastSortInfo) {
                                    this.invalidate();
                                    this._lastSortInfo = _7b4;
                                }
                            }
                            var end = typeof _7af.count == "number" ? _7b3 + _7af.count - this._result.length : this._items.length;
                            if (this._result.length) {
                                this._result = this._result.concat(this._items.slice(_7b3, end));
                            } else {
                                this._result = this._items.slice(_7af.start, typeof _7af.count == "number" ? _7af.start + _7af.count : this._items.length);
                            }
                            if (this._result.length >= _7af.count || this._hasReachedStoreEnd()) {
                                this._completeQuery(_7af);
                            } else {
                                if (!_7b0) {
                                    _7b0 = _79a(_7af);
                                    _7b0.onBegin = lang.hitch(this, this._onFetchBegin);
                                    _7b0.onComplete = lang.hitch(this, function (_7b5, req) {
                                        this._nextUnfetchedIdx += _7b5.length;
                                        this._doFilter(_7b5, req.start, _7af);
                                        this._fetch(_7af, req);
                                    });
                                }
                                _7b0.start = this._nextUnfetchedIdx;
                                if (this._fetchAll) {
                                    delete _7b0.count;
                                }
                                _7b0._nextResultItemIdx = end < this._items.length ? end : this._items.length;
                                this.originFetch(_7b0);
                            }
                        } catch (e) {
                            if (_7af.onError) {
                                _798(_7af.scope, _7af.onError)(e, _7af);
                            } else {
                                throw e;
                            }
                        }
                        return _7af;
                    },
                    _hasReachedStoreEnd: function () {
                        return this._storeSize >= 0 && this._nextUnfetchedIdx >= this._storeSize;
                    },
                    _applyFilter: function (_7b6, _7b7) {
                        var g = this._getter,
                            s = this._store;
                        try {
                            return !!(this._filter.applyRow(_7b6, function (item, arg) {
                                return g(item, arg, _7b7, s);
                            }).getValue());
                        } catch (e) {
                            console.warn("FilterLayer._applyFilter() error: ", e);
                            return false;
                        }
                    },
                    _doFilter: function (_7b8, _7b9, _7ba) {
                        for (var i = 0, cnt = 0; i < _7b8.length; ++i) {
                            if (this._applyFilter(_7b8[i], _7b9 + i)) {
                                _798(_7ba.scope, _7ba.onItem)(_7b8[i], _7ba);
                                cnt += this._addCachedItems(_7b8[i], this._items.length);
                                this._indexMap.push(_7b9 + i);
                            }
                        }
                    },
                    _onFetchBegin: function (size, req) {
                        this._storeSize = size;
                    },
                    _completeQuery: function (_7bb) {
                        var size = this._items.length;
                        if (this._nextUnfetchedIdx < this._storeSize) {
                            size++;
                        }
                        _798(_7bb.scope, _7bb.onBegin)(size, _7bb);
                        this.onFiltered(this._items.length, this._storeSize);
                        _798(_7bb.scope, _7bb.onComplete)(this._result, _7bb);
                    },
                    _addCachedItems: function (_7bc, _7bd) {
                        if (!lang.isArray(_7bc)) {
                            _7bc = [_7bc];
                        }
                        for (var k = 0; k < _7bc.length; ++k) {
                            this._items[_7bd + k] = _7bc[k];
                        }
                        return _7bc.length;
                    },
                    onRowMappingChange: function (_7be) {
                        if (this._filter) {
                            var m = lang.clone(_7be),
                                _7bf = {};
                            for (var r in m) {
                                r = parseInt(r, 10);
                                _7be[this._indexMap[r]] = this._indexMap[m[r]];
                                if (!_7bf[this._indexMap[r]]) {
                                    _7bf[this._indexMap[r]] = true;
                                }
                                if (!_7bf[r]) {
                                    _7bf[r] = true;
                                    delete _7be[r];
                                }
                            }
                        }
                    }
                });
                return lang.mixin({
                    ServerSideFilterLayer: _79f,
                    ClientSideFilterLayer: _7a7
                }, _795);
            });
        },
        "dojox/grid/enhanced/plugins/_StoreLayer": function () {
            define("dojox/grid/enhanced/plugins/_StoreLayer", ["dojo/_base/declare", "dojo/_base/array", "dojo/_base/lang", "dojo/_base/xhr"], function (_7c0, _7c1, lang, xhr) {
                var ns = lang.getObject("grid.enhanced.plugins", true, dojox);
                var _7c2 = function (tags) {
                        var _7c3 = ["reorder", "sizeChange", "normal", "presentation"];
                        var idx = _7c3.length;
                        for (var i = tags.length - 1; i >= 0; --i) {
                            var p = _7c1.indexOf(_7c3, tags[i]);
                            if (p >= 0 && p <= idx) {
                                idx = p;
                            }
                        }
                        if (idx < _7c3.length - 1) {
                            return _7c3.slice(0, idx + 1);
                        } else {
                            return _7c3;
                        }
                    },
                    _7c4 = function (_7c5) {
                        var i, _7c6 = this._layers,
                            len = _7c6.length;
                        if (_7c5) {
                            for (i = len - 1; i >= 0; --i) {
                                if (_7c6[i].name() == _7c5) {
                                    _7c6[i]._unwrap(_7c6[i + 1]);
                                    break;
                                }
                            }
                            _7c6.splice(i, 1);
                        } else {
                            for (i = len - 1; i >= 0; --i) {
                                _7c6[i]._unwrap();
                            }
                        }
                        if (!_7c6.length) {
                            delete this._layers;
                            delete this.layer;
                            delete this.unwrap;
                            delete this.forEachLayer;
                        }
                        return this;
                    },
                    _7c7 = function (_7c8) {
                        var i, _7c9 = this._layers;
                        if (typeof _7c8 == "undefined") {
                            return _7c9.length;
                        }
                        if (typeof _7c8 == "number") {
                            return _7c9[_7c8];
                        }
                        for (i = _7c9.length - 1; i >= 0; --i) {
                            if (_7c9[i].name() == _7c8) {
                                return _7c9[i];
                            }
                        }
                        return null;
                    },
                    _7ca = function (_7cb, _7cc) {
                        var len = this._layers.length,
                            _7cd, end, dir;
                        if (_7cc) {
                            _7cd = 0;
                            end = len;
                            dir = 1;
                        } else {
                            _7cd = len - 1;
                            end = -1;
                            dir = -1;
                        }
                        for (var i = _7cd; i != end; i += dir) {
                            if (_7cb(this._layers[i], i) === false) {
                                return i;
                            }
                        }
                        return end;
                    };
                ns.wrap = function (_7ce, _7cf, _7d0, _7d1) {
                    if (!_7ce._layers) {
                        _7ce._layers = [];
                        _7ce.layer = lang.hitch(_7ce, _7c7);
                        _7ce.unwrap = lang.hitch(_7ce, _7c4);
                        _7ce.forEachLayer = lang.hitch(_7ce, _7ca);
                    }
                    var _7d2 = _7c2(_7d0.tags);
                    if (!_7c1.some(_7ce._layers, function (lyr, i) {
                        if (_7c1.some(lyr.tags, function (tag) {
                            return _7c1.indexOf(_7d2, tag) >= 0;
                        })) {
                            return false;
                        } else {
                            _7ce._layers.splice(i, 0, _7d0);
                            _7d0._wrap(_7ce, _7cf, _7d1, lyr);
                            return true;
                        }
                    })) {
                        _7ce._layers.push(_7d0);
                        _7d0._wrap(_7ce, _7cf, _7d1);
                    }
                    return _7ce;
                };
                var _7d3 = _7c0("dojox.grid.enhanced.plugins._StoreLayer", null, {
                    tags: ["normal"],
                    layerFuncName: "_fetch",
                    constructor: function () {
                        this._store = null;
                        this._originFetch = null;
                        this.__enabled = true;
                    },
                    initialize: function (_7d4) {},
                    uninitialize: function (_7d5) {},
                    invalidate: function () {},
                    _wrap: function (_7d6, _7d7, _7d8, _7d9) {
                        this._store = _7d6;
                        this._funcName = _7d7;
                        var _7da = lang.hitch(this, function () {
                            return (this.enabled() ? this[_7d8 || this.layerFuncName] : this.originFetch).apply(this, arguments);
                        });
                        if (_7d9) {
                            this._originFetch = _7d9._originFetch;
                            _7d9._originFetch = _7da;
                        } else {
                            this._originFetch = _7d6[_7d7] ||
                            function () {};
                            _7d6[_7d7] = _7da;
                        }
                        this.initialize(_7d6);
                    },
                    _unwrap: function (_7db) {
                        this.uninitialize(this._store);
                        if (_7db) {
                            _7db._originFetch = this._originFetch;
                        } else {
                            this._store[this._funcName] = this._originFetch;
                        }
                        this._originFetch = null;
                        this._store = null;
                    },
                    enabled: function (_7dc) {
                        if (typeof _7dc != "undefined") {
                            this.__enabled = !! _7dc;
                        }
                        return this.__enabled;
                    },
                    name: function () {
                        if (!this.__name) {
                            var m = this.declaredClass.match(/(?:\.(?:_*)([^\.]+)Layer$)|(?:\.([^\.]+)$)/i);
                            this.__name = m ? (m[1] || m[2]).toLowerCase() : this.declaredClass;
                        }
                        return this.__name;
                    },
                    originFetch: function () {
                        return (lang.hitch(this._store, this._originFetch)).apply(this, arguments);
                    }
                });
                var _7dd = _7c0("dojox.grid.enhanced.plugins._ServerSideLayer", _7d3, {
                    constructor: function (args) {
                        args = args || {};
                        this._url = args.url || "";
                        this._isStateful = !! args.isStateful;
                        this._onUserCommandLoad = args.onCommandLoad ||
                        function () {};
                        this.__cmds = {
                            cmdlayer: this.name(),
                            enable: true
                        };
                        this.useCommands(this._isStateful);
                    },
                    enabled: function (_7de) {
                        var res = this.inherited(arguments);
                        this.__cmds.enable = this.__enabled;
                        return res;
                    },
                    useCommands: function (_7df) {
                        if (typeof _7df != "undefined") {
                            this.__cmds.cmdlayer = (_7df && this._isStateful) ? this.name() : null;
                        }
                        return !!(this.__cmds.cmdlayer);
                    },
                    _fetch: function (_7e0) {
                        if (this.__cmds.cmdlayer) {
                            xhr.post({
                                url: this._url || this._store.url,
                                content: this.__cmds,
                                load: lang.hitch(this, function (_7e1) {
                                    this.onCommandLoad(_7e1, _7e0);
                                    this.originFetch(_7e0);
                                }),
                                error: lang.hitch(this, this.onCommandError)
                            });
                        } else {
                            this.onCommandLoad("", _7e0);
                            this.originFetch(_7e0);
                        }
                        return _7e0;
                    },
                    command: function (_7e2, _7e3) {
                        var cmds = this.__cmds;
                        if (_7e3 === null) {
                            delete cmds[_7e2];
                        } else {
                            if (typeof _7e3 !== "undefined") {
                                cmds[_7e2] = _7e3;
                            }
                        }
                        return cmds[_7e2];
                    },
                    onCommandLoad: function (_7e4, _7e5) {
                        this._onUserCommandLoad(this.__cmds, _7e5, _7e4);
                    },
                    onCommandError: function (_7e6) {
                        throw _7e6;
                    }
                });
                return {
                    _StoreLayer: _7d3,
                    _ServerSideLayer: _7dd,
                    wrap: ns.wrap
                };
            });
        },
        "dojox/grid/enhanced/plugins/filter/FilterBar": function () {
            define("dojox/grid/enhanced/plugins/filter/FilterBar", ["dojo/_base/declare", "dojo/_base/array", "dojo/_base/connect", "dojo/_base/lang", "dojo/_base/sniff", "dojo/_base/event", "dojo/_base/html", "dojo/_base/window", "dojo/cache", "dojo/query", "dijit/_Widget", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "dojo/fx", "dojo/_base/fx", "dojo/string", "dijit/focus"], function (_7e7, _7e8, _7e9, lang, has, _7ea, html, win, _7eb, _7ec, _7ed, _7ee, _7ef, fx, _7f0, _7f1, _7f2) {
                var _7f3 = "dojoxGridFBarHover",
                    _7f4 = "dojoxGridFBarFiltered",
                    _7f5 = function (evt) {
                        try {
                            if (evt && evt.preventDefault) {
                                _7ea.stop(evt);
                            }
                        } catch (e) {}
                    };
                return _7e7("dojox.grid.enhanced.plugins.filter.FilterBar", [_7ed, _7ee, _7ef], {
                    templateString: _7eb("dojox.grid", "enhanced/templates/FilterBar.html"),
                    widgetsInTemplate: true,
                    _timeout_statusTooltip: 300,
                    _handle_statusTooltip: null,
                    _curColIdx: -1,
                    plugin: null,
                    postMixInProperties: function () {
                        var _7f6 = this.plugin;
                        var nls = _7f6.nls;
                        this._filterBarDefBtnLabel = nls["filterBarDefButton"];
                        this._filterBarClearBtnLabel = nls["filterBarClearButton"];
                        this._closeFilterBarBtnLabel = nls["closeFilterBarBtn"];
                        var _7f7 = _7f6.args.itemsName || nls["defaultItemsName"];
                        this._noFilterMsg = _7f1.substitute(nls["filterBarMsgNoFilterTemplate"], ["", _7f7]);
                        var t = this.plugin.args.statusTipTimeout;
                        if (typeof t == "number") {
                            this._timeout_statusTooltip = t;
                        }
                        var g = _7f6.grid;
                        g.showFilterBar = lang.hitch(this, "showFilterBar");
                        g.toggleFilterBar = lang.hitch(this, "toggleFilterBar");
                        g.isFilterBarShown = lang.hitch(this, "isFilterBarShown");
                    },
                    postCreate: function () {
                        this.inherited(arguments);
                        if (!this.plugin.args.closeFilterbarButton) {
                            html.style(this.closeFilterBarButton.domNode, "display", "none");
                        }
                        var _7f8 = this,
                            g = this.plugin.grid,
                            _7f9 = this.oldGetHeaderHeight = lang.hitch(g, g._getHeaderHeight);
                        this.placeAt(g.viewsHeaderNode, "after");
                        this.connect(this.plugin.filterDefDialog, "showDialog", "_onShowFilterDefDialog");
                        this.connect(this.plugin.filterDefDialog, "closeDialog", "_onCloseFilterDefDialog");
                        this.connect(g.layer("filter"), "onFiltered", this._onFiltered);
                        this.defineFilterButton.domNode.title = this.plugin.nls["filterBarDefButton"];
                        if (html.hasClass(win.body(), "dijit_a11y")) {
                            this.defineFilterButton.set("label", this.plugin.nls["a11yFilterBarDefButton"]);
                        }
                        this.connect(this.defineFilterButton.domNode, "click", _7f5);
                        this.connect(this.clearFilterButton.domNode, "click", _7f5);
                        this.connect(this.closeFilterBarButton.domNode, "click", _7f5);
                        this.toggleClearFilterBtn(true);
                        this._initAriaInfo();
                        g._getHeaderHeight = function () {
                            return _7f9() + html.marginBox(_7f8.domNode).h;
                        };
                        g.focus.addArea({
                            name: "filterbar",
                            onFocus: lang.hitch(this, this._onFocusFilterBar, false),
                            onBlur: lang.hitch(this, this._onBlurFilterBar)
                        });
                        g.focus.placeArea("filterbar", "after", "header");
                    },
                    uninitialize: function () {
                        var g = this.plugin.grid;
                        g._getHeaderHeight = this.oldGetHeaderHeight;
                        g.focus.removeArea("filterbar");
                        this.plugin = null;
                    },
                    isFilterBarShown: function () {
                        return html.style(this.domNode, "display") != "none";
                    },
                    showFilterBar: function (_7fa, _7fb, _7fc) {
                        var g = this.plugin.grid;
                        if (_7fb) {
                            if (Boolean(_7fa) == this.isFilterBarShown()) {
                                return;
                            }
                            _7fc = _7fc || {};
                            var _7fd = [],
                                _7fe = 500;
                            _7fd.push(fx[_7fa ? "wipeIn" : "wipeOut"](lang.mixin({
                                "node": this.domNode,
                                "duration": _7fe
                            }, _7fc)));
                            var _7ff = g.views.views[0].domNode.offsetHeight;
                            var prop = {
                                "duration": _7fe,
                                "properties": {
                                    "height": {
                                        "end": lang.hitch(this, function () {
                                            var _800 = this.domNode.scrollHeight;
                                            if (has("ff")) {
                                                _800 -= 2;
                                            }
                                            return _7fa ? (_7ff - _800) : (_7ff + _800);
                                        })
                                    }
                                }
                            };
                            _7e8.forEach(g.views.views, function (view) {
                                _7fd.push(_7f0.animateProperty(lang.mixin({
                                    "node": view.domNode
                                }, prop, _7fc)), _7f0.animateProperty(lang.mixin({
                                    "node": view.scrollboxNode
                                }, prop, _7fc)));
                            });
                            _7fd.push(_7f0.animateProperty(lang.mixin({
                                "node": g.viewsNode
                            }, prop, _7fc)));
                            fx.combine(_7fd).play();
                        } else {
                            html.style(this.domNode, "display", _7fa ? "" : "none");
                            g.update();
                        }
                    },
                    toggleFilterBar: function (_801, _802) {
                        this.showFilterBar(!this.isFilterBarShown(), _801, _802);
                    },
                    getColumnIdx: function (_803) {
                        var _804 = _7ec("[role='columnheader']", this.plugin.grid.viewsHeaderNode);
                        var idx = -1;
                        for (var i = _804.length - 1; i >= 0; --i) {
                            var _805 = html.position(_804[i]);
                            if (_803 >= _805.x && _803 < _805.x + _805.w) {
                                idx = i;
                                break;
                            }
                        }
                        if (idx >= 0 && this.plugin.grid.layout.cells[idx].filterable !== false) {
                            return idx;
                        } else {
                            return -1;
                        }
                    },
                    toggleClearFilterBtn: function (_806) {
                        html.style(this.clearFilterButton.domNode, "display", _806 ? "none" : "");
                    },
                    _closeFilterBar: function (e) {
                        _7f5(e);
                        var _807 = this.plugin.filterDefDialog.getCriteria();
                        if (_807) {
                            var _808 = _7e9.connect(this.plugin.filterDefDialog, "clearFilter", this, function () {
                                this.showFilterBar(false, true);
                                _7e9.disconnect(_808);
                            });
                            this._clearFilterDefDialog(e);
                        } else {
                            this.showFilterBar(false, true);
                        }
                    },
                    _showFilterDefDialog: function (e) {
                        _7f5(e);
                        this.plugin.filterDefDialog.showDialog(this._curColIdx);
                        this.plugin.grid.focus.focusArea("filterbar");
                    },
                    _clearFilterDefDialog: function (e) {
                        _7f5(e);
                        this.plugin.filterDefDialog.onClearFilter();
                        this.plugin.grid.focus.focusArea("filterbar");
                    },
                    _onEnterButton: function (e) {
                        this._onBlurFilterBar();
                        _7f5(e);
                    },
                    _onMoveButton: function (e) {
                        this._onBlurFilterBar();
                    },
                    _onLeaveButton: function (e) {
                        this._leavingBtn = true;
                    },
                    _onShowFilterDefDialog: function (_809) {
                        if (typeof _809 == "number") {
                            this._curColIdx = _809;
                        }
                        this._defPaneIsShown = true;
                    },
                    _onCloseFilterDefDialog: function () {
                        this._defPaneIsShown = false;
                        this._curColIdx = -1;
                        _7f2.focus(this.defineFilterButton.domNode);
                    },
                    _onClickFilterBar: function (e) {
                        _7f5(e);
                        this._clearStatusTipTimeout();
                        this.plugin.grid.focus.focusArea("filterbar");
                        this.plugin.filterDefDialog.showDialog(this.getColumnIdx(e.clientX));
                    },
                    _onMouseEnter: function (e) {
                        this._onFocusFilterBar(true, null);
                        this._updateTipPosition(e);
                        this._setStatusTipTimeout();
                    },
                    _onMouseMove: function (e) {
                        if (this._leavingBtn) {
                            this._onFocusFilterBar(true, null);
                            this._leavingBtn = false;
                        }
                        if (this._isFocused) {
                            this._setStatusTipTimeout();
                            this._highlightHeader(this.getColumnIdx(e.clientX));
                            if (this._handle_statusTooltip) {
                                this._updateTipPosition(e);
                            }
                        }
                    },
                    _onMouseLeave: function (e) {
                        this._onBlurFilterBar();
                    },
                    _updateTipPosition: function (evt) {
                        this._tippos = {
                            x: evt.pageX,
                            y: evt.pageY
                        };
                    },
                    _onFocusFilterBar: function (_80a, evt, step) {
                        if (!this.isFilterBarShown()) {
                            return false;
                        }
                        this._isFocused = true;
                        html.addClass(this.domNode, _7f3);
                        if (!_80a) {
                            var _80b = html.style(this.clearFilterButton.domNode, "display") !== "none";
                            var _80c = html.style(this.closeFilterBarButton.domNode, "display") !== "none";
                            if (typeof this._focusPos == "undefined") {
                                if (step > 0) {
                                    this._focusPos = 0;
                                } else {
                                    if (_80c) {
                                        this._focusPos = 1;
                                    } else {
                                        this._focusPos = 0;
                                    }
                                    if (_80b) {
                                        ++this._focusPos;
                                    }
                                }
                            }
                            if (this._focusPos === 0) {
                                _7f2.focus(this.defineFilterButton.focusNode);
                            } else {
                                if (this._focusPos === 1 && _80b) {
                                    _7f2.focus(this.clearFilterButton.focusNode);
                                } else {
                                    _7f2.focus(this.closeFilterBarButton.focusNode);
                                }
                            }
                        }
                        _7f5(evt);
                        return true;
                    },
                    _onBlurFilterBar: function (evt, step) {
                        if (this._isFocused) {
                            this._isFocused = false;
                            html.removeClass(this.domNode, _7f3);
                            this._clearStatusTipTimeout();
                            this._clearHeaderHighlight();
                        }
                        var _80d = true;
                        if (step) {
                            var _80e = 3;
                            if (html.style(this.closeFilterBarButton.domNode, "display") === "none") {
                                --_80e;
                            }
                            if (html.style(this.clearFilterButton.domNode, "display") === "none") {
                                --_80e;
                            }
                            if (_80e == 1) {
                                delete this._focusPos;
                            } else {
                                var _80f = this._focusPos;
                                for (var next = _80f + step; next < 0; next += _80e) {}
                                next %= _80e;
                                if ((step > 0 && next < _80f) || (step < 0 && next > _80f)) {
                                    delete this._focusPos;
                                } else {
                                    this._focusPos = next;
                                    _80d = false;
                                }
                            }
                        }
                        return _80d;
                    },
                    _onFiltered: function (_810, _811) {
                        var p = this.plugin,
                            _812 = p.args.itemsName || p.nls["defaultItemsName"],
                            msg = "",
                            g = p.grid,
                            _813 = g.layer("filter");
                        if (_813.filterDef()) {
                            msg = _7f1.substitute(p.nls["filterBarMsgHasFilterTemplate"], [_810, _811, _812]);
                            html.addClass(this.domNode, _7f4);
                        } else {
                            msg = _7f1.substitute(p.nls["filterBarMsgNoFilterTemplate"], [_811, _812]);
                            html.removeClass(this.domNode, _7f4);
                        }
                        this.statusBarNode.innerHTML = msg;
                        this._focusPos = 0;
                    },
                    _initAriaInfo: function () {
                        this.defineFilterButton.domNode.setAttribute("aria-label", this.plugin.nls["waiFilterBarDefButton"]);
                        this.clearFilterButton.domNode.setAttribute("aria-label", this.plugin.nls["waiFilterBarClearButton"]);
                    },
                    _isInColumn: function (_814, _815, _816) {
                        var _817 = html.position(_815);
                        return _814 >= _817.x && _814 < _817.x + _817.w;
                    },
                    _setStatusTipTimeout: function () {
                        this._clearStatusTipTimeout();
                        if (!this._defPaneIsShown) {
                            this._handle_statusTooltip = setTimeout(lang.hitch(this, this._showStatusTooltip), this._timeout_statusTooltip);
                        }
                    },
                    _clearStatusTipTimeout: function () {
                        clearTimeout(this._handle_statusTooltip);
                        this._handle_statusTooltip = null;
                    },
                    _showStatusTooltip: function () {
                        this._handle_statusTooltip = null;
                        this.plugin.filterStatusTip.showDialog(this._tippos.x, this._tippos.y, this.getColumnIdx(this._tippos.x));
                    },
                    _highlightHeader: function (_818) {
                        if (_818 != this._previousHeaderIdx) {
                            var g = this.plugin.grid,
                                cell = g.getCell(this._previousHeaderIdx);
                            if (cell) {
                                html.removeClass(cell.getHeaderNode(), "dojoxGridCellOver");
                            }
                            cell = g.getCell(_818);
                            if (cell) {
                                html.addClass(cell.getHeaderNode(), "dojoxGridCellOver");
                            }
                            this._previousHeaderIdx = _818;
                        }
                    },
                    _clearHeaderHighlight: function () {
                        if (typeof this._previousHeaderIdx != "undefined") {
                            var g = this.plugin.grid,
                                cell = g.getCell(this._previousHeaderIdx);
                            if (cell) {
                                g.onHeaderCellMouseOut({
                                    cellNode: cell.getHeaderNode()
                                });
                            }
                            delete this._previousHeaderIdx;
                        }
                    }
                });
            });
        },
        "dijit/_WidgetsInTemplateMixin": function () {
            define("dijit/_WidgetsInTemplateMixin", ["dojo/_base/array", "dojo/_base/declare", "dojo/parser", "dijit/registry"], function (_819, _81a, _81b, _81c) {
                return _81a("dijit._WidgetsInTemplateMixin", null, {
                    _earlyTemplatedStartup: false,
                    widgetsInTemplate: true,
                    _beforeFillContent: function () {
                        if (this.widgetsInTemplate) {
                            var node = this.domNode;
                            var cw = (this._startupWidgets = _81b.parse(node, {
                                noStart: !this._earlyTemplatedStartup,
                                template: true,
                                inherited: {
                                    dir: this.dir,
                                    lang: this.lang,
                                    textDir: this.textDir
                                },
                                propsThis: this,
                                scope: "dojo"
                            }));
                            this._supportingWidgets = _81c.findWidgets(node);
                            this._attachTemplateNodes(cw, function (n, p) {
                                return n[p];
                            });
                        }
                    },
                    startup: function () {
                        _819.forEach(this._startupWidgets, function (w) {
                            if (w && !w._started && w.startup) {
                                w.startup();
                            }
                        });
                        this.inherited(arguments);
                    }
                });
            });
        },
        "dojo/fx": function () {
            define(["./_base/lang", "./Evented", "./_base/kernel", "./_base/array", "./_base/connect", "./_base/fx", "./dom", "./dom-style", "./dom-geometry", "./ready", "require"], function (lang, _81d, dojo, _81e, _81f, _820, dom, _821, geom, _822, _823) {
                if (!dojo.isAsync) {
                    _822(0, function () {
                        var _824 = ["./fx/Toggler"];
                        _823(_824);
                    });
                }
                var _825 = dojo.fx = {};
                var _826 = {
                    _fire: function (evt, args) {
                        if (this[evt]) {
                            this[evt].apply(this, args || []);
                        }
                        return this;
                    }
                };
                var _827 = function (_828) {
                        this._index = -1;
                        this._animations = _828 || [];
                        this._current = this._onAnimateCtx = this._onEndCtx = null;
                        this.duration = 0;
                        _81e.forEach(this._animations, function (a) {
                            this.duration += a.duration;
                            if (a.delay) {
                                this.duration += a.delay;
                            }
                        }, this);
                    };
                _827.prototype = new _81d();
                lang.extend(_827, {
                    _onAnimate: function () {
                        this._fire("onAnimate", arguments);
                    },
                    _onEnd: function () {
                        _81f.disconnect(this._onAnimateCtx);
                        _81f.disconnect(this._onEndCtx);
                        this._onAnimateCtx = this._onEndCtx = null;
                        if (this._index + 1 == this._animations.length) {
                            this._fire("onEnd");
                        } else {
                            this._current = this._animations[++this._index];
                            this._onAnimateCtx = _81f.connect(this._current, "onAnimate", this, "_onAnimate");
                            this._onEndCtx = _81f.connect(this._current, "onEnd", this, "_onEnd");
                            this._current.play(0, true);
                        }
                    },
                    play: function (_829, _82a) {
                        if (!this._current) {
                            this._current = this._animations[this._index = 0];
                        }
                        if (!_82a && this._current.status() == "playing") {
                            return this;
                        }
                        var _82b = _81f.connect(this._current, "beforeBegin", this, function () {
                            this._fire("beforeBegin");
                        }),
                            _82c = _81f.connect(this._current, "onBegin", this, function (arg) {
                                this._fire("onBegin", arguments);
                            }),
                            _82d = _81f.connect(this._current, "onPlay", this, function (arg) {
                                this._fire("onPlay", arguments);
                                _81f.disconnect(_82b);
                                _81f.disconnect(_82c);
                                _81f.disconnect(_82d);
                            });
                        if (this._onAnimateCtx) {
                            _81f.disconnect(this._onAnimateCtx);
                        }
                        this._onAnimateCtx = _81f.connect(this._current, "onAnimate", this, "_onAnimate");
                        if (this._onEndCtx) {
                            _81f.disconnect(this._onEndCtx);
                        }
                        this._onEndCtx = _81f.connect(this._current, "onEnd", this, "_onEnd");
                        this._current.play.apply(this._current, arguments);
                        return this;
                    },
                    pause: function () {
                        if (this._current) {
                            var e = _81f.connect(this._current, "onPause", this, function (arg) {
                                this._fire("onPause", arguments);
                                _81f.disconnect(e);
                            });
                            this._current.pause();
                        }
                        return this;
                    },
                    gotoPercent: function (_82e, _82f) {
                        this.pause();
                        var _830 = this.duration * _82e;
                        this._current = null;
                        _81e.some(this._animations, function (a) {
                            if (a.duration <= _830) {
                                this._current = a;
                                return true;
                            }
                            _830 -= a.duration;
                            return false;
                        });
                        if (this._current) {
                            this._current.gotoPercent(_830 / this._current.duration, _82f);
                        }
                        return this;
                    },
                    stop: function (_831) {
                        if (this._current) {
                            if (_831) {
                                for (; this._index + 1 < this._animations.length; ++this._index) {
                                    this._animations[this._index].stop(true);
                                }
                                this._current = this._animations[this._index];
                            }
                            var e = _81f.connect(this._current, "onStop", this, function (arg) {
                                this._fire("onStop", arguments);
                                _81f.disconnect(e);
                            });
                            this._current.stop();
                        }
                        return this;
                    },
                    status: function () {
                        return this._current ? this._current.status() : "stopped";
                    },
                    destroy: function () {
                        if (this._onAnimateCtx) {
                            _81f.disconnect(this._onAnimateCtx);
                        }
                        if (this._onEndCtx) {
                            _81f.disconnect(this._onEndCtx);
                        }
                    }
                });
                lang.extend(_827, _826);
                _825.chain = function (_832) {
                    return new _827(_832);
                };
                var _833 = function (_834) {
                        this._animations = _834 || [];
                        this._connects = [];
                        this._finished = 0;
                        this.duration = 0;
                        _81e.forEach(_834, function (a) {
                            var _835 = a.duration;
                            if (a.delay) {
                                _835 += a.delay;
                            }
                            if (this.duration < _835) {
                                this.duration = _835;
                            }
                            this._connects.push(_81f.connect(a, "onEnd", this, "_onEnd"));
                        }, this);
                        this._pseudoAnimation = new _820.Animation({
                            curve: [0, 1],
                            duration: this.duration
                        });
                        var self = this;
                        _81e.forEach(["beforeBegin", "onBegin", "onPlay", "onAnimate", "onPause", "onStop", "onEnd"], function (evt) {
                            self._connects.push(_81f.connect(self._pseudoAnimation, evt, function () {
                                self._fire(evt, arguments);
                            }));
                        });
                    };
                lang.extend(_833, {
                    _doAction: function (_836, args) {
                        _81e.forEach(this._animations, function (a) {
                            a[_836].apply(a, args);
                        });
                        return this;
                    },
                    _onEnd: function () {
                        if (++this._finished > this._animations.length) {
                            this._fire("onEnd");
                        }
                    },
                    _call: function (_837, args) {
                        var t = this._pseudoAnimation;
                        t[_837].apply(t, args);
                    },
                    play: function (_838, _839) {
                        this._finished = 0;
                        this._doAction("play", arguments);
                        this._call("play", arguments);
                        return this;
                    },
                    pause: function () {
                        this._doAction("pause", arguments);
                        this._call("pause", arguments);
                        return this;
                    },
                    gotoPercent: function (_83a, _83b) {
                        var ms = this.duration * _83a;
                        _81e.forEach(this._animations, function (a) {
                            a.gotoPercent(a.duration < ms ? 1 : (ms / a.duration), _83b);
                        });
                        this._call("gotoPercent", arguments);
                        return this;
                    },
                    stop: function (_83c) {
                        this._doAction("stop", arguments);
                        this._call("stop", arguments);
                        return this;
                    },
                    status: function () {
                        return this._pseudoAnimation.status();
                    },
                    destroy: function () {
                        _81e.forEach(this._connects, _81f.disconnect);
                    }
                });
                lang.extend(_833, _826);
                _825.combine = function (_83d) {
                    return new _833(_83d);
                };
                _825.wipeIn = function (args) {
                    var node = args.node = dom.byId(args.node),
                        s = node.style,
                        o;
                    var anim = _820.animateProperty(lang.mixin({
                        properties: {
                            height: {
                                start: function () {
                                    o = s.overflow;
                                    s.overflow = "hidden";
                                    if (s.visibility == "hidden" || s.display == "none") {
                                        s.height = "1px";
                                        s.display = "";
                                        s.visibility = "";
                                        return 1;
                                    } else {
                                        var _83e = _821.get(node, "height");
                                        return Math.max(_83e, 1);
                                    }
                                },
                                end: function () {
                                    return node.scrollHeight;
                                }
                            }
                        }
                    }, args));
                    var fini = function () {
                            s.height = "auto";
                            s.overflow = o;
                        };
                    _81f.connect(anim, "onStop", fini);
                    _81f.connect(anim, "onEnd", fini);
                    return anim;
                };
                _825.wipeOut = function (args) {
                    var node = args.node = dom.byId(args.node),
                        s = node.style,
                        o;
                    var anim = _820.animateProperty(lang.mixin({
                        properties: {
                            height: {
                                end: 1
                            }
                        }
                    }, args));
                    _81f.connect(anim, "beforeBegin", function () {
                        o = s.overflow;
                        s.overflow = "hidden";
                        s.display = "";
                    });
                    var fini = function () {
                            s.overflow = o;
                            s.height = "auto";
                            s.display = "none";
                        };
                    _81f.connect(anim, "onStop", fini);
                    _81f.connect(anim, "onEnd", fini);
                    return anim;
                };
                _825.slideTo = function (args) {
                    var node = args.node = dom.byId(args.node),
                        top = null,
                        left = null;
                    var init = (function (n) {
                        return function () {
                            var cs = _821.getComputedStyle(n);
                            var pos = cs.position;
                            top = (pos == "absolute" ? n.offsetTop : parseInt(cs.top) || 0);
                            left = (pos == "absolute" ? n.offsetLeft : parseInt(cs.left) || 0);
                            if (pos != "absolute" && pos != "relative") {
                                var ret = geom.position(n, true);
                                top = ret.y;
                                left = ret.x;
                                n.style.position = "absolute";
                                n.style.top = top + "px";
                                n.style.left = left + "px";
                            }
                        };
                    })(node);
                    init();
                    var anim = _820.animateProperty(lang.mixin({
                        properties: {
                            top: args.top || 0,
                            left: args.left || 0
                        }
                    }, args));
                    _81f.connect(anim, "beforeBegin", anim, init);
                    return anim;
                };
                return _825;
            });
        },
        "dojox/grid/enhanced/plugins/filter/FilterDefDialog": function () {
            define("dojox/grid/enhanced/plugins/filter/FilterDefDialog", ["dojo/_base/declare", "dojo/_base/array", "dojo/_base/connect", "dojo/_base/lang", "dojo/_base/event", "dojo/_base/html", "dojo/_base/sniff", "dojo/cache", "dojo/keys", "dojo/string", "dojo/window", "dojo/date/locale", "./FilterBuilder", "../Dialog", "dijit/form/ComboBox", "dijit/form/TextBox", "dijit/form/NumberTextBox", "dijit/form/DateTextBox", "dijit/form/TimeTextBox", "dijit/form/Button", "dijit/layout/AccordionContainer", "dijit/layout/ContentPane", "dijit/_Widget", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "dijit/focus", "dojox/html/metrics", "dijit/a11y", "dijit/Tooltip", "dijit/form/Select", "dijit/form/RadioButton", "dojox/html/ellipsis", "../../../cells/dijit"], function (_83f, _840, _841, lang, _842, html, has, _843, keys, _844, win, _845, _846, _847, _848, _849, _84a, _84b, _84c, _84d, _84e, _84f, _850, _851, _852, _853, _854, _855) {
                var _856 = {
                    relSelect: 60,
                    accordionTitle: 70,
                    removeCBoxBtn: -1,
                    colSelect: 90,
                    condSelect: 95,
                    valueBox: 10,
                    addCBoxBtn: 20,
                    filterBtn: 30,
                    clearBtn: 40,
                    cancelBtn: 50
                };
                var _857 = _83f("dojox.grid.enhanced.plugins.filter.AccordionContainer", _84e, {
                    nls: null,
                    addChild: function (_858, _859) {
                        var pane = arguments[0] = _858._pane = new _84f({
                            content: _858
                        });
                        this.inherited(arguments);
                        this._modifyChild(pane);
                    },
                    removeChild: function (_85a) {
                        var pane = _85a,
                            _85b = false;
                        if (_85a._pane) {
                            _85b = true;
                            pane = arguments[0] = _85a._pane;
                        }
                        this.inherited(arguments);
                        if (_85b) {
                            this._hackHeight(false, this._titleHeight);
                            var _85c = this.getChildren();
                            if (_85c.length === 1) {
                                html.style(_85c[0]._removeCBoxBtn.domNode, "display", "none");
                            }
                        }
                        pane.destroyRecursive();
                    },
                    selectChild: function (_85d) {
                        if (_85d._pane) {
                            arguments[0] = _85d._pane;
                        }
                        this.inherited(arguments);
                    },
                    resize: function () {
                        this.inherited(arguments);
                        _840.forEach(this.getChildren(), this._setupTitleDom);
                    },
                    startup: function () {
                        if (this._started) {
                            return;
                        }
                        this.inherited(arguments);
                        if (parseInt(has("ie"), 10) == 7) {
                            _840.some(this._connects, function (cnnt) {
                                if (cnnt[0][1] == "onresize") {
                                    this.disconnect(cnnt);
                                    return true;
                                }
                            }, this);
                        }
                        _840.forEach(this.getChildren(), function (_85e) {
                            this._modifyChild(_85e, true);
                        }, this);
                    },
                    _onKeyPress: function (e, _85f) {
                        if (this.disabled || e.altKey || !(_85f || e.ctrlKey)) {
                            return;
                        }
                        var k = keys,
                            c = e.charOrCode,
                            ltr = html._isBodyLtr(),
                            _860 = null;
                        if ((_85f && c == k.UP_ARROW) || (e.ctrlKey && c == k.PAGE_UP)) {
                            _860 = false;
                        } else {
                            if ((_85f && c == k.DOWN_ARROW) || (e.ctrlKey && (c == k.PAGE_DOWN || c == k.TAB))) {
                                _860 = true;
                            } else {
                                if (c == (ltr ? k.LEFT_ARROW : k.RIGHT_ARROW)) {
                                    _860 = this._focusOnRemoveBtn ? null : false;
                                    this._focusOnRemoveBtn = !this._focusOnRemoveBtn;
                                } else {
                                    if (c == (ltr ? k.RIGHT_ARROW : k.LEFT_ARROW)) {
                                        _860 = this._focusOnRemoveBtn ? true : null;
                                        this._focusOnRemoveBtn = !this._focusOnRemoveBtn;
                                    } else {
                                        return;
                                    }
                                }
                            }
                        }
                        if (_860 !== null) {
                            this._adjacent(_860)._buttonWidget._onTitleClick();
                        }
                        _842.stop(e);
                        win.scrollIntoView(this.selectedChildWidget._buttonWidget.domNode.parentNode);
                        if (has("ie")) {
                            this.selectedChildWidget._removeCBoxBtn.focusNode.setAttribute("tabIndex", this._focusOnRemoveBtn ? _856.accordionTitle : -1);
                        }
                        _853.focus(this.selectedChildWidget[this._focusOnRemoveBtn ? "_removeCBoxBtn" : "_buttonWidget"].focusNode);
                    },
                    _modifyChild: function (_861, _862) {
                        if (!_861 || !this._started) {
                            return;
                        }
                        html.style(_861.domNode, "overflow", "hidden");
                        _861._buttonWidget.connect(_861._buttonWidget, "_setSelectedAttr", function () {
                            this.focusNode.setAttribute("tabIndex", this.selected ? _856.accordionTitle : "-1");
                        });
                        var _863 = this;
                        _861._buttonWidget.connect(_861._buttonWidget.domNode, "onclick", function () {
                            _863._focusOnRemoveBtn = false;
                        });
                        (_861._removeCBoxBtn = new _84d({
                            label: this.nls.removeRuleButton,
                            showLabel: false,
                            iconClass: "dojoxGridFCBoxRemoveCBoxBtnIcon",
                            tabIndex: _856.removeCBoxBtn,
                            onClick: lang.hitch(_861.content, "onRemove"),
                            onKeyPress: function (e) {
                                _863._onKeyPress(e, _861._buttonWidget.contentWidget);
                            }
                        })).placeAt(_861._buttonWidget.domNode);
                        var i, _864 = this.getChildren();
                        if (_864.length === 1) {
                            _861._buttonWidget.set("selected", true);
                            html.style(_861._removeCBoxBtn.domNode, "display", "none");
                        } else {
                            for (i = 0; i < _864.length; ++i) {
                                if (_864[i]._removeCBoxBtn) {
                                    html.style(_864[i]._removeCBoxBtn.domNode, "display", "");
                                }
                            }
                        }
                        this._setupTitleDom(_861);
                        if (!this._titleHeight) {
                            for (i = 0; i < _864.length; ++i) {
                                if (_864[i] != this.selectedChildWidget) {
                                    this._titleHeight = html.marginBox(_864[i]._buttonWidget.domNode.parentNode).h;
                                    break;
                                }
                            }
                        }
                        if (!_862) {
                            this._hackHeight(true, this._titleHeight);
                        }
                    },
                    _hackHeight: function (_865, _866) {
                        var _867 = this.getChildren(),
                            dn = this.domNode,
                            h = html.style(dn, "height");
                        if (!_865) {
                            dn.style.height = (h - _866) + "px";
                        } else {
                            if (_867.length > 1) {
                                dn.style.height = (h + _866) + "px";
                            } else {
                                return;
                            }
                        }
                        this.resize();
                    },
                    _setupTitleDom: function (_868) {
                        var w = html.contentBox(_868._buttonWidget.titleNode).w;
                        if (has("ie") < 8) {
                            w -= 8;
                        }
                        html.style(_868._buttonWidget.titleTextNode, "width", w + "px");
                    }
                });
                var _869 = _83f("dojox.grid.enhanced.plugins.filter.FilterDefPane", [_850, _851, _852], {
                    templateString: _843("dojox.grid", "enhanced/templates/FilterDefPane.html"),
                    widgetsInTemplate: true,
                    dlg: null,
                    postMixInProperties: function () {
                        this.plugin = this.dlg.plugin;
                        var nls = this.plugin.nls;
                        this._addRuleBtnLabel = nls.addRuleButton;
                        this._cancelBtnLabel = nls.cancelButton;
                        this._clearBtnLabel = nls.clearButton;
                        this._filterBtnLabel = nls.filterButton;
                        this._relAll = nls.relationAll;
                        this._relAny = nls.relationAny;
                        this._relMsgFront = nls.relationMsgFront;
                        this._relMsgTail = nls.relationMsgTail;
                    },
                    postCreate: function () {
                        this.inherited(arguments);
                        this.connect(this.domNode, "onkeypress", "_onKey");
                        (this.cboxContainer = new _857({
                            nls: this.plugin.nls
                        })).placeAt(this.criteriaPane);
                        this._relSelect.set("tabIndex", _856.relSelect);
                        this._addCBoxBtn.set("tabIndex", _856.addCBoxBtn);
                        this._cancelBtn.set("tabIndex", _856.cancelBtn);
                        this._clearFilterBtn.set("tabIndex", _856.clearBtn);
                        this._filterBtn.set("tabIndex", _856.filterBtn);
                        var nls = this.plugin.nls;
                        this._relSelect.domNode.setAttribute("aria-label", nls.waiRelAll);
                        this._addCBoxBtn.domNode.setAttribute("aria-label", nls.waiAddRuleButton);
                        this._cancelBtn.domNode.setAttribute("aria-label", nls.waiCancelButton);
                        this._clearFilterBtn.domNode.setAttribute("aria-label", nls.waiClearButton);
                        this._filterBtn.domNode.setAttribute("aria-label", nls.waiFilterButton);
                        this._relSelect.set("value", this.dlg._relOpCls === "logicall" ? "0" : "1");
                    },
                    uninitialize: function () {
                        this.cboxContainer.destroyRecursive();
                        this.plugin = null;
                        this.dlg = null;
                    },
                    _onRelSelectChange: function (val) {
                        this.dlg._relOpCls = val == "0" ? "logicall" : "logicany";
                        this._relSelect.domNode.setAttribute("aria-label", this.plugin.nls[val == "0" ? "waiRelAll" : "waiRelAny"]);
                    },
                    _onAddCBox: function () {
                        this.dlg.addCriteriaBoxes(1);
                    },
                    _onCancel: function () {
                        this.dlg.onCancel();
                    },
                    _onClearFilter: function () {
                        this.dlg.onClearFilter();
                    },
                    _onFilter: function () {
                        this.dlg.onFilter();
                    },
                    _onKey: function (e) {
                        if (e.keyCode == keys.ENTER) {
                            this.dlg.onFilter();
                        }
                    }
                });
                var _86a = _83f("dojox.grid.enhanced.plugins.filter.CriteriaBox", [_850, _851, _852], {
                    templateString: _843("dojox.grid", "enhanced/templates/CriteriaBox.html"),
                    widgetsInTemplate: true,
                    dlg: null,
                    postMixInProperties: function () {
                        this.plugin = this.dlg.plugin;
                        this._curValueBox = null;
                        var nls = this.plugin.nls;
                        this._colSelectLabel = nls.columnSelectLabel;
                        this._condSelectLabel = nls.conditionSelectLabel;
                        this._valueBoxLabel = nls.valueBoxLabel;
                        this._anyColumnOption = nls.anyColumnOption;
                    },
                    postCreate: function () {
                        var dlg = this.dlg,
                            g = this.plugin.grid;
                        this._colSelect.set("tabIndex", _856.colSelect);
                        this._colOptions = this._getColumnOptions();
                        this._colSelect.addOption([{
                            label: this.plugin.nls.anyColumnOption,
                            value: "anycolumn",
                            selected: dlg.curColIdx < 0
                        }, {
                            value: ""
                        }].concat(this._colOptions));
                        this._condSelect.set("tabIndex", _856.condSelect);
                        this._condSelect.addOption(this._getUsableConditions(dlg.getColumnType(dlg.curColIdx)));
                        this._showSelectOrLabel(this._condSelect, this._condSelectAlt);
                        this.connect(g.layout, "moveColumn", "onMoveColumn");
                    },
                    _getColumnOptions: function () {
                        var _86b = this.dlg.curColIdx >= 0 ? String(this.dlg.curColIdx) : "anycolumn";
                        return _840.map(_840.filter(this.plugin.grid.layout.cells, function (cell) {
                            return !(cell.filterable === false || cell.hidden);
                        }), function (cell) {
                            return {
                                label: cell.name || cell.field,
                                value: String(cell.index),
                                selected: _86b == String(cell.index)
                            };
                        });
                    },
                    onMoveColumn: function () {
                        var tmp = this._onChangeColumn;
                        this._onChangeColumn = function () {};
                        var _86c = this._colSelect.get("selectedOptions");
                        this._colSelect.removeOption(this._colOptions);
                        this._colOptions = this._getColumnOptions();
                        this._colSelect.addOption(this._colOptions);
                        var i = 0;
                        for (; i < this._colOptions.length; ++i) {
                            if (this._colOptions[i].label == _86c.label) {
                                break;
                            }
                        }
                        if (i < this._colOptions.length) {
                            this._colSelect.set("value", this._colOptions[i].value);
                        }
                        var _86d = this;
                        setTimeout(function () {
                            _86d._onChangeColumn = tmp;
                        }, 0);
                    },
                    onRemove: function () {
                        this.dlg.removeCriteriaBoxes(this);
                    },
                    uninitialize: function () {
                        if (this._curValueBox) {
                            this._curValueBox.destroyRecursive();
                            this._curValueBox = null;
                        }
                        this.plugin = null;
                        this.dlg = null;
                    },
                    _showSelectOrLabel: function (sel, alt) {
                        var _86e = sel.getOptions();
                        if (_86e.length == 1) {
                            alt.innerHTML = _86e[0].label;
                            html.style(sel.domNode, "display", "none");
                            html.style(alt, "display", "");
                        } else {
                            html.style(sel.domNode, "display", "");
                            html.style(alt, "display", "none");
                        }
                    },
                    _onChangeColumn: function (val) {
                        this._checkValidCriteria();
                        var type = this.dlg.getColumnType(val);
                        this._setConditionsByType(type);
                        this._setValueBoxByType(type);
                        this._updateValueBox();
                    },
                    _onChangeCondition: function (val) {
                        this._checkValidCriteria();
                        var f = (val == "range");
                        if (f ^ this._isRange) {
                            this._isRange = f;
                            this._setValueBoxByType(this.dlg.getColumnType(this._colSelect.get("value")));
                        }
                        this._updateValueBox();
                    },
                    _updateValueBox: function (cond) {
                        this._curValueBox.set("disabled", this._condSelect.get("value") == "isempty");
                    },
                    _checkValidCriteria: function () {
                        setTimeout(lang.hitch(this, function () {
                            this.updateRuleTitle();
                            this.dlg._updatePane();
                        }), 0);
                    },
                    _createValueBox: function (cls, arg) {
                        var func = lang.hitch(arg.cbox, "_checkValidCriteria");
                        return new cls(lang.mixin(arg, {
                            tabIndex: _856.valueBox,
                            onKeyPress: func,
                            onChange: func,
                            "class": "dojoxGridFCBoxValueBox"
                        }));
                    },
                    _createRangeBox: function (cls, arg) {
                        var func = lang.hitch(arg.cbox, "_checkValidCriteria");
                        lang.mixin(arg, {
                            tabIndex: _856.valueBox,
                            onKeyPress: func,
                            onChange: func
                        });
                        var div = html.create("div", {
                            "class": "dojoxGridFCBoxValueBox"
                        }),
                            _86f = new cls(arg),
                            txt = html.create("span", {
                                "class": "dojoxGridFCBoxRangeValueTxt",
                                "innerHTML": this.plugin.nls.rangeTo
                            }),
                            end = new cls(arg);
                        html.addClass(_86f.domNode, "dojoxGridFCBoxStartValue");
                        html.addClass(end.domNode, "dojoxGridFCBoxEndValue");
                        div.appendChild(_86f.domNode);
                        div.appendChild(txt);
                        div.appendChild(end.domNode);
                        div.domNode = div;
                        div.set = function (_870, args) {
                            if (lang.isObject(args)) {
                                _86f.set("value", args.start);
                                end.set("value", args.end);
                            }
                        };
                        div.get = function () {
                            var s = _86f.get("value"),
                                e = end.get("value");
                            return s && e ? {
                                start: s,
                                end: e
                            } : "";
                        };
                        return div;
                    },
                    changeCurrentColumn: function (_871) {
                        var _872 = this.dlg.curColIdx;
                        this._colSelect.removeOption(this._colOptions);
                        this._colOptions = this._getColumnOptions();
                        this._colSelect.addOption(this._colOptions);
                        this._colSelect.set("value", _872 >= 0 ? String(_872) : "anycolumn");
                        this.updateRuleTitle(true);
                    },
                    curColumn: function () {
                        return this._colSelect.getOptions(this._colSelect.get("value")).label;
                    },
                    curCondition: function () {
                        return this._condSelect.getOptions(this._condSelect.get("value")).label;
                    },
                    curValue: function () {
                        var cond = this._condSelect.get("value");
                        if (cond == "isempty") {
                            return "";
                        }
                        return this._curValueBox ? this._curValueBox.get("value") : "";
                    },
                    save: function () {
                        if (this.isEmpty()) {
                            return null;
                        }
                        var _873 = this._colSelect.get("value"),
                            type = this.dlg.getColumnType(_873),
                            _874 = this.curValue(),
                            cond = this._condSelect.get("value");
                        return {
                            "column": _873,
                            "condition": cond,
                            "value": _874,
                            "formattedVal": this.formatValue(type, cond, _874),
                            "type": type,
                            "colTxt": this.curColumn(),
                            "condTxt": this.curCondition()
                        };
                    },
                    load: function (obj) {
                        var tmp = [this._onChangeColumn, this._onChangeCondition];
                        this._onChangeColumn = this._onChangeCondition = function () {};
                        if (obj.column) {
                            this._colSelect.set("value", obj.column);
                        }
                        if (obj.condition) {
                            this._condSelect.set("value", obj.condition);
                        }
                        if (obj.type) {
                            this._setValueBoxByType(obj.type);
                        } else {
                            obj.type = this.dlg.getColumnType(this._colSelect.get("value"));
                        }
                        var _875 = obj.value || "";
                        if (_875 || (obj.type != "date" && obj.type != "time")) {
                            this._curValueBox.set("value", _875);
                        }
                        this._updateValueBox();
                        setTimeout(lang.hitch(this, function () {
                            this._onChangeColumn = tmp[0];
                            this._onChangeCondition = tmp[1];
                        }), 0);
                    },
                    getExpr: function () {
                        if (this.isEmpty()) {
                            return null;
                        }
                        var _876 = this._colSelect.get("value");
                        return this.dlg.getExprForCriteria({
                            "type": this.dlg.getColumnType(_876),
                            "column": _876,
                            "condition": this._condSelect.get("value"),
                            "value": this.curValue()
                        });
                    },
                    isEmpty: function () {
                        var cond = this._condSelect.get("value");
                        if (cond == "isempty") {
                            return false;
                        }
                        var v = this.curValue();
                        return v === "" || v === null || typeof v == "undefined" || (typeof v == "number" && isNaN(v));
                    },
                    updateRuleTitle: function (_877) {
                        var node = this._pane._buttonWidget.titleTextNode;
                        var _878 = ["<div class='dojoxEllipsis'>"];
                        if (_877 || this.isEmpty()) {
                            node.title = _844.substitute(this.plugin.nls.ruleTitleTemplate, [this._ruleIndex || 1]);
                            _878.push(node.title);
                        } else {
                            var type = this.dlg.getColumnType(this._colSelect.get("value"));
                            var _879 = this.curColumn();
                            var _87a = this.curCondition();
                            var _87b = this.formatValue(type, this._condSelect.get("value"), this.curValue());
                            _878.push(_879, "&nbsp;<span class='dojoxGridRuleTitleCondition'>", _87a, "</span>&nbsp;", _87b);
                            node.title = [_879, " ", _87a, " ", _87b].join("");
                        }
                        node.innerHTML = _878.join("");
                        if (has("mozilla")) {
                            var tt = html.create("div", {
                                "style": "width: 100%; height: 100%; position: absolute; top: 0; left: 0; z-index: 9999;"
                            }, node);
                            tt.title = node.title;
                        }
                    },
                    updateRuleIndex: function (_87c) {
                        if (this._ruleIndex != _87c) {
                            this._ruleIndex = _87c;
                            if (this.isEmpty()) {
                                this.updateRuleTitle();
                            }
                        }
                    },
                    setAriaInfo: function (idx) {
                        var dss = _844.substitute,
                            nls = this.plugin.nls;
                        this._colSelect.domNode.setAttribute("aria-label", dss(nls.waiColumnSelectTemplate, [idx]));
                        this._condSelect.domNode.setAttribute("aria-label", dss(nls.waiConditionSelectTemplate, [idx]));
                        this._pane._removeCBoxBtn.domNode.setAttribute("aria-label", dss(nls.waiRemoveRuleButtonTemplate, [idx]));
                        this._index = idx;
                    },
                    _getUsableConditions: function (type) {
                        var _87d = lang.clone(this.dlg._dataTypeMap[type].conditions);
                        var _87e = (this.plugin.args.disabledConditions || {})[type];
                        var _87f = parseInt(this._colSelect.get("value"), 10);
                        var _880 = isNaN(_87f) ? (this.plugin.args.disabledConditions || {})["anycolumn"] : this.plugin.grid.layout.cells[_87f].disabledConditions;
                        if (!lang.isArray(_87e)) {
                            _87e = [];
                        }
                        if (!lang.isArray(_880)) {
                            _880 = [];
                        }
                        var arr = _87e.concat(_880);
                        if (arr.length) {
                            var _881 = {};
                            _840.forEach(arr, function (c) {
                                if (lang.isString(c)) {
                                    _881[c.toLowerCase()] = true;
                                }
                            });
                            return _840.filter(_87d, function (_882) {
                                return !(_882.value in _881);
                            });
                        }
                        return _87d;
                    },
                    _setConditionsByType: function (type) {
                        var _883 = this._condSelect;
                        _883.removeOption(_883.options);
                        _883.addOption(this._getUsableConditions(type));
                        this._showSelectOrLabel(this._condSelect, this._condSelectAlt);
                    },
                    _setValueBoxByType: function (type) {
                        if (this._curValueBox) {
                            this.valueNode.removeChild(this._curValueBox.domNode);
                            try {
                                this._curValueBox.destroyRecursive();
                            } catch (e) {}
                            delete this._curValueBox;
                        }
                        var _884 = this.dlg._dataTypeMap[type].valueBoxCls[this._getValueBoxClsInfo(this._colSelect.get("value"), type)],
                            _885 = this._getValueBoxArgByType(type);
                        this._curValueBox = this[this._isRange ? "_createRangeBox" : "_createValueBox"](_884, _885);
                        this.valueNode.appendChild(this._curValueBox.domNode);
                        this._curValueBox.domNode.setAttribute("aria-label", _844.substitute(this.plugin.nls.waiValueBoxTemplate, [this._index]));
                        this.dlg.onRendered(this);
                    },
                    _getValueBoxArgByType: function (type) {
                        var g = this.plugin.grid,
                            cell = g.layout.cells[parseInt(this._colSelect.get("value"), 10)],
                            res = {
                                cbox: this
                            };
                        if (type == "string") {
                            if (cell && (cell.suggestion || cell.autoComplete)) {
                                html.mixin(res, {
                                    store: g.store,
                                    searchAttr: cell.field || cell.name,
                                    fetchProperties: {
                                        sort: [{
                                            "attribute": cell.field || cell.name
                                        }],
                                        query: g.query,
                                        queryOptions: g.queryOptions
                                    }
                                });
                            }
                        } else {
                            if (type == "boolean") {
                                html.mixin(res, this.dlg.builder.defaultArgs["boolean"]);
                            }
                        }
                        if (cell && cell.dataTypeArgs) {
                            html.mixin(res, cell.dataTypeArgs);
                        }
                        return res;
                    },
                    formatValue: function (type, cond, v) {
                        if (cond == "isempty") {
                            return "";
                        }
                        if (type == "date" || type == "time") {
                            var opt = {
                                selector: type
                            },
                                fmt = _845.format;
                            if (cond == "range") {
                                return _844.substitute(this.plugin.nls.rangeTemplate, [fmt(v.start, opt), fmt(v.end, opt)]);
                            }
                            return fmt(v, opt);
                        } else {
                            if (type == "boolean") {
                                return v ? this._curValueBox._lblTrue : this._curValueBox._lblFalse;
                            }
                        }
                        return v;
                    },
                    _getValueBoxClsInfo: function (_886, type) {
                        var cell = this.plugin.grid.layout.cells[parseInt(_886, 10)];
                        if (type == "string") {
                            return (cell && (cell.suggestion || cell.autoComplete)) ? "ac" : "dft";
                        }
                        return "dft";
                    }
                });
                var _887 = _83f("dojox.grid.enhanced.plugins.filter.UniqueComboBox", _848, {
                    _openResultList: function (_888) {
                        var _889 = {},
                            s = this.store,
                            _88a = this.searchAttr;
                        arguments[0] = _840.filter(_888, function (item) {
                            var key = s.getValue(item, _88a),
                                _88b = _889[key];
                            _889[key] = true;
                            return !_88b;
                        });
                        this.inherited(arguments);
                    },
                    _onKey: function (evt) {
                        if (evt.charOrCode === keys.ENTER && this._opened) {
                            _842.stop(evt);
                        }
                        this.inherited(arguments);
                    }
                });
                var _88c = _83f("dojox.grid.enhanced.plugins.filter.BooleanValueBox", [_850, _851, _852], {
                    templateString: _843("dojox.grid", "enhanced/templates/FilterBoolValueBox.html"),
                    widgetsInTemplate: true,
                    constructor: function (args) {
                        var nls = args.cbox.plugin.nls;
                        this._baseId = args.cbox.id;
                        this._lblTrue = args.trueLabel || nls.trueLabel || "true";
                        this._lblFalse = args.falseLabel || nls.falseLabel || "false";
                        this.args = args;
                    },
                    postCreate: function () {
                        this.onChange();
                    },
                    onChange: function () {},
                    get: function (prop) {
                        return this.rbTrue.get("checked");
                    },
                    set: function (prop, v) {
                        this.inherited(arguments);
                        if (prop == "value") {
                            this.rbTrue.set("checked", !! v);
                            this.rbFalse.set("checked", !v);
                        }
                    }
                });
                var _88d = _83f("dojox.grid.enhanced.plugins.filter.FilterDefDialog", null, {
                    curColIdx: -1,
                    _relOpCls: "logicall",
                    _savedCriterias: null,
                    plugin: null,
                    constructor: function (args) {
                        var _88e = this.plugin = args.plugin;
                        this.builder = new _846();
                        this._setupData();
                        this._cboxes = [];
                        this.defaultType = _88e.args.defaultType || "string";
                        (this.filterDefPane = new _869({
                            "dlg": this
                        })).startup();
                        (this._defPane = new _847({
                            "refNode": this.plugin.grid.domNode,
                            "title": _88e.nls.filterDefDialogTitle,
                            "class": "dojoxGridFDTitlePane",
                            "iconClass": "dojoxGridFDPaneIcon",
                            "content": this.filterDefPane
                        })).startup();
                        this._defPane.connect(_88e.grid.layer("filter"), "filterDef", lang.hitch(this, "_onSetFilter"));
                        _88e.grid.setFilter = lang.hitch(this, "setFilter");
                        _88e.grid.getFilter = lang.hitch(this, "getFilter");
                        _88e.grid.getFilterRelation = lang.hitch(this, function () {
                            return this._relOpCls;
                        });
                        _88e.connect(_88e.grid.layout, "moveColumn", lang.hitch(this, "onMoveColumn"));
                    },
                    onMoveColumn: function (_88f, _890, _891, _892, _893) {
                        if (this._savedCriterias && _891 != _892) {
                            if (_893) {
                                --_892;
                            }
                            var min = _891 < _892 ? _891 : _892;
                            var max = _891 < _892 ? _892 : _891;
                            var dir = _892 > min ? 1 : -1;
                            _840.forEach(this._savedCriterias, function (sc) {
                                var idx = parseInt(sc.column, 10);
                                if (!isNaN(idx) && idx >= min && idx <= max) {
                                    sc.column = String(idx == _891 ? idx + (max - min) * dir : idx - dir);
                                }
                            });
                        }
                    },
                    destroy: function () {
                        this._defPane.destroyRecursive();
                        this._defPane = null;
                        this.filterDefPane = null;
                        this.builder = null;
                        this._dataTypeMap = null;
                        this._cboxes = null;
                        var g = this.plugin.grid;
                        g.setFilter = null;
                        g.getFilter = null;
                        g.getFilterRelation = null;
                        this.plugin = null;
                    },
                    _setupData: function () {
                        var nls = this.plugin.nls;
                        this._dataTypeMap = {
                            "number": {
                                valueBoxCls: {
                                    dft: _84a
                                },
                                conditions: [{
                                    label: nls.conditionEqual,
                                    value: "equalto",
                                    selected: true
                                }, {
                                    label: nls.conditionNotEqual,
                                    value: "notequalto"
                                }, {
                                    label: nls.conditionLess,
                                    value: "lessthan"
                                }, {
                                    label: nls.conditionLessEqual,
                                    value: "lessthanorequalto"
                                }, {
                                    label: nls.conditionLarger,
                                    value: "largerthan"
                                }, {
                                    label: nls.conditionLargerEqual,
                                    value: "largerthanorequalto"
                                }, {
                                    label: nls.conditionIsEmpty,
                                    value: "isempty"
                                }]
                            },
                            "string": {
                                valueBoxCls: {
                                    dft: _849,
                                    ac: _887
                                },
                                conditions: [{
                                    label: nls.conditionContains,
                                    value: "contains",
                                    selected: true
                                }, {
                                    label: nls.conditionIs,
                                    value: "equalto"
                                }, {
                                    label: nls.conditionStartsWith,
                                    value: "startswith"
                                }, {
                                    label: nls.conditionEndWith,
                                    value: "endswith"
                                }, {
                                    label: nls.conditionNotContain,
                                    value: "notcontains"
                                }, {
                                    label: nls.conditionIsNot,
                                    value: "notequalto"
                                }, {
                                    label: nls.conditionNotStartWith,
                                    value: "notstartswith"
                                }, {
                                    label: nls.conditionNotEndWith,
                                    value: "notendswith"
                                }, {
                                    label: nls.conditionIsEmpty,
                                    value: "isempty"
                                }]
                            },
                            "date": {
                                valueBoxCls: {
                                    dft: _84b
                                },
                                conditions: [{
                                    label: nls.conditionIs,
                                    value: "equalto",
                                    selected: true
                                }, {
                                    label: nls.conditionBefore,
                                    value: "lessthan"
                                }, {
                                    label: nls.conditionAfter,
                                    value: "largerthan"
                                }, {
                                    label: nls.conditionRange,
                                    value: "range"
                                }, {
                                    label: nls.conditionIsEmpty,
                                    value: "isempty"
                                }]
                            },
                            "time": {
                                valueBoxCls: {
                                    dft: _84c
                                },
                                conditions: [{
                                    label: nls.conditionIs,
                                    value: "equalto",
                                    selected: true
                                }, {
                                    label: nls.conditionBefore,
                                    value: "lessthan"
                                }, {
                                    label: nls.conditionAfter,
                                    value: "largerthan"
                                }, {
                                    label: nls.conditionRange,
                                    value: "range"
                                }, {
                                    label: nls.conditionIsEmpty,
                                    value: "isempty"
                                }]
                            },
                            "boolean": {
                                valueBoxCls: {
                                    dft: _88c
                                },
                                conditions: [{
                                    label: nls.conditionIs,
                                    value: "equalto",
                                    selected: true
                                }, {
                                    label: nls.conditionIsEmpty,
                                    value: "isempty"
                                }]
                            }
                        };
                    },
                    setFilter: function (_894, _895) {
                        _894 = _894 || [];
                        if (!lang.isArray(_894)) {
                            _894 = [_894];
                        }
                        var func = function () {
                                if (_894.length) {
                                    this._savedCriterias = _840.map(_894, function (rule) {
                                        var type = rule.type || this.defaultType;
                                        return {
                                            "type": type,
                                            "column": String(rule.column),
                                            "condition": rule.condition,
                                            "value": rule.value,
                                            "colTxt": this.getColumnLabelByValue(String(rule.column)),
                                            "condTxt": this.getConditionLabelByValue(type, rule.condition),
                                            "formattedVal": rule.formattedVal || rule.value
                                        };
                                    }, this);
                                    this._criteriasChanged = true;
                                    if (_895 === "logicall" || _895 === "logicany") {
                                        this._relOpCls = _895;
                                    }
                                    var _896 = _840.map(_894, this.getExprForCriteria, this);
                                    _896 = this.builder.buildExpression(_896.length == 1 ? _896[0] : {
                                        "op": this._relOpCls,
                                        "data": _896
                                    });
                                    this.plugin.grid.layer("filter").filterDef(_896);
                                    this.plugin.filterBar.toggleClearFilterBtn(false);
                                }
                                this._closeDlgAndUpdateGrid();
                            };
                        if (this._savedCriterias) {
                            this._clearWithoutRefresh = true;
                            var _897 = _841.connect(this, "clearFilter", this, function () {
                                _841.disconnect(_897);
                                this._clearWithoutRefresh = false;
                                func.apply(this);
                            });
                            this.onClearFilter();
                        } else {
                            func.apply(this);
                        }
                    },
                    getFilter: function () {
                        return lang.clone(this._savedCriterias) || [];
                    },
                    getColumnLabelByValue: function (v) {
                        var nls = this.plugin.nls;
                        if (v.toLowerCase() == "anycolumn") {
                            return nls["anyColumnOption"];
                        } else {
                            var cell = this.plugin.grid.layout.cells[parseInt(v, 10)];
                            return cell ? (cell.name || cell.field) : "";
                        }
                    },
                    getConditionLabelByValue: function (type, c) {
                        var _898 = this._dataTypeMap[type].conditions;
                        for (var i = _898.length - 1; i >= 0; --i) {
                            var cond = _898[i];
                            if (cond.value == c.toLowerCase()) {
                                return cond.label;
                            }
                        }
                        return "";
                    },
                    addCriteriaBoxes: function (cnt) {
                        if (typeof cnt != "number" || cnt <= 0) {
                            return;
                        }
                        var cbs = this._cboxes,
                            cc = this.filterDefPane.cboxContainer,
                            _899 = this.plugin.args.ruleCount,
                            len = cbs.length,
                            cbox;
                        if (_899 > 0 && len + cnt > _899) {
                            cnt = _899 - len;
                        }
                        for (; cnt > 0; --cnt) {
                            cbox = new _86a({
                                dlg: this
                            });
                            cbs.push(cbox);
                            cc.addChild(cbox);
                        }
                        cc.startup();
                        this._updatePane();
                        this._updateCBoxTitles();
                        cc.selectChild(cbs[cbs.length - 1]);
                        this.filterDefPane.criteriaPane.scrollTop = 1000000;
                        if (cbs.length === 4) {
                            if (has("ie") <= 6 && !this.__alreadyResizedForIE6) {
                                var size = html.position(cc.domNode);
                                size.w -= _854.getScrollbar().w;
                                cc.resize(size);
                                this.__alreadyResizedForIE6 = true;
                            } else {
                                cc.resize();
                            }
                        }
                    },
                    removeCriteriaBoxes: function (cnt, _89a) {
                        var cbs = this._cboxes,
                            cc = this.filterDefPane.cboxContainer,
                            len = cbs.length,
                            _89b = len - cnt,
                            end = len - 1,
                            cbox, _89c = _840.indexOf(cbs, cc.selectedChildWidget.content);
                        if (lang.isArray(cnt)) {
                            var i, _89d = cnt;
                            _89d.sort();
                            cnt = _89d.length;
                            for (i = len - 1; i >= 0 && _840.indexOf(_89d, i) >= 0; --i) {}
                            if (i >= 0) {
                                if (i != _89c) {
                                    cc.selectChild(cbs[i]);
                                }
                                for (i = cnt - 1; i >= 0; --i) {
                                    if (_89d[i] >= 0 && _89d[i] < len) {
                                        cc.removeChild(cbs[_89d[i]]);
                                        cbs.splice(_89d[i], 1);
                                    }
                                }
                            }
                            _89b = cbs.length;
                        } else {
                            if (_89a === true) {
                                if (cnt >= 0 && cnt < len) {
                                    _89b = end = cnt;
                                    cnt = 1;
                                } else {
                                    return;
                                }
                            } else {
                                if (cnt instanceof _86a) {
                                    cbox = cnt;
                                    cnt = 1;
                                    _89b = end = _840.indexOf(cbs, cbox);
                                } else {
                                    if (typeof cnt != "number" || cnt <= 0) {
                                        return;
                                    } else {
                                        if (cnt >= len) {
                                            cnt = end;
                                            _89b = 1;
                                        }
                                    }
                                }
                            }
                            if (end < _89b) {
                                return;
                            }
                            if (_89c >= _89b && _89c <= end) {
                                cc.selectChild(cbs[_89b ? _89b - 1 : end + 1]);
                            }
                            for (; end >= _89b; --end) {
                                cc.removeChild(cbs[end]);
                            }
                            cbs.splice(_89b, cnt);
                        }
                        this._updatePane();
                        this._updateCBoxTitles();
                        if (cbs.length === 3) {
                            cc.resize();
                        }
                    },
                    getCriteria: function (idx) {
                        if (typeof idx != "number") {
                            return this._savedCriterias ? this._savedCriterias.length : 0;
                        }
                        if (this._savedCriterias && this._savedCriterias[idx]) {
                            return lang.mixin({
                                relation: this._relOpCls == "logicall" ? this.plugin.nls.and : this.plugin.nls.or
                            }, this._savedCriterias[idx]);
                        }
                        return null;
                    },
                    getExprForCriteria: function (rule) {
                        if (rule.column == "anycolumn") {
                            var _89e = _840.filter(this.plugin.grid.layout.cells, function (cell) {
                                return !(cell.filterable === false || cell.hidden);
                            });
                            return {
                                "op": "logicany",
                                "data": _840.map(_89e, function (cell) {
                                    return this.getExprForColumn(rule.value, cell.index, rule.type, rule.condition);
                                }, this)
                            };
                        } else {
                            return this.getExprForColumn(rule.value, rule.column, rule.type, rule.condition);
                        }
                    },
                    getExprForColumn: function (_89f, _8a0, type, _8a1) {
                        _8a0 = parseInt(_8a0, 10);
                        var cell = this.plugin.grid.layout.cells[_8a0],
                            _8a2 = cell.field || cell.name,
                            obj = {
                                "datatype": type || this.getColumnType(_8a0),
                                "args": cell.dataTypeArgs,
                                "isColumn": true
                            },
                            _8a3 = [lang.mixin({
                                "data": this.plugin.args.isServerSide ? _8a2 : cell
                            }, obj)];
                        obj.isColumn = false;
                        if (_8a1 == "range") {
                            _8a3.push(lang.mixin({
                                "data": _89f.start
                            }, obj), lang.mixin({
                                "data": _89f.end
                            }, obj));
                        } else {
                            if (_8a1 != "isempty") {
                                _8a3.push(lang.mixin({
                                    "data": _89f
                                }, obj));
                            }
                        }
                        return {
                            "op": _8a1,
                            "data": _8a3
                        };
                    },
                    getColumnType: function (_8a4) {
                        var cell = this.plugin.grid.layout.cells[parseInt(_8a4, 10)];
                        if (!cell || !cell.datatype) {
                            return this.defaultType;
                        }
                        var type = String(cell.datatype).toLowerCase();
                        return this._dataTypeMap[type] ? type : this.defaultType;
                    },
                    clearFilter: function (_8a5) {
                        if (!this._savedCriterias) {
                            return;
                        }
                        this._savedCriterias = null;
                        this.plugin.grid.layer("filter").filterDef(null);
                        try {
                            this.plugin.filterBar.toggleClearFilterBtn(true);
                            this.filterDefPane._clearFilterBtn.set("disabled", true);
                            this.removeCriteriaBoxes(this._cboxes.length - 1);
                            this._cboxes[0].load({});
                        } catch (e) {}
                        if (_8a5) {
                            this.closeDialog();
                        } else {
                            this._closeDlgAndUpdateGrid();
                        }
                    },
                    showDialog: function (_8a6) {
                        this._defPane.show();
                        this.plugin.filterStatusTip.closeDialog();
                        this._prepareDialog(_8a6);
                    },
                    closeDialog: function () {
                        if (this._defPane.open) {
                            this._defPane.hide();
                        }
                    },
                    onFilter: function (e) {
                        if (this.canFilter()) {
                            this._defineFilter();
                            this._closeDlgAndUpdateGrid();
                            this.plugin.filterBar.toggleClearFilterBtn(false);
                        }
                    },
                    onClearFilter: function (e) {
                        if (this._savedCriterias) {
                            if (this._savedCriterias.length >= this.plugin.ruleCountToConfirmClearFilter) {
                                this.plugin.clearFilterDialog.show();
                            } else {
                                this.clearFilter(this._clearWithoutRefresh);
                            }
                        }
                    },
                    onCancel: function (e) {
                        var sc = this._savedCriterias;
                        var cbs = this._cboxes;
                        if (sc) {
                            this.addCriteriaBoxes(sc.length - cbs.length);
                            this.removeCriteriaBoxes(cbs.length - sc.length);
                            _840.forEach(sc, function (c, i) {
                                cbs[i].load(c);
                            });
                        } else {
                            this.removeCriteriaBoxes(cbs.length - 1);
                            cbs[0].load({});
                        }
                        this.closeDialog();
                    },
                    onRendered: function (cbox) {
                        if (!has("ff")) {
                            var _8a7 = _855._getTabNavigable(html.byId(cbox.domNode));
                            _853.focus(_8a7.lowest || _8a7.first);
                        } else {
                            var dp = this._defPane;
                            dp._getFocusItems(dp.domNode);
                            _853.focus(dp._firstFocusItem);
                        }
                    },
                    _onSetFilter: function (_8a8) {
                        if (_8a8 === null && this._savedCriterias) {
                            this.clearFilter();
                        }
                    },
                    _prepareDialog: function (_8a9) {
                        var sc = this._savedCriterias,
                            cbs = this._cboxes,
                            i, cbox;
                        this.curColIdx = _8a9;
                        if (!sc) {
                            if (cbs.length === 0) {
                                this.addCriteriaBoxes(1);
                            } else {
                                for (i = 0;
                                (cbox = cbs[i]); ++i) {
                                    cbox.changeCurrentColumn();
                                }
                            }
                        } else {
                            if (this._criteriasChanged) {
                                this.filterDefPane._relSelect.set("value", this._relOpCls === "logicall" ? "0" : "1");
                                this._criteriasChanged = false;
                                var _8aa = sc.length > cbs.length ? sc.length - cbs.length : 0;
                                this.addCriteriaBoxes(_8aa);
                                this.removeCriteriaBoxes(cbs.length - sc.length);
                                this.filterDefPane._clearFilterBtn.set("disabled", false);
                                for (i = 0; i < cbs.length - _8aa; ++i) {
                                    cbs[i].load(sc[i]);
                                }
                                if (_8aa > 0) {
                                    var _8ab = [],
                                        _8ac = _841.connect(this, "onRendered", function (cbox) {
                                            var i = _840.indexOf(cbs, cbox);
                                            if (!_8ab[i]) {
                                                _8ab[i] = true;
                                                if (--_8aa === 0) {
                                                    _841.disconnect(_8ac);
                                                }
                                                cbox.load(sc[i]);
                                            }
                                        });
                                }
                            }
                        }
                        this.filterDefPane.cboxContainer.resize();
                    },
                    _defineFilter: function () {
                        var cbs = this._cboxes,
                            _8ad = function (_8ae) {
                                return _840.filter(_840.map(cbs, function (cbox) {
                                    return cbox[_8ae]();
                                }), function (_8af) {
                                    return !!_8af;
                                });
                            },
                            _8b0 = _8ad("getExpr");
                        this._savedCriterias = _8ad("save");
                        _8b0 = _8b0.length == 1 ? _8b0[0] : {
                            "op": this._relOpCls,
                            "data": _8b0
                        };
                        _8b0 = this.builder.buildExpression(_8b0);
                        this.plugin.grid.layer("filter").filterDef(_8b0);
                        this.filterDefPane._clearFilterBtn.set("disabled", false);
                    },
                    _updateCBoxTitles: function () {
                        for (var cbs = this._cboxes, i = cbs.length; i > 0; --i) {
                            cbs[i - 1].updateRuleIndex(i);
                            cbs[i - 1].setAriaInfo(i);
                        }
                    },
                    _updatePane: function () {
                        var cbs = this._cboxes,
                            _8b1 = this.filterDefPane;
                        _8b1._addCBoxBtn.set("disabled", cbs.length == this.plugin.args.ruleCount);
                        _8b1._filterBtn.set("disabled", !this.canFilter());
                    },
                    canFilter: function () {
                        return _840.filter(this._cboxes, function (cbox) {
                            return !cbox.isEmpty();
                        }).length > 0;
                    },
                    _closeDlgAndUpdateGrid: function () {
                        this.closeDialog();
                        var g = this.plugin.grid;
                        g.showMessage(g.loadingMessage);
                        setTimeout(lang.hitch(g, g._refresh), this._defPane.duration + 10);
                    }
                });
                return _88d;
            });
        },
        "dojo/date/locale": function () {
            define(["../_base/kernel", "../_base/lang", "../_base/array", "../date", "../cldr/supplemental", "../regexp", "../string", "../i18n!../cldr/nls/gregorian"], function (dojo, lang, _8b2, date, cldr, _8b3, _8b4, _8b5) {
                lang.getObject("date.locale", true, dojo);

                function _8b6(_8b7, _8b8, _8b9, _8ba) {
                    return _8ba.replace(/([a-z])\1*/ig, function (_8bb) {
                        var s, pad, c = _8bb.charAt(0),
                            l = _8bb.length,
                            _8bc = ["abbr", "wide", "narrow"];
                        switch (c) {
                        case "G":
                            s = _8b8[(l < 4) ? "eraAbbr" : "eraNames"][_8b7.getFullYear() < 0 ? 0 : 1];
                            break;
                        case "y":
                            s = _8b7.getFullYear();
                            switch (l) {
                            case 1:
                                break;
                            case 2:
                                if (!_8b9.fullYear) {
                                    s = String(s);
                                    s = s.substr(s.length - 2);
                                    break;
                                }
                            default:
                                pad = true;
                            }
                            break;
                        case "Q":
                        case "q":
                            s = Math.ceil((_8b7.getMonth() + 1) / 3);
                            pad = true;
                            break;
                        case "M":
                            var m = _8b7.getMonth();
                            if (l < 3) {
                                s = m + 1;
                                pad = true;
                            } else {
                                var _8bd = ["months", "format", _8bc[l - 3]].join("-");
                                s = _8b8[_8bd][m];
                            }
                            break;
                        case "w":
                            var _8be = 0;
                            s = dojo.date.locale._getWeekOfYear(_8b7, _8be);
                            pad = true;
                            break;
                        case "d":
                            s = _8b7.getDate();
                            pad = true;
                            break;
                        case "D":
                            s = dojo.date.locale._getDayOfYear(_8b7);
                            pad = true;
                            break;
                        case "E":
                            var d = _8b7.getDay();
                            if (l < 3) {
                                s = d + 1;
                                pad = true;
                            } else {
                                var _8bf = ["days", "format", _8bc[l - 3]].join("-");
                                s = _8b8[_8bf][d];
                            }
                            break;
                        case "a":
                            var _8c0 = (_8b7.getHours() < 12) ? "am" : "pm";
                            s = _8b9[_8c0] || _8b8["dayPeriods-format-wide-" + _8c0];
                            break;
                        case "h":
                        case "H":
                        case "K":
                        case "k":
                            var h = _8b7.getHours();
                            switch (c) {
                            case "h":
                                s = (h % 12) || 12;
                                break;
                            case "H":
                                s = h;
                                break;
                            case "K":
                                s = (h % 12);
                                break;
                            case "k":
                                s = h || 24;
                                break;
                            }
                            pad = true;
                            break;
                        case "m":
                            s = _8b7.getMinutes();
                            pad = true;
                            break;
                        case "s":
                            s = _8b7.getSeconds();
                            pad = true;
                            break;
                        case "S":
                            s = Math.round(_8b7.getMilliseconds() * Math.pow(10, l - 3));
                            pad = true;
                            break;
                        case "v":
                        case "z":
                            s = dojo.date.locale._getZone(_8b7, true, _8b9);
                            if (s) {
                                break;
                            }
                            l = 4;
                        case "Z":
                            var _8c1 = dojo.date.locale._getZone(_8b7, false, _8b9);
                            var tz = [(_8c1 <= 0 ? "+" : "-"), _8b4.pad(Math.floor(Math.abs(_8c1) / 60), 2), _8b4.pad(Math.abs(_8c1) % 60, 2)];
                            if (l == 4) {
                                tz.splice(0, 0, "GMT");
                                tz.splice(3, 0, ":");
                            }
                            s = tz.join("");
                            break;
                        default:
                            throw new Error("dojo.date.locale.format: invalid pattern char: " + _8ba);
                        }
                        if (pad) {
                            s = _8b4.pad(s, l);
                        }
                        return s;
                    });
                };
                dojo.date.locale._getZone = function (_8c2, _8c3, _8c4) {
                    if (_8c3) {
                        return date.getTimezoneName(_8c2);
                    } else {
                        return _8c2.getTimezoneOffset();
                    }
                };
                dojo.date.locale.format = function (_8c5, _8c6) {
                    _8c6 = _8c6 || {};
                    var _8c7 = dojo.i18n.normalizeLocale(_8c6.locale),
                        _8c8 = _8c6.formatLength || "short",
                        _8c9 = dojo.date.locale._getGregorianBundle(_8c7),
                        str = [],
                        _8ca = lang.hitch(this, _8b6, _8c5, _8c9, _8c6);
                    if (_8c6.selector == "year") {
                        return _8cb(_8c9["dateFormatItem-yyyy"] || "yyyy", _8ca);
                    }
                    var _8cc;
                    if (_8c6.selector != "date") {
                        _8cc = _8c6.timePattern || _8c9["timeFormat-" + _8c8];
                        if (_8cc) {
                            str.push(_8cb(_8cc, _8ca));
                        }
                    }
                    if (_8c6.selector != "time") {
                        _8cc = _8c6.datePattern || _8c9["dateFormat-" + _8c8];
                        if (_8cc) {
                            str.push(_8cb(_8cc, _8ca));
                        }
                    }
                    return str.length == 1 ? str[0] : _8c9["dateTimeFormat-" + _8c8].replace(/\{(\d+)\}/g, function (_8cd, key) {
                        return str[key];
                    });
                };
                dojo.date.locale.regexp = function (_8ce) {
                    return dojo.date.locale._parseInfo(_8ce).regexp;
                };
                dojo.date.locale._parseInfo = function (_8cf) {
                    _8cf = _8cf || {};
                    var _8d0 = dojo.i18n.normalizeLocale(_8cf.locale),
                        _8d1 = dojo.date.locale._getGregorianBundle(_8d0),
                        _8d2 = _8cf.formatLength || "short",
                        _8d3 = _8cf.datePattern || _8d1["dateFormat-" + _8d2],
                        _8d4 = _8cf.timePattern || _8d1["timeFormat-" + _8d2],
                        _8d5;
                    if (_8cf.selector == "date") {
                        _8d5 = _8d3;
                    } else {
                        if (_8cf.selector == "time") {
                            _8d5 = _8d4;
                        } else {
                            _8d5 = _8d1["dateTimeFormat-" + _8d2].replace(/\{(\d+)\}/g, function (_8d6, key) {
                                return [_8d4, _8d3][key];
                            });
                        }
                    }
                    var _8d7 = [],
                        re = _8cb(_8d5, lang.hitch(this, _8d8, _8d7, _8d1, _8cf));
                    return {
                        regexp: re,
                        tokens: _8d7,
                        bundle: _8d1
                    };
                };
                dojo.date.locale.parse = function (_8d9, _8da) {
                    var _8db = /[\u200E\u200F\u202A\u202E]/g,
                        info = dojo.date.locale._parseInfo(_8da),
                        _8dc = info.tokens,
                        _8dd = info.bundle,
                        re = new RegExp("^" + info.regexp.replace(_8db, "") + "$", info.strict ? "" : "i"),
                        _8de = re.exec(_8d9 && _8d9.replace(_8db, ""));
                    if (!_8de) {
                        return null;
                    }
                    var _8df = ["abbr", "wide", "narrow"],
                        _8e0 = [1970, 0, 1, 0, 0, 0, 0],
                        amPm = "",
                        _8e1 = dojo.every(_8de, function (v, i) {
                            if (!i) {
                                return true;
                            }
                            var _8e2 = _8dc[i - 1];
                            var l = _8e2.length;
                            switch (_8e2.charAt(0)) {
                            case "y":
                                if (l != 2 && _8da.strict) {
                                    _8e0[0] = v;
                                } else {
                                    if (v < 100) {
                                        v = Number(v);
                                        var year = "" + new Date().getFullYear(),
                                            _8e3 = year.substring(0, 2) * 100,
                                            _8e4 = Math.min(Number(year.substring(2, 4)) + 20, 99);
                                        _8e0[0] = (v < _8e4) ? _8e3 + v : _8e3 - 100 + v;
                                    } else {
                                        if (_8da.strict) {
                                            return false;
                                        }
                                        _8e0[0] = v;
                                    }
                                }
                                break;
                            case "M":
                                if (l > 2) {
                                    var _8e5 = _8dd["months-format-" + _8df[l - 3]].concat();
                                    if (!_8da.strict) {
                                        v = v.replace(".", "").toLowerCase();
                                        _8e5 = dojo.map(_8e5, function (s) {
                                            return s.replace(".", "").toLowerCase();
                                        });
                                    }
                                    v = dojo.indexOf(_8e5, v);
                                    if (v == -1) {
                                        return false;
                                    }
                                } else {
                                    v--;
                                }
                                _8e0[1] = v;
                                break;
                            case "E":
                            case "e":
                                var days = _8dd["days-format-" + _8df[l - 3]].concat();
                                if (!_8da.strict) {
                                    v = v.toLowerCase();
                                    days = dojo.map(days, function (d) {
                                        return d.toLowerCase();
                                    });
                                }
                                v = dojo.indexOf(days, v);
                                if (v == -1) {
                                    return false;
                                }
                                break;
                            case "D":
                                _8e0[1] = 0;
                            case "d":
                                _8e0[2] = v;
                                break;
                            case "a":
                                var am = _8da.am || _8dd["dayPeriods-format-wide-am"],
                                    pm = _8da.pm || _8dd["dayPeriods-format-wide-pm"];
                                if (!_8da.strict) {
                                    var _8e6 = /\./g;
                                    v = v.replace(_8e6, "").toLowerCase();
                                    am = am.replace(_8e6, "").toLowerCase();
                                    pm = pm.replace(_8e6, "").toLowerCase();
                                }
                                if (_8da.strict && v != am && v != pm) {
                                    return false;
                                }
                                amPm = (v == pm) ? "p" : (v == am) ? "a" : "";
                                break;
                            case "K":
                                if (v == 24) {
                                    v = 0;
                                }
                            case "h":
                            case "H":
                            case "k":
                                if (v > 23) {
                                    return false;
                                }
                                _8e0[3] = v;
                                break;
                            case "m":
                                _8e0[4] = v;
                                break;
                            case "s":
                                _8e0[5] = v;
                                break;
                            case "S":
                                _8e0[6] = v;
                            }
                            return true;
                        });
                    var _8e7 = +_8e0[3];
                    if (amPm === "p" && _8e7 < 12) {
                        _8e0[3] = _8e7 + 12;
                    } else {
                        if (amPm === "a" && _8e7 == 12) {
                            _8e0[3] = 0;
                        }
                    }
                    var _8e8 = new Date(_8e0[0], _8e0[1], _8e0[2], _8e0[3], _8e0[4], _8e0[5], _8e0[6]);
                    if (_8da.strict) {
                        _8e8.setFullYear(_8e0[0]);
                    }
                    var _8e9 = _8dc.join(""),
                        _8ea = _8e9.indexOf("d") != -1,
                        _8eb = _8e9.indexOf("M") != -1;
                    if (!_8e1 || (_8eb && _8e8.getMonth() > _8e0[1]) || (_8ea && _8e8.getDate() > _8e0[2])) {
                        return null;
                    }
                    if ((_8eb && _8e8.getMonth() < _8e0[1]) || (_8ea && _8e8.getDate() < _8e0[2])) {
                        _8e8 = date.add(_8e8, "hour", 1);
                    }
                    return _8e8;
                };

                function _8cb(_8ec, _8ed, _8ee, _8ef) {
                    var _8f0 = function (x) {
                            return x;
                        };
                    _8ed = _8ed || _8f0;
                    _8ee = _8ee || _8f0;
                    _8ef = _8ef || _8f0;
                    var _8f1 = _8ec.match(/(''|[^'])+/g),
                        _8f2 = _8ec.charAt(0) == "'";
                    dojo.forEach(_8f1, function (_8f3, i) {
                        if (!_8f3) {
                            _8f1[i] = "";
                        } else {
                            _8f1[i] = (_8f2 ? _8ee : _8ed)(_8f3.replace(/''/g, "'"));
                            _8f2 = !_8f2;
                        }
                    });
                    return _8ef(_8f1.join(""));
                };

                function _8d8(_8f4, _8f5, _8f6, _8f7) {
                    _8f7 = _8b3.escapeString(_8f7);
                    if (!_8f6.strict) {
                        _8f7 = _8f7.replace(" a", " ?a");
                    }
                    return _8f7.replace(/([a-z])\1*/ig, function (_8f8) {
                        var s, c = _8f8.charAt(0),
                            l = _8f8.length,
                            p2 = "",
                            p3 = "";
                        if (_8f6.strict) {
                            if (l > 1) {
                                p2 = "0" + "{" + (l - 1) + "}";
                            }
                            if (l > 2) {
                                p3 = "0" + "{" + (l - 2) + "}";
                            }
                        } else {
                            p2 = "0?";
                            p3 = "0{0,2}";
                        }
                        switch (c) {
                        case "y":
                            s = "\\d{2,4}";
                            break;
                        case "M":
                            s = (l > 2) ? "\\S+?" : "1[0-2]|" + p2 + "[1-9]";
                            break;
                        case "D":
                            s = "[12][0-9][0-9]|3[0-5][0-9]|36[0-6]|" + p2 + "[1-9][0-9]|" + p3 + "[1-9]";
                            break;
                        case "d":
                            s = "3[01]|[12]\\d|" + p2 + "[1-9]";
                            break;
                        case "w":
                            s = "[1-4][0-9]|5[0-3]|" + p2 + "[1-9]";
                            break;
                        case "E":
                            s = "\\S+";
                            break;
                        case "h":
                            s = "1[0-2]|" + p2 + "[1-9]";
                            break;
                        case "k":
                            s = "1[01]|" + p2 + "\\d";
                            break;
                        case "H":
                            s = "1\\d|2[0-3]|" + p2 + "\\d";
                            break;
                        case "K":
                            s = "1\\d|2[0-4]|" + p2 + "[1-9]";
                            break;
                        case "m":
                        case "s":
                            s = "[0-5]\\d";
                            break;
                        case "S":
                            s = "\\d{" + l + "}";
                            break;
                        case "a":
                            var am = _8f6.am || _8f5["dayPeriods-format-wide-am"],
                                pm = _8f6.pm || _8f5["dayPeriods-format-wide-pm"];
                            s = am + "|" + pm;
                            if (!_8f6.strict) {
                                if (am != am.toLowerCase()) {
                                    s += "|" + am.toLowerCase();
                                }
                                if (pm != pm.toLowerCase()) {
                                    s += "|" + pm.toLowerCase();
                                }
                                if (s.indexOf(".") != -1) {
                                    s += "|" + s.replace(/\./g, "");
                                }
                            }
                            s = s.replace(/\./g, "\\.");
                            break;
                        default:
                            s = ".*";
                        }
                        if (_8f4) {
                            _8f4.push(_8f8);
                        }
                        return "(" + s + ")";
                    }).replace(/[\xa0 ]/g, "[\\s\\xa0]");
                };
                var _8f9 = [];
                dojo.date.locale.addCustomFormats = function (_8fa, _8fb) {
                    _8f9.push({
                        pkg: _8fa,
                        name: _8fb
                    });
                };
                dojo.date.locale._getGregorianBundle = function (_8fc) {
                    var _8fd = {};
                    dojo.forEach(_8f9, function (desc) {
                        var _8fe = dojo.i18n.getLocalization(desc.pkg, desc.name, _8fc);
                        _8fd = lang.mixin(_8fd, _8fe);
                    }, this);
                    return _8fd;
                };
                dojo.date.locale.addCustomFormats("dojo.cldr", "gregorian");
                dojo.date.locale.getNames = function (item, type, _8ff, _900) {
                    var _901, _902 = dojo.date.locale._getGregorianBundle(_900),
                        _903 = [item, _8ff, type];
                    if (_8ff == "standAlone") {
                        var key = _903.join("-");
                        _901 = _902[key];
                        if (_901[0] == 1) {
                            _901 = undefined;
                        }
                    }
                    _903[1] = "format";
                    return (_901 || _902[_903.join("-")]).concat();
                };
                dojo.date.locale.isWeekend = function (_904, _905) {
                    var _906 = cldr.getWeekend(_905),
                        day = (_904 || new Date()).getDay();
                    if (_906.end < _906.start) {
                        _906.end += 7;
                        if (day < _906.start) {
                            day += 7;
                        }
                    }
                    return day >= _906.start && day <= _906.end;
                };
                dojo.date.locale._getDayOfYear = function (_907) {
                    return date.difference(new Date(_907.getFullYear(), 0, 1, _907.getHours()), _907) + 1;
                };
                dojo.date.locale._getWeekOfYear = function (_908, _909) {
                    if (arguments.length == 1) {
                        _909 = 0;
                    }
                    var _90a = new Date(_908.getFullYear(), 0, 1).getDay(),
                        adj = (_90a - _909 + 7) % 7,
                        week = Math.floor((dojo.date.locale._getDayOfYear(_908) + adj - 1) / 7);
                    if (_90a == _909) {
                        week++;
                    }
                    return week;
                };
                return dojo.date.locale;
            });
        },
        "dojo/date": function () {
            define(["./_base/kernel", "./_base/lang"], function (dojo, lang) {
                lang.getObject("date", true, dojo);
                dojo.date.getDaysInMonth = function (_90b) {
                    var _90c = _90b.getMonth();
                    var days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
                    if (_90c == 1 && dojo.date.isLeapYear(_90b)) {
                        return 29;
                    }
                    return days[_90c];
                };
                dojo.date.isLeapYear = function (_90d) {
                    var year = _90d.getFullYear();
                    return !(year % 400) || (!(year % 4) && !! (year % 100));
                };
                dojo.date.getTimezoneName = function (_90e) {
                    var str = _90e.toString();
                    var tz = "";
                    var _90f;
                    var pos = str.indexOf("(");
                    if (pos > -1) {
                        tz = str.substring(++pos, str.indexOf(")"));
                    } else {
                        var pat = /([A-Z\/]+) \d{4}$/;
                        if ((_90f = str.match(pat))) {
                            tz = _90f[1];
                        } else {
                            str = _90e.toLocaleString();
                            pat = / ([A-Z\/]+)$/;
                            if ((_90f = str.match(pat))) {
                                tz = _90f[1];
                            }
                        }
                    }
                    return (tz == "AM" || tz == "PM") ? "" : tz;
                };
                dojo.date.compare = function (_910, _911, _912) {
                    _910 = new Date(+_910);
                    _911 = new Date(+(_911 || new Date()));
                    if (_912 == "date") {
                        _910.setHours(0, 0, 0, 0);
                        _911.setHours(0, 0, 0, 0);
                    } else {
                        if (_912 == "time") {
                            _910.setFullYear(0, 0, 0);
                            _911.setFullYear(0, 0, 0);
                        }
                    }
                    if (_910 > _911) {
                        return 1;
                    }
                    if (_910 < _911) {
                        return -1;
                    }
                    return 0;
                };
                dojo.date.add = function (date, _913, _914) {
                    var sum = new Date(+date);
                    var _915 = false;
                    var _916 = "Date";
                    switch (_913) {
                    case "day":
                        break;
                    case "weekday":
                        var days, _917;
                        var mod = _914 % 5;
                        if (!mod) {
                            days = (_914 > 0) ? 5 : -5;
                            _917 = (_914 > 0) ? ((_914 - 5) / 5) : ((_914 + 5) / 5);
                        } else {
                            days = mod;
                            _917 = parseInt(_914 / 5);
                        }
                        var strt = date.getDay();
                        var adj = 0;
                        if (strt == 6 && _914 > 0) {
                            adj = 1;
                        } else {
                            if (strt == 0 && _914 < 0) {
                                adj = -1;
                            }
                        }
                        var trgt = strt + days;
                        if (trgt == 0 || trgt == 6) {
                            adj = (_914 > 0) ? 2 : -2;
                        }
                        _914 = (7 * _917) + days + adj;
                        break;
                    case "year":
                        _916 = "FullYear";
                        _915 = true;
                        break;
                    case "week":
                        _914 *= 7;
                        break;
                    case "quarter":
                        _914 *= 3;
                    case "month":
                        _915 = true;
                        _916 = "Month";
                        break;
                    default:
                        _916 = "UTC" + _913.charAt(0).toUpperCase() + _913.substring(1) + "s";
                    }
                    if (_916) {
                        sum["set" + _916](sum["get" + _916]() + _914);
                    }
                    if (_915 && (sum.getDate() < date.getDate())) {
                        sum.setDate(0);
                    }
                    return sum;
                };
                dojo.date.difference = function (_918, _919, _91a) {
                    _919 = _919 || new Date();
                    _91a = _91a || "day";
                    var _91b = _919.getFullYear() - _918.getFullYear();
                    var _91c = 1;
                    switch (_91a) {
                    case "quarter":
                        var m1 = _918.getMonth();
                        var m2 = _919.getMonth();
                        var q1 = Math.floor(m1 / 3) + 1;
                        var q2 = Math.floor(m2 / 3) + 1;
                        q2 += (_91b * 4);
                        _91c = q2 - q1;
                        break;
                    case "weekday":
                        var days = Math.round(dojo.date.difference(_918, _919, "day"));
                        var _91d = parseInt(dojo.date.difference(_918, _919, "week"));
                        var mod = days % 7;
                        if (mod == 0) {
                            days = _91d * 5;
                        } else {
                            var adj = 0;
                            var aDay = _918.getDay();
                            var bDay = _919.getDay();
                            _91d = parseInt(days / 7);
                            mod = days % 7;
                            var _91e = new Date(_918);
                            _91e.setDate(_91e.getDate() + (_91d * 7));
                            var _91f = _91e.getDay();
                            if (days > 0) {
                                switch (true) {
                                case aDay == 6:
                                    adj = -1;
                                    break;
                                case aDay == 0:
                                    adj = 0;
                                    break;
                                case bDay == 6:
                                    adj = -1;
                                    break;
                                case bDay == 0:
                                    adj = -2;
                                    break;
                                case (_91f + mod) > 5:
                                    adj = -2;
                                }
                            } else {
                                if (days < 0) {
                                    switch (true) {
                                    case aDay == 6:
                                        adj = 0;
                                        break;
                                    case aDay == 0:
                                        adj = 1;
                                        break;
                                    case bDay == 6:
                                        adj = 2;
                                        break;
                                    case bDay == 0:
                                        adj = 1;
                                        break;
                                    case (_91f + mod) < 0:
                                        adj = 2;
                                    }
                                }
                            }
                            days += adj;
                            days -= (_91d * 2);
                        }
                        _91c = days;
                        break;
                    case "year":
                        _91c = _91b;
                        break;
                    case "month":
                        _91c = (_919.getMonth() - _918.getMonth()) + (_91b * 12);
                        break;
                    case "week":
                        _91c = parseInt(dojo.date.difference(_918, _919, "day") / 7);
                        break;
                    case "day":
                        _91c /= 24;
                    case "hour":
                        _91c /= 60;
                    case "minute":
                        _91c /= 60;
                    case "second":
                        _91c /= 1000;
                    case "millisecond":
                        _91c *= _919.getTime() - _918.getTime();
                    }
                    return Math.round(_91c);
                };
                return dojo.date;
            });
        },
        "dojo/cldr/supplemental": function () {
            define(["../_base/kernel", "../_base/lang", "../i18n"], function (dojo, lang) {
                lang.getObject("cldr.supplemental", true, dojo);
                dojo.cldr.supplemental.getFirstDayOfWeek = function (_920) {
                    var _921 = {
                        mv: 5,
                        ae: 6,
                        af: 6,
                        bh: 6,
                        dj: 6,
                        dz: 6,
                        eg: 6,
                        er: 6,
                        et: 6,
                        iq: 6,
                        ir: 6,
                        jo: 6,
                        ke: 6,
                        kw: 6,
                        ly: 6,
                        ma: 6,
                        om: 6,
                        qa: 6,
                        sa: 6,
                        sd: 6,
                        so: 6,
                        sy: 6,
                        tn: 6,
                        ye: 6,
                        ar: 0,
                        as: 0,
                        az: 0,
                        bw: 0,
                        ca: 0,
                        cn: 0,
                        fo: 0,
                        ge: 0,
                        gl: 0,
                        gu: 0,
                        hk: 0,
                        il: 0,
                        "in": 0,
                        jm: 0,
                        jp: 0,
                        kg: 0,
                        kr: 0,
                        la: 0,
                        mh: 0,
                        mn: 0,
                        mo: 0,
                        mp: 0,
                        mt: 0,
                        nz: 0,
                        ph: 0,
                        pk: 0,
                        sg: 0,
                        th: 0,
                        tt: 0,
                        tw: 0,
                        um: 0,
                        us: 0,
                        uz: 0,
                        vi: 0,
                        zw: 0
                    };
                    var _922 = dojo.cldr.supplemental._region(_920);
                    var dow = _921[_922];
                    return (dow === undefined) ? 1 : dow;
                };
                dojo.cldr.supplemental._region = function (_923) {
                    _923 = dojo.i18n.normalizeLocale(_923);
                    var tags = _923.split("-");
                    var _924 = tags[1];
                    if (!_924) {
                        _924 = {
                            de: "de",
                            en: "us",
                            es: "es",
                            fi: "fi",
                            fr: "fr",
                            he: "il",
                            hu: "hu",
                            it: "it",
                            ja: "jp",
                            ko: "kr",
                            nl: "nl",
                            pt: "br",
                            sv: "se",
                            zh: "cn"
                        }[tags[0]];
                    } else {
                        if (_924.length == 4) {
                            _924 = tags[2];
                        }
                    }
                    return _924;
                };
                dojo.cldr.supplemental.getWeekend = function (_925) {
                    var _926 = {
                        "in": 0,
                        af: 4,
                        dz: 4,
                        ir: 4,
                        om: 4,
                        sa: 4,
                        ye: 4,
                        ae: 5,
                        bh: 5,
                        eg: 5,
                        il: 5,
                        iq: 5,
                        jo: 5,
                        kw: 5,
                        ly: 5,
                        ma: 5,
                        qa: 5,
                        sd: 5,
                        sy: 5,
                        tn: 5
                    };
                    var _927 = {
                        af: 5,
                        dz: 5,
                        ir: 5,
                        om: 5,
                        sa: 5,
                        ye: 5,
                        ae: 6,
                        bh: 5,
                        eg: 6,
                        il: 6,
                        iq: 6,
                        jo: 6,
                        kw: 6,
                        ly: 6,
                        ma: 6,
                        qa: 6,
                        sd: 6,
                        sy: 6,
                        tn: 6
                    };
                    var _928 = dojo.cldr.supplemental._region(_925);
                    var _929 = _926[_928];
                    var end = _927[_928];
                    if (_929 === undefined) {
                        _929 = 6;
                    }
                    if (end === undefined) {
                        end = 0;
                    }
                    return {
                        start: _929,
                        end: end
                    };
                };
                return dojo.cldr.supplemental;
            });
        },
        "dojo/regexp": function () {
            define(["./_base/kernel", "./_base/lang"], function (dojo, lang) {
                lang.getObject("regexp", true, dojo);
                dojo.regexp.escapeString = function (str, _92a) {
                    return str.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, function (ch) {
                        if (_92a && _92a.indexOf(ch) != -1) {
                            return ch;
                        }
                        return "\\" + ch;
                    });
                };
                dojo.regexp.buildGroupRE = function (arr, re, _92b) {
                    if (!(arr instanceof Array)) {
                        return re(arr);
                    }
                    var b = [];
                    for (var i = 0; i < arr.length; i++) {
                        b.push(re(arr[i]));
                    }
                    return dojo.regexp.group(b.join("|"), _92b);
                };
                dojo.regexp.group = function (_92c, _92d) {
                    return "(" + (_92d ? "?:" : "") + _92c + ")";
                };
                return dojo.regexp;
            });
        },
        "dojo/cldr/nls/gregorian": function () {
            define({
                root: {
                    "months-format-narrow": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],
                    "quarters-standAlone-narrow": ["1", "2", "3", "4"],
                    "field-weekday": "Day of the Week",
                    "dateFormatItem-yQQQ": "y QQQ",
                    "dateFormatItem-yMEd": "EEE, y-M-d",
                    "dateFormatItem-MMMEd": "E MMM d",
                    "eraNarrow": ["BCE", "CE"],
                    "dateTimeFormats-appendItem-Day-Of-Week": "{0} {1}",
                    "dateFormat-long": "y MMMM d",
                    "months-format-wide": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],
                    "dateTimeFormat-medium": "{1} {0}",
                    "dateFormatItem-EEEd": "d EEE",
                    "dayPeriods-format-wide-pm": "PM",
                    "dateFormat-full": "EEEE, y MMMM dd",
                    "dateFormatItem-Md": "M-d",
                    "dayPeriods-format-abbr-am": "AM",
                    "dateTimeFormats-appendItem-Second": "{0} ({2}: {1})",
                    "field-era": "Era",
                    "dateFormatItem-yM": "y-M",
                    "months-standAlone-wide": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],
                    "timeFormat-short": "HH:mm",
                    "quarters-format-wide": ["Q1", "Q2", "Q3", "Q4"],
                    "timeFormat-long": "HH:mm:ss z",
                    "field-year": "Year",
                    "dateFormatItem-yMMM": "y MMM",
                    "dateFormatItem-yQ": "y Q",
                    "dateTimeFormats-appendItem-Era": "{0} {1}",
                    "field-hour": "Hour",
                    "months-format-abbr": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],
                    "timeFormat-full": "HH:mm:ss zzzz",
                    "dateTimeFormats-appendItem-Week": "{0} ({2}: {1})",
                    "field-day-relative+0": "Today",
                    "field-day-relative+1": "Tomorrow",
                    "dateFormatItem-H": "HH",
                    "months-standAlone-abbr": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],
                    "quarters-format-abbr": ["Q1", "Q2", "Q3", "Q4"],
                    "quarters-standAlone-wide": ["Q1", "Q2", "Q3", "Q4"],
                    "dateFormatItem-M": "L",
                    "days-standAlone-wide": ["1", "2", "3", "4", "5", "6", "7"],
                    "timeFormat-medium": "HH:mm:ss",
                    "dateFormatItem-Hm": "HH:mm",
                    "quarters-standAlone-abbr": ["Q1", "Q2", "Q3", "Q4"],
                    "eraAbbr": ["BCE", "CE"],
                    "field-minute": "Minute",
                    "field-dayperiod": "Dayperiod",
                    "days-standAlone-abbr": ["1", "2", "3", "4", "5", "6", "7"],
                    "dateFormatItem-d": "d",
                    "dateFormatItem-ms": "mm:ss",
                    "quarters-format-narrow": ["1", "2", "3", "4"],
                    "field-day-relative+-1": "Yesterday",
                    "dateFormatItem-h": "h a",
                    "dateTimeFormat-long": "{1} {0}",
                    "dayPeriods-format-narrow-am": "AM",
                    "dateFormatItem-MMMd": "MMM d",
                    "dateFormatItem-MEd": "E, M-d",
                    "dateTimeFormat-full": "{1} {0}",
                    "field-day": "Day",
                    "days-format-wide": ["1", "2", "3", "4", "5", "6", "7"],
                    "field-zone": "Zone",
                    "dateTimeFormats-appendItem-Day": "{0} ({2}: {1})",
                    "dateFormatItem-y": "y",
                    "months-standAlone-narrow": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],
                    "dateFormatItem-hm": "h:mm a",
                    "dateTimeFormats-appendItem-Year": "{0} {1}",
                    "dateTimeFormats-appendItem-Hour": "{0} ({2}: {1})",
                    "dayPeriods-format-abbr-pm": "PM",
                    "days-format-abbr": ["1", "2", "3", "4", "5", "6", "7"],
                    "eraNames": ["BCE", "CE"],
                    "days-format-narrow": ["1", "2", "3", "4", "5", "6", "7"],
                    "days-standAlone-narrow": ["1", "2", "3", "4", "5", "6", "7"],
                    "dateFormatItem-MMM": "LLL",
                    "field-month": "Month",
                    "dateTimeFormats-appendItem-Quarter": "{0} ({2}: {1})",
                    "dayPeriods-format-wide-am": "AM",
                    "dateTimeFormats-appendItem-Month": "{0} ({2}: {1})",
                    "dateTimeFormats-appendItem-Minute": "{0} ({2}: {1})",
                    "dateFormat-short": "yyyy-MM-dd",
                    "field-second": "Second",
                    "dateFormatItem-yMMMEd": "EEE, y MMM d",
                    "dateTimeFormats-appendItem-Timezone": "{0} {1}",
                    "field-week": "Week",
                    "dateFormat-medium": "y MMM d",
                    "dayPeriods-format-narrow-pm": "PM",
                    "dateTimeFormat-short": "{1} {0}",
                    "dateFormatItem-Hms": "HH:mm:ss",
                    "dateFormatItem-hms": "h:mm:ss a"
                },
                "ar": true,
                "ca": true,
                "cs": true,
                "da": true,
                "de": true,
                "el": true,
                "en": true,
                "en-au": true,
                "en-ca": true,
                "en-gb": true,
                "es": true,
                "fi": true,
                "fr": true,
                "fr-ch": true,
                "he": true,
                "hu": true,
                "it": true,
                "ja": true,
                "ko": true,
                "nb": true,
                "nl": true,
                "pl": true,
                "pt": true,
                "pt-pt": true,
                "ro": true,
                "ru": true,
                "sk": true,
                "sl": true,
                "sv": true,
                "th": true,
                "tr": true,
                "zh": true,
                "zh-hant": true,
                "zh-hk": true,
                "zh-tw": true
            });
        },
        "dojox/grid/enhanced/plugins/filter/FilterBuilder": function () {
            define("dojox/grid/enhanced/plugins/filter/FilterBuilder", ["dojo/_base/declare", "dojo/_base/array", "dojo/_base/lang", "./_FilterExpr"], function (_92e, _92f, lang, _930) {
                var bdr = function (_931) {
                        return lang.partial(function (cls, _932) {
                            return new _930[cls](_932);
                        }, _931);
                    },
                    _933 = function (_934) {
                        return lang.partial(function (cls, _935) {
                            return new _930.LogicNOT(new _930[cls](_935));
                        }, _934);
                    };
                return _92e("dojox.grid.enhanced.plugins.filter.FilterBuilder", null, {
                    buildExpression: function (def) {
                        if ("op" in def) {
                            return this.supportedOps[def.op.toLowerCase()](_92f.map(def.data, this.buildExpression, this));
                        } else {
                            var args = lang.mixin(this.defaultArgs[def.datatype], def.args || {});
                            return new this.supportedTypes[def.datatype](def.data, def.isColumn, args);
                        }
                    },
                    supportedOps: {
                        "equalto": bdr("EqualTo"),
                        "lessthan": bdr("LessThan"),
                        "lessthanorequalto": bdr("LessThanOrEqualTo"),
                        "largerthan": bdr("LargerThan"),
                        "largerthanorequalto": bdr("LargerThanOrEqualTo"),
                        "contains": bdr("Contains"),
                        "startswith": bdr("StartsWith"),
                        "endswith": bdr("EndsWith"),
                        "notequalto": _933("EqualTo"),
                        "notcontains": _933("Contains"),
                        "notstartswith": _933("StartsWith"),
                        "notendswith": _933("EndsWith"),
                        "isempty": bdr("IsEmpty"),
                        "range": function (_936) {
                            return new _930.LogicALL(new _930.LargerThanOrEqualTo(_936.slice(0, 2)), new _930.LessThanOrEqualTo(_936[0], _936[2]));
                        },
                        "logicany": bdr("LogicANY"),
                        "logicall": bdr("LogicALL")
                    },
                    supportedTypes: {
                        "number": _930.NumberExpr,
                        "string": _930.StringExpr,
                        "boolean": _930.BooleanExpr,
                        "date": _930.DateExpr,
                        "time": _930.TimeExpr
                    },
                    defaultArgs: {
                        "boolean": {
                            "falseValue": "false",
                            "convert": function (_937, args) {
                                var _938 = args.falseValue;
                                var _939 = args.trueValue;
                                if (lang.isString(_937)) {
                                    if (_939 && _937.toLowerCase() == _939) {
                                        return true;
                                    }
                                    if (_938 && _937.toLowerCase() == _938) {
                                        return false;
                                    }
                                }
                                return !!_937;
                            }
                        }
                    }
                });
            });
        },
        "dojox/grid/enhanced/plugins/filter/_FilterExpr": function () {
            define("dojox/grid/enhanced/plugins/filter/_FilterExpr", ["dojo/_base/declare", "dojo/_base/lang", "dojo/date", "./_DataExprs"], function (_93a, lang, date, _93b) {
                var _93c = _93a("dojox.grid.enhanced.plugins.filter.LogicAND", _93b._BiOpExpr, {
                    _name: "and",
                    _calculate: function (_93d, _93e, _93f, _940) {
                        var res = _93d.applyRow(_93f, _940).getValue() && _93e.applyRow(_93f, _940).getValue();
                        return new _93b.BooleanExpr(res);
                    }
                });
                var _941 = _93a("dojox.grid.enhanced.plugins.filter.LogicOR", _93b._BiOpExpr, {
                    _name: "or",
                    _calculate: function (_942, _943, _944, _945) {
                        var res = _942.applyRow(_944, _945).getValue() || _943.applyRow(_944, _945).getValue();
                        return new _93b.BooleanExpr(res);
                    }
                });
                var _946 = _93a("dojox.grid.enhanced.plugins.filter.LogicXOR", _93b._BiOpExpr, {
                    _name: "xor",
                    _calculate: function (_947, _948, _949, _94a) {
                        var _94b = _947.applyRow(_949, _94a).getValue();
                        var _94c = _948.applyRow(_949, _94a).getValue();
                        return new _93b.BooleanExpr(( !! _94b) != ( !! _94c));
                    }
                });
                var _94d = _93a("dojox.grid.enhanced.plugins.filter.LogicNOT", _93b._UniOpExpr, {
                    _name: "not",
                    _calculate: function (_94e, _94f, _950) {
                        return new _93b.BooleanExpr(!_94e.applyRow(_94f, _950).getValue());
                    }
                });
                var _951 = _93a("dojox.grid.enhanced.plugins.filter.LogicALL", _93b._OperatorExpr, {
                    _name: "all",
                    applyRow: function (_952, _953) {
                        for (var i = 0, res = true; res && (this._operands[i] instanceof _93b._ConditionExpr); ++i) {
                            res = this._operands[i].applyRow(_952, _953).getValue();
                        }
                        return new _93b.BooleanExpr(res);
                    }
                });
                var _954 = _93a("dojox.grid.enhanced.plugins.filter.LogicANY", _93b._OperatorExpr, {
                    _name: "any",
                    applyRow: function (_955, _956) {
                        for (var i = 0, res = false; !res && (this._operands[i] instanceof _93b._ConditionExpr); ++i) {
                            res = this._operands[i].applyRow(_955, _956).getValue();
                        }
                        return new _93b.BooleanExpr(res);
                    }
                });

                function _957(left, _958, row, _959) {
                    left = left.applyRow(row, _959);
                    _958 = _958.applyRow(row, _959);
                    var _95a = left.getValue();
                    var _95b = _958.getValue();
                    if (left instanceof _93b.TimeExpr) {
                        return date.compare(_95a, _95b, "time");
                    } else {
                        if (left instanceof _93b.DateExpr) {
                            return date.compare(_95a, _95b, "date");
                        } else {
                            if (left instanceof _93b.StringExpr) {
                                _95a = _95a.toLowerCase();
                                _95b = String(_95b).toLowerCase();
                            }
                            return _95a == _95b ? 0 : (_95a < _95b ? -1 : 1);
                        }
                    }
                };
                var _95c = _93a("dojox.grid.enhanced.plugins.filter.EqualTo", _93b._BiOpExpr, {
                    _name: "equal",
                    _calculate: function (_95d, _95e, _95f, _960) {
                        var res = _957(_95d, _95e, _95f, _960);
                        return new _93b.BooleanExpr(res === 0);
                    }
                });
                var _961 = _93a("dojox.grid.enhanced.plugins.filter.LessThan", _93b._BiOpExpr, {
                    _name: "less",
                    _calculate: function (_962, _963, _964, _965) {
                        var res = _957(_962, _963, _964, _965);
                        return new _93b.BooleanExpr(res < 0);
                    }
                });
                var _966 = _93a("dojox.grid.enhanced.plugins.filter.LessThanOrEqualTo", _93b._BiOpExpr, {
                    _name: "lessEqual",
                    _calculate: function (_967, _968, _969, _96a) {
                        var res = _957(_967, _968, _969, _96a);
                        return new _93b.BooleanExpr(res <= 0);
                    }
                });
                var _96b = _93a("dojox.grid.enhanced.plugins.filter.LargerThan", _93b._BiOpExpr, {
                    _name: "larger",
                    _calculate: function (_96c, _96d, _96e, _96f) {
                        var res = _957(_96c, _96d, _96e, _96f);
                        return new _93b.BooleanExpr(res > 0);
                    }
                });
                var _970 = _93a("dojox.grid.enhanced.plugins.filter.LargerThanOrEqualTo", _93b._BiOpExpr, {
                    _name: "largerEqual",
                    _calculate: function (_971, _972, _973, _974) {
                        var res = _957(_971, _972, _973, _974);
                        return new _93b.BooleanExpr(res >= 0);
                    }
                });
                var _975 = _93a("dojox.grid.enhanced.plugins.filter.Contains", _93b._BiOpExpr, {
                    _name: "contains",
                    _calculate: function (_976, _977, _978, _979) {
                        var _97a = String(_976.applyRow(_978, _979).getValue()).toLowerCase();
                        var _97b = String(_977.applyRow(_978, _979).getValue()).toLowerCase();
                        return new _93b.BooleanExpr(_97a.indexOf(_97b) >= 0);
                    }
                });
                var _97c = _93a("dojox.grid.enhanced.plugins.filter.StartsWith", _93b._BiOpExpr, {
                    _name: "startsWith",
                    _calculate: function (_97d, _97e, _97f, _980) {
                        var _981 = String(_97d.applyRow(_97f, _980).getValue()).toLowerCase();
                        var _982 = String(_97e.applyRow(_97f, _980).getValue()).toLowerCase();
                        return new _93b.BooleanExpr(_981.substring(0, _982.length) == _982);
                    }
                });
                var _983 = _93a("dojox.grid.enhanced.plugins.filter.EndsWith", _93b._BiOpExpr, {
                    _name: "endsWith",
                    _calculate: function (_984, _985, _986, _987) {
                        var _988 = String(_984.applyRow(_986, _987).getValue()).toLowerCase();
                        var _989 = String(_985.applyRow(_986, _987).getValue()).toLowerCase();
                        return new _93b.BooleanExpr(_988.substring(_988.length - _989.length) == _989);
                    }
                });
                var _98a = _93a("dojox.grid.enhanced.plugins.filter.Matches", _93b._BiOpExpr, {
                    _name: "matches",
                    _calculate: function (_98b, _98c, _98d, _98e) {
                        var _98f = String(_98b.applyRow(_98d, _98e).getValue());
                        var _990 = new RegExp(_98c.applyRow(_98d, _98e).getValue());
                        return new _93b.BooleanExpr(_98f.search(_990) >= 0);
                    }
                });
                var _991 = _93a("dojox.grid.enhanced.plugins.filter.IsEmpty", _93b._UniOpExpr, {
                    _name: "isEmpty",
                    _calculate: function (_992, _993, _994) {
                        var res = _992.applyRow(_993, _994).getValue();
                        return new _93b.BooleanExpr(res === "" || res == null);
                    }
                });
                return lang.mixin({
                    LogicAND: _93c,
                    LogicOR: _941,
                    LogicXOR: _946,
                    LogicNOT: _94d,
                    LogicALL: _951,
                    LogicANY: _954,
                    EqualTo: _95c,
                    LessThan: _961,
                    LessThanOrEqualTo: _966,
                    LargerThan: _96b,
                    LargerThanOrEqualTo: _970,
                    Contains: _975,
                    StartsWith: _97c,
                    EndsWith: _983,
                    Matches: _98a,
                    IsEmpty: _991
                }, _93b);
            });
        },
        "dojox/grid/enhanced/plugins/filter/_DataExprs": function () {
            define("dojox/grid/enhanced/plugins/filter/_DataExprs", ["dojo/_base/declare", "dojo/_base/lang", "dojo/date/locale", "./_ConditionExpr"], function (_995, lang, _996, _997) {
                var _998 = _995("dojox.grid.enhanced.plugins.filter.BooleanExpr", _997._DataExpr, {
                    _name: "bool",
                    _convertData: function (_999) {
                        return !!_999;
                    }
                });
                var _99a = _995("dojox.grid.enhanced.plugins.filter.StringExpr", _997._DataExpr, {
                    _name: "string",
                    _convertData: function (_99b) {
                        return String(_99b);
                    }
                });
                var _99c = _995("dojox.grid.enhanced.plugins.filter.NumberExpr", _997._DataExpr, {
                    _name: "number",
                    _convertDataToExpr: function (_99d) {
                        return parseFloat(_99d);
                    }
                });
                var _99e = _995("dojox.grid.enhanced.plugins.filter.DateExpr", _997._DataExpr, {
                    _name: "date",
                    _convertData: function (_99f) {
                        if (_99f instanceof Date) {
                            return _99f;
                        } else {
                            if (typeof _99f == "number") {
                                return new Date(_99f);
                            } else {
                                var res = _996.parse(String(_99f), lang.mixin({
                                    selector: this._name
                                }, this._convertArgs));
                                if (!res) {
                                    throw new Error("Datetime parse failed: " + _99f);
                                }
                                return res;
                            }
                        }
                    },
                    toObject: function () {
                        if (this._value instanceof Date) {
                            var tmp = this._value;
                            this._value = this._value.valueOf();
                            var res = this.inherited(arguments);
                            this._value = tmp;
                            return res;
                        } else {
                            return this.inherited(arguments);
                        }
                    }
                });
                var _9a0 = _995("dojox.grid.enhanced.plugins.filter.TimeExpr", _99e, {
                    _name: "time"
                });
                return lang.mixin({
                    BooleanExpr: _998,
                    StringExpr: _99a,
                    NumberExpr: _99c,
                    DateExpr: _99e,
                    TimeExpr: _9a0
                }, _997);
            });
        },
        "dojox/grid/enhanced/plugins/filter/_ConditionExpr": function () {
            define("dojox/grid/enhanced/plugins/filter/_ConditionExpr", ["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array"], function (_9a1, lang, _9a2) {
                var _9a3 = _9a1("dojox.grid.enhanced.plugins.filter._ConditionExpr", null, {
                    _name: "expr",
                    applyRow: function (_9a4, _9a5) {
                        throw new Error("_ConditionExpr.applyRow: unimplemented interface");
                    },
                    toObject: function () {
                        return {};
                    },
                    getName: function () {
                        return this._name;
                    }
                });
                var _9a6 = _9a1("dojox.grid.enhanced.plugins.filter._DataExpr", _9a3, {
                    _name: "data",
                    constructor: function (_9a7, _9a8, _9a9) {
                        this._convertArgs = _9a9 || {};
                        if (lang.isFunction(this._convertArgs.convert)) {
                            this._convertData = lang.hitch(this._convertArgs.scope, this._convertArgs.convert);
                        }
                        if (_9a8) {
                            this._colArg = _9a7;
                        } else {
                            this._value = this._convertData(_9a7, this._convertArgs);
                        }
                    },
                    getValue: function () {
                        return this._value;
                    },
                    applyRow: function (_9aa, _9ab) {
                        return typeof this._colArg == "undefined" ? this : new(lang.getObject(this.declaredClass))(this._convertData(_9ab(_9aa, this._colArg), this._convertArgs));
                    },
                    _convertData: function (_9ac) {
                        return _9ac;
                    },
                    toObject: function () {
                        return {
                            op: this.getName(),
                            data: this._colArg === undefined ? this._value : this._colArg,
                            isCol: this._colArg !== undefined
                        };
                    }
                });
                var _9ad = _9a1("dojox.grid.enhanced.plugins.filter._OperatorExpr", _9a3, {
                    _name: "operator",
                    constructor: function () {
                        if (lang.isArray(arguments[0])) {
                            this._operands = arguments[0];
                        } else {
                            this._operands = [];
                            for (var i = 0; i < arguments.length; ++i) {
                                this._operands.push(arguments[i]);
                            }
                        }
                    },
                    toObject: function () {
                        return {
                            op: this.getName(),
                            data: _9a2.map(this._operands, function (_9ae) {
                                return _9ae.toObject();
                            })
                        };
                    }
                });
                var _9af = _9a1("dojox.grid.enhanced.plugins.filter._UniOpExpr", _9ad, {
                    _name: "uniOperator",
                    applyRow: function (_9b0, _9b1) {
                        if (!(this._operands[0] instanceof _9a3)) {
                            throw new Error("_UniOpExpr: operand is not expression.");
                        }
                        return this._calculate(this._operands[0], _9b0, _9b1);
                    },
                    _calculate: function (_9b2, _9b3, _9b4) {
                        throw new Error("_UniOpExpr._calculate: unimplemented interface");
                    }
                });
                var _9b5 = _9a1("dojox.grid.enhanced.plugins.filter._BiOpExpr", _9ad, {
                    _name: "biOperator",
                    applyRow: function (_9b6, _9b7) {
                        if (!(this._operands[0] instanceof _9a3)) {
                            throw new Error("_BiOpExpr: left operand is not expression.");
                        } else {
                            if (!(this._operands[1] instanceof _9a3)) {
                                throw new Error("_BiOpExpr: right operand is not expression.");
                            }
                        }
                        return this._calculate(this._operands[0], this._operands[1], _9b6, _9b7);
                    },
                    _calculate: function (_9b8, _9b9, _9ba, _9bb) {
                        throw new Error("_BiOpExpr._calculate: unimplemented interface");
                    }
                });
                return {
                    _ConditionExpr: _9a3,
                    _DataExpr: _9a6,
                    _OperatorExpr: _9ad,
                    _UniOpExpr: _9af,
                    _BiOpExpr: _9b5
                };
            });
        },
        "dijit/form/ComboBox": function () {
            define("dijit/form/ComboBox", ["dojo/_base/declare", "./ValidationTextBox", "./ComboBoxMixin"], function (_9bc, _9bd, _9be) {
                return _9bc("dijit.form.ComboBox", [_9bd, _9be], {});
            });
        },
        "dijit/form/ValidationTextBox": function () {
            require({
                cache: {
                    "url:dijit/form/templates/ValidationTextBox.html": "<div class=\"dijit dijitReset dijitInline dijitLeft\"\n\tid=\"widget_${id}\" role=\"presentation\"\n\t><div class='dijitReset dijitValidationContainer'\n\t\t><input class=\"dijitReset dijitInputField dijitValidationIcon dijitValidationInner\" value=\"&#935; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\n\t/></div\n\t><div class=\"dijitReset dijitInputField dijitInputContainer\"\n\t\t><input class=\"dijitReset dijitInputInner\" data-dojo-attach-point='textbox,focusNode' autocomplete=\"off\"\n\t\t\t${!nameAttrSetting} type='${type}'\n\t/></div\n></div>\n"
                }
            });
            define("dijit/form/ValidationTextBox", ["dojo/_base/declare", "dojo/i18n", "./TextBox", "../Tooltip", "dojo/text!./templates/ValidationTextBox.html", "dojo/i18n!./nls/validate"], function (_9bf, i18n, _9c0, _9c1, _9c2) {
                return _9bf("dijit.form.ValidationTextBox", _9c0, {
                    templateString: _9c2,
                    baseClass: "dijitTextBox dijitValidationTextBox",
                    required: false,
                    promptMessage: "",
                    invalidMessage: "$_unset_$",
                    missingMessage: "$_unset_$",
                    message: "",
                    constraints: {},
                    regExp: ".*",
                    regExpGen: function () {
                        return this.regExp;
                    },
                    state: "",
                    tooltipPosition: [],
                    _setValueAttr: function () {
                        this.inherited(arguments);
                        this.validate(this.focused);
                    },
                    validator: function (_9c3, _9c4) {
                        return (new RegExp("^(?:" + this.regExpGen(_9c4) + ")" + (this.required ? "" : "?") + "$")).test(_9c3) && (!this.required || !this._isEmpty(_9c3)) && (this._isEmpty(_9c3) || this.parse(_9c3, _9c4) !== undefined);
                    },
                    _isValidSubset: function () {
                        return this.textbox.value.search(this._partialre) == 0;
                    },
                    isValid: function () {
                        return this.validator(this.textbox.value, this.constraints);
                    },
                    _isEmpty: function (_9c5) {
                        return (this.trim ? /^\s*$/ : /^$/).test(_9c5);
                    },
                    getErrorMessage: function () {
                        return (this.required && this._isEmpty(this.textbox.value)) ? this.missingMessage : this.invalidMessage;
                    },
                    getPromptMessage: function () {
                        return this.promptMessage;
                    },
                    _maskValidSubsetError: true,
                    validate: function (_9c6) {
                        var _9c7 = "";
                        var _9c8 = this.disabled || this.isValid(_9c6);
                        if (_9c8) {
                            this._maskValidSubsetError = true;
                        }
                        var _9c9 = this._isEmpty(this.textbox.value);
                        var _9ca = !_9c8 && _9c6 && this._isValidSubset();
                        this._set("state", _9c8 ? "" : (((((!this._hasBeenBlurred || _9c6) && _9c9) || _9ca) && this._maskValidSubsetError) ? "Incomplete" : "Error"));
                        this.focusNode.setAttribute("aria-invalid", _9c8 ? "false" : "true");
                        if (this.state == "Error") {
                            this._maskValidSubsetError = _9c6 && _9ca;
                            _9c7 = this.getErrorMessage(_9c6);
                        } else {
                            if (this.state == "Incomplete") {
                                _9c7 = this.getPromptMessage(_9c6);
                                this._maskValidSubsetError = !this._hasBeenBlurred || _9c6;
                            } else {
                                if (_9c9) {
                                    _9c7 = this.getPromptMessage(_9c6);
                                }
                            }
                        }
                        this.set("message", _9c7);
                        return _9c8;
                    },
                    displayMessage: function (_9cb) {
                        if (_9cb && this.focused) {
                            _9c1.show(_9cb, this.domNode, this.tooltipPosition, !this.isLeftToRight());
                        } else {
                            _9c1.hide(this.domNode);
                        }
                    },
                    _refreshState: function () {
                        this.validate(this.focused);
                        this.inherited(arguments);
                    },
                    constructor: function () {
                        this.constraints = {};
                    },
                    _setConstraintsAttr: function (_9cc) {
                        if (!_9cc.locale && this.lang) {
                            _9cc.locale = this.lang;
                        }
                        this._set("constraints", _9cc);
                        this._computePartialRE();
                    },
                    _computePartialRE: function () {
                        var p = this.regExpGen(this.constraints);
                        this.regExp = p;
                        var _9cd = "";
                        if (p != ".*") {
                            this.regExp.replace(/\\.|\[\]|\[.*?[^\\]{1}\]|\{.*?\}|\(\?[=:!]|./g, function (re) {
                                switch (re.charAt(0)) {
                                case "{":
                                case "+":
                                case "?":
                                case "*":
                                case "^":
                                case "$":
                                case "|":
                                case "(":
                                    _9cd += re;
                                    break;
                                case ")":
                                    _9cd += "|$)";
                                    break;
                                default:
                                    _9cd += "(?:" + re + "|$)";
                                    break;
                                }
                            });
                        }
                        try {
                            "".search(_9cd);
                        } catch (e) {
                            _9cd = this.regExp;
                            console.warn("RegExp error in " + this.declaredClass + ": " + this.regExp);
                        }
                        this._partialre = "^(?:" + _9cd + ")$";
                    },
                    postMixInProperties: function () {
                        this.inherited(arguments);
                        this.messages = i18n.getLocalization("dijit.form", "validate", this.lang);
                        if (this.invalidMessage == "$_unset_$") {
                            this.invalidMessage = this.messages.invalidMessage;
                        }
                        if (!this.invalidMessage) {
                            this.invalidMessage = this.promptMessage;
                        }
                        if (this.missingMessage == "$_unset_$") {
                            this.missingMessage = this.messages.missingMessage;
                        }
                        if (!this.missingMessage) {
                            this.missingMessage = this.invalidMessage;
                        }
                        this._setConstraintsAttr(this.constraints);
                    },
                    _setDisabledAttr: function (_9ce) {
                        this.inherited(arguments);
                        this._refreshState();
                    },
                    _setRequiredAttr: function (_9cf) {
                        this._set("required", _9cf);
                        this.focusNode.setAttribute("aria-required", _9cf);
                        this._refreshState();
                    },
                    _setMessageAttr: function (_9d0) {
                        this._set("message", _9d0);
                        this.displayMessage(_9d0);
                    },
                    reset: function () {
                        this._maskValidSubsetError = true;
                        this.inherited(arguments);
                    },
                    _onBlur: function () {
                        this.displayMessage("");
                        this.inherited(arguments);
                    }
                });
            });
        },
        "dijit/form/TextBox": function () {
            require({
                cache: {
                    "url:dijit/form/templates/TextBox.html": "<div class=\"dijit dijitReset dijitInline dijitLeft\" id=\"widget_${id}\" role=\"presentation\"\n\t><div class=\"dijitReset dijitInputField dijitInputContainer\"\n\t\t><input class=\"dijitReset dijitInputInner\" data-dojo-attach-point='textbox,focusNode' autocomplete=\"off\"\n\t\t\t${!nameAttrSetting} type='${type}'\n\t/></div\n></div>\n"
                }
            });
            define("dijit/form/TextBox", ["dojo/_base/declare", "dojo/dom-construct", "dojo/dom-style", "dojo/_base/kernel", "dojo/_base/lang", "dojo/_base/sniff", "dojo/_base/window", "./_FormValueWidget", "./_TextBoxMixin", "dojo/text!./templates/TextBox.html", ".."], function (_9d1, _9d2, _9d3, _9d4, lang, has, win, _9d5, _9d6, _9d7, _9d8) {
                var _9d9 = _9d1([_9d5, _9d6], {
                    templateString: _9d7,
                    _singleNodeTemplate: "<input class=\"dijit dijitReset dijitLeft dijitInputField\" data-dojo-attach-point=\"textbox,focusNode\" autocomplete=\"off\" type=\"${type}\" ${!nameAttrSetting} />",
                    _buttonInputDisabled: has("ie") ? "disabled" : "",
                    baseClass: "dijitTextBox",
                    postMixInProperties: function () {
                        var type = this.type.toLowerCase();
                        if (this.templateString && this.templateString.toLowerCase() == "input" || ((type == "hidden" || type == "file") && this.templateString == this.constructor.prototype.templateString)) {
                            this.templateString = this._singleNodeTemplate;
                        }
                        this.inherited(arguments);
                    },
                    _onInput: function (e) {
                        this.inherited(arguments);
                        if (this.intermediateChanges) {
                            var _9da = this;
                            setTimeout(function () {
                                _9da._handleOnChange(_9da.get("value"), false);
                            }, 0);
                        }
                    },
                    _setPlaceHolderAttr: function (v) {
                        this._set("placeHolder", v);
                        if (!this._phspan) {
                            this._attachPoints.push("_phspan");
                            this._phspan = _9d2.create("span", {
                                className: "dijitPlaceHolder dijitInputField"
                            }, this.textbox, "after");
                        }
                        this._phspan.innerHTML = "";
                        this._phspan.appendChild(document.createTextNode(v));
                        this._updatePlaceHolder();
                    },
                    _updatePlaceHolder: function () {
                        if (this._phspan) {
                            this._phspan.style.display = (this.placeHolder && !this.focused && !this.textbox.value) ? "" : "none";
                        }
                    },
                    _setValueAttr: function (_9db, _9dc, _9dd) {
                        this.inherited(arguments);
                        this._updatePlaceHolder();
                    },
                    getDisplayedValue: function () {
                        _9d4.deprecated(this.declaredClass + "::getDisplayedValue() is deprecated. Use set('displayedValue') instead.", "", "2.0");
                        return this.get("displayedValue");
                    },
                    setDisplayedValue: function (_9de) {
                        _9d4.deprecated(this.declaredClass + "::setDisplayedValue() is deprecated. Use set('displayedValue', ...) instead.", "", "2.0");
                        this.set("displayedValue", _9de);
                    },
                    _onBlur: function (e) {
                        if (this.disabled) {
                            return;
                        }
                        this.inherited(arguments);
                        this._updatePlaceHolder();
                    },
                    _onFocus: function (by) {
                        if (this.disabled || this.readOnly) {
                            return;
                        }
                        this.inherited(arguments);
                        this._updatePlaceHolder();
                    }
                });
                if (has("ie")) {
                    _9d9 = _9d1(_9d9, {
                        declaredClass: "dijit.form.TextBox",
                        _isTextSelected: function () {
                            var _9df = win.doc.selection.createRange();
                            var _9e0 = _9df.parentElement();
                            return _9e0 == this.textbox && _9df.text.length == 0;
                        },
                        postCreate: function () {
                            this.inherited(arguments);
                            setTimeout(lang.hitch(this, function () {
                                try {
                                    var s = _9d3.getComputedStyle(this.domNode);
                                    if (s) {
                                        var ff = s.fontFamily;
                                        if (ff) {
                                            var _9e1 = this.domNode.getElementsByTagName("INPUT");
                                            if (_9e1) {
                                                for (var i = 0; i < _9e1.length; i++) {
                                                    _9e1[i].style.fontFamily = ff;
                                                }
                                            }
                                        }
                                    }
                                } catch (e) {}
                            }), 0);
                        }
                    });
                    _9d8._setSelectionRange = _9d6._setSelectionRange = function (_9e2, _9e3, stop) {
                        if (_9e2.createTextRange) {
                            var r = _9e2.createTextRange();
                            r.collapse(true);
                            r.moveStart("character", -99999);
                            r.moveStart("character", _9e3);
                            r.moveEnd("character", stop - _9e3);
                            r.select();
                        }
                    };
                } else {
                    if (has("mozilla")) {
                        _9d9 = _9d1(_9d9, {
                            declaredClass: "dijit.form.TextBox",
                            _onBlur: function (e) {
                                this.inherited(arguments);
                                if (this.selectOnClick) {
                                    this.textbox.selectionStart = this.textbox.selectionEnd = undefined;
                                }
                            }
                        });
                    } else {
                        _9d9.prototype.declaredClass = "dijit.form.TextBox";
                    }
                }
                lang.setObject("dijit.form.TextBox", _9d9);
                return _9d9;
            });
        },
        "dijit/form/_FormValueWidget": function () {
            define("dijit/form/_FormValueWidget", ["dojo/_base/declare", "dojo/_base/sniff", "./_FormWidget", "./_FormValueMixin"], function (_9e4, has, _9e5, _9e6) {
                return _9e4("dijit.form._FormValueWidget", [_9e5, _9e6], {
                    _layoutHackIE7: function () {
                        if (has("ie") == 7) {
                            var _9e7 = this.domNode;
                            var _9e8 = _9e7.parentNode;
                            var _9e9 = _9e7.firstChild || _9e7;
                            var _9ea = _9e9.style.filter;
                            var _9eb = this;
                            while (_9e8 && _9e8.clientHeight == 0) {
                                (function ping() {
                                    var _9ec = _9eb.connect(_9e8, "onscroll", function () {
                                        _9eb.disconnect(_9ec);
                                        _9e9.style.filter = (new Date()).getMilliseconds();
                                        setTimeout(function () {
                                            _9e9.style.filter = _9ea;
                                        }, 0);
                                    });
                                })();
                                _9e8 = _9e8.parentNode;
                            }
                        }
                    }
                });
            });
        },
        "dijit/form/_FormWidget": function () {
            define("dijit/form/_FormWidget", ["dojo/_base/declare", "dojo/_base/kernel", "dojo/ready", "../_Widget", "../_CssStateMixin", "../_TemplatedMixin", "./_FormWidgetMixin"], function (_9ed, _9ee, _9ef, _9f0, _9f1, _9f2, _9f3) {
                if (!_9ee.isAsync) {
                    _9ef(0, function () {
                        var _9f4 = ["dijit/form/_FormValueWidget"];
                        require(_9f4);
                    });
                }
                return _9ed("dijit.form._FormWidget", [_9f0, _9f2, _9f1, _9f3], {
                    setDisabled: function (_9f5) {
                        _9ee.deprecated("setDisabled(" + _9f5 + ") is deprecated. Use set('disabled'," + _9f5 + ") instead.", "", "2.0");
                        this.set("disabled", _9f5);
                    },
                    setValue: function (_9f6) {
                        _9ee.deprecated("dijit.form._FormWidget:setValue(" + _9f6 + ") is deprecated.  Use set('value'," + _9f6 + ") instead.", "", "2.0");
                        this.set("value", _9f6);
                    },
                    getValue: function () {
                        _9ee.deprecated(this.declaredClass + "::getValue() is deprecated. Use get('value') instead.", "", "2.0");
                        return this.get("value");
                    },
                    postMixInProperties: function () {
                        this.nameAttrSetting = this.name ? ("name=\"" + this.name.replace(/'/g, "&quot;") + "\"") : "";
                        this.inherited(arguments);
                    },
                    _setTypeAttr: null
                });
            });
        },
        "dijit/form/_FormWidgetMixin": function () {
            define("dijit/form/_FormWidgetMixin", ["dojo/_base/array", "dojo/_base/declare", "dojo/dom-attr", "dojo/dom-style", "dojo/_base/lang", "dojo/mouse", "dojo/_base/sniff", "dojo/_base/window", "dojo/window", "../a11y"], function (_9f7, _9f8, _9f9, _9fa, lang, _9fb, has, win, _9fc, a11y) {
                return _9f8("dijit.form._FormWidgetMixin", null, {
                    name: "",
                    alt: "",
                    value: "",
                    type: "text",
                    tabIndex: "0",
                    _setTabIndexAttr: "focusNode",
                    disabled: false,
                    intermediateChanges: false,
                    scrollOnFocus: true,
                    _setIdAttr: "focusNode",
                    postCreate: function () {
                        this.inherited(arguments);
                        this.connect(this.domNode, "onmousedown", "_onMouseDown");
                    },
                    _setDisabledAttr: function (_9fd) {
                        this._set("disabled", _9fd);
                        _9f9.set(this.focusNode, "disabled", _9fd);
                        if (this.valueNode) {
                            _9f9.set(this.valueNode, "disabled", _9fd);
                        }
                        this.focusNode.setAttribute("aria-disabled", _9fd ? "true" : "false");
                        if (_9fd) {
                            this._set("hovering", false);
                            this._set("active", false);
                            var _9fe = "tabIndex" in this.attributeMap ? this.attributeMap.tabIndex : ("_setTabIndexAttr" in this) ? this._setTabIndexAttr : "focusNode";
                            _9f7.forEach(lang.isArray(_9fe) ? _9fe : [_9fe], function (_9ff) {
                                var node = this[_9ff];
                                if (has("webkit") || a11y.hasDefaultTabStop(node)) {
                                    node.setAttribute("tabIndex", "-1");
                                } else {
                                    node.removeAttribute("tabIndex");
                                }
                            }, this);
                        } else {
                            if (this.tabIndex != "") {
                                this.set("tabIndex", this.tabIndex);
                            }
                        }
                    },
                    _onFocus: function (e) {
                        if (this.scrollOnFocus) {
                            this.defer(function () {
                                _9fc.scrollIntoView(this.domNode);
                            });
                        }
                        this.inherited(arguments);
                    },
                    isFocusable: function () {
                        return !this.disabled && this.focusNode && (_9fa.get(this.domNode, "display") != "none");
                    },
                    focus: function () {
                        if (!this.disabled && this.focusNode.focus) {
                            try {
                                this.focusNode.focus();
                            } catch (e) {}
                        }
                    },
                    compare: function (val1, val2) {
                        if (typeof val1 == "number" && typeof val2 == "number") {
                            return (isNaN(val1) && isNaN(val2)) ? 0 : val1 - val2;
                        } else {
                            if (val1 > val2) {
                                return 1;
                            } else {
                                if (val1 < val2) {
                                    return -1;
                                } else {
                                    return 0;
                                }
                            }
                        }
                    },
                    onChange: function () {},
                    _onChangeActive: false,
                    _handleOnChange: function (_a00, _a01) {
                        if (this._lastValueReported == undefined && (_a01 === null || !this._onChangeActive)) {
                            this._resetValue = this._lastValueReported = _a00;
                        }
                        this._pendingOnChange = this._pendingOnChange || (typeof _a00 != typeof this._lastValueReported) || (this.compare(_a00, this._lastValueReported) != 0);
                        if ((this.intermediateChanges || _a01 || _a01 === undefined) && this._pendingOnChange) {
                            this._lastValueReported = _a00;
                            this._pendingOnChange = false;
                            if (this._onChangeActive) {
                                if (this._onChangeHandle) {
                                    this._onChangeHandle.remove();
                                }
                                this._onChangeHandle = this.defer(function () {
                                    this._onChangeHandle = null;
                                    this.onChange(_a00);
                                });
                            }
                        }
                    },
                    create: function () {
                        this.inherited(arguments);
                        this._onChangeActive = true;
                    },
                    destroy: function () {
                        if (this._onChangeHandle) {
                            this._onChangeHandle.remove();
                            this.onChange(this._lastValueReported);
                        }
                        this.inherited(arguments);
                    },
                    _onMouseDown: function (e) {
                        if ((!this.focused || !has("ie")) && !e.ctrlKey && _9fb.isLeft(e) && this.isFocusable()) {
                            var _a02 = this.connect(win.body(), "onmouseup", function () {
                                if (!this.focused && this.isFocusable()) {
                                    this.focus();
                                }
                                this.disconnect(_a02);
                            });
                        }
                    }
                });
            });
        },
        "dijit/form/_FormValueMixin": function () {
            define("dijit/form/_FormValueMixin", ["dojo/_base/declare", "dojo/dom-attr", "dojo/keys", "dojo/_base/sniff", "./_FormWidgetMixin"], function (_a03, _a04, keys, has, _a05) {
                return _a03("dijit.form._FormValueMixin", _a05, {
                    readOnly: false,
                    _setReadOnlyAttr: function (_a06) {
                        _a04.set(this.focusNode, "readOnly", _a06);
                        this.focusNode.setAttribute("aria-readonly", _a06);
                        this._set("readOnly", _a06);
                    },
                    postCreate: function () {
                        this.inherited(arguments);
                        if (has("ie")) {
                            this.connect(this.focusNode || this.domNode, "onkeydown", this._onKeyDown);
                        }
                        if (this._resetValue === undefined) {
                            this._lastValueReported = this._resetValue = this.value;
                        }
                    },
                    _setValueAttr: function (_a07, _a08) {
                        this._handleOnChange(_a07, _a08);
                    },
                    _handleOnChange: function (_a09, _a0a) {
                        this._set("value", _a09);
                        this.inherited(arguments);
                    },
                    undo: function () {
                        this._setValueAttr(this._lastValueReported, false);
                    },
                    reset: function () {
                        this._hasBeenBlurred = false;
                        this._setValueAttr(this._resetValue, true);
                    },
                    _onKeyDown: function (e) {
                        if (e.keyCode == keys.ESCAPE && !(e.ctrlKey || e.altKey || e.metaKey)) {
                            var te;
                            if (has("ie") < 9 || (has("ie") && has("quirks"))) {
                                e.preventDefault();
                                te = document.createEventObject();
                                te.keyCode = keys.ESCAPE;
                                te.shiftKey = e.shiftKey;
                                e.srcElement.fireEvent("onkeypress", te);
                            }
                        }
                    }
                });
            });
        },
        "dijit/form/_TextBoxMixin": function () {
            define("dijit/form/_TextBoxMixin", ["dojo/_base/array", "dojo/_base/declare", "dojo/dom", "dojo/_base/event", "dojo/keys", "dojo/_base/lang", ".."], function (_a0b, _a0c, dom, _a0d, keys, lang, _a0e) {
                var _a0f = _a0c("dijit.form._TextBoxMixin", null, {
                    trim: false,
                    uppercase: false,
                    lowercase: false,
                    propercase: false,
                    maxLength: "",
                    selectOnClick: false,
                    placeHolder: "",
                    _getValueAttr: function () {
                        return this.parse(this.get("displayedValue"), this.constraints);
                    },
                    _setValueAttr: function (_a10, _a11, _a12) {
                        var _a13;
                        if (_a10 !== undefined) {
                            _a13 = this.filter(_a10);
                            if (typeof _a12 != "string") {
                                if (_a13 !== null && ((typeof _a13 != "number") || !isNaN(_a13))) {
                                    _a12 = this.filter(this.format(_a13, this.constraints));
                                } else {
                                    _a12 = "";
                                }
                            }
                        }
                        if (_a12 != null && _a12 != undefined && ((typeof _a12) != "number" || !isNaN(_a12)) && this.textbox.value != _a12) {
                            this.textbox.value = _a12;
                            this._set("displayedValue", this.get("displayedValue"));
                        }
                        if (this.textDir == "auto") {
                            this.applyTextDir(this.focusNode, _a12);
                        }
                        this.inherited(arguments, [_a13, _a11]);
                    },
                    displayedValue: "",
                    _getDisplayedValueAttr: function () {
                        return this.filter(this.textbox.value);
                    },
                    _setDisplayedValueAttr: function (_a14) {
                        if (_a14 === null || _a14 === undefined) {
                            _a14 = "";
                        } else {
                            if (typeof _a14 != "string") {
                                _a14 = String(_a14);
                            }
                        }
                        this.textbox.value = _a14;
                        this._setValueAttr(this.get("value"), undefined);
                        this._set("displayedValue", this.get("displayedValue"));
                        if (this.textDir == "auto") {
                            this.applyTextDir(this.focusNode, _a14);
                        }
                    },
                    format: function (_a15) {
                        return ((_a15 == null || _a15 == undefined) ? "" : (_a15.toString ? _a15.toString() : _a15));
                    },
                    parse: function (_a16) {
                        return _a16;
                    },
                    _refreshState: function () {},
                    onInput: function () {},
                    __skipInputEvent: false,
                    _onInput: function () {
                        if (this.textDir == "auto") {
                            this.applyTextDir(this.focusNode, this.focusNode.value);
                        }
                        this._refreshState();
                        this._set("displayedValue", this.get("displayedValue"));
                    },
                    postCreate: function () {
                        this.textbox.setAttribute("value", this.textbox.value);
                        this.inherited(arguments);
                        var _a17 = function (e) {
                                var _a18 = e.charOrCode || e.keyCode || 229;
                                if (e.type == "keydown") {
                                    switch (_a18) {
                                    case keys.SHIFT:
                                    case keys.ALT:
                                    case keys.CTRL:
                                    case keys.META:
                                    case keys.CAPS_LOCK:
                                        return;
                                    default:
                                        if (_a18 >= 65 && _a18 <= 90) {
                                            return;
                                        }
                                    }
                                }
                                if (e.type == "keypress" && typeof _a18 != "string") {
                                    return;
                                }
                                if (e.type == "input") {
                                    if (this.__skipInputEvent) {
                                        this.__skipInputEvent = false;
                                        return;
                                    }
                                } else {
                                    this.__skipInputEvent = true;
                                }
                                var faux = lang.mixin({}, e, {
                                    charOrCode: _a18,
                                    wasConsumed: false,
                                    preventDefault: function () {
                                        faux.wasConsumed = true;
                                        e.preventDefault();
                                    },
                                    stopPropagation: function () {
                                        e.stopPropagation();
                                    }
                                });
                                if (this.onInput(faux) === false) {
                                    _a0d.stop(faux);
                                }
                                if (faux.wasConsumed) {
                                    return;
                                }
                                setTimeout(lang.hitch(this, "_onInput", faux), 0);
                            };
                        _a0b.forEach(["onkeydown", "onkeypress", "onpaste", "oncut", "oninput"], function (_a19) {
                            this.connect(this.textbox, _a19, _a17);
                        }, this);
                    },
                    _blankValue: "",
                    filter: function (val) {
                        if (val === null) {
                            return this._blankValue;
                        }
                        if (typeof val != "string") {
                            return val;
                        }
                        if (this.trim) {
                            val = lang.trim(val);
                        }
                        if (this.uppercase) {
                            val = val.toUpperCase();
                        }
                        if (this.lowercase) {
                            val = val.toLowerCase();
                        }
                        if (this.propercase) {
                            val = val.replace(/[^\s]+/g, function (word) {
                                return word.substring(0, 1).toUpperCase() + word.substring(1);
                            });
                        }
                        return val;
                    },
                    _setBlurValue: function () {
                        this._setValueAttr(this.get("value"), true);
                    },
                    _onBlur: function (e) {
                        if (this.disabled) {
                            return;
                        }
                        this._setBlurValue();
                        this.inherited(arguments);
                        if (this._selectOnClickHandle) {
                            this.disconnect(this._selectOnClickHandle);
                        }
                    },
                    _isTextSelected: function () {
                        return this.textbox.selectionStart == this.textbox.selectionEnd;
                    },
                    _onFocus: function (by) {
                        if (this.disabled || this.readOnly) {
                            return;
                        }
                        if (this.selectOnClick && by == "mouse") {
                            this._selectOnClickHandle = this.connect(this.domNode, "onmouseup", function () {
                                this.disconnect(this._selectOnClickHandle);
                                if (this._isTextSelected()) {
                                    _a0f.selectInputText(this.textbox);
                                }
                            });
                        }
                        this.inherited(arguments);
                        this._refreshState();
                    },
                    reset: function () {
                        this.textbox.value = "";
                        this.inherited(arguments);
                    },
                    _setTextDirAttr: function (_a1a) {
                        if (!this._created || this.textDir != _a1a) {
                            this._set("textDir", _a1a);
                            this.applyTextDir(this.focusNode, this.focusNode.value);
                        }
                    }
                });
                _a0f._setSelectionRange = _a0e._setSelectionRange = function (_a1b, _a1c, stop) {
                    if (_a1b.setSelectionRange) {
                        _a1b.setSelectionRange(_a1c, stop);
                    }
                };
                _a0f.selectInputText = _a0e.selectInputText = function (_a1d, _a1e, stop) {
                    _a1d = dom.byId(_a1d);
                    if (isNaN(_a1e)) {
                        _a1e = 0;
                    }
                    if (isNaN(stop)) {
                        stop = _a1d.value ? _a1d.value.length : 0;
                    }
                    try {
                        _a1d.focus();
                        _a0f._setSelectionRange(_a1d, _a1e, stop);
                    } catch (e) {}
                };
                return _a0f;
            });
        },
        "url:dijit/form/templates/TextBox.html": "<div class=\"dijit dijitReset dijitInline dijitLeft\" id=\"widget_${id}\" role=\"presentation\"\n\t><div class=\"dijitReset dijitInputField dijitInputContainer\"\n\t\t><input class=\"dijitReset dijitInputInner\" data-dojo-attach-point='textbox,focusNode' autocomplete=\"off\"\n\t\t\t${!nameAttrSetting} type='${type}'\n\t/></div\n></div>\n",
        "dijit/Tooltip": function () {
            require({
                cache: {
                    "url:dijit/templates/Tooltip.html": "<div class=\"dijitTooltip dijitTooltipLeft\" id=\"dojoTooltip\"\n\t><div class=\"dijitTooltipContainer dijitTooltipContents\" data-dojo-attach-point=\"containerNode\" role='alert'></div\n\t><div class=\"dijitTooltipConnector\" data-dojo-attach-point=\"connectorNode\"></div\n></div>\n"
                }
            });
            define("dijit/Tooltip", ["dojo/_base/array", "dojo/_base/declare", "dojo/_base/fx", "dojo/dom", "dojo/dom-class", "dojo/dom-geometry", "dojo/dom-style", "dojo/_base/lang", "dojo/_base/sniff", "dojo/_base/window", "./_base/manager", "./place", "./_Widget", "./_TemplatedMixin", "./BackgroundIframe", "dojo/text!./templates/Tooltip.html", "."], function (_a1f, _a20, fx, dom, _a21, _a22, _a23, lang, has, win, _a24, _a25, _a26, _a27, _a28, _a29, _a2a) {
                var _a2b = _a20("dijit._MasterTooltip", [_a26, _a27], {
                    duration: _a24.defaultDuration,
                    templateString: _a29,
                    postCreate: function () {
                        win.body().appendChild(this.domNode);
                        this.bgIframe = new _a28(this.domNode);
                        this.fadeIn = fx.fadeIn({
                            node: this.domNode,
                            duration: this.duration,
                            onEnd: lang.hitch(this, "_onShow")
                        });
                        this.fadeOut = fx.fadeOut({
                            node: this.domNode,
                            duration: this.duration,
                            onEnd: lang.hitch(this, "_onHide")
                        });
                    },
                    show: function (_a2c, _a2d, _a2e, rtl, _a2f) {
                        if (this.aroundNode && this.aroundNode === _a2d && this.containerNode.innerHTML == _a2c) {
                            return;
                        }
                        this.domNode.width = "auto";
                        if (this.fadeOut.status() == "playing") {
                            this._onDeck = arguments;
                            return;
                        }
                        this.containerNode.innerHTML = _a2c;
                        this.set("textDir", _a2f);
                        this.containerNode.align = rtl ? "right" : "left";
                        var pos = _a25.around(this.domNode, _a2d, _a2e && _a2e.length ? _a2e : _a30.defaultPosition, !rtl, lang.hitch(this, "orient"));
                        var _a31 = pos.aroundNodePos;
                        if (pos.corner.charAt(0) == "M" && pos.aroundCorner.charAt(0) == "M") {
                            this.connectorNode.style.top = _a31.y + ((_a31.h - this.connectorNode.offsetHeight) >> 1) - pos.y + "px";
                            this.connectorNode.style.left = "";
                        } else {
                            if (pos.corner.charAt(1) == "M" && pos.aroundCorner.charAt(1) == "M") {
                                this.connectorNode.style.left = _a31.x + ((_a31.w - this.connectorNode.offsetWidth) >> 1) - pos.x + "px";
                            }
                        }
                        _a23.set(this.domNode, "opacity", 0);
                        this.fadeIn.play();
                        this.isShowingNow = true;
                        this.aroundNode = _a2d;
                    },
                    orient: function (node, _a32, _a33, _a34, _a35) {
                        this.connectorNode.style.top = "";
                        var _a36 = _a34.w - this.connectorNode.offsetWidth;
                        node.className = "dijitTooltip " + {
                            "MR-ML": "dijitTooltipRight",
                            "ML-MR": "dijitTooltipLeft",
                            "TM-BM": "dijitTooltipAbove",
                            "BM-TM": "dijitTooltipBelow",
                            "BL-TL": "dijitTooltipBelow dijitTooltipABLeft",
                            "TL-BL": "dijitTooltipAbove dijitTooltipABLeft",
                            "BR-TR": "dijitTooltipBelow dijitTooltipABRight",
                            "TR-BR": "dijitTooltipAbove dijitTooltipABRight",
                            "BR-BL": "dijitTooltipRight",
                            "BL-BR": "dijitTooltipLeft"
                        }[_a32 + "-" + _a33];
                        this.domNode.style.width = "auto";
                        var size = _a22.getContentBox(this.domNode);
                        var _a37 = Math.min((Math.max(_a36, 1)), size.w);
                        var _a38 = _a37 < size.w;
                        this.domNode.style.width = _a37 + "px";
                        if (_a38) {
                            this.containerNode.style.overflow = "auto";
                            var _a39 = this.containerNode.scrollWidth;
                            this.containerNode.style.overflow = "visible";
                            if (_a39 > _a37) {
                                _a39 = _a39 + _a23.get(this.domNode, "paddingLeft") + _a23.get(this.domNode, "paddingRight");
                                this.domNode.style.width = _a39 + "px";
                            }
                        }
                        if (_a33.charAt(0) == "B" && _a32.charAt(0) == "B") {
                            var mb = _a22.getMarginBox(node);
                            var _a3a = this.connectorNode.offsetHeight;
                            if (mb.h > _a34.h) {
                                var _a3b = _a34.h - ((_a35.h + _a3a) >> 1);
                                this.connectorNode.style.top = _a3b + "px";
                                this.connectorNode.style.bottom = "";
                            } else {
                                this.connectorNode.style.bottom = Math.min(Math.max(_a35.h / 2 - _a3a / 2, 0), mb.h - _a3a) + "px";
                                this.connectorNode.style.top = "";
                            }
                        } else {
                            this.connectorNode.style.top = "";
                            this.connectorNode.style.bottom = "";
                        }
                        return Math.max(0, size.w - _a36);
                    },
                    _onShow: function () {
                        if (has("ie")) {
                            this.domNode.style.filter = "";
                        }
                    },
                    hide: function (_a3c) {
                        if (this._onDeck && this._onDeck[1] == _a3c) {
                            this._onDeck = null;
                        } else {
                            if (this.aroundNode === _a3c) {
                                this.fadeIn.stop();
                                this.isShowingNow = false;
                                this.aroundNode = null;
                                this.fadeOut.play();
                            } else {}
                        }
                    },
                    _onHide: function () {
                        this.domNode.style.cssText = "";
                        this.containerNode.innerHTML = "";
                        if (this._onDeck) {
                            this.show.apply(this, this._onDeck);
                            this._onDeck = null;
                        }
                    },
                    _setAutoTextDir: function (node) {
                        this.applyTextDir(node, has("ie") ? node.outerText : node.textContent);
                        _a1f.forEach(node.children, function (_a3d) {
                            this._setAutoTextDir(_a3d);
                        }, this);
                    },
                    _setTextDirAttr: function (_a3e) {
                        this._set("textDir", typeof _a3e != "undefined" ? _a3e : "");
                        if (_a3e == "auto") {
                            this._setAutoTextDir(this.containerNode);
                        } else {
                            this.containerNode.dir = this.textDir;
                        }
                    }
                });
                _a2a.showTooltip = function (_a3f, _a40, _a41, rtl, _a42) {
                    if (!_a30._masterTT) {
                        _a2a._masterTT = _a30._masterTT = new _a2b();
                    }
                    return _a30._masterTT.show(_a3f, _a40, _a41, rtl, _a42);
                };
                _a2a.hideTooltip = function (_a43) {
                    return _a30._masterTT && _a30._masterTT.hide(_a43);
                };
                var _a30 = _a20("dijit.Tooltip", _a26, {
                    label: "",
                    showDelay: 400,
                    connectId: [],
                    position: [],
                    _setConnectIdAttr: function (_a44) {
                        _a1f.forEach(this._connections || [], function (_a45) {
                            _a1f.forEach(_a45, lang.hitch(this, "disconnect"));
                        }, this);
                        this._connectIds = _a1f.filter(lang.isArrayLike(_a44) ? _a44 : (_a44 ? [_a44] : []), function (id) {
                            return dom.byId(id);
                        });
                        this._connections = _a1f.map(this._connectIds, function (id) {
                            var node = dom.byId(id);
                            return [this.connect(node, "onmouseenter", "_onHover"), this.connect(node, "onmouseleave", "_onUnHover"), this.connect(node, "onfocus", "_onHover"), this.connect(node, "onblur", "_onUnHover")];
                        }, this);
                        this._set("connectId", _a44);
                    },
                    addTarget: function (node) {
                        var id = node.id || node;
                        if (_a1f.indexOf(this._connectIds, id) == -1) {
                            this.set("connectId", this._connectIds.concat(id));
                        }
                    },
                    removeTarget: function (node) {
                        var id = node.id || node,
                            idx = _a1f.indexOf(this._connectIds, id);
                        if (idx >= 0) {
                            this._connectIds.splice(idx, 1);
                            this.set("connectId", this._connectIds);
                        }
                    },
                    buildRendering: function () {
                        this.inherited(arguments);
                        _a21.add(this.domNode, "dijitTooltipData");
                    },
                    startup: function () {
                        this.inherited(arguments);
                        var ids = this.connectId;
                        _a1f.forEach(lang.isArrayLike(ids) ? ids : [ids], this.addTarget, this);
                    },
                    _onHover: function (e) {
                        if (!this._showTimer) {
                            var _a46 = e.target;
                            this._showTimer = setTimeout(lang.hitch(this, function () {
                                this.open(_a46);
                            }), this.showDelay);
                        }
                    },
                    _onUnHover: function () {
                        if (this._focus) {
                            return;
                        }
                        if (this._showTimer) {
                            clearTimeout(this._showTimer);
                            delete this._showTimer;
                        }
                        this.close();
                    },
                    open: function (_a47) {
                        if (this._showTimer) {
                            clearTimeout(this._showTimer);
                            delete this._showTimer;
                        }
                        _a30.show(this.label || this.domNode.innerHTML, _a47, this.position, !this.isLeftToRight(), this.textDir);
                        this._connectNode = _a47;
                        this.onShow(_a47, this.position);
                    },
                    close: function () {
                        if (this._connectNode) {
                            _a30.hide(this._connectNode);
                            delete this._connectNode;
                            this.onHide();
                        }
                        if (this._showTimer) {
                            clearTimeout(this._showTimer);
                            delete this._showTimer;
                        }
                    },
                    onShow: function () {},
                    onHide: function () {},
                    uninitialize: function () {
                        this.close();
                        this.inherited(arguments);
                    }
                });
                _a30._MasterTooltip = _a2b;
                _a30.show = _a2a.showTooltip;
                _a30.hide = _a2a.hideTooltip;
                _a30.defaultPosition = ["after-centered", "before-centered"];
                return _a30;
            });
        },
        "dijit/place": function () {
            define("dijit/place", ["dojo/_base/array", "dojo/dom-geometry", "dojo/dom-style", "dojo/_base/kernel", "dojo/_base/window", "dojo/window", "."], function (_a48, _a49, _a4a, _a4b, win, _a4c, _a4d) {
                function _a4e(node, _a4f, _a50, _a51) {
                    var view = _a4c.getBox();
                    if (!node.parentNode || String(node.parentNode.tagName).toLowerCase() != "body") {
                        win.body().appendChild(node);
                    }
                    var best = null;
                    _a48.some(_a4f, function (_a52) {
                        var _a53 = _a52.corner;
                        var pos = _a52.pos;
                        var _a54 = 0;
                        var _a55 = {
                            w: {
                                "L": view.l + view.w - pos.x,
                                "R": pos.x - view.l,
                                "M": view.w
                            }[_a53.charAt(1)],
                            h: {
                                "T": view.t + view.h - pos.y,
                                "B": pos.y - view.t,
                                "M": view.h
                            }[_a53.charAt(0)]
                        };
                        if (_a50) {
                            var res = _a50(node, _a52.aroundCorner, _a53, _a55, _a51);
                            _a54 = typeof res == "undefined" ? 0 : res;
                        }
                        var _a56 = node.style;
                        var _a57 = _a56.display;
                        var _a58 = _a56.visibility;
                        if (_a56.display == "none") {
                            _a56.visibility = "hidden";
                            _a56.display = "";
                        }
                        var mb = _a49.getMarginBox(node);
                        _a56.display = _a57;
                        _a56.visibility = _a58;
                        var _a59 = {
                            "L": pos.x,
                            "R": pos.x - mb.w,
                            "M": Math.max(view.l, Math.min(view.l + view.w, pos.x + (mb.w >> 1)) - mb.w)
                        }[_a53.charAt(1)],
                            _a5a = {
                                "T": pos.y,
                                "B": pos.y - mb.h,
                                "M": Math.max(view.t, Math.min(view.t + view.h, pos.y + (mb.h >> 1)) - mb.h)
                            }[_a53.charAt(0)],
                            _a5b = Math.max(view.l, _a59),
                            _a5c = Math.max(view.t, _a5a),
                            endX = Math.min(view.l + view.w, _a59 + mb.w),
                            endY = Math.min(view.t + view.h, _a5a + mb.h),
                            _a5d = endX - _a5b,
                            _a5e = endY - _a5c;
                        _a54 += (mb.w - _a5d) + (mb.h - _a5e);
                        if (best == null || _a54 < best.overflow) {
                            best = {
                                corner: _a53,
                                aroundCorner: _a52.aroundCorner,
                                x: _a5b,
                                y: _a5c,
                                w: _a5d,
                                h: _a5e,
                                overflow: _a54,
                                spaceAvailable: _a55
                            };
                        }
                        return !_a54;
                    });
                    if (best.overflow && _a50) {
                        _a50(node, best.aroundCorner, best.corner, best.spaceAvailable, _a51);
                    }
                    var l = _a49.isBodyLtr(),
                        s = node.style;
                    s.top = best.y + "px";
                    s[l ? "left" : "right"] = (l ? best.x : view.w - best.x - best.w) + "px";
                    s[l ? "right" : "left"] = "auto";
                    return best;
                };
                return (_a4d.place = {
                    at: function (node, pos, _a5f, _a60) {
                        var _a61 = _a48.map(_a5f, function (_a62) {
                            var c = {
                                corner: _a62,
                                pos: {
                                    x: pos.x,
                                    y: pos.y
                                }
                            };
                            if (_a60) {
                                c.pos.x += _a62.charAt(1) == "L" ? _a60.x : -_a60.x;
                                c.pos.y += _a62.charAt(0) == "T" ? _a60.y : -_a60.y;
                            }
                            return c;
                        });
                        return _a4e(node, _a61);
                    },
                    around: function (node, _a63, _a64, _a65, _a66) {
                        var _a67 = (typeof _a63 == "string" || "offsetWidth" in _a63) ? _a49.position(_a63, true) : _a63;
                        if (_a63.parentNode) {
                            var _a68 = _a63.parentNode;
                            while (_a68 && _a68.nodeType == 1 && _a68.nodeName != "BODY") {
                                var _a69 = _a49.position(_a68, true);
                                var _a6a = _a4a.getComputedStyle(_a68).overflow;
                                if (_a6a == "hidden" || _a6a == "auto" || _a6a == "scroll") {
                                    var _a6b = Math.min(_a67.y + _a67.h, _a69.y + _a69.h);
                                    var _a6c = Math.min(_a67.x + _a67.w, _a69.x + _a69.w);
                                    _a67.x = Math.max(_a67.x, _a69.x);
                                    _a67.y = Math.max(_a67.y, _a69.y);
                                    _a67.h = _a6b - _a67.y;
                                    _a67.w = _a6c - _a67.x;
                                }
                                _a68 = _a68.parentNode;
                            }
                        }
                        var x = _a67.x,
                            y = _a67.y,
                            _a6d = "w" in _a67 ? _a67.w : (_a67.w = _a67.width),
                            _a6e = "h" in _a67 ? _a67.h : (_a4b.deprecated("place.around: dijit.place.__Rectangle: { x:" + x + ", y:" + y + ", height:" + _a67.height + ", width:" + _a6d + " } has been deprecated.  Please use { x:" + x + ", y:" + y + ", h:" + _a67.height + ", w:" + _a6d + " }", "", "2.0"), _a67.h = _a67.height);
                        var _a6f = [];

                        function push(_a70, _a71) {
                            _a6f.push({
                                aroundCorner: _a70,
                                corner: _a71,
                                pos: {
                                    x: {
                                        "L": x,
                                        "R": x + _a6d,
                                        "M": x + (_a6d >> 1)
                                    }[_a70.charAt(1)],
                                    y: {
                                        "T": y,
                                        "B": y + _a6e,
                                        "M": y + (_a6e >> 1)
                                    }[_a70.charAt(0)]
                                }
                            });
                        };
                        _a48.forEach(_a64, function (pos) {
                            var ltr = _a65;
                            switch (pos) {
                            case "above-centered":
                                push("TM", "BM");
                                break;
                            case "below-centered":
                                push("BM", "TM");
                                break;
                            case "after-centered":
                                ltr = !ltr;
                            case "before-centered":
                                push(ltr ? "ML" : "MR", ltr ? "MR" : "ML");
                                break;
                            case "after":
                                ltr = !ltr;
                            case "before":
                                push(ltr ? "TL" : "TR", ltr ? "TR" : "TL");
                                push(ltr ? "BL" : "BR", ltr ? "BR" : "BL");
                                break;
                            case "below-alt":
                                ltr = !ltr;
                            case "below":
                                push(ltr ? "BL" : "BR", ltr ? "TL" : "TR");
                                push(ltr ? "BR" : "BL", ltr ? "TR" : "TL");
                                break;
                            case "above-alt":
                                ltr = !ltr;
                            case "above":
                                push(ltr ? "TL" : "TR", ltr ? "BL" : "BR");
                                push(ltr ? "TR" : "TL", ltr ? "BR" : "BL");
                                break;
                            default:
                                push(pos.aroundCorner, pos.corner);
                            }
                        });
                        var _a72 = _a4e(node, _a6f, _a66, {
                            w: _a6d,
                            h: _a6e
                        });
                        _a72.aroundNodePos = _a67;
                        return _a72;
                    }
                });
            });
        },
        "url:dijit/templates/Tooltip.html": "<div class=\"dijitTooltip dijitTooltipLeft\" id=\"dojoTooltip\"\n\t><div class=\"dijitTooltipContainer dijitTooltipContents\" data-dojo-attach-point=\"containerNode\" role='alert'></div\n\t><div class=\"dijitTooltipConnector\" data-dojo-attach-point=\"connectorNode\"></div\n></div>\n",
        "url:dijit/form/templates/ValidationTextBox.html": "<div class=\"dijit dijitReset dijitInline dijitLeft\"\n\tid=\"widget_${id}\" role=\"presentation\"\n\t><div class='dijitReset dijitValidationContainer'\n\t\t><input class=\"dijitReset dijitInputField dijitValidationIcon dijitValidationInner\" value=\"&#935; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\n\t/></div\n\t><div class=\"dijitReset dijitInputField dijitInputContainer\"\n\t\t><input class=\"dijitReset dijitInputInner\" data-dojo-attach-point='textbox,focusNode' autocomplete=\"off\"\n\t\t\t${!nameAttrSetting} type='${type}'\n\t/></div\n></div>\n",
        "dijit/form/nls/validate": function () {
            define("dijit/form/nls/validate", {
                root: ({
                    invalidMessage: "The value entered is not valid.",
                    missingMessage: "This value is required.",
                    rangeMessage: "This value is out of range."
                }),
                "zh": true,
                "zh-tw": true,
                "tr": true,
                "th": true,
                "sv": true,
                "sl": true,
                "sk": true,
                "ru": true,
                "ro": true,
                "pt": true,
                "pt-pt": true,
                "pl": true,
                "nl": true,
                "nb": true,
                "ko": true,
                "kk": true,
                "ja": true,
                "it": true,
                "hu": true,
                "hr": true,
                "he": true,
                "fr": true,
                "fi": true,
                "es": true,
                "el": true,
                "de": true,
                "da": true,
                "cs": true,
                "ca": true,
                "az": true,
                "ar": true
            });
        },
        "dijit/form/ComboBoxMixin": function () {
            require({
                cache: {
                    "url:dijit/form/templates/DropDownBox.html": "<div class=\"dijit dijitReset dijitInline dijitLeft\"\n\tid=\"widget_${id}\"\n\trole=\"combobox\"\n\t><div class='dijitReset dijitRight dijitButtonNode dijitArrowButton dijitDownArrowButton dijitArrowButtonContainer'\n\t\tdata-dojo-attach-point=\"_buttonNode, _popupStateNode\" role=\"presentation\"\n\t\t><input class=\"dijitReset dijitInputField dijitArrowButtonInner\" value=\"&#9660; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\n\t\t\t${_buttonInputDisabled}\n\t/></div\n\t><div class='dijitReset dijitValidationContainer'\n\t\t><input class=\"dijitReset dijitInputField dijitValidationIcon dijitValidationInner\" value=\"&#935; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\n\t/></div\n\t><div class=\"dijitReset dijitInputField dijitInputContainer\"\n\t\t><input class='dijitReset dijitInputInner' ${!nameAttrSetting} type=\"text\" autocomplete=\"off\"\n\t\t\tdata-dojo-attach-point=\"textbox,focusNode\" role=\"textbox\" aria-haspopup=\"true\"\n\t/></div\n></div>\n"
                }
            });
            define("dijit/form/ComboBoxMixin", ["dojo/_base/declare", "dojo/_base/Deferred", "dojo/_base/kernel", "dojo/_base/lang", "dojo/store/util/QueryResults", "./_AutoCompleterMixin", "./_ComboBoxMenu", "../_HasDropDown", "dojo/text!./templates/DropDownBox.html"], function (_a73, _a74, _a75, lang, _a76, _a77, _a78, _a79, _a7a) {
                return _a73("dijit.form.ComboBoxMixin", [_a79, _a77], {
                    dropDownClass: _a78,
                    hasDownArrow: true,
                    templateString: _a7a,
                    baseClass: "dijitTextBox dijitComboBox",
                    cssStateNodes: {
                        "_buttonNode": "dijitDownArrowButton"
                    },
                    _setHasDownArrowAttr: function (val) {
                        this._set("hasDownArrow", val);
                        this._buttonNode.style.display = val ? "" : "none";
                    },
                    _showResultList: function () {
                        this.displayMessage("");
                        this.inherited(arguments);
                    },
                    _setStoreAttr: function (_a7b) {
                        if (!_a7b.get) {
                            lang.mixin(_a7b, {
                                _oldAPI: true,
                                get: function (id) {
                                    var _a7c = new _a74();
                                    this.fetchItemByIdentity({
                                        identity: id,
                                        onItem: function (_a7d) {
                                            _a7c.resolve(_a7d);
                                        },
                                        onError: function (_a7e) {
                                            _a7c.reject(_a7e);
                                        }
                                    });
                                    return _a7c.promise;
                                },
                                query: function (_a7f, _a80) {
                                    var _a81 = new _a74(function () {
                                        _a82.abort && _a82.abort();
                                    });
                                    var _a82 = this.fetch(lang.mixin({
                                        query: _a7f,
                                        onBegin: function (_a83) {
                                            _a81.total = _a83;
                                        },
                                        onComplete: function (_a84) {
                                            _a81.resolve(_a84);
                                        },
                                        onError: function (_a85) {
                                            _a81.reject(_a85);
                                        }
                                    }, _a80));
                                    return _a76(_a81);
                                }
                            });
                        }
                        this._set("store", _a7b);
                    },
                    postMixInProperties: function () {
                        if (this.params.store) {
                            this._setStoreAttr(this.params.store);
                        }
                        this.inherited(arguments);
                        if (!this.params.store) {
                            var _a86 = this.declaredClass;
                            lang.mixin(this.store, {
                                getValue: function (item, attr) {
                                    _a75.deprecated(_a86 + ".store.getValue(item, attr) is deprecated for builtin store.  Use item.attr directly", "", "2.0");
                                    return item[attr];
                                },
                                getLabel: function (item) {
                                    _a75.deprecated(_a86 + ".store.getLabel(item) is deprecated for builtin store.  Use item.label directly", "", "2.0");
                                    return item.name;
                                },
                                fetch: function (args) {
                                    _a75.deprecated(_a86 + ".store.fetch() is deprecated for builtin store.", "Use store.query()", "2.0");
                                    var shim = ["dojo/data/ObjectStore"];
                                    require(shim, lang.hitch(this, function (_a87) {
                                        new _a87({
                                            objectStore: this
                                        }).fetch(args);
                                    }));
                                }
                            });
                        }
                    }
                });
            });
        },
        "dojo/store/util/QueryResults": function () {
            define(["../../_base/array", "../../_base/lang", "../../_base/Deferred"], function (_a88, lang, _a89) {
                var util = lang.getObject("dojo.store.util", true);
                util.QueryResults = function (_a8a) {
                    if (!_a8a) {
                        return _a8a;
                    }
                    if (_a8a.then) {
                        _a8a = lang.delegate(_a8a);
                    }
                    function _a8b(_a8c) {
                        if (!_a8a[_a8c]) {
                            _a8a[_a8c] = function () {
                                var args = arguments;
                                return _a89.when(_a8a, function (_a8d) {
                                    Array.prototype.unshift.call(args, _a8d);
                                    return util.QueryResults(_a88[_a8c].apply(_a88, args));
                                });
                            };
                        }
                    };
                    _a8b("forEach");
                    _a8b("filter");
                    _a8b("map");
                    if (!_a8a.total) {
                        _a8a.total = _a89.when(_a8a, function (_a8e) {
                            return _a8e.length;
                        });
                    }
                    return _a8a;
                };
                return util.QueryResults;
            });
        },
        "dijit/form/_AutoCompleterMixin": function () {
            define("dijit/form/_AutoCompleterMixin", ["dojo/_base/connect", "dojo/data/util/filter", "dojo/_base/declare", "dojo/_base/Deferred", "dojo/dom-attr", "dojo/_base/event", "dojo/keys", "dojo/_base/lang", "dojo/query", "dojo/regexp", "dojo/_base/sniff", "dojo/string", "dojo/_base/window", "./DataList", "../registry", "./_TextBoxMixin"], function (_a8f, _a90, _a91, _a92, _a93, _a94, keys, lang, _a95, _a96, has, _a97, win, _a98, _a99, _a9a) {
                return _a91("dijit.form._AutoCompleterMixin", null, {
                    item: null,
                    pageSize: Infinity,
                    store: null,
                    fetchProperties: {},
                    query: {},
                    autoComplete: true,
                    highlightMatch: "first",
                    searchDelay: 100,
                    searchAttr: "name",
                    labelAttr: "",
                    labelType: "text",
                    queryExpr: "${0}*",
                    ignoreCase: true,
                    maxHeight: -1,
                    _stopClickEvents: false,
                    _getCaretPos: function (_a9b) {
                        var pos = 0;
                        if (typeof (_a9b.selectionStart) == "number") {
                            pos = _a9b.selectionStart;
                        } else {
                            if (has("ie")) {
                                var tr = win.doc.selection.createRange().duplicate();
                                var ntr = _a9b.createTextRange();
                                tr.move("character", 0);
                                ntr.move("character", 0);
                                try {
                                    ntr.setEndPoint("EndToEnd", tr);
                                    pos = String(ntr.text).replace(/\r/g, "").length;
                                } catch (e) {}
                            }
                        }
                        return pos;
                    },
                    _setCaretPos: function (_a9c, _a9d) {
                        _a9d = parseInt(_a9d);
                        _a9a.selectInputText(_a9c, _a9d, _a9d);
                    },
                    _setDisabledAttr: function (_a9e) {
                        this.inherited(arguments);
                        this.domNode.setAttribute("aria-disabled", _a9e);
                    },
                    _abortQuery: function () {
                        if (this.searchTimer) {
                            clearTimeout(this.searchTimer);
                            this.searchTimer = null;
                        }
                        if (this._fetchHandle) {
                            if (this._fetchHandle.cancel) {
                                this._cancelingQuery = true;
                                this._fetchHandle.cancel();
                                this._cancelingQuery = false;
                            }
                            this._fetchHandle = null;
                        }
                    },
                    _onInput: function (evt) {
                        this.inherited(arguments);
                        if (evt.charOrCode == 229) {
                            this._onKey(evt);
                        }
                    },
                    _onKey: function (evt) {
                        var key = evt.charOrCode;
                        if (evt.altKey || ((evt.ctrlKey || evt.metaKey) && (key != "x" && key != "v")) || key == keys.SHIFT) {
                            return;
                        }
                        var _a9f = false;
                        var pw = this.dropDown;
                        var _aa0 = null;
                        this._prev_key_backspace = false;
                        this._abortQuery();
                        this.inherited(arguments);
                        if (this._opened) {
                            _aa0 = pw.getHighlightedOption();
                        }
                        switch (key) {
                        case keys.PAGE_DOWN:
                        case keys.DOWN_ARROW:
                        case keys.PAGE_UP:
                        case keys.UP_ARROW:
                            if (this._opened) {
                                this._announceOption(_aa0);
                            }
                            _a94.stop(evt);
                            break;
                        case keys.ENTER:
                            if (_aa0) {
                                if (_aa0 == pw.nextButton) {
                                    this._nextSearch(1);
                                    _a94.stop(evt);
                                    break;
                                } else {
                                    if (_aa0 == pw.previousButton) {
                                        this._nextSearch(-1);
                                        _a94.stop(evt);
                                        break;
                                    }
                                }
                            } else {
                                this._setBlurValue();
                                this._setCaretPos(this.focusNode, this.focusNode.value.length);
                            }
                            if (this._opened || this._fetchHandle) {
                                _a94.stop(evt);
                            }
                        case keys.TAB:
                            var _aa1 = this.get("displayedValue");
                            if (pw && (_aa1 == pw._messages["previousMessage"] || _aa1 == pw._messages["nextMessage"])) {
                                break;
                            }
                            if (_aa0) {
                                this._selectOption(_aa0);
                            }
                        case keys.ESCAPE:
                            if (this._opened) {
                                this._lastQuery = null;
                                this.closeDropDown();
                            }
                            break;
                        case " ":
                            if (_aa0) {
                                _a94.stop(evt);
                                this._selectOption(_aa0);
                                this.closeDropDown();
                            } else {
                                _a9f = true;
                            }
                            break;
                        case keys.DELETE:
                        case keys.BACKSPACE:
                            this._prev_key_backspace = true;
                            _a9f = true;
                            break;
                        default:
                            _a9f = typeof key == "string" || key == 229;
                        }
                        if (_a9f) {
                            this.item = undefined;
                            this.searchTimer = setTimeout(lang.hitch(this, "_startSearchFromInput"), 1);
                        }
                    },
                    _autoCompleteText: function (text) {
                        var fn = this.focusNode;
                        _a9a.selectInputText(fn, fn.value.length);
                        var _aa2 = this.ignoreCase ? "toLowerCase" : "substr";
                        if (text[_aa2](0).indexOf(this.focusNode.value[_aa2](0)) == 0) {
                            var cpos = this.autoComplete ? this._getCaretPos(fn) : fn.value.length;
                            if ((cpos + 1) > fn.value.length) {
                                fn.value = text;
                                _a9a.selectInputText(fn, cpos);
                            }
                        } else {
                            fn.value = text;
                            _a9a.selectInputText(fn);
                        }
                    },
                    _openResultList: function (_aa3, _aa4, _aa5) {
                        this._fetchHandle = null;
                        if (this.disabled || this.readOnly || (_aa4[this.searchAttr] !== this._lastQuery)) {
                            return;
                        }
                        var _aa6 = this.dropDown.getHighlightedOption();
                        this.dropDown.clearResultList();
                        if (!_aa3.length && _aa5.start == 0) {
                            this.closeDropDown();
                            return;
                        }
                        var _aa7 = this.dropDown.createOptions(_aa3, _aa5, lang.hitch(this, "_getMenuLabelFromItem"));
                        this._showResultList();
                        if (_aa5.direction) {
                            if (1 == _aa5.direction) {
                                this.dropDown.highlightFirstOption();
                            } else {
                                if (-1 == _aa5.direction) {
                                    this.dropDown.highlightLastOption();
                                }
                            }
                            if (_aa6) {
                                this._announceOption(this.dropDown.getHighlightedOption());
                            }
                        } else {
                            if (this.autoComplete && !this._prev_key_backspace && !/^[*]+$/.test(_aa4[this.searchAttr].toString())) {
                                this._announceOption(_aa7[1]);
                            }
                        }
                    },
                    _showResultList: function () {
                        this.closeDropDown(true);
                        this.openDropDown();
                        this.domNode.setAttribute("aria-expanded", "true");
                    },
                    loadDropDown: function () {
                        this._startSearchAll();
                    },
                    isLoaded: function () {
                        return false;
                    },
                    closeDropDown: function () {
                        this._abortQuery();
                        if (this._opened) {
                            this.inherited(arguments);
                            this.domNode.setAttribute("aria-expanded", "false");
                            this.focusNode.removeAttribute("aria-activedescendant");
                        }
                    },
                    _setBlurValue: function () {
                        var _aa8 = this.get("displayedValue");
                        var pw = this.dropDown;
                        if (pw && (_aa8 == pw._messages["previousMessage"] || _aa8 == pw._messages["nextMessage"])) {
                            this._setValueAttr(this._lastValueReported, true);
                        } else {
                            if (typeof this.item == "undefined") {
                                this.item = null;
                                this.set("displayedValue", _aa8);
                            } else {
                                if (this.value != this._lastValueReported) {
                                    this._handleOnChange(this.value, true);
                                }
                                this._refreshState();
                            }
                        }
                    },
                    _setItemAttr: function (item, _aa9, _aaa) {
                        var _aab = "";
                        if (item) {
                            if (!_aaa) {
                                _aaa = this.store._oldAPI ? this.store.getValue(item, this.searchAttr) : item[this.searchAttr];
                            }
                            _aab = this._getValueField() != this.searchAttr ? this.store.getIdentity(item) : _aaa;
                        }
                        this.set("value", _aab, _aa9, _aaa, item);
                    },
                    _announceOption: function (node) {
                        if (!node) {
                            return;
                        }
                        var _aac;
                        if (node == this.dropDown.nextButton || node == this.dropDown.previousButton) {
                            _aac = node.innerHTML;
                            this.item = undefined;
                            this.value = "";
                        } else {
                            _aac = (this.store._oldAPI ? this.store.getValue(node.item, this.searchAttr) : node.item[this.searchAttr]).toString();
                            this.set("item", node.item, false, _aac);
                        }
                        this.focusNode.value = this.focusNode.value.substring(0, this._lastInput.length);
                        this.focusNode.setAttribute("aria-activedescendant", _a93.get(node, "id"));
                        this._autoCompleteText(_aac);
                    },
                    _selectOption: function (_aad) {
                        this.closeDropDown();
                        if (_aad) {
                            this._announceOption(_aad);
                        }
                        this._setCaretPos(this.focusNode, this.focusNode.value.length);
                        this._handleOnChange(this.value, true);
                    },
                    _startSearchAll: function () {
                        this._startSearch("");
                    },
                    _startSearchFromInput: function () {
                        this._startSearch(this.focusNode.value.replace(/([\\\*\?])/g, "\\$1"));
                    },
                    _getQueryString: function (text) {
                        return _a97.substitute(this.queryExpr, [text]);
                    },
                    _startSearch: function (key) {
                        if (!this.dropDown) {
                            var _aae = this.id + "_popup",
                                _aaf = lang.isString(this.dropDownClass) ? lang.getObject(this.dropDownClass, false) : this.dropDownClass;
                            this.dropDown = new _aaf({
                                onChange: lang.hitch(this, this._selectOption),
                                id: _aae,
                                dir: this.dir,
                                textDir: this.textDir
                            });
                            this.focusNode.removeAttribute("aria-activedescendant");
                            this.textbox.setAttribute("aria-owns", _aae);
                        }
                        this._lastInput = key;
                        var _ab0 = lang.clone(this.query);
                        var _ab1 = {
                            start: 0,
                            count: this.pageSize,
                            queryOptions: {
                                ignoreCase: this.ignoreCase,
                                deep: true
                            }
                        };
                        lang.mixin(_ab1, this.fetchProperties);
                        var qs = this._getQueryString(key),
                            q;
                        if (this.store._oldAPI) {
                            q = qs;
                        } else {
                            q = _a90.patternToRegExp(qs, this.ignoreCase);
                            q.toString = function () {
                                return qs;
                            };
                        }
                        this._lastQuery = _ab0[this.searchAttr] = q;
                        var _ab2 = this,
                            _ab3 = function () {
                                var _ab4 = _ab2._fetchHandle = _ab2.store.query(_ab0, _ab1);
                                _a92.when(_ab4, function (res) {
                                    _ab2._fetchHandle = null;
                                    res.total = _ab4.total;
                                    _ab2._openResultList(res, _ab0, _ab1);
                                }, function (err) {
                                    _ab2._fetchHandle = null;
                                    if (!_ab2._cancelingQuery) {
                                        console.error(_ab2.declaredClass + " " + err.toString());
                                        _ab2.closeDropDown();
                                    }
                                });
                            };
                        this.searchTimer = setTimeout(lang.hitch(this, function (_ab5, _ab6) {
                            this.searchTimer = null;
                            _ab3();
                            this._nextSearch = this.dropDown.onPage = function (_ab7) {
                                _ab1.start += _ab1.count * _ab7;
                                _ab1.direction = _ab7;
                                _ab3();
                                _ab6.focus();
                            };
                        }, _ab0, this), this.searchDelay);
                    },
                    _getValueField: function () {
                        return this.searchAttr;
                    },
                    constructor: function () {
                        this.query = {};
                        this.fetchProperties = {};
                    },
                    postMixInProperties: function () {
                        if (!this.store) {
                            var _ab8 = this.srcNodeRef;
                            var list = this.list;
                            if (list) {
                                this.store = _a99.byId(list);
                            } else {
                                this.store = new _a98({}, _ab8);
                            }
                            if (!("value" in this.params)) {
                                var item = (this.item = this.store.fetchSelectedItem());
                                if (item) {
                                    var _ab9 = this._getValueField();
                                    this.value = this.store._oldAPI ? this.store.getValue(item, _ab9) : item[_ab9];
                                }
                            }
                        }
                        this.inherited(arguments);
                    },
                    postCreate: function () {
                        var _aba = _a95("label[for=\"" + this.id + "\"]");
                        if (_aba.length) {
                            _aba[0].id = (this.id + "_label");
                            this.domNode.setAttribute("aria-labelledby", _aba[0].id);
                        }
                        this.inherited(arguments);
                    },
                    _getMenuLabelFromItem: function (item) {
                        var _abb = this.labelFunc(item, this.store),
                            _abc = this.labelType;
                        if (this.highlightMatch != "none" && this.labelType == "text" && this._lastInput) {
                            _abb = this.doHighlight(_abb, this._escapeHtml(this._lastInput));
                            _abc = "html";
                        }
                        return {
                            html: _abc == "html",
                            label: _abb
                        };
                    },
                    doHighlight: function (_abd, find) {
                        var _abe = (this.ignoreCase ? "i" : "") + (this.highlightMatch == "all" ? "g" : ""),
                            i = this.queryExpr.indexOf("${0}");
                        find = _a96.escapeString(find);
                        return this._escapeHtml(_abd).replace(new RegExp((i == 0 ? "^" : "") + "(" + find + ")" + (i == (this.queryExpr.length - 4) ? "$" : ""), _abe), "<span class=\"dijitComboBoxHighlightMatch\">$1</span>");
                    },
                    _escapeHtml: function (str) {
                        str = String(str).replace(/&/gm, "&amp;").replace(/</gm, "&lt;").replace(/>/gm, "&gt;").replace(/"/gm, "&quot;");
                        return str;
                    },
                    reset: function () {
                        this.item = null;
                        this.inherited(arguments);
                    },
                    labelFunc: function (item, _abf) {
                        return (_abf._oldAPI ? _abf.getValue(item, this.labelAttr || this.searchAttr) : item[this.labelAttr || this.searchAttr]).toString();
                    },
                    _setValueAttr: function (_ac0, _ac1, _ac2, item) {
                        this._set("item", item || null);
                        if (!_ac0) {
                            _ac0 = "";
                        }
                        this.inherited(arguments);
                    },
                    _setTextDirAttr: function (_ac3) {
                        this.inherited(arguments);
                        if (this.dropDown) {
                            this.dropDown._set("textDir", _ac3);
                        }
                    }
                });
            });
        },
        "dijit/form/DataList": function () {
            define("dijit/form/DataList", ["dojo/_base/declare", "dojo/dom", "dojo/_base/lang", "dojo/query", "dojo/store/Memory", "../registry"], function (_ac4, dom, lang, _ac5, _ac6, _ac7) {
                function _ac8(_ac9) {
                    return {
                        id: _ac9.value,
                        value: _ac9.value,
                        name: lang.trim(_ac9.innerText || _ac9.textContent || "")
                    };
                };
                return _ac4("dijit.form.DataList", _ac6, {
                    constructor: function (_aca, _acb) {
                        this.domNode = dom.byId(_acb);
                        lang.mixin(this, _aca);
                        if (this.id) {
                            _ac7.add(this);
                        }
                        this.domNode.style.display = "none";
                        this.inherited(arguments, [{
                            data: _ac5("option", this.domNode).map(_ac8)
                        }]);
                    },
                    destroy: function () {
                        _ac7.remove(this.id);
                    },
                    fetchSelectedItem: function () {
                        var _acc = _ac5("> option[selected]", this.domNode)[0] || _ac5("> option", this.domNode)[0];
                        return _acc && _ac8(_acc);
                    }
                });
            });
        },
        "dojo/store/Memory": function () {
            define(["../_base/declare", "./util/QueryResults", "./util/SimpleQueryEngine"], function (_acd, _ace, _acf) {
                return _acd("dojo.store.Memory", null, {
                    constructor: function (_ad0) {
                        for (var i in _ad0) {
                            this[i] = _ad0[i];
                        }
                        this.setData(this.data || []);
                    },
                    data: null,
                    idProperty: "id",
                    index: null,
                    queryEngine: _acf,
                    get: function (id) {
                        return this.data[this.index[id]];
                    },
                    getIdentity: function (_ad1) {
                        return _ad1[this.idProperty];
                    },
                    put: function (_ad2, _ad3) {
                        var data = this.data,
                            _ad4 = this.index,
                            _ad5 = this.idProperty;
                        var id = (_ad3 && "id" in _ad3) ? _ad3.id : _ad5 in _ad2 ? _ad2[_ad5] : Math.random();
                        if (id in _ad4) {
                            if (_ad3 && _ad3.overwrite === false) {
                                throw new Error("Object already exists");
                            }
                            data[_ad4[id]] = _ad2;
                        } else {
                            _ad4[id] = data.push(_ad2) - 1;
                        }
                        return id;
                    },
                    add: function (_ad6, _ad7) {
                        (_ad7 = _ad7 || {}).overwrite = false;
                        return this.put(_ad6, _ad7);
                    },
                    remove: function (id) {
                        var _ad8 = this.index;
                        var data = this.data;
                        if (id in _ad8) {
                            data.splice(_ad8[id], 1);
                            this.setData(data);
                            return true;
                        }
                    },
                    query: function (_ad9, _ada) {
                        return _ace(this.queryEngine(_ad9, _ada)(this.data));
                    },
                    setData: function (data) {
                        if (data.items) {
                            this.idProperty = data.identifier;
                            data = this.data = data.items;
                        } else {
                            this.data = data;
                        }
                        this.index = {};
                        for (var i = 0, l = data.length; i < l; i++) {
                            this.index[data[i][this.idProperty]] = i;
                        }
                    }
                });
            });
        },
        "dojo/store/util/SimpleQueryEngine": function () {
            define(["../../_base/array"], function (_adb) {
                return function (_adc, _add) {
                    switch (typeof _adc) {
                        default: throw new Error("Can not query with a " + typeof _adc);
                    case "object":
                    case "undefined":
                        var _ade = _adc;
                        _adc = function (_adf) {
                            for (var key in _ade) {
                                var _ae0 = _ade[key];
                                if (_ae0 && _ae0.test) {
                                    if (!_ae0.test(_adf[key])) {
                                        return false;
                                    }
                                } else {
                                    if (_ae0 != _adf[key]) {
                                        return false;
                                    }
                                }
                            }
                            return true;
                        };
                        break;
                    case "string":
                        if (!this[_adc]) {
                            throw new Error("No filter function " + _adc + " was found in store");
                        }
                        _adc = this[_adc];
                    case "function":
                    }
                    function _ae1(_ae2) {
                        var _ae3 = _adb.filter(_ae2, _adc);
                        if (_add && _add.sort) {
                            _ae3.sort(function (a, b) {
                                for (var sort, i = 0; sort = _add.sort[i]; i++) {
                                    var _ae4 = a[sort.attribute];
                                    var _ae5 = b[sort.attribute];
                                    if (_ae4 != _ae5) {
                                        return !!sort.descending == _ae4 > _ae5 ? -1 : 1;
                                    }
                                }
                                return 0;
                            });
                        }
                        if (_add && (_add.start || _add.count)) {
                            var _ae6 = _ae3.length;
                            _ae3 = _ae3.slice(_add.start || 0, (_add.start || 0) + (_add.count || Infinity));
                            _ae3.total = _ae6;
                        }
                        return _ae3;
                    };
                    _ae1.matches = _adc;
                    return _ae1;
                };
            });
        },
        "dijit/form/_ComboBoxMenu": function () {
            define("dijit/form/_ComboBoxMenu", ["dojo/_base/declare", "dojo/dom-class", "dojo/dom-construct", "dojo/dom-style", "dojo/keys", "../_WidgetBase", "../_TemplatedMixin", "./_ComboBoxMenuMixin", "./_ListMouseMixin"], function (_ae7, _ae8, _ae9, _aea, keys, _aeb, _aec, _aed, _aee) {
                return _ae7("dijit.form._ComboBoxMenu", [_aeb, _aec, _aee, _aed], {
                    templateString: "<div class='dijitReset dijitMenu' data-dojo-attach-point='containerNode' style='overflow: auto; overflow-x: hidden;'>" + "<div class='dijitMenuItem dijitMenuPreviousButton' data-dojo-attach-point='previousButton' role='option'></div>" + "<div class='dijitMenuItem dijitMenuNextButton' data-dojo-attach-point='nextButton' role='option'></div>" + "</div>",
                    baseClass: "dijitComboBoxMenu",
                    postCreate: function () {
                        this.inherited(arguments);
                        if (!this.isLeftToRight()) {
                            _ae8.add(this.previousButton, "dijitMenuItemRtl");
                            _ae8.add(this.nextButton, "dijitMenuItemRtl");
                        }
                    },
                    _createMenuItem: function () {
                        return _ae9.create("div", {
                            "class": "dijitReset dijitMenuItem" + (this.isLeftToRight() ? "" : " dijitMenuItemRtl"),
                            role: "option"
                        });
                    },
                    onHover: function (node) {
                        _ae8.add(node, "dijitMenuItemHover");
                    },
                    onUnhover: function (node) {
                        _ae8.remove(node, "dijitMenuItemHover");
                    },
                    onSelect: function (node) {
                        _ae8.add(node, "dijitMenuItemSelected");
                    },
                    onDeselect: function (node) {
                        _ae8.remove(node, "dijitMenuItemSelected");
                    },
                    _page: function (up) {
                        var _aef = 0;
                        var _af0 = this.domNode.scrollTop;
                        var _af1 = _aea.get(this.domNode, "height");
                        if (!this.getHighlightedOption()) {
                            this.selectNextNode();
                        }
                        while (_aef < _af1) {
                            var _af2 = this.getHighlightedOption();
                            if (up) {
                                if (!_af2.previousSibling || _af2.previousSibling.style.display == "none") {
                                    break;
                                }
                                this.selectPreviousNode();
                            } else {
                                if (!_af2.nextSibling || _af2.nextSibling.style.display == "none") {
                                    break;
                                }
                                this.selectNextNode();
                            }
                            var _af3 = this.domNode.scrollTop;
                            _aef += (_af3 - _af0) * (up ? -1 : 1);
                            _af0 = _af3;
                        }
                    },
                    handleKey: function (evt) {
                        switch (evt.charOrCode) {
                        case keys.DOWN_ARROW:
                            this.selectNextNode();
                            return false;
                        case keys.PAGE_DOWN:
                            this._page(false);
                            return false;
                        case keys.UP_ARROW:
                            this.selectPreviousNode();
                            return false;
                        case keys.PAGE_UP:
                            this._page(true);
                            return false;
                        default:
                            return true;
                        }
                    }
                });
            });
        },
        "dijit/form/_ComboBoxMenuMixin": function () {
            define("dijit/form/_ComboBoxMenuMixin", ["dojo/_base/array", "dojo/_base/declare", "dojo/dom-attr", "dojo/i18n", "dojo/_base/window", "dojo/i18n!./nls/ComboBox"], function (_af4, _af5, _af6, i18n, win) {
                return _af5("dijit.form._ComboBoxMenuMixin", null, {
                    _messages: null,
                    postMixInProperties: function () {
                        this.inherited(arguments);
                        this._messages = i18n.getLocalization("dijit.form", "ComboBox", this.lang);
                    },
                    buildRendering: function () {
                        this.inherited(arguments);
                        this.previousButton.innerHTML = this._messages["previousMessage"];
                        this.nextButton.innerHTML = this._messages["nextMessage"];
                    },
                    _setValueAttr: function (_af7) {
                        this.value = _af7;
                        this.onChange(_af7);
                    },
                    onClick: function (node) {
                        if (node == this.previousButton) {
                            this._setSelectedAttr(null);
                            this.onPage(-1);
                        } else {
                            if (node == this.nextButton) {
                                this._setSelectedAttr(null);
                                this.onPage(1);
                            } else {
                                this.onChange(node);
                            }
                        }
                    },
                    onChange: function () {},
                    onPage: function () {},
                    onClose: function () {
                        this._setSelectedAttr(null);
                    },
                    _createOption: function (item, _af8) {
                        var _af9 = this._createMenuItem();
                        var _afa = _af8(item);
                        if (_afa.html) {
                            _af9.innerHTML = _afa.label;
                        } else {
                            _af9.appendChild(win.doc.createTextNode(_afa.label));
                        }
                        if (_af9.innerHTML == "") {
                            _af9.innerHTML = "&#160;";
                        }
                        this.applyTextDir(_af9, (_af9.innerText || _af9.textContent || ""));
                        _af9.item = item;
                        return _af9;
                    },
                    createOptions: function (_afb, _afc, _afd) {
                        this.previousButton.style.display = (_afc.start == 0) ? "none" : "";
                        _af6.set(this.previousButton, "id", this.id + "_prev");
                        _af4.forEach(_afb, function (item, i) {
                            var _afe = this._createOption(item, _afd);
                            _af6.set(_afe, "id", this.id + i);
                            this.nextButton.parentNode.insertBefore(_afe, this.nextButton);
                        }, this);
                        var _aff = false;
                        if (_afb.total && !_afb.total.then && _afb.total != -1) {
                            if ((_afc.start + _afc.count) < _afb.total) {
                                _aff = true;
                            } else {
                                if ((_afc.start + _afc.count) > _afb.total && _afc.count == _afb.length) {
                                    _aff = true;
                                }
                            }
                        } else {
                            if (_afc.count == _afb.length) {
                                _aff = true;
                            }
                        }
                        this.nextButton.style.display = _aff ? "" : "none";
                        _af6.set(this.nextButton, "id", this.id + "_next");
                        return this.containerNode.childNodes;
                    },
                    clearResultList: function () {
                        var _b00 = this.containerNode;
                        while (_b00.childNodes.length > 2) {
                            _b00.removeChild(_b00.childNodes[_b00.childNodes.length - 2]);
                        }
                        this._setSelectedAttr(null);
                    },
                    highlightFirstOption: function () {
                        this.selectFirstNode();
                    },
                    highlightLastOption: function () {
                        this.selectLastNode();
                    },
                    selectFirstNode: function () {
                        this.inherited(arguments);
                        if (this.getHighlightedOption() == this.previousButton) {
                            this.selectNextNode();
                        }
                    },
                    selectLastNode: function () {
                        this.inherited(arguments);
                        if (this.getHighlightedOption() == this.nextButton) {
                            this.selectPreviousNode();
                        }
                    },
                    getHighlightedOption: function () {
                        return this._getSelectedAttr();
                    }
                });
            });
        },
        "dijit/form/nls/ComboBox": function () {
            define("dijit/form/nls/ComboBox", {
                root: ({
                    previousMessage: "Previous choices",
                    nextMessage: "More choices"
                }),
                "zh": true,
                "zh-tw": true,
                "tr": true,
                "th": true,
                "sv": true,
                "sl": true,
                "sk": true,
                "ru": true,
                "ro": true,
                "pt": true,
                "pt-pt": true,
                "pl": true,
                "nl": true,
                "nb": true,
                "ko": true,
                "kk": true,
                "ja": true,
                "it": true,
                "hu": true,
                "hr": true,
                "he": true,
                "fr": true,
                "fi": true,
                "es": true,
                "el": true,
                "de": true,
                "da": true,
                "cs": true,
                "ca": true,
                "az": true,
                "ar": true
            });
        },
        "dijit/form/_ListMouseMixin": function () {
            define("dijit/form/_ListMouseMixin", ["dojo/_base/declare", "dojo/_base/event", "dojo/touch", "./_ListBase"], function (_b01, _b02, _b03, _b04) {
                return _b01("dijit.form._ListMouseMixin", _b04, {
                    postCreate: function () {
                        this.inherited(arguments);
                        this.connect(this.domNode, _b03.press, "_onMouseDown");
                        this.connect(this.domNode, _b03.release, "_onMouseUp");
                        this.connect(this.domNode, "onmouseover", "_onMouseOver");
                        this.connect(this.domNode, "onmouseout", "_onMouseOut");
                    },
                    _onMouseDown: function (evt) {
                        _b02.stop(evt);
                        if (this._hoveredNode) {
                            this.onUnhover(this._hoveredNode);
                            this._hoveredNode = null;
                        }
                        this._isDragging = true;
                        this._setSelectedAttr(this._getTarget(evt));
                    },
                    _onMouseUp: function (evt) {
                        _b02.stop(evt);
                        this._isDragging = false;
                        var _b05 = this._getSelectedAttr();
                        var _b06 = this._getTarget(evt);
                        var _b07 = this._hoveredNode;
                        if (_b05 && _b06 == _b05) {
                            this.onClick(_b05);
                        } else {
                            if (_b07 && _b06 == _b07) {
                                this._setSelectedAttr(_b07);
                                this.onClick(_b07);
                            }
                        }
                    },
                    _onMouseOut: function () {
                        if (this._hoveredNode) {
                            this.onUnhover(this._hoveredNode);
                            if (this._getSelectedAttr() == this._hoveredNode) {
                                this.onSelect(this._hoveredNode);
                            }
                            this._hoveredNode = null;
                        }
                        if (this._isDragging) {
                            this._cancelDrag = (new Date()).getTime() + 1000;
                        }
                    },
                    _onMouseOver: function (evt) {
                        if (this._cancelDrag) {
                            var time = (new Date()).getTime();
                            if (time > this._cancelDrag) {
                                this._isDragging = false;
                            }
                            this._cancelDrag = null;
                        }
                        var node = this._getTarget(evt);
                        if (!node) {
                            return;
                        }
                        if (this._hoveredNode != node) {
                            if (this._hoveredNode) {
                                this._onMouseOut({
                                    target: this._hoveredNode
                                });
                            }
                            if (node && node.parentNode == this.containerNode) {
                                if (this._isDragging) {
                                    this._setSelectedAttr(node);
                                } else {
                                    this._hoveredNode = node;
                                    this.onHover(node);
                                }
                            }
                        }
                    }
                });
            });
        },
        "dijit/form/_ListBase": function () {
            define("dijit/form/_ListBase", ["dojo/_base/declare", "dojo/window"], function (_b08, _b09) {
                return _b08("dijit.form._ListBase", null, {
                    selected: null,
                    _getTarget: function (evt) {
                        var tgt = evt.target;
                        var _b0a = this.containerNode;
                        if (tgt == _b0a || tgt == this.domNode) {
                            return null;
                        }
                        while (tgt && tgt.parentNode != _b0a) {
                            tgt = tgt.parentNode;
                        }
                        return tgt;
                    },
                    selectFirstNode: function () {
                        var _b0b = this.containerNode.firstChild;
                        while (_b0b && _b0b.style.display == "none") {
                            _b0b = _b0b.nextSibling;
                        }
                        this._setSelectedAttr(_b0b);
                    },
                    selectLastNode: function () {
                        var last = this.containerNode.lastChild;
                        while (last && last.style.display == "none") {
                            last = last.previousSibling;
                        }
                        this._setSelectedAttr(last);
                    },
                    selectNextNode: function () {
                        var _b0c = this._getSelectedAttr();
                        if (!_b0c) {
                            this.selectFirstNode();
                        } else {
                            var next = _b0c.nextSibling;
                            while (next && next.style.display == "none") {
                                next = next.nextSibling;
                            }
                            if (!next) {
                                this.selectFirstNode();
                            } else {
                                this._setSelectedAttr(next);
                            }
                        }
                    },
                    selectPreviousNode: function () {
                        var _b0d = this._getSelectedAttr();
                        if (!_b0d) {
                            this.selectLastNode();
                        } else {
                            var prev = _b0d.previousSibling;
                            while (prev && prev.style.display == "none") {
                                prev = prev.previousSibling;
                            }
                            if (!prev) {
                                this.selectLastNode();
                            } else {
                                this._setSelectedAttr(prev);
                            }
                        }
                    },
                    _setSelectedAttr: function (node) {
                        if (this.selected != node) {
                            var _b0e = this._getSelectedAttr();
                            if (_b0e) {
                                this.onDeselect(_b0e);
                                this.selected = null;
                            }
                            if (node && node.parentNode == this.containerNode) {
                                this.selected = node;
                                _b09.scrollIntoView(node);
                                this.onSelect(node);
                            }
                        } else {
                            if (node) {
                                this.onSelect(node);
                            }
                        }
                    },
                    _getSelectedAttr: function () {
                        var v = this.selected;
                        return (v && v.parentNode == this.containerNode) ? v : (this.selected = null);
                    }
                });
            });
        },
        "dijit/_HasDropDown": function () {
            define("dijit/_HasDropDown", ["dojo/_base/declare", "dojo/_base/Deferred", "dojo/_base/event", "dojo/dom", "dojo/dom-attr", "dojo/dom-class", "dojo/dom-geometry", "dojo/dom-style", "dojo/has", "dojo/keys", "dojo/_base/lang", "dojo/touch", "dojo/_base/window", "dojo/window", "./registry", "./focus", "./popup", "./_FocusMixin"], function (_b0f, _b10, _b11, dom, _b12, _b13, _b14, _b15, has, keys, lang, _b16, win, _b17, _b18, _b19, _b1a, _b1b) {
                return _b0f("dijit._HasDropDown", _b1b, {
                    _buttonNode: null,
                    _arrowWrapperNode: null,
                    _popupStateNode: null,
                    _aroundNode: null,
                    dropDown: null,
                    autoWidth: true,
                    forceWidth: false,
                    maxHeight: 0,
                    dropDownPosition: ["below", "above"],
                    _stopClickEvents: true,
                    _onDropDownMouseDown: function (e) {
                        if (this.disabled || this.readOnly) {
                            return;
                        }
                        e.preventDefault();
                        this._docHandler = this.connect(win.doc, _b16.release, "_onDropDownMouseUp");
                        this.toggleDropDown();
                    },
                    _onDropDownMouseUp: function (e) {
                        if (e && this._docHandler) {
                            this.disconnect(this._docHandler);
                        }
                        var _b1c = this.dropDown,
                            _b1d = false;
                        if (e && this._opened) {
                            var c = _b14.position(this._buttonNode, true);
                            if (!(e.pageX >= c.x && e.pageX <= c.x + c.w) || !(e.pageY >= c.y && e.pageY <= c.y + c.h)) {
                                var t = e.target;
                                while (t && !_b1d) {
                                    if (_b13.contains(t, "dijitPopup")) {
                                        _b1d = true;
                                    } else {
                                        t = t.parentNode;
                                    }
                                }
                                if (_b1d) {
                                    t = e.target;
                                    if (_b1c.onItemClick) {
                                        var _b1e;
                                        while (t && !(_b1e = _b18.byNode(t))) {
                                            t = t.parentNode;
                                        }
                                        if (_b1e && _b1e.onClick && _b1e.getParent) {
                                            _b1e.getParent().onItemClick(_b1e, e);
                                        }
                                    }
                                    return;
                                }
                            }
                        }
                        if (this._opened) {
                            if (_b1c.focus && _b1c.autoFocus !== false) {
                                window.setTimeout(lang.hitch(_b1c, "focus"), 1);
                            }
                        } else {
                            setTimeout(lang.hitch(this, "focus"), 0);
                        }
                        if (has("ios")) {
                            this._justGotMouseUp = true;
                            setTimeout(lang.hitch(this, function () {
                                this._justGotMouseUp = false;
                            }), 0);
                        }
                    },
                    _onDropDownClick: function (e) {
                        if (has("ios") && !this._justGotMouseUp) {
                            this._onDropDownMouseDown(e);
                            this._onDropDownMouseUp(e);
                        }
                        if (this._stopClickEvents) {
                            _b11.stop(e);
                        }
                    },
                    buildRendering: function () {
                        this.inherited(arguments);
                        this._buttonNode = this._buttonNode || this.focusNode || this.domNode;
                        this._popupStateNode = this._popupStateNode || this.focusNode || this._buttonNode;
                        var _b1f = {
                            "after": this.isLeftToRight() ? "Right" : "Left",
                            "before": this.isLeftToRight() ? "Left" : "Right",
                            "above": "Up",
                            "below": "Down",
                            "left": "Left",
                            "right": "Right"
                        }[this.dropDownPosition[0]] || this.dropDownPosition[0] || "Down";
                        _b13.add(this._arrowWrapperNode || this._buttonNode, "dijit" + _b1f + "ArrowButton");
                    },
                    postCreate: function () {
                        this.inherited(arguments);
                        this.connect(this._buttonNode, _b16.press, "_onDropDownMouseDown");
                        this.connect(this._buttonNode, "onclick", "_onDropDownClick");
                        this.connect(this.focusNode, "onkeypress", "_onKey");
                        this.connect(this.focusNode, "onkeyup", "_onKeyUp");
                    },
                    destroy: function () {
                        if (this.dropDown) {
                            if (!this.dropDown._destroyed) {
                                this.dropDown.destroyRecursive();
                            }
                            delete this.dropDown;
                        }
                        this.inherited(arguments);
                    },
                    _onKey: function (e) {
                        if (this.disabled || this.readOnly) {
                            return;
                        }
                        var d = this.dropDown,
                            _b20 = e.target;
                        if (d && this._opened && d.handleKey) {
                            if (d.handleKey(e) === false) {
                                _b11.stop(e);
                                return;
                            }
                        }
                        if (d && this._opened && e.charOrCode == keys.ESCAPE) {
                            this.closeDropDown();
                            _b11.stop(e);
                        } else {
                            if (!this._opened && (e.charOrCode == keys.DOWN_ARROW || ((e.charOrCode == keys.ENTER || e.charOrCode == " ") && ((_b20.tagName || "").toLowerCase() !== "input" || (_b20.type && _b20.type.toLowerCase() !== "text"))))) {
                                this._toggleOnKeyUp = true;
                                _b11.stop(e);
                            }
                        }
                    },
                    _onKeyUp: function () {
                        if (this._toggleOnKeyUp) {
                            delete this._toggleOnKeyUp;
                            this.toggleDropDown();
                            var d = this.dropDown;
                            if (d && d.focus) {
                                setTimeout(lang.hitch(d, "focus"), 1);
                            }
                        }
                    },
                    _onBlur: function () {
                        var _b21 = _b19.curNode && this.dropDown && dom.isDescendant(_b19.curNode, this.dropDown.domNode);
                        this.closeDropDown(_b21);
                        this.inherited(arguments);
                    },
                    isLoaded: function () {
                        return true;
                    },
                    loadDropDown: function (_b22) {
                        _b22();
                    },
                    loadAndOpenDropDown: function () {
                        var d = new _b10(),
                            _b23 = lang.hitch(this, function () {
                                this.openDropDown();
                                d.resolve(this.dropDown);
                            });
                        if (!this.isLoaded()) {
                            this.loadDropDown(_b23);
                        } else {
                            _b23();
                        }
                        return d;
                    },
                    toggleDropDown: function () {
                        if (this.disabled || this.readOnly) {
                            return;
                        }
                        if (!this._opened) {
                            this.loadAndOpenDropDown();
                        } else {
                            this.closeDropDown();
                        }
                    },
                    openDropDown: function () {
                        var _b24 = this.dropDown,
                            _b25 = _b24.domNode,
                            _b26 = this._aroundNode || this.domNode,
                            self = this;
                        if (!this._preparedNode) {
                            this._preparedNode = true;
                            if (_b25.style.width) {
                                this._explicitDDWidth = true;
                            }
                            if (_b25.style.height) {
                                this._explicitDDHeight = true;
                            }
                        }
                        if (this.maxHeight || this.forceWidth || this.autoWidth) {
                            var _b27 = {
                                display: "",
                                visibility: "hidden"
                            };
                            if (!this._explicitDDWidth) {
                                _b27.width = "";
                            }
                            if (!this._explicitDDHeight) {
                                _b27.height = "";
                            }
                            _b15.set(_b25, _b27);
                            var _b28 = this.maxHeight;
                            if (_b28 == -1) {
                                var _b29 = _b17.getBox(),
                                    _b2a = _b14.position(_b26, false);
                                _b28 = Math.floor(Math.max(_b2a.y, _b29.h - (_b2a.y + _b2a.h)));
                            }
                            _b1a.moveOffScreen(_b24);
                            if (_b24.startup && !_b24._started) {
                                _b24.startup();
                            }
                            var mb = _b14.getMarginSize(_b25);
                            var _b2b = (_b28 && mb.h > _b28);
                            _b15.set(_b25, {
                                overflowX: "hidden",
                                overflowY: _b2b ? "auto" : "hidden"
                            });
                            if (_b2b) {
                                mb.h = _b28;
                                if ("w" in mb) {
                                    mb.w += 16;
                                }
                            } else {
                                delete mb.h;
                            }
                            if (this.forceWidth) {
                                mb.w = _b26.offsetWidth;
                            } else {
                                if (this.autoWidth) {
                                    mb.w = Math.max(mb.w, _b26.offsetWidth);
                                } else {
                                    delete mb.w;
                                }
                            }
                            if (lang.isFunction(_b24.resize)) {
                                _b24.resize(mb);
                            } else {
                                _b14.setMarginBox(_b25, mb);
                            }
                        }
                        var _b2c = _b1a.open({
                            parent: this,
                            popup: _b24,
                            around: _b26,
                            orient: this.dropDownPosition,
                            onExecute: function () {
                                self.closeDropDown(true);
                            },
                            onCancel: function () {
                                self.closeDropDown(true);
                            },
                            onClose: function () {
                                _b12.set(self._popupStateNode, "popupActive", false);
                                _b13.remove(self._popupStateNode, "dijitHasDropDownOpen");
                                self._opened = false;
                            }
                        });
                        _b12.set(this._popupStateNode, "popupActive", "true");
                        _b13.add(self._popupStateNode, "dijitHasDropDownOpen");
                        this._opened = true;
                        return _b2c;
                    },
                    closeDropDown: function (_b2d) {
                        if (this._opened) {
                            if (_b2d) {
                                this.focus();
                            }
                            _b1a.close(this.dropDown);
                            this._opened = false;
                        }
                    }
                });
            });
        },
        "dijit/popup": function () {
            define("dijit/popup", ["dojo/_base/array", "dojo/aspect", "dojo/_base/connect", "dojo/_base/declare", "dojo/dom", "dojo/dom-attr", "dojo/dom-construct", "dojo/dom-geometry", "dojo/dom-style", "dojo/_base/event", "dojo/keys", "dojo/_base/lang", "dojo/on", "dojo/_base/sniff", "dojo/_base/window", "./place", "./BackgroundIframe", "."], function (_b2e, _b2f, _b30, _b31, dom, _b32, _b33, _b34, _b35, _b36, keys, lang, on, has, win, _b37, _b38, _b39) {
                var _b3a = _b31(null, {
                    _stack: [],
                    _beginZIndex: 1000,
                    _idGen: 1,
                    _createWrapper: function (_b3b) {
                        var _b3c = _b3b._popupWrapper,
                            node = _b3b.domNode;
                        if (!_b3c) {
                            _b3c = _b33.create("div", {
                                "class": "dijitPopup",
                                style: {
                                    display: "none"
                                },
                                role: "presentation"
                            }, win.body());
                            _b3c.appendChild(node);
                            var s = node.style;
                            s.display = "";
                            s.visibility = "";
                            s.position = "";
                            s.top = "0px";
                            _b3b._popupWrapper = _b3c;
                            _b2f.after(_b3b, "destroy", function () {
                                _b33.destroy(_b3c);
                                delete _b3b._popupWrapper;
                            });
                        }
                        return _b3c;
                    },
                    moveOffScreen: function (_b3d) {
                        var _b3e = this._createWrapper(_b3d);
                        _b35.set(_b3e, {
                            visibility: "hidden",
                            top: "-9999px",
                            display: ""
                        });
                    },
                    hide: function (_b3f) {
                        var _b40 = this._createWrapper(_b3f);
                        _b35.set(_b40, "display", "none");
                    },
                    getTopPopup: function () {
                        var _b41 = this._stack;
                        for (var pi = _b41.length - 1; pi > 0 && _b41[pi].parent === _b41[pi - 1].widget; pi--) {}
                        return _b41[pi];
                    },
                    open: function (args) {
                        var _b42 = this._stack,
                            _b43 = args.popup,
                            _b44 = args.orient || ["below", "below-alt", "above", "above-alt"],
                            ltr = args.parent ? args.parent.isLeftToRight() : _b34.isBodyLtr(),
                            _b45 = args.around,
                            id = (args.around && args.around.id) ? (args.around.id + "_dropdown") : ("popup_" + this._idGen++);
                        while (_b42.length && (!args.parent || !dom.isDescendant(args.parent.domNode, _b42[_b42.length - 1].widget.domNode))) {
                            this.close(_b42[_b42.length - 1].widget);
                        }
                        var _b46 = this._createWrapper(_b43);
                        _b32.set(_b46, {
                            id: id,
                            style: {
                                zIndex: this._beginZIndex + _b42.length
                            },
                            "class": "dijitPopup " + (_b43.baseClass || _b43["class"] || "").split(" ")[0] + "Popup",
                            dijitPopupParent: args.parent ? args.parent.id : ""
                        });
                        if (has("ie") || has("mozilla")) {
                            if (!_b43.bgIframe) {
                                _b43.bgIframe = new _b38(_b46);
                            }
                        }
                        var best = _b45 ? _b37.around(_b46, _b45, _b44, ltr, _b43.orient ? lang.hitch(_b43, "orient") : null) : _b37.at(_b46, args, _b44 == "R" ? ["TR", "BR", "TL", "BL"] : ["TL", "BL", "TR", "BR"], args.padding);
                        _b46.style.display = "";
                        _b46.style.visibility = "visible";
                        _b43.domNode.style.visibility = "visible";
                        var _b47 = [];
                        _b47.push(on(_b46, _b30._keypress, lang.hitch(this, function (evt) {
                            if (evt.charOrCode == keys.ESCAPE && args.onCancel) {
                                _b36.stop(evt);
                                args.onCancel();
                            } else {
                                if (evt.charOrCode === keys.TAB) {
                                    _b36.stop(evt);
                                    var _b48 = this.getTopPopup();
                                    if (_b48 && _b48.onCancel) {
                                        _b48.onCancel();
                                    }
                                }
                            }
                        })));
                        if (_b43.onCancel && args.onCancel) {
                            _b47.push(_b43.on("cancel", args.onCancel));
                        }
                        _b47.push(_b43.on(_b43.onExecute ? "execute" : "change", lang.hitch(this, function () {
                            var _b49 = this.getTopPopup();
                            if (_b49 && _b49.onExecute) {
                                _b49.onExecute();
                            }
                        })));
                        _b42.push({
                            widget: _b43,
                            parent: args.parent,
                            onExecute: args.onExecute,
                            onCancel: args.onCancel,
                            onClose: args.onClose,
                            handlers: _b47
                        });
                        if (_b43.onOpen) {
                            _b43.onOpen(best);
                        }
                        return best;
                    },
                    close: function (_b4a) {
                        var _b4b = this._stack;
                        while ((_b4a && _b2e.some(_b4b, function (elem) {
                            return elem.widget == _b4a;
                        })) || (!_b4a && _b4b.length)) {
                            var top = _b4b.pop(),
                                _b4c = top.widget,
                                _b4d = top.onClose;
                            if (_b4c.onClose) {
                                _b4c.onClose();
                            }
                            var h;
                            while (h = top.handlers.pop()) {
                                h.remove();
                            }
                            if (_b4c && _b4c.domNode) {
                                this.hide(_b4c);
                            }
                            if (_b4d) {
                                _b4d();
                            }
                        }
                    }
                });
                return (_b39.popup = new _b3a());
            });
        },
        "url:dijit/form/templates/DropDownBox.html": "<div class=\"dijit dijitReset dijitInline dijitLeft\"\n\tid=\"widget_${id}\"\n\trole=\"combobox\"\n\t><div class='dijitReset dijitRight dijitButtonNode dijitArrowButton dijitDownArrowButton dijitArrowButtonContainer'\n\t\tdata-dojo-attach-point=\"_buttonNode, _popupStateNode\" role=\"presentation\"\n\t\t><input class=\"dijitReset dijitInputField dijitArrowButtonInner\" value=\"&#9660; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\n\t\t\t${_buttonInputDisabled}\n\t/></div\n\t><div class='dijitReset dijitValidationContainer'\n\t\t><input class=\"dijitReset dijitInputField dijitValidationIcon dijitValidationInner\" value=\"&#935; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\n\t/></div\n\t><div class=\"dijitReset dijitInputField dijitInputContainer\"\n\t\t><input class='dijitReset dijitInputInner' ${!nameAttrSetting} type=\"text\" autocomplete=\"off\"\n\t\t\tdata-dojo-attach-point=\"textbox,focusNode\" role=\"textbox\" aria-haspopup=\"true\"\n\t/></div\n></div>\n",
        "dijit/form/NumberTextBox": function () {
            define("dijit/form/NumberTextBox", ["dojo/_base/declare", "dojo/_base/lang", "dojo/number", "./RangeBoundTextBox"], function (_b4e, lang, _b4f, _b50) {
                var _b51 = _b4e("dijit.form.NumberTextBoxMixin", null, {
                    regExpGen: _b4f.regexp,
                    value: NaN,
                    editOptions: {
                        pattern: "#.######"
                    },
                    _formatter: _b4f.format,
                    postMixInProperties: function () {
                        this.inherited(arguments);
                        this._set("type", "text");
                    },
                    _setConstraintsAttr: function (_b52) {
                        var _b53 = typeof _b52.places == "number" ? _b52.places : 0;
                        if (_b53) {
                            _b53++;
                        }
                        if (typeof _b52.max != "number") {
                            _b52.max = 9 * Math.pow(10, 15 - _b53);
                        }
                        if (typeof _b52.min != "number") {
                            _b52.min = -9 * Math.pow(10, 15 - _b53);
                        }
                        this.inherited(arguments, [_b52]);
                        if (this.focusNode && this.focusNode.value && !isNaN(this.value)) {
                            this.set("value", this.value);
                        }
                    },
                    _onFocus: function () {
                        if (this.disabled) {
                            return;
                        }
                        var val = this.get("value");
                        if (typeof val == "number" && !isNaN(val)) {
                            var _b54 = this.format(val, this.constraints);
                            if (_b54 !== undefined) {
                                this.textbox.value = _b54;
                            }
                        }
                        this.inherited(arguments);
                    },
                    format: function (_b55, _b56) {
                        var _b57 = String(_b55);
                        if (typeof _b55 != "number") {
                            return _b57;
                        }
                        if (isNaN(_b55)) {
                            return "";
                        }
                        if (!("rangeCheck" in this && this.rangeCheck(_b55, _b56)) && _b56.exponent !== false && /\de[-+]?\d/i.test(_b57)) {
                            return _b57;
                        }
                        if (this.editOptions && this.focused) {
                            _b56 = lang.mixin({}, _b56, this.editOptions);
                        }
                        return this._formatter(_b55, _b56);
                    },
                    _parser: _b4f.parse,
                    parse: function (_b58, _b59) {
                        var v = this._parser(_b58, lang.mixin({}, _b59, (this.editOptions && this.focused) ? this.editOptions : {}));
                        if (this.editOptions && this.focused && isNaN(v)) {
                            v = this._parser(_b58, _b59);
                        }
                        return v;
                    },
                    _getDisplayedValueAttr: function () {
                        var v = this.inherited(arguments);
                        return isNaN(v) ? this.textbox.value : v;
                    },
                    filter: function (_b5a) {
                        return (_b5a === null || _b5a === "" || _b5a === undefined) ? NaN : this.inherited(arguments);
                    },
                    serialize: function (_b5b, _b5c) {
                        return (typeof _b5b != "number" || isNaN(_b5b)) ? "" : this.inherited(arguments);
                    },
                    _setBlurValue: function () {
                        var val = lang.hitch(lang.mixin({}, this, {
                            focused: true
                        }), "get")("value");
                        this._setValueAttr(val, true);
                    },
                    _setValueAttr: function (_b5d, _b5e, _b5f) {
                        if (_b5d !== undefined && _b5f === undefined) {
                            _b5f = String(_b5d);
                            if (typeof _b5d == "number") {
                                if (isNaN(_b5d)) {
                                    _b5f = "";
                                } else {
                                    if (("rangeCheck" in this && this.rangeCheck(_b5d, this.constraints)) || this.constraints.exponent === false || !/\de[-+]?\d/i.test(_b5f)) {
                                        _b5f = undefined;
                                    }
                                }
                            } else {
                                if (!_b5d) {
                                    _b5f = "";
                                    _b5d = NaN;
                                } else {
                                    _b5d = undefined;
                                }
                            }
                        }
                        this.inherited(arguments, [_b5d, _b5e, _b5f]);
                    },
                    _getValueAttr: function () {
                        var v = this.inherited(arguments);
                        if (isNaN(v) && this.textbox.value !== "") {
                            if (this.constraints.exponent !== false && /\de[-+]?\d/i.test(this.textbox.value) && (new RegExp("^" + _b4f._realNumberRegexp(lang.mixin({}, this.constraints)) + "$").test(this.textbox.value))) {
                                var n = Number(this.textbox.value);
                                return isNaN(n) ? undefined : n;
                            } else {
                                return undefined;
                            }
                        } else {
                            return v;
                        }
                    },
                    isValid: function (_b60) {
                        if (!this.focused || this._isEmpty(this.textbox.value)) {
                            return this.inherited(arguments);
                        } else {
                            var v = this.get("value");
                            if (!isNaN(v) && this.rangeCheck(v, this.constraints)) {
                                if (this.constraints.exponent !== false && /\de[-+]?\d/i.test(this.textbox.value)) {
                                    return true;
                                } else {
                                    return this.inherited(arguments);
                                }
                            } else {
                                return false;
                            }
                        }
                    }
                });
                var _b61 = _b4e("dijit.form.NumberTextBox", [_b50, _b51], {
                    baseClass: "dijitTextBox dijitNumberTextBox"
                });
                _b61.Mixin = _b51;
                return _b61;
            });
        },
        "dojo/number": function () {
            define(["./_base/kernel", "./_base/lang", "./i18n", "./i18n!./cldr/nls/number", "./string", "./regexp"], function (dojo, lang, i18n, _b62, _b63, _b64) {
                lang.getObject("number", true, dojo);
                dojo.number.format = function (_b65, _b66) {
                    _b66 = lang.mixin({}, _b66 || {});
                    var _b67 = i18n.normalizeLocale(_b66.locale),
                        _b68 = i18n.getLocalization("dojo.cldr", "number", _b67);
                    _b66.customs = _b68;
                    var _b69 = _b66.pattern || _b68[(_b66.type || "decimal") + "Format"];
                    if (isNaN(_b65) || Math.abs(_b65) == Infinity) {
                        return null;
                    }
                    return dojo.number._applyPattern(_b65, _b69, _b66);
                };
                dojo.number._numberPatternRE = /[#0,]*[#0](?:\.0*#*)?/;
                dojo.number._applyPattern = function (_b6a, _b6b, _b6c) {
                    _b6c = _b6c || {};
                    var _b6d = _b6c.customs.group,
                        _b6e = _b6c.customs.decimal,
                        _b6f = _b6b.split(";"),
                        _b70 = _b6f[0];
                    _b6b = _b6f[(_b6a < 0) ? 1 : 0] || ("-" + _b70);
                    if (_b6b.indexOf("%") != -1) {
                        _b6a *= 100;
                    } else {
                        if (_b6b.indexOf("‰") != -1) {
                            _b6a *= 1000;
                        } else {
                            if (_b6b.indexOf("¤") != -1) {
                                _b6d = _b6c.customs.currencyGroup || _b6d;
                                _b6e = _b6c.customs.currencyDecimal || _b6e;
                                _b6b = _b6b.replace(/\u00a4{1,3}/, function (_b71) {
                                    var prop = ["symbol", "currency", "displayName"][_b71.length - 1];
                                    return _b6c[prop] || _b6c.currency || "";
                                });
                            } else {
                                if (_b6b.indexOf("E") != -1) {
                                    throw new Error("exponential notation not supported");
                                }
                            }
                        }
                    }
                    var _b72 = dojo.number._numberPatternRE;
                    var _b73 = _b70.match(_b72);
                    if (!_b73) {
                        throw new Error("unable to find a number expression in pattern: " + _b6b);
                    }
                    if (_b6c.fractional === false) {
                        _b6c.places = 0;
                    }
                    return _b6b.replace(_b72, dojo.number._formatAbsolute(_b6a, _b73[0], {
                        decimal: _b6e,
                        group: _b6d,
                        places: _b6c.places,
                        round: _b6c.round
                    }));
                };
                dojo.number.round = function (_b74, _b75, _b76) {
                    var _b77 = 10 / (_b76 || 10);
                    return (_b77 * +_b74).toFixed(_b75) / _b77;
                };
                if ((0.9).toFixed() == 0) {
                    var _b78 = dojo.number.round;
                    dojo.number.round = function (v, p, m) {
                        var d = Math.pow(10, -p || 0),
                            a = Math.abs(v);
                        if (!v || a >= d || a * Math.pow(10, p + 1) < 5) {
                            d = 0;
                        }
                        return _b78(v, p, m) + (v > 0 ? d : -d);
                    };
                }
                dojo.number._formatAbsolute = function (_b79, _b7a, _b7b) {
                    _b7b = _b7b || {};
                    if (_b7b.places === true) {
                        _b7b.places = 0;
                    }
                    if (_b7b.places === Infinity) {
                        _b7b.places = 6;
                    }
                    var _b7c = _b7a.split("."),
                        _b7d = typeof _b7b.places == "string" && _b7b.places.indexOf(","),
                        _b7e = _b7b.places;
                    if (_b7d) {
                        _b7e = _b7b.places.substring(_b7d + 1);
                    } else {
                        if (!(_b7e >= 0)) {
                            _b7e = (_b7c[1] || []).length;
                        }
                    }
                    if (!(_b7b.round < 0)) {
                        _b79 = dojo.number.round(_b79, _b7e, _b7b.round);
                    }
                    var _b7f = String(Math.abs(_b79)).split("."),
                        _b80 = _b7f[1] || "";
                    if (_b7c[1] || _b7b.places) {
                        if (_b7d) {
                            _b7b.places = _b7b.places.substring(0, _b7d);
                        }
                        var pad = _b7b.places !== undefined ? _b7b.places : (_b7c[1] && _b7c[1].lastIndexOf("0") + 1);
                        if (pad > _b80.length) {
                            _b7f[1] = _b63.pad(_b80, pad, "0", true);
                        }
                        if (_b7e < _b80.length) {
                            _b7f[1] = _b80.substr(0, _b7e);
                        }
                    } else {
                        if (_b7f[1]) {
                            _b7f.pop();
                        }
                    }
                    var _b81 = _b7c[0].replace(",", "");
                    pad = _b81.indexOf("0");
                    if (pad != -1) {
                        pad = _b81.length - pad;
                        if (pad > _b7f[0].length) {
                            _b7f[0] = _b63.pad(_b7f[0], pad);
                        }
                        if (_b81.indexOf("#") == -1) {
                            _b7f[0] = _b7f[0].substr(_b7f[0].length - pad);
                        }
                    }
                    var _b82 = _b7c[0].lastIndexOf(","),
                        _b83, _b84;
                    if (_b82 != -1) {
                        _b83 = _b7c[0].length - _b82 - 1;
                        var _b85 = _b7c[0].substr(0, _b82);
                        _b82 = _b85.lastIndexOf(",");
                        if (_b82 != -1) {
                            _b84 = _b85.length - _b82 - 1;
                        }
                    }
                    var _b86 = [];
                    for (var _b87 = _b7f[0]; _b87;) {
                        var off = _b87.length - _b83;
                        _b86.push((off > 0) ? _b87.substr(off) : _b87);
                        _b87 = (off > 0) ? _b87.slice(0, off) : "";
                        if (_b84) {
                            _b83 = _b84;
                            delete _b84;
                        }
                    }
                    _b7f[0] = _b86.reverse().join(_b7b.group || ",");
                    return _b7f.join(_b7b.decimal || ".");
                };
                dojo.number.regexp = function (_b88) {
                    return dojo.number._parseInfo(_b88).regexp;
                };
                dojo.number._parseInfo = function (_b89) {
                    _b89 = _b89 || {};
                    var _b8a = i18n.normalizeLocale(_b89.locale),
                        _b8b = i18n.getLocalization("dojo.cldr", "number", _b8a),
                        _b8c = _b89.pattern || _b8b[(_b89.type || "decimal") + "Format"],
                        _b8d = _b8b.group,
                        _b8e = _b8b.decimal,
                        _b8f = 1;
                    if (_b8c.indexOf("%") != -1) {
                        _b8f /= 100;
                    } else {
                        if (_b8c.indexOf("‰") != -1) {
                            _b8f /= 1000;
                        } else {
                            var _b90 = _b8c.indexOf("¤") != -1;
                            if (_b90) {
                                _b8d = _b8b.currencyGroup || _b8d;
                                _b8e = _b8b.currencyDecimal || _b8e;
                            }
                        }
                    }
                    var _b91 = _b8c.split(";");
                    if (_b91.length == 1) {
                        _b91.push("-" + _b91[0]);
                    }
                    var re = _b64.buildGroupRE(_b91, function (_b92) {
                        _b92 = "(?:" + _b64.escapeString(_b92, ".") + ")";
                        return _b92.replace(dojo.number._numberPatternRE, function (_b93) {
                            var _b94 = {
                                signed: false,
                                separator: _b89.strict ? _b8d : [_b8d, ""],
                                fractional: _b89.fractional,
                                decimal: _b8e,
                                exponent: false
                            },
                                _b95 = _b93.split("."),
                                _b96 = _b89.places;
                            if (_b95.length == 1 && _b8f != 1) {
                                _b95[1] = "###";
                            }
                            if (_b95.length == 1 || _b96 === 0) {
                                _b94.fractional = false;
                            } else {
                                if (_b96 === undefined) {
                                    _b96 = _b89.pattern ? _b95[1].lastIndexOf("0") + 1 : Infinity;
                                }
                                if (_b96 && _b89.fractional == undefined) {
                                    _b94.fractional = true;
                                }
                                if (!_b89.places && (_b96 < _b95[1].length)) {
                                    _b96 += "," + _b95[1].length;
                                }
                                _b94.places = _b96;
                            }
                            var _b97 = _b95[0].split(",");
                            if (_b97.length > 1) {
                                _b94.groupSize = _b97.pop().length;
                                if (_b97.length > 1) {
                                    _b94.groupSize2 = _b97.pop().length;
                                }
                            }
                            return "(" + dojo.number._realNumberRegexp(_b94) + ")";
                        });
                    }, true);
                    if (_b90) {
                        re = re.replace(/([\s\xa0]*)(\u00a4{1,3})([\s\xa0]*)/g, function (_b98, _b99, _b9a, _b9b) {
                            var prop = ["symbol", "currency", "displayName"][_b9a.length - 1],
                                _b9c = _b64.escapeString(_b89[prop] || _b89.currency || "");
                            _b99 = _b99 ? "[\\s\\xa0]" : "";
                            _b9b = _b9b ? "[\\s\\xa0]" : "";
                            if (!_b89.strict) {
                                if (_b99) {
                                    _b99 += "*";
                                }
                                if (_b9b) {
                                    _b9b += "*";
                                }
                                return "(?:" + _b99 + _b9c + _b9b + ")?";
                            }
                            return _b99 + _b9c + _b9b;
                        });
                    }
                    return {
                        regexp: re.replace(/[\xa0 ]/g, "[\\s\\xa0]"),
                        group: _b8d,
                        decimal: _b8e,
                        factor: _b8f
                    };
                };
                dojo.number.parse = function (_b9d, _b9e) {
                    var info = dojo.number._parseInfo(_b9e),
                        _b9f = (new RegExp("^" + info.regexp + "$")).exec(_b9d);
                    if (!_b9f) {
                        return NaN;
                    }
                    var _ba0 = _b9f[1];
                    if (!_b9f[1]) {
                        if (!_b9f[2]) {
                            return NaN;
                        }
                        _ba0 = _b9f[2];
                        info.factor *= -1;
                    }
                    _ba0 = _ba0.replace(new RegExp("[" + info.group + "\\s\\xa0" + "]", "g"), "").replace(info.decimal, ".");
                    return _ba0 * info.factor;
                };
                dojo.number._realNumberRegexp = function (_ba1) {
                    _ba1 = _ba1 || {};
                    if (!("places" in _ba1)) {
                        _ba1.places = Infinity;
                    }
                    if (typeof _ba1.decimal != "string") {
                        _ba1.decimal = ".";
                    }
                    if (!("fractional" in _ba1) || /^0/.test(_ba1.places)) {
                        _ba1.fractional = [true, false];
                    }
                    if (!("exponent" in _ba1)) {
                        _ba1.exponent = [true, false];
                    }
                    if (!("eSigned" in _ba1)) {
                        _ba1.eSigned = [true, false];
                    }
                    var _ba2 = dojo.number._integerRegexp(_ba1),
                        _ba3 = _b64.buildGroupRE(_ba1.fractional, function (q) {
                            var re = "";
                            if (q && (_ba1.places !== 0)) {
                                re = "\\" + _ba1.decimal;
                                if (_ba1.places == Infinity) {
                                    re = "(?:" + re + "\\d+)?";
                                } else {
                                    re += "\\d{" + _ba1.places + "}";
                                }
                            }
                            return re;
                        }, true);
                    var _ba4 = _b64.buildGroupRE(_ba1.exponent, function (q) {
                        if (q) {
                            return "([eE]" + dojo.number._integerRegexp({
                                signed: _ba1.eSigned
                            }) + ")";
                        }
                        return "";
                    });
                    var _ba5 = _ba2 + _ba3;
                    if (_ba3) {
                        _ba5 = "(?:(?:" + _ba5 + ")|(?:" + _ba3 + "))";
                    }
                    return _ba5 + _ba4;
                };
                dojo.number._integerRegexp = function (_ba6) {
                    _ba6 = _ba6 || {};
                    if (!("signed" in _ba6)) {
                        _ba6.signed = [true, false];
                    }
                    if (!("separator" in _ba6)) {
                        _ba6.separator = "";
                    } else {
                        if (!("groupSize" in _ba6)) {
                            _ba6.groupSize = 3;
                        }
                    }
                    var _ba7 = _b64.buildGroupRE(_ba6.signed, function (q) {
                        return q ? "[-+]" : "";
                    }, true);
                    var _ba8 = _b64.buildGroupRE(_ba6.separator, function (sep) {
                        if (!sep) {
                            return "(?:\\d+)";
                        }
                        sep = _b64.escapeString(sep);
                        if (sep == " ") {
                            sep = "\\s";
                        } else {
                            if (sep == " ") {
                                sep = "\\s\\xa0";
                            }
                        }
                        var grp = _ba6.groupSize,
                            grp2 = _ba6.groupSize2;
                        if (grp2) {
                            var _ba9 = "(?:0|[1-9]\\d{0," + (grp2 - 1) + "}(?:[" + sep + "]\\d{" + grp2 + "})*[" + sep + "]\\d{" + grp + "})";
                            return ((grp - grp2) > 0) ? "(?:" + _ba9 + "|(?:0|[1-9]\\d{0," + (grp - 1) + "}))" : _ba9;
                        }
                        return "(?:0|[1-9]\\d{0," + (grp - 1) + "}(?:[" + sep + "]\\d{" + grp + "})*)";
                    }, true);
                    return _ba7 + _ba8;
                };
                return dojo.number;
            });
        },
        "dojo/cldr/nls/number": function () {
            define({
                root: {
                    "scientificFormat": "#E0",
                    "currencySpacing-afterCurrency-currencyMatch": "[:letter:]",
                    "infinity": "∞",
                    "list": ";",
                    "percentSign": "%",
                    "minusSign": "-",
                    "currencySpacing-beforeCurrency-surroundingMatch": "[:digit:]",
                    "decimalFormat-short": "000T",
                    "currencySpacing-afterCurrency-insertBetween": " ",
                    "nan": "NaN",
                    "nativeZeroDigit": "0",
                    "plusSign": "+",
                    "currencySpacing-afterCurrency-surroundingMatch": "[:digit:]",
                    "currencySpacing-beforeCurrency-currencyMatch": "[:letter:]",
                    "currencyFormat": "¤ #,##0.00",
                    "perMille": "‰",
                    "group": ",",
                    "percentFormat": "#,##0%",
                    "decimalFormat": "#,##0.###",
                    "decimal": ".",
                    "patternDigit": "#",
                    "currencySpacing-beforeCurrency-insertBetween": " ",
                    "exponential": "E"
                },
                "ar": true,
                "ca": true,
                "cs": true,
                "da": true,
                "de": true,
                "el": true,
                "en": true,
                "en-au": true,
                "en-gb": true,
                "es": true,
                "fi": true,
                "fr": true,
                "fr-ch": true,
                "he": true,
                "hu": true,
                "it": true,
                "ja": true,
                "ko": true,
                "nb": true,
                "nl": true,
                "pl": true,
                "pt": true,
                "pt-pt": true,
                "ro": true,
                "ru": true,
                "sk": true,
                "sl": true,
                "sv": true,
                "th": true,
                "tr": true,
                "zh": true,
                "zh-hant": true,
                "zh-hk": true
            });
        },
        "dijit/form/RangeBoundTextBox": function () {
            define("dijit/form/RangeBoundTextBox", ["dojo/_base/declare", "dojo/i18n", "./MappedTextBox"], function (_baa, i18n, _bab) {
                return _baa("dijit.form.RangeBoundTextBox", _bab, {
                    rangeMessage: "",
                    rangeCheck: function (_bac, _bad) {
                        return ("min" in _bad ? (this.compare(_bac, _bad.min) >= 0) : true) && ("max" in _bad ? (this.compare(_bac, _bad.max) <= 0) : true);
                    },
                    isInRange: function () {
                        return this.rangeCheck(this.get("value"), this.constraints);
                    },
                    _isDefinitelyOutOfRange: function () {
                        var val = this.get("value");
                        var _bae = false;
                        var _baf = false;
                        if ("min" in this.constraints) {
                            var min = this.constraints.min;
                            min = this.compare(val, ((typeof min == "number") && min >= 0 && val != 0) ? 0 : min);
                            _bae = (typeof min == "number") && min < 0;
                        }
                        if ("max" in this.constraints) {
                            var max = this.constraints.max;
                            max = this.compare(val, ((typeof max != "number") || max > 0) ? max : 0);
                            _baf = (typeof max == "number") && max > 0;
                        }
                        return _bae || _baf;
                    },
                    _isValidSubset: function () {
                        return this.inherited(arguments) && !this._isDefinitelyOutOfRange();
                    },
                    isValid: function (_bb0) {
                        return this.inherited(arguments) && ((this._isEmpty(this.textbox.value) && !this.required) || this.isInRange(_bb0));
                    },
                    getErrorMessage: function (_bb1) {
                        var v = this.get("value");
                        if (v !== null && v !== "" && v !== undefined && (typeof v != "number" || !isNaN(v)) && !this.isInRange(_bb1)) {
                            return this.rangeMessage;
                        }
                        return this.inherited(arguments);
                    },
                    postMixInProperties: function () {
                        this.inherited(arguments);
                        if (!this.rangeMessage) {
                            this.messages = i18n.getLocalization("dijit.form", "validate", this.lang);
                            this.rangeMessage = this.messages.rangeMessage;
                        }
                    },
                    _setConstraintsAttr: function (_bb2) {
                        this.inherited(arguments);
                        if (this.focusNode) {
                            if (this.constraints.min !== undefined) {
                                this.focusNode.setAttribute("aria-valuemin", this.constraints.min);
                            } else {
                                this.focusNode.removeAttribute("aria-valuemin");
                            }
                            if (this.constraints.max !== undefined) {
                                this.focusNode.setAttribute("aria-valuemax", this.constraints.max);
                            } else {
                                this.focusNode.removeAttribute("aria-valuemax");
                            }
                        }
                    },
                    _setValueAttr: function (_bb3, _bb4) {
                        this.focusNode.setAttribute("aria-valuenow", _bb3);
                        this.inherited(arguments);
                    },
                    applyTextDir: function () {}
                });
            });
        },
        "dijit/form/MappedTextBox": function () {
            define("dijit/form/MappedTextBox", ["dojo/_base/declare", "dojo/dom-construct", "./ValidationTextBox"], function (_bb5, _bb6, _bb7) {
                return _bb5("dijit.form.MappedTextBox", _bb7, {
                    postMixInProperties: function () {
                        this.inherited(arguments);
                        this.nameAttrSetting = "";
                    },
                    _setNameAttr: null,
                    serialize: function (val) {
                        return val.toString ? val.toString() : "";
                    },
                    toString: function () {
                        var val = this.filter(this.get("value"));
                        return val != null ? (typeof val == "string" ? val : this.serialize(val, this.constraints)) : "";
                    },
                    validate: function () {
                        this.valueNode.value = this.toString();
                        return this.inherited(arguments);
                    },
                    buildRendering: function () {
                        this.inherited(arguments);
                        this.valueNode = _bb6.place("<input type='hidden'" + (this.name ? " name='" + this.name.replace(/'/g, "&quot;") + "'" : "") + "/>", this.textbox, "after");
                    },
                    reset: function () {
                        this.valueNode.value = "";
                        this.inherited(arguments);
                    }
                });
            });
        },
        "dijit/form/DateTextBox": function () {
            define("dijit/form/DateTextBox", ["dojo/_base/declare", "../Calendar", "./_DateTimeTextBox"], function (_bb8, _bb9, _bba) {
                return _bb8("dijit.form.DateTextBox", _bba, {
                    baseClass: "dijitTextBox dijitComboBox dijitDateTextBox",
                    popupClass: _bb9,
                    _selector: "date",
                    value: new Date("")
                });
            });
        },
        "dijit/Calendar": function () {
            define("dijit/Calendar", ["dojo/_base/array", "dojo/date", "dojo/date/locale", "dojo/_base/declare", "dojo/dom-attr", "dojo/dom-class", "dojo/_base/event", "dojo/_base/kernel", "dojo/keys", "dojo/_base/lang", "dojo/_base/sniff", "./CalendarLite", "./_Widget", "./_CssStateMixin", "./_TemplatedMixin", "./form/DropDownButton", "./hccss"], function (_bbb, date, _bbc, _bbd, _bbe, _bbf, _bc0, _bc1, keys, lang, has, _bc2, _bc3, _bc4, _bc5, _bc6) {
                var _bc7 = _bbd("dijit.Calendar", [_bc2, _bc3, _bc4], {
                    cssStateNodes: {
                        "decrementMonth": "dijitCalendarArrow",
                        "incrementMonth": "dijitCalendarArrow",
                        "previousYearLabelNode": "dijitCalendarPreviousYear",
                        "nextYearLabelNode": "dijitCalendarNextYear"
                    },
                    setValue: function (_bc8) {
                        _bc1.deprecated("dijit.Calendar:setValue() is deprecated.  Use set('value', ...) instead.", "", "2.0");
                        this.set("value", _bc8);
                    },
                    _createMonthWidget: function () {
                        return new _bc7._MonthDropDownButton({
                            id: this.id + "_mddb",
                            tabIndex: -1,
                            onMonthSelect: lang.hitch(this, "_onMonthSelect"),
                            lang: this.lang,
                            dateLocaleModule: this.dateLocaleModule
                        }, this.monthNode);
                    },
                    buildRendering: function () {
                        this.inherited(arguments);
                        this.connect(this.domNode, "onkeypress", "_onKeyPress");
                        this.connect(this.dateRowsNode, "onmouseover", "_onDayMouseOver");
                        this.connect(this.dateRowsNode, "onmouseout", "_onDayMouseOut");
                        this.connect(this.dateRowsNode, "onmousedown", "_onDayMouseDown");
                        this.connect(this.dateRowsNode, "onmouseup", "_onDayMouseUp");
                    },
                    _onMonthSelect: function (_bc9) {
                        this._setCurrentFocusAttr(this.dateFuncObj.add(this.currentFocus, "month", _bc9 - this.currentFocus.getMonth()));
                    },
                    _onDayMouseOver: function (evt) {
                        var node = _bbf.contains(evt.target, "dijitCalendarDateLabel") ? evt.target.parentNode : evt.target;
                        if (node && ((node.dijitDateValue && !_bbf.contains(node, "dijitCalendarDisabledDate")) || node == this.previousYearLabelNode || node == this.nextYearLabelNode)) {
                            _bbf.add(node, "dijitCalendarHoveredDate");
                            this._currentNode = node;
                        }
                    },
                    _onDayMouseOut: function (evt) {
                        if (!this._currentNode) {
                            return;
                        }
                        if (evt.relatedTarget && evt.relatedTarget.parentNode == this._currentNode) {
                            return;
                        }
                        var cls = "dijitCalendarHoveredDate";
                        if (_bbf.contains(this._currentNode, "dijitCalendarActiveDate")) {
                            cls += " dijitCalendarActiveDate";
                        }
                        _bbf.remove(this._currentNode, cls);
                        this._currentNode = null;
                    },
                    _onDayMouseDown: function (evt) {
                        var node = evt.target.parentNode;
                        if (node && node.dijitDateValue && !_bbf.contains(node, "dijitCalendarDisabledDate")) {
                            _bbf.add(node, "dijitCalendarActiveDate");
                            this._currentNode = node;
                        }
                    },
                    _onDayMouseUp: function (evt) {
                        var node = evt.target.parentNode;
                        if (node && node.dijitDateValue) {
                            _bbf.remove(node, "dijitCalendarActiveDate");
                        }
                    },
                    handleKey: function (evt) {
                        var _bca = -1,
                            _bcb, _bcc = this.currentFocus;
                        switch (evt.charOrCode) {
                        case keys.RIGHT_ARROW:
                            _bca = 1;
                        case keys.LEFT_ARROW:
                            _bcb = "day";
                            if (!this.isLeftToRight()) {
                                _bca *= -1;
                            }
                            break;
                        case keys.DOWN_ARROW:
                            _bca = 1;
                        case keys.UP_ARROW:
                            _bcb = "week";
                            break;
                        case keys.PAGE_DOWN:
                            _bca = 1;
                        case keys.PAGE_UP:
                            _bcb = evt.ctrlKey || evt.altKey ? "year" : "month";
                            break;
                        case keys.END:
                            _bcc = this.dateFuncObj.add(_bcc, "month", 1);
                            _bcb = "day";
                        case keys.HOME:
                            _bcc = new this.dateClassObj(_bcc);
                            _bcc.setDate(1);
                            break;
                        case keys.ENTER:
                        case " ":
                            this.set("value", this.currentFocus);
                            break;
                        default:
                            return true;
                        }
                        if (_bcb) {
                            _bcc = this.dateFuncObj.add(_bcc, _bcb, _bca);
                        }
                        this._setCurrentFocusAttr(_bcc);
                        return false;
                    },
                    _onKeyPress: function (evt) {
                        if (!this.handleKey(evt)) {
                            _bc0.stop(evt);
                        }
                    },
                    onValueSelected: function () {},
                    onChange: function (_bcd) {
                        this.onValueSelected(_bcd);
                    },
                    getClassForDate: function () {}
                });
                _bc7._MonthDropDownButton = _bbd("dijit.Calendar._MonthDropDownButton", _bc6, {
                    onMonthSelect: function () {},
                    postCreate: function () {
                        this.inherited(arguments);
                        this.dropDown = new _bc7._MonthDropDown({
                            id: this.id + "_mdd",
                            onChange: this.onMonthSelect
                        });
                    },
                    _setMonthAttr: function (_bce) {
                        var _bcf = this.dateLocaleModule.getNames("months", "wide", "standAlone", this.lang, _bce);
                        this.dropDown.set("months", _bcf);
                        this.containerNode.innerHTML = (has("ie") == 6 ? "" : "<div class='dijitSpacer'>" + this.dropDown.domNode.innerHTML + "</div>") + "<div class='dijitCalendarMonthLabel dijitCalendarCurrentMonthLabel'>" + _bcf[_bce.getMonth()] + "</div>";
                    }
                });
                _bc7._MonthDropDown = _bbd("dijit.Calendar._MonthDropDown", [_bc3, _bc5], {
                    months: [],
                    templateString: "<div class='dijitCalendarMonthMenu dijitMenu' " + "data-dojo-attach-event='onclick:_onClick,onmouseover:_onMenuHover,onmouseout:_onMenuHover'></div>",
                    _setMonthsAttr: function (_bd0) {
                        this.domNode.innerHTML = _bbb.map(_bd0, function (_bd1, idx) {
                            return _bd1 ? "<div class='dijitCalendarMonthLabel' month='" + idx + "'>" + _bd1 + "</div>" : "";
                        }).join("");
                    },
                    _onClick: function (evt) {
                        this.onChange(_bbe.get(evt.target, "month"));
                    },
                    onChange: function () {},
                    _onMenuHover: function (evt) {
                        _bbf.toggle(evt.target, "dijitCalendarMonthLabelHover", evt.type == "mouseover");
                    }
                });
                return _bc7;
            });
        },
        "dijit/CalendarLite": function () {
            require({
                cache: {
                    "url:dijit/templates/Calendar.html": "<table cellspacing=\"0\" cellpadding=\"0\" class=\"dijitCalendarContainer\" role=\"grid\" aria-labelledby=\"${id}_mddb ${id}_year\">\n\t<thead>\n\t\t<tr class=\"dijitReset dijitCalendarMonthContainer\" valign=\"top\">\n\t\t\t<th class='dijitReset dijitCalendarArrow' data-dojo-attach-point=\"decrementMonth\">\n\t\t\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitCalendarIncrementControl dijitCalendarDecrease\" role=\"presentation\"/>\n\t\t\t\t<span data-dojo-attach-point=\"decreaseArrowNode\" class=\"dijitA11ySideArrow\">-</span>\n\t\t\t</th>\n\t\t\t<th class='dijitReset' colspan=\"5\">\n\t\t\t\t<div data-dojo-attach-point=\"monthNode\">\n\t\t\t\t</div>\n\t\t\t</th>\n\t\t\t<th class='dijitReset dijitCalendarArrow' data-dojo-attach-point=\"incrementMonth\">\n\t\t\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitCalendarIncrementControl dijitCalendarIncrease\" role=\"presentation\"/>\n\t\t\t\t<span data-dojo-attach-point=\"increaseArrowNode\" class=\"dijitA11ySideArrow\">+</span>\n\t\t\t</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t${!dayCellsHtml}\n\t\t</tr>\n\t</thead>\n\t<tbody data-dojo-attach-point=\"dateRowsNode\" data-dojo-attach-event=\"onclick: _onDayClick\" class=\"dijitReset dijitCalendarBodyContainer\">\n\t\t\t${!dateRowsHtml}\n\t</tbody>\n\t<tfoot class=\"dijitReset dijitCalendarYearContainer\">\n\t\t<tr>\n\t\t\t<td class='dijitReset' valign=\"top\" colspan=\"7\" role=\"presentation\">\n\t\t\t\t<div class=\"dijitCalendarYearLabel\">\n\t\t\t\t\t<span data-dojo-attach-point=\"previousYearLabelNode\" class=\"dijitInline dijitCalendarPreviousYear\" role=\"button\"></span>\n\t\t\t\t\t<span data-dojo-attach-point=\"currentYearLabelNode\" class=\"dijitInline dijitCalendarSelectedYear\" role=\"button\" id=\"${id}_year\"></span>\n\t\t\t\t\t<span data-dojo-attach-point=\"nextYearLabelNode\" class=\"dijitInline dijitCalendarNextYear\" role=\"button\"></span>\n\t\t\t\t</div>\n\t\t\t</td>\n\t\t</tr>\n\t</tfoot>\n</table>\n"
                }
            });
            define("dijit/CalendarLite", ["dojo/_base/array", "dojo/_base/declare", "dojo/cldr/supplemental", "dojo/date", "dojo/date/locale", "dojo/dom", "dojo/dom-class", "dojo/_base/event", "dojo/_base/lang", "dojo/_base/sniff", "dojo/string", "dojo/_base/window", "./_WidgetBase", "./_TemplatedMixin", "dojo/text!./templates/Calendar.html"], function (_bd2, _bd3, _bd4, date, _bd5, dom, _bd6, _bd7, lang, has, _bd8, win, _bd9, _bda, _bdb) {
                var _bdc = _bd3("dijit.CalendarLite", [_bd9, _bda], {
                    templateString: _bdb,
                    dowTemplateString: "<th class=\"dijitReset dijitCalendarDayLabelTemplate\" role=\"columnheader\"><span class=\"dijitCalendarDayLabel\">${d}</span></th>",
                    dateTemplateString: "<td class=\"dijitReset\" role=\"gridcell\" data-dojo-attach-point=\"dateCells\"><span class=\"dijitCalendarDateLabel\" data-dojo-attach-point=\"dateLabels\"></span></td>",
                    weekTemplateString: "<tr class=\"dijitReset dijitCalendarWeekTemplate\" role=\"row\">${d}${d}${d}${d}${d}${d}${d}</tr>",
                    value: new Date(""),
                    datePackage: date,
                    dayWidth: "narrow",
                    tabIndex: "0",
                    currentFocus: new Date(),
                    baseClass: "dijitCalendar",
                    _isValidDate: function (_bdd) {
                        return _bdd && !isNaN(_bdd) && typeof _bdd == "object" && _bdd.toString() != this.constructor.prototype.value.toString();
                    },
                    _getValueAttr: function () {
                        if (this.value && !isNaN(this.value)) {
                            var _bde = new this.dateClassObj(this.value);
                            _bde.setHours(0, 0, 0, 0);
                            if (_bde.getDate() < this.value.getDate()) {
                                _bde = this.dateFuncObj.add(_bde, "hour", 1);
                            }
                            return _bde;
                        } else {
                            return null;
                        }
                    },
                    _setValueAttr: function (_bdf, _be0) {
                        if (_bdf) {
                            _bdf = new this.dateClassObj(_bdf);
                        }
                        if (this._isValidDate(_bdf)) {
                            if (!this._isValidDate(this.value) || this.dateFuncObj.compare(_bdf, this.value)) {
                                _bdf.setHours(1, 0, 0, 0);
                                if (!this.isDisabledDate(_bdf, this.lang)) {
                                    this._set("value", _bdf);
                                    this.set("currentFocus", _bdf);
                                    if (_be0 || typeof _be0 == "undefined") {
                                        this.onChange(this.get("value"));
                                    }
                                }
                            }
                        } else {
                            this._set("value", null);
                            this.set("currentFocus", this.currentFocus);
                        }
                    },
                    _setText: function (node, text) {
                        while (node.firstChild) {
                            node.removeChild(node.firstChild);
                        }
                        node.appendChild(win.doc.createTextNode(text));
                    },
                    _populateGrid: function () {
                        var _be1 = new this.dateClassObj(this.currentFocus);
                        _be1.setDate(1);
                        var _be2 = _be1.getDay(),
                            _be3 = this.dateFuncObj.getDaysInMonth(_be1),
                            _be4 = this.dateFuncObj.getDaysInMonth(this.dateFuncObj.add(_be1, "month", -1)),
                            _be5 = new this.dateClassObj(),
                            _be6 = _bd4.getFirstDayOfWeek(this.lang);
                        if (_be6 > _be2) {
                            _be6 -= 7;
                        }
                        this._date2cell = {};
                        _bd2.forEach(this.dateCells, function (_be7, idx) {
                            var i = idx + _be6;
                            var date = new this.dateClassObj(_be1),
                                _be8, _be9 = "dijitCalendar",
                                adj = 0;
                            if (i < _be2) {
                                _be8 = _be4 - _be2 + i + 1;
                                adj = -1;
                                _be9 += "Previous";
                            } else {
                                if (i >= (_be2 + _be3)) {
                                    _be8 = i - _be2 - _be3 + 1;
                                    adj = 1;
                                    _be9 += "Next";
                                } else {
                                    _be8 = i - _be2 + 1;
                                    _be9 += "Current";
                                }
                            }
                            if (adj) {
                                date = this.dateFuncObj.add(date, "month", adj);
                            }
                            date.setDate(_be8);
                            if (!this.dateFuncObj.compare(date, _be5, "date")) {
                                _be9 = "dijitCalendarCurrentDate " + _be9;
                            }
                            if (this._isSelectedDate(date, this.lang)) {
                                _be9 = "dijitCalendarSelectedDate " + _be9;
                                _be7.setAttribute("aria-selected", true);
                            } else {
                                _be7.setAttribute("aria-selected", false);
                            }
                            if (this.isDisabledDate(date, this.lang)) {
                                _be9 = "dijitCalendarDisabledDate " + _be9;
                                _be7.setAttribute("aria-disabled", true);
                            } else {
                                _be9 = "dijitCalendarEnabledDate " + _be9;
                                _be7.removeAttribute("aria-disabled");
                            }
                            var _bea = this.getClassForDate(date, this.lang);
                            if (_bea) {
                                _be9 = _bea + " " + _be9;
                            }
                            _be7.className = _be9 + "Month dijitCalendarDateTemplate";
                            var _beb = date.valueOf();
                            this._date2cell[_beb] = _be7;
                            _be7.dijitDateValue = _beb;
                            this._setText(this.dateLabels[idx], date.getDateLocalized ? date.getDateLocalized(this.lang) : date.getDate());
                        }, this);
                        this.monthWidget.set("month", _be1);
                        var y = _be1.getFullYear() - 1;
                        var d = new this.dateClassObj();
                        _bd2.forEach(["previous", "current", "next"], function (name) {
                            d.setFullYear(y++);
                            this._setText(this[name + "YearLabelNode"], this.dateLocaleModule.format(d, {
                                selector: "year",
                                locale: this.lang
                            }));
                        }, this);
                    },
                    goToToday: function () {
                        this.set("value", new this.dateClassObj());
                    },
                    constructor: function (args) {
                        this.datePackage = args.datePackage || this.datePackage;
                        this.dateFuncObj = typeof this.datePackage == "string" ? lang.getObject(this.datePackage, false) : this.datePackage;
                        this.dateClassObj = this.dateFuncObj.Date || Date;
                        this.dateLocaleModule = lang.getObject("locale", false, this.dateFuncObj);
                    },
                    _createMonthWidget: function () {
                        return _bdc._MonthWidget({
                            id: this.id + "_mw",
                            lang: this.lang,
                            dateLocaleModule: this.dateLocaleModule
                        }, this.monthNode);
                    },
                    buildRendering: function () {
                        var d = this.dowTemplateString,
                            _bec = this.dateLocaleModule.getNames("days", this.dayWidth, "standAlone", this.lang),
                            _bed = _bd4.getFirstDayOfWeek(this.lang);
                        this.dayCellsHtml = _bd8.substitute([d, d, d, d, d, d, d].join(""), {
                            d: ""
                        }, function () {
                            return _bec[_bed++ % 7];
                        });
                        var r = _bd8.substitute(this.weekTemplateString, {
                            d: this.dateTemplateString
                        });
                        this.dateRowsHtml = [r, r, r, r, r, r].join("");
                        this.dateCells = [];
                        this.dateLabels = [];
                        this.inherited(arguments);
                        dom.setSelectable(this.domNode, false);
                        var _bee = new this.dateClassObj(this.currentFocus);
                        this._supportingWidgets.push(this.monthWidget = this._createMonthWidget());
                        this.set("currentFocus", _bee, false);
                        var _bef = lang.hitch(this, function (_bf0, part, _bf1) {
                            this.connect(this[_bf0], "onclick", function () {
                                this._setCurrentFocusAttr(this.dateFuncObj.add(this.currentFocus, part, _bf1));
                            });
                        });
                        _bef("incrementMonth", "month", 1);
                        _bef("decrementMonth", "month", -1);
                        _bef("nextYearLabelNode", "year", 1);
                        _bef("previousYearLabelNode", "year", -1);
                    },
                    _setCurrentFocusAttr: function (date, _bf2) {
                        var _bf3 = this.currentFocus,
                            _bf4 = _bf3 && this._date2cell ? this._date2cell[_bf3.valueOf()] : null;
                        date = new this.dateClassObj(date);
                        date.setHours(1, 0, 0, 0);
                        this._set("currentFocus", date);
                        this._populateGrid();
                        var _bf5 = this._date2cell[date.valueOf()];
                        _bf5.setAttribute("tabIndex", this.tabIndex);
                        if (this.focused || _bf2) {
                            _bf5.focus();
                        }
                        if (_bf4 && _bf4 != _bf5) {
                            if (has("webkit")) {
                                _bf4.setAttribute("tabIndex", "-1");
                            } else {
                                _bf4.removeAttribute("tabIndex");
                            }
                        }
                    },
                    focus: function () {
                        this._setCurrentFocusAttr(this.currentFocus, true);
                    },
                    _onDayClick: function (evt) {
                        _bd7.stop(evt);
                        for (var node = evt.target; node && !node.dijitDateValue; node = node.parentNode) {}
                        if (node && !_bd6.contains(node, "dijitCalendarDisabledDate")) {
                            this.set("value", node.dijitDateValue);
                        }
                    },
                    onChange: function () {},
                    _isSelectedDate: function (_bf6) {
                        return this._isValidDate(this.value) && !this.dateFuncObj.compare(_bf6, this.value, "date");
                    },
                    isDisabledDate: function () {},
                    getClassForDate: function () {}
                });
                _bdc._MonthWidget = _bd3("dijit.CalendarLite._MonthWidget", _bd9, {
                    _setMonthAttr: function (_bf7) {
                        var _bf8 = this.dateLocaleModule.getNames("months", "wide", "standAlone", this.lang, _bf7),
                            _bf9 = (has("ie") == 6 ? "" : "<div class='dijitSpacer'>" + _bd2.map(_bf8, function (s) {
                                return "<div>" + s + "</div>";
                            }).join("") + "</div>");
                        this.domNode.innerHTML = _bf9 + "<div class='dijitCalendarMonthLabel dijitCalendarCurrentMonthLabel'>" + _bf8[_bf7.getMonth()] + "</div>";
                    }
                });
                return _bdc;
            });
        },
        "url:dijit/templates/Calendar.html": "<table cellspacing=\"0\" cellpadding=\"0\" class=\"dijitCalendarContainer\" role=\"grid\" aria-labelledby=\"${id}_mddb ${id}_year\">\n\t<thead>\n\t\t<tr class=\"dijitReset dijitCalendarMonthContainer\" valign=\"top\">\n\t\t\t<th class='dijitReset dijitCalendarArrow' data-dojo-attach-point=\"decrementMonth\">\n\t\t\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitCalendarIncrementControl dijitCalendarDecrease\" role=\"presentation\"/>\n\t\t\t\t<span data-dojo-attach-point=\"decreaseArrowNode\" class=\"dijitA11ySideArrow\">-</span>\n\t\t\t</th>\n\t\t\t<th class='dijitReset' colspan=\"5\">\n\t\t\t\t<div data-dojo-attach-point=\"monthNode\">\n\t\t\t\t</div>\n\t\t\t</th>\n\t\t\t<th class='dijitReset dijitCalendarArrow' data-dojo-attach-point=\"incrementMonth\">\n\t\t\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitCalendarIncrementControl dijitCalendarIncrease\" role=\"presentation\"/>\n\t\t\t\t<span data-dojo-attach-point=\"increaseArrowNode\" class=\"dijitA11ySideArrow\">+</span>\n\t\t\t</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t${!dayCellsHtml}\n\t\t</tr>\n\t</thead>\n\t<tbody data-dojo-attach-point=\"dateRowsNode\" data-dojo-attach-event=\"onclick: _onDayClick\" class=\"dijitReset dijitCalendarBodyContainer\">\n\t\t\t${!dateRowsHtml}\n\t</tbody>\n\t<tfoot class=\"dijitReset dijitCalendarYearContainer\">\n\t\t<tr>\n\t\t\t<td class='dijitReset' valign=\"top\" colspan=\"7\" role=\"presentation\">\n\t\t\t\t<div class=\"dijitCalendarYearLabel\">\n\t\t\t\t\t<span data-dojo-attach-point=\"previousYearLabelNode\" class=\"dijitInline dijitCalendarPreviousYear\" role=\"button\"></span>\n\t\t\t\t\t<span data-dojo-attach-point=\"currentYearLabelNode\" class=\"dijitInline dijitCalendarSelectedYear\" role=\"button\" id=\"${id}_year\"></span>\n\t\t\t\t\t<span data-dojo-attach-point=\"nextYearLabelNode\" class=\"dijitInline dijitCalendarNextYear\" role=\"button\"></span>\n\t\t\t\t</div>\n\t\t\t</td>\n\t\t</tr>\n\t</tfoot>\n</table>\n",
        "dijit/form/DropDownButton": function () {
            require({
                cache: {
                    "url:dijit/form/templates/DropDownButton.html": "<span class=\"dijit dijitReset dijitInline\"\n\t><span class='dijitReset dijitInline dijitButtonNode'\n\t\tdata-dojo-attach-event=\"ondijitclick:_onClick\" data-dojo-attach-point=\"_buttonNode\"\n\t\t><span class=\"dijitReset dijitStretch dijitButtonContents\"\n\t\t\tdata-dojo-attach-point=\"focusNode,titleNode,_arrowWrapperNode\"\n\t\t\trole=\"button\" aria-haspopup=\"true\" aria-labelledby=\"${id}_label\"\n\t\t\t><span class=\"dijitReset dijitInline dijitIcon\"\n\t\t\t\tdata-dojo-attach-point=\"iconNode\"\n\t\t\t></span\n\t\t\t><span class=\"dijitReset dijitInline dijitButtonText\"\n\t\t\t\tdata-dojo-attach-point=\"containerNode,_popupStateNode\"\n\t\t\t\tid=\"${id}_label\"\n\t\t\t></span\n\t\t\t><span class=\"dijitReset dijitInline dijitArrowButtonInner\"></span\n\t\t\t><span class=\"dijitReset dijitInline dijitArrowButtonChar\">&#9660;</span\n\t\t></span\n\t></span\n\t><input ${!nameAttrSetting} type=\"${type}\" value=\"${value}\" class=\"dijitOffScreen\" tabIndex=\"-1\"\n\t\tdata-dojo-attach-point=\"valueNode\"\n/></span>\n"
                }
            });
            define("dijit/form/DropDownButton", ["dojo/_base/declare", "dojo/_base/lang", "dojo/query", "../registry", "../popup", "./Button", "../_Container", "../_HasDropDown", "dojo/text!./templates/DropDownButton.html"], function (_bfa, lang, _bfb, _bfc, _bfd, _bfe, _bff, _c00, _c01) {
                return _bfa("dijit.form.DropDownButton", [_bfe, _bff, _c00], {
                    baseClass: "dijitDropDownButton",
                    templateString: _c01,
                    _fillContent: function () {
                        if (this.srcNodeRef) {
                            var _c02 = _bfb("*", this.srcNodeRef);
                            this.inherited(arguments, [_c02[0]]);
                            this.dropDownContainer = this.srcNodeRef;
                        }
                    },
                    startup: function () {
                        if (this._started) {
                            return;
                        }
                        if (!this.dropDown && this.dropDownContainer) {
                            var _c03 = _bfb("[widgetId]", this.dropDownContainer)[0];
                            this.dropDown = _bfc.byNode(_c03);
                            delete this.dropDownContainer;
                        }
                        if (this.dropDown) {
                            _bfd.hide(this.dropDown);
                        }
                        this.inherited(arguments);
                    },
                    isLoaded: function () {
                        var _c04 = this.dropDown;
                        return ( !! _c04 && (!_c04.href || _c04.isLoaded));
                    },
                    loadDropDown: function (_c05) {
                        var _c06 = this.dropDown;
                        var _c07 = _c06.on("load", lang.hitch(this, function () {
                            _c07.remove();
                            _c05();
                        }));
                        _c06.refresh();
                    },
                    isFocusable: function () {
                        return this.inherited(arguments) && !this._mouseDown;
                    }
                });
            });
        },
        "dijit/form/Button": function () {
            require({
                cache: {
                    "url:dijit/form/templates/Button.html": "<span class=\"dijit dijitReset dijitInline\" role=\"presentation\"\n\t><span class=\"dijitReset dijitInline dijitButtonNode\"\n\t\tdata-dojo-attach-event=\"ondijitclick:_onClick\" role=\"presentation\"\n\t\t><span class=\"dijitReset dijitStretch dijitButtonContents\"\n\t\t\tdata-dojo-attach-point=\"titleNode,focusNode\"\n\t\t\trole=\"button\" aria-labelledby=\"${id}_label\"\n\t\t\t><span class=\"dijitReset dijitInline dijitIcon\" data-dojo-attach-point=\"iconNode\"></span\n\t\t\t><span class=\"dijitReset dijitToggleButtonIconChar\">&#x25CF;</span\n\t\t\t><span class=\"dijitReset dijitInline dijitButtonText\"\n\t\t\t\tid=\"${id}_label\"\n\t\t\t\tdata-dojo-attach-point=\"containerNode\"\n\t\t\t></span\n\t\t></span\n\t></span\n\t><input ${!nameAttrSetting} type=\"${type}\" value=\"${value}\" class=\"dijitOffScreen\"\n\t\ttabIndex=\"-1\" role=\"presentation\" data-dojo-attach-point=\"valueNode\"\n/></span>\n"
                }
            });
            define("dijit/form/Button", ["require", "dojo/_base/declare", "dojo/dom-class", "dojo/_base/kernel", "dojo/_base/lang", "dojo/ready", "./_FormWidget", "./_ButtonMixin", "dojo/text!./templates/Button.html"], function (_c08, _c09, _c0a, _c0b, lang, _c0c, _c0d, _c0e, _c0f) {
                if (!_c0b.isAsync) {
                    _c0c(0, function () {
                        var _c10 = ["dijit/form/DropDownButton", "dijit/form/ComboButton", "dijit/form/ToggleButton"];
                        _c08(_c10);
                    });
                }
                return _c09("dijit.form.Button", [_c0d, _c0e], {
                    showLabel: true,
                    iconClass: "dijitNoIcon",
                    _setIconClassAttr: {
                        node: "iconNode",
                        type: "class"
                    },
                    baseClass: "dijitButton",
                    templateString: _c0f,
                    _setValueAttr: "valueNode",
                    _onClick: function (e) {
                        var ok = this.inherited(arguments);
                        if (ok) {
                            if (this.valueNode) {
                                this.valueNode.click();
                                e.preventDefault();
                            }
                        }
                        return ok;
                    },
                    _fillContent: function (_c11) {
                        if (_c11 && (!this.params || !("label" in this.params))) {
                            var _c12 = lang.trim(_c11.innerHTML);
                            if (_c12) {
                                this.label = _c12;
                            }
                        }
                    },
                    _setShowLabelAttr: function (val) {
                        if (this.containerNode) {
                            _c0a.toggle(this.containerNode, "dijitDisplayNone", !val);
                        }
                        this._set("showLabel", val);
                    },
                    setLabel: function (_c13) {
                        _c0b.deprecated("dijit.form.Button.setLabel() is deprecated.  Use set('label', ...) instead.", "", "2.0");
                        this.set("label", _c13);
                    },
                    _setLabelAttr: function (_c14) {
                        this.inherited(arguments);
                        if (!this.showLabel && !("title" in this.params)) {
                            this.titleNode.title = lang.trim(this.containerNode.innerText || this.containerNode.textContent || "");
                        }
                    }
                });
            });
        },
        "dijit/form/_ButtonMixin": function () {
            define("dijit/form/_ButtonMixin", ["dojo/_base/declare", "dojo/dom", "dojo/_base/event", "../registry"], function (_c15, dom, _c16, _c17) {
                return _c15("dijit.form._ButtonMixin", null, {
                    label: "",
                    type: "button",
                    _onClick: function (e) {
                        if (this.disabled) {
                            _c16.stop(e);
                            return false;
                        }
                        var _c18 = this.onClick(e) === false;
                        if (!_c18 && this.type == "submit" && !(this.valueNode || this.focusNode).form) {
                            for (var node = this.domNode; node.parentNode; node = node.parentNode) {
                                var _c19 = _c17.byNode(node);
                                if (_c19 && typeof _c19._onSubmit == "function") {
                                    _c19._onSubmit(e);
                                    _c18 = true;
                                    break;
                                }
                            }
                        }
                        if (_c18) {
                            e.preventDefault();
                        }
                        return !_c18;
                    },
                    postCreate: function () {
                        this.inherited(arguments);
                        dom.setSelectable(this.focusNode, false);
                    },
                    onClick: function () {
                        return true;
                    },
                    _setLabelAttr: function (_c1a) {
                        this._set("label", _c1a);
                        (this.containerNode || this.focusNode).innerHTML = _c1a;
                    }
                });
            });
        },
        "url:dijit/form/templates/Button.html": "<span class=\"dijit dijitReset dijitInline\" role=\"presentation\"\n\t><span class=\"dijitReset dijitInline dijitButtonNode\"\n\t\tdata-dojo-attach-event=\"ondijitclick:_onClick\" role=\"presentation\"\n\t\t><span class=\"dijitReset dijitStretch dijitButtonContents\"\n\t\t\tdata-dojo-attach-point=\"titleNode,focusNode\"\n\t\t\trole=\"button\" aria-labelledby=\"${id}_label\"\n\t\t\t><span class=\"dijitReset dijitInline dijitIcon\" data-dojo-attach-point=\"iconNode\"></span\n\t\t\t><span class=\"dijitReset dijitToggleButtonIconChar\">&#x25CF;</span\n\t\t\t><span class=\"dijitReset dijitInline dijitButtonText\"\n\t\t\t\tid=\"${id}_label\"\n\t\t\t\tdata-dojo-attach-point=\"containerNode\"\n\t\t\t></span\n\t\t></span\n\t></span\n\t><input ${!nameAttrSetting} type=\"${type}\" value=\"${value}\" class=\"dijitOffScreen\"\n\t\ttabIndex=\"-1\" role=\"presentation\" data-dojo-attach-point=\"valueNode\"\n/></span>\n",
        "dijit/_Container": function () {
            define("dijit/_Container", ["dojo/_base/array", "dojo/_base/declare", "dojo/dom-construct", "./registry"], function (_c1b, _c1c, _c1d, _c1e) {
                return _c1c("dijit._Container", null, {
                    buildRendering: function () {
                        this.inherited(arguments);
                        if (!this.containerNode) {
                            this.containerNode = this.domNode;
                        }
                    },
                    addChild: function (_c1f, _c20) {
                        var _c21 = this.containerNode;
                        if (_c20 && typeof _c20 == "number") {
                            var _c22 = this.getChildren();
                            if (_c22 && _c22.length >= _c20) {
                                _c21 = _c22[_c20 - 1].domNode;
                                _c20 = "after";
                            }
                        }
                        _c1d.place(_c1f.domNode, _c21, _c20);
                        if (this._started && !_c1f._started) {
                            _c1f.startup();
                        }
                    },
                    removeChild: function (_c23) {
                        if (typeof _c23 == "number") {
                            _c23 = this.getChildren()[_c23];
                        }
                        if (_c23) {
                            var node = _c23.domNode;
                            if (node && node.parentNode) {
                                node.parentNode.removeChild(node);
                            }
                        }
                    },
                    hasChildren: function () {
                        return this.getChildren().length > 0;
                    },
                    _getSiblingOfChild: function (_c24, dir) {
                        var node = _c24.domNode,
                            _c25 = (dir > 0 ? "nextSibling" : "previousSibling");
                        do {
                            node = node[_c25];
                        } while (node && (node.nodeType != 1 || !_c1e.byNode(node)));
                        return node && _c1e.byNode(node);
                    },
                    getIndexOfChild: function (_c26) {
                        return _c1b.indexOf(this.getChildren(), _c26);
                    }
                });
            });
        },
        "url:dijit/form/templates/DropDownButton.html": "<span class=\"dijit dijitReset dijitInline\"\n\t><span class='dijitReset dijitInline dijitButtonNode'\n\t\tdata-dojo-attach-event=\"ondijitclick:_onClick\" data-dojo-attach-point=\"_buttonNode\"\n\t\t><span class=\"dijitReset dijitStretch dijitButtonContents\"\n\t\t\tdata-dojo-attach-point=\"focusNode,titleNode,_arrowWrapperNode\"\n\t\t\trole=\"button\" aria-haspopup=\"true\" aria-labelledby=\"${id}_label\"\n\t\t\t><span class=\"dijitReset dijitInline dijitIcon\"\n\t\t\t\tdata-dojo-attach-point=\"iconNode\"\n\t\t\t></span\n\t\t\t><span class=\"dijitReset dijitInline dijitButtonText\"\n\t\t\t\tdata-dojo-attach-point=\"containerNode,_popupStateNode\"\n\t\t\t\tid=\"${id}_label\"\n\t\t\t></span\n\t\t\t><span class=\"dijitReset dijitInline dijitArrowButtonInner\"></span\n\t\t\t><span class=\"dijitReset dijitInline dijitArrowButtonChar\">&#9660;</span\n\t\t></span\n\t></span\n\t><input ${!nameAttrSetting} type=\"${type}\" value=\"${value}\" class=\"dijitOffScreen\" tabIndex=\"-1\"\n\t\tdata-dojo-attach-point=\"valueNode\"\n/></span>\n",
        "dijit/form/_DateTimeTextBox": function () {
            require({
                cache: {
                    "url:dijit/form/templates/DropDownBox.html": "<div class=\"dijit dijitReset dijitInline dijitLeft\"\n\tid=\"widget_${id}\"\n\trole=\"combobox\"\n\t><div class='dijitReset dijitRight dijitButtonNode dijitArrowButton dijitDownArrowButton dijitArrowButtonContainer'\n\t\tdata-dojo-attach-point=\"_buttonNode, _popupStateNode\" role=\"presentation\"\n\t\t><input class=\"dijitReset dijitInputField dijitArrowButtonInner\" value=\"&#9660; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\n\t\t\t${_buttonInputDisabled}\n\t/></div\n\t><div class='dijitReset dijitValidationContainer'\n\t\t><input class=\"dijitReset dijitInputField dijitValidationIcon dijitValidationInner\" value=\"&#935; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\n\t/></div\n\t><div class=\"dijitReset dijitInputField dijitInputContainer\"\n\t\t><input class='dijitReset dijitInputInner' ${!nameAttrSetting} type=\"text\" autocomplete=\"off\"\n\t\t\tdata-dojo-attach-point=\"textbox,focusNode\" role=\"textbox\" aria-haspopup=\"true\"\n\t/></div\n></div>\n"
                }
            });
            define("dijit/form/_DateTimeTextBox", ["dojo/date", "dojo/date/locale", "dojo/date/stamp", "dojo/_base/declare", "dojo/_base/lang", "./RangeBoundTextBox", "../_HasDropDown", "dojo/text!./templates/DropDownBox.html"], function (date, _c27, _c28, _c29, lang, _c2a, _c2b, _c2c) {
                new Date("X");
                var _c2d = _c29("dijit.form._DateTimeTextBox", [_c2a, _c2b], {
                    templateString: _c2c,
                    hasDownArrow: true,
                    openOnClick: true,
                    regExpGen: _c27.regexp,
                    datePackage: date,
                    postMixInProperties: function () {
                        this.inherited(arguments);
                        this._set("type", "text");
                    },
                    compare: function (val1, val2) {
                        var _c2e = this._isInvalidDate(val1);
                        var _c2f = this._isInvalidDate(val2);
                        return _c2e ? (_c2f ? 0 : -1) : (_c2f ? 1 : date.compare(val1, val2, this._selector));
                    },
                    forceWidth: true,
                    format: function (_c30, _c31) {
                        if (!_c30) {
                            return "";
                        }
                        return this.dateLocaleModule.format(_c30, _c31);
                    },
                    "parse": function (_c32, _c33) {
                        return this.dateLocaleModule.parse(_c32, _c33) || (this._isEmpty(_c32) ? null : undefined);
                    },
                    serialize: function (val, _c34) {
                        if (val.toGregorian) {
                            val = val.toGregorian();
                        }
                        return _c28.toISOString(val, _c34);
                    },
                    dropDownDefaultValue: new Date(),
                    value: new Date(""),
                    _blankValue: null,
                    popupClass: "",
                    _selector: "",
                    constructor: function (args) {
                        this.datePackage = args.datePackage || this.datePackage;
                        this.dateFuncObj = typeof this.datePackage == "string" ? lang.getObject(this.datePackage, false) : this.datePackage;
                        this.dateClassObj = this.dateFuncObj.Date || Date;
                        this.dateLocaleModule = lang.getObject("locale", false, this.dateFuncObj);
                        this.regExpGen = this.dateLocaleModule.regexp;
                        this._invalidDate = this.constructor.prototype.value.toString();
                    },
                    buildRendering: function () {
                        this.inherited(arguments);
                        if (!this.hasDownArrow) {
                            this._buttonNode.style.display = "none";
                        }
                        if (this.openOnClick || !this.hasDownArrow) {
                            this._buttonNode = this.domNode;
                            this.baseClass += " dijitComboBoxOpenOnClick";
                        }
                    },
                    _setConstraintsAttr: function (_c35) {
                        _c35.selector = this._selector;
                        _c35.fullYear = true;
                        var _c36 = _c28.fromISOString;
                        if (typeof _c35.min == "string") {
                            _c35.min = _c36(_c35.min);
                        }
                        if (typeof _c35.max == "string") {
                            _c35.max = _c36(_c35.max);
                        }
                        this.inherited(arguments);
                    },
                    _isInvalidDate: function (_c37) {
                        return !_c37 || isNaN(_c37) || typeof _c37 != "object" || _c37.toString() == this._invalidDate;
                    },
                    _setValueAttr: function (_c38, _c39, _c3a) {
                        if (_c38 !== undefined) {
                            if (typeof _c38 == "string") {
                                _c38 = _c28.fromISOString(_c38);
                            }
                            if (this._isInvalidDate(_c38)) {
                                _c38 = null;
                            }
                            if (_c38 instanceof Date && !(this.dateClassObj instanceof Date)) {
                                _c38 = new this.dateClassObj(_c38);
                            }
                        }
                        this.inherited(arguments);
                        if (this.value instanceof Date) {
                            this.filterString = "";
                        }
                        if (this.dropDown) {
                            this.dropDown.set("value", _c38, false);
                        }
                    },
                    _set: function (attr, _c3b) {
                        if (attr == "value" && this.value instanceof Date && this.compare(_c3b, this.value) == 0) {
                            return;
                        }
                        this.inherited(arguments);
                    },
                    _setDropDownDefaultValueAttr: function (val) {
                        if (this._isInvalidDate(val)) {
                            val = new this.dateClassObj();
                        }
                        this.dropDownDefaultValue = val;
                    },
                    openDropDown: function (_c3c) {
                        if (this.dropDown) {
                            this.dropDown.destroy();
                        }
                        var _c3d = lang.isString(this.popupClass) ? lang.getObject(this.popupClass, false) : this.popupClass,
                            _c3e = this,
                            _c3f = this.get("value");
                        this.dropDown = new _c3d({
                            onChange: function (_c40) {
                                _c3e.set("value", _c40, true);
                            },
                            id: this.id + "_popup",
                            dir: _c3e.dir,
                            lang: _c3e.lang,
                            value: _c3f,
                            currentFocus: !this._isInvalidDate(_c3f) ? _c3f : this.dropDownDefaultValue,
                            constraints: _c3e.constraints,
                            filterString: _c3e.filterString,
                            datePackage: _c3e.datePackage,
                            isDisabledDate: function (date) {
                                return !_c3e.rangeCheck(date, _c3e.constraints);
                            }
                        });
                        this.inherited(arguments);
                    },
                    _getDisplayedValueAttr: function () {
                        return this.textbox.value;
                    },
                    _setDisplayedValueAttr: function (_c41, _c42) {
                        this._setValueAttr(this.parse(_c41, this.constraints), _c42, _c41);
                    }
                });
                return _c2d;
            });
        },
        "dijit/form/TimeTextBox": function () {
            define("dijit/form/TimeTextBox", ["dojo/_base/declare", "dojo/keys", "dojo/_base/lang", "../_TimePicker", "./_DateTimeTextBox"], function (_c43, keys, lang, _c44, _c45) {
                return _c43("dijit.form.TimeTextBox", _c45, {
                    baseClass: "dijitTextBox dijitComboBox dijitTimeTextBox",
                    popupClass: _c44,
                    _selector: "time",
                    value: new Date(""),
                    _onKey: function (evt) {
                        if (this.disabled || this.readOnly) {
                            return;
                        }
                        this.inherited(arguments);
                        switch (evt.keyCode) {
                        case keys.ENTER:
                        case keys.TAB:
                        case keys.ESCAPE:
                        case keys.DOWN_ARROW:
                        case keys.UP_ARROW:
                            break;
                        default:
                            setTimeout(lang.hitch(this, function () {
                                var val = this.get("displayedValue");
                                this.filterString = (val && !this.parse(val, this.constraints)) ? val.toLowerCase() : "";
                                if (this._opened) {
                                    this.closeDropDown();
                                }
                                this.openDropDown();
                            }), 0);
                        }
                    }
                });
            });
        },
        "dijit/_TimePicker": function () {
            require({
                cache: {
                    "url:dijit/templates/TimePicker.html": "<div id=\"widget_${id}\" class=\"dijitMenu\"\n    ><div data-dojo-attach-point=\"upArrow\" class=\"dijitButtonNode dijitUpArrowButton\" data-dojo-attach-event=\"onmouseenter:_buttonMouse,onmouseleave:_buttonMouse\"\n\t\t><div class=\"dijitReset dijitInline dijitArrowButtonInner\" role=\"presentation\">&#160;</div\n\t\t><div class=\"dijitArrowButtonChar\">&#9650;</div></div\n    ><div data-dojo-attach-point=\"timeMenu,focusNode\" data-dojo-attach-event=\"onclick:_onOptionSelected,onmouseover,onmouseout\"></div\n    ><div data-dojo-attach-point=\"downArrow\" class=\"dijitButtonNode dijitDownArrowButton\" data-dojo-attach-event=\"onmouseenter:_buttonMouse,onmouseleave:_buttonMouse\"\n\t\t><div class=\"dijitReset dijitInline dijitArrowButtonInner\" role=\"presentation\">&#160;</div\n\t\t><div class=\"dijitArrowButtonChar\">&#9660;</div></div\n></div>\n"
                }
            });
            define("dijit/_TimePicker", ["dojo/_base/array", "dojo/date", "dojo/date/locale", "dojo/date/stamp", "dojo/_base/declare", "dojo/dom-class", "dojo/dom-construct", "dojo/_base/event", "dojo/_base/kernel", "dojo/keys", "dojo/_base/lang", "dojo/_base/sniff", "dojo/query", "dijit/typematic", "./_Widget", "./_TemplatedMixin", "./form/_FormValueWidget", "dojo/text!./templates/TimePicker.html"], function (_c46, _c47, _c48, _c49, _c4a, _c4b, _c4c, _c4d, _c4e, keys, lang, has, _c4f, _c50, _c51, _c52, _c53, _c54) {
                return _c4a("dijit._TimePicker", [_c51, _c52], {
                    templateString: _c54,
                    baseClass: "dijitTimePicker",
                    clickableIncrement: "T00:15:00",
                    visibleIncrement: "T01:00:00",
                    visibleRange: "T05:00:00",
                    value: new Date(),
                    _visibleIncrement: 2,
                    _clickableIncrement: 1,
                    _totalIncrements: 10,
                    constraints: {},
                    serialize: _c49.toISOString,
                    setValue: function (_c55) {
                        _c4e.deprecated("dijit._TimePicker:setValue() is deprecated.  Use set('value', ...) instead.", "", "2.0");
                        this.set("value", _c55);
                    },
                    _setValueAttr: function (date) {
                        this._set("value", date);
                        this._showText();
                    },
                    _setFilterStringAttr: function (val) {
                        this._set("filterString", val);
                        this._showText();
                    },
                    isDisabledDate: function () {
                        return false;
                    },
                    _getFilteredNodes: function (_c56, _c57, _c58, _c59) {
                        var _c5a = [],
                            _c5b = _c59 ? _c59.date : this._refDate,
                            n, i = _c56,
                            max = this._maxIncrement + Math.abs(i),
                            chk = _c58 ? -1 : 1,
                            dec = _c58 ? 1 : 0,
                            inc = 1 - dec;
                        do {
                            i -= dec;
                            n = this._createOption(i);
                            if (n) {
                                if ((_c58 && n.date > _c5b) || (!_c58 && n.date < _c5b)) {
                                    break;
                                }
                                _c5a[_c58 ? "unshift" : "push"](n);
                                _c5b = n.date;
                            }
                            i += inc;
                        } while (_c5a.length < _c57 && (i * chk) < max);
                        return _c5a;
                    },
                    _showText: function () {
                        var _c5c = _c49.fromISOString;
                        this.timeMenu.innerHTML = "";
                        this._clickableIncrementDate = _c5c(this.clickableIncrement);
                        this._visibleIncrementDate = _c5c(this.visibleIncrement);
                        this._visibleRangeDate = _c5c(this.visibleRange);
                        var _c5d = function (date) {
                                return date.getHours() * 60 * 60 + date.getMinutes() * 60 + date.getSeconds();
                            },
                            _c5e = _c5d(this._clickableIncrementDate),
                            _c5f = _c5d(this._visibleIncrementDate),
                            _c60 = _c5d(this._visibleRangeDate),
                            time = (this.value || this.currentFocus).getTime();
                        this._refDate = new Date(time - time % (_c5e * 1000));
                        this._refDate.setFullYear(1970, 0, 1);
                        this._clickableIncrement = 1;
                        this._totalIncrements = _c60 / _c5e;
                        this._visibleIncrement = _c5f / _c5e;
                        this._maxIncrement = (60 * 60 * 24) / _c5e;
                        var _c61 = Math.min(this._totalIncrements, 10),
                            _c62 = this._getFilteredNodes(0, (_c61 >> 1) + 1, false),
                            _c63 = [],
                            _c64 = _c61 - _c62.length,
                            _c65 = this._getFilteredNodes(0, _c64, true, _c62[0]);
                        if (_c65.length < _c64 && _c62.length > 0) {
                            _c63 = this._getFilteredNodes(_c62.length, _c64 - _c65.length, false, _c62[_c62.length - 1]);
                        }
                        _c46.forEach(_c65.concat(_c62, _c63), function (n) {
                            this.timeMenu.appendChild(n);
                        }, this);
                    },
                    constructor: function () {
                        this.constraints = {};
                    },
                    postMixInProperties: function () {
                        this.inherited(arguments);
                        this._setConstraintsAttr(this.constraints);
                    },
                    _setConstraintsAttr: function (_c66) {
                        lang.mixin(this, _c66);
                        if (!_c66.locale) {
                            _c66.locale = this.lang;
                        }
                    },
                    postCreate: function () {
                        this.connect(this.timeMenu, has("ie") ? "onmousewheel" : "DOMMouseScroll", "_mouseWheeled");
                        this._connects.push(_c50.addMouseListener(this.upArrow, this, "_onArrowUp", 33, 250));
                        this._connects.push(_c50.addMouseListener(this.downArrow, this, "_onArrowDown", 33, 250));
                        this.inherited(arguments);
                    },
                    _buttonMouse: function (e) {
                        _c4b.toggle(e.currentTarget, e.currentTarget == this.upArrow ? "dijitUpArrowHover" : "dijitDownArrowHover", e.type == "mouseenter" || e.type == "mouseover");
                    },
                    _createOption: function (_c67) {
                        var date = new Date(this._refDate);
                        var _c68 = this._clickableIncrementDate;
                        date.setHours(date.getHours() + _c68.getHours() * _c67, date.getMinutes() + _c68.getMinutes() * _c67, date.getSeconds() + _c68.getSeconds() * _c67);
                        if (this.constraints.selector == "time") {
                            date.setFullYear(1970, 0, 1);
                        }
                        var _c69 = _c48.format(date, this.constraints);
                        if (this.filterString && _c69.toLowerCase().indexOf(this.filterString) !== 0) {
                            return null;
                        }
                        var div = _c4c.create("div", {
                            "class": this.baseClass + "Item"
                        });
                        div.date = date;
                        div.index = _c67;
                        _c4c.create("div", {
                            "class": this.baseClass + "ItemInner",
                            innerHTML: _c69
                        }, div);
                        if (_c67 % this._visibleIncrement < 1 && _c67 % this._visibleIncrement > -1) {
                            _c4b.add(div, this.baseClass + "Marker");
                        } else {
                            if (!(_c67 % this._clickableIncrement)) {
                                _c4b.add(div, this.baseClass + "Tick");
                            }
                        }
                        if (this.isDisabledDate(date)) {
                            _c4b.add(div, this.baseClass + "ItemDisabled");
                        }
                        if (this.value && !_c47.compare(this.value, date, this.constraints.selector)) {
                            div.selected = true;
                            _c4b.add(div, this.baseClass + "ItemSelected");
                            if (_c4b.contains(div, this.baseClass + "Marker")) {
                                _c4b.add(div, this.baseClass + "MarkerSelected");
                            } else {
                                _c4b.add(div, this.baseClass + "TickSelected");
                            }
                            this._highlightOption(div, true);
                        }
                        return div;
                    },
                    _onOptionSelected: function (tgt) {
                        var _c6a = tgt.target.date || tgt.target.parentNode.date;
                        if (!_c6a || this.isDisabledDate(_c6a)) {
                            return;
                        }
                        this._highlighted_option = null;
                        this.set("value", _c6a);
                        this.onChange(_c6a);
                    },
                    onChange: function () {},
                    _highlightOption: function (node, _c6b) {
                        if (!node) {
                            return;
                        }
                        if (_c6b) {
                            if (this._highlighted_option) {
                                this._highlightOption(this._highlighted_option, false);
                            }
                            this._highlighted_option = node;
                        } else {
                            if (this._highlighted_option !== node) {
                                return;
                            } else {
                                this._highlighted_option = null;
                            }
                        }
                        _c4b.toggle(node, this.baseClass + "ItemHover", _c6b);
                        if (_c4b.contains(node, this.baseClass + "Marker")) {
                            _c4b.toggle(node, this.baseClass + "MarkerHover", _c6b);
                        } else {
                            _c4b.toggle(node, this.baseClass + "TickHover", _c6b);
                        }
                    },
                    onmouseover: function (e) {
                        this._keyboardSelected = null;
                        var tgr = (e.target.parentNode === this.timeMenu) ? e.target : e.target.parentNode;
                        if (!_c4b.contains(tgr, this.baseClass + "Item")) {
                            return;
                        }
                        this._highlightOption(tgr, true);
                    },
                    onmouseout: function (e) {
                        this._keyboardSelected = null;
                        var tgr = (e.target.parentNode === this.timeMenu) ? e.target : e.target.parentNode;
                        this._highlightOption(tgr, false);
                    },
                    _mouseWheeled: function (e) {
                        this._keyboardSelected = null;
                        _c4d.stop(e);
                        var _c6c = (has("ie") ? e.wheelDelta : -e.detail);
                        this[(_c6c > 0 ? "_onArrowUp" : "_onArrowDown")]();
                    },
                    _onArrowUp: function (_c6d) {
                        if (typeof _c6d == "number" && _c6d == -1) {
                            return;
                        }
                        if (!this.timeMenu.childNodes.length) {
                            return;
                        }
                        var _c6e = this.timeMenu.childNodes[0].index;
                        var divs = this._getFilteredNodes(_c6e, 1, true, this.timeMenu.childNodes[0]);
                        if (divs.length) {
                            this.timeMenu.removeChild(this.timeMenu.childNodes[this.timeMenu.childNodes.length - 1]);
                            this.timeMenu.insertBefore(divs[0], this.timeMenu.childNodes[0]);
                        }
                    },
                    _onArrowDown: function (_c6f) {
                        if (typeof _c6f == "number" && _c6f == -1) {
                            return;
                        }
                        if (!this.timeMenu.childNodes.length) {
                            return;
                        }
                        var _c70 = this.timeMenu.childNodes[this.timeMenu.childNodes.length - 1].index + 1;
                        var divs = this._getFilteredNodes(_c70, 1, false, this.timeMenu.childNodes[this.timeMenu.childNodes.length - 1]);
                        if (divs.length) {
                            this.timeMenu.removeChild(this.timeMenu.childNodes[0]);
                            this.timeMenu.appendChild(divs[0]);
                        }
                    },
                    handleKey: function (e) {
                        if (e.charOrCode == keys.DOWN_ARROW || e.charOrCode == keys.UP_ARROW) {
                            _c4d.stop(e);
                            if (this._highlighted_option && !this._highlighted_option.parentNode) {
                                this._highlighted_option = null;
                            }
                            var _c71 = this.timeMenu,
                                tgt = this._highlighted_option || _c4f("." + this.baseClass + "ItemSelected", _c71)[0];
                            if (!tgt) {
                                tgt = _c71.childNodes[0];
                            } else {
                                if (_c71.childNodes.length) {
                                    if (e.charOrCode == keys.DOWN_ARROW && !tgt.nextSibling) {
                                        this._onArrowDown();
                                    } else {
                                        if (e.charOrCode == keys.UP_ARROW && !tgt.previousSibling) {
                                            this._onArrowUp();
                                        }
                                    }
                                    if (e.charOrCode == keys.DOWN_ARROW) {
                                        tgt = tgt.nextSibling;
                                    } else {
                                        tgt = tgt.previousSibling;
                                    }
                                }
                            }
                            this._highlightOption(tgt, true);
                            this._keyboardSelected = tgt;
                            return false;
                        } else {
                            if (e.charOrCode == keys.ENTER || e.charOrCode === keys.TAB) {
                                if (!this._keyboardSelected && e.charOrCode === keys.TAB) {
                                    return true;
                                }
                                if (this._highlighted_option) {
                                    this._onOptionSelected({
                                        target: this._highlighted_option
                                    });
                                }
                                return e.charOrCode === keys.TAB;
                            }
                        }
                        return undefined;
                    }
                });
            });
        },
        "dijit/typematic": function () {
            define("dijit/typematic", ["dojo/_base/array", "dojo/_base/connect", "dojo/_base/event", "dojo/_base/kernel", "dojo/_base/lang", "dojo/on", "dojo/_base/sniff", "."], function (_c72, _c73, _c74, _c75, lang, on, has, _c76) {
                var _c77 = (_c76.typematic = {
                    _fireEventAndReload: function () {
                        this._timer = null;
                        this._callback(++this._count, this._node, this._evt);
                        this._currentTimeout = Math.max(this._currentTimeout < 0 ? this._initialDelay : (this._subsequentDelay > 1 ? this._subsequentDelay : Math.round(this._currentTimeout * this._subsequentDelay)), this._minDelay);
                        this._timer = setTimeout(lang.hitch(this, "_fireEventAndReload"), this._currentTimeout);
                    },
                    trigger: function (evt, _c78, node, _c79, obj, _c7a, _c7b, _c7c) {
                        if (obj != this._obj) {
                            this.stop();
                            this._initialDelay = _c7b || 500;
                            this._subsequentDelay = _c7a || 0.9;
                            this._minDelay = _c7c || 10;
                            this._obj = obj;
                            this._evt = evt;
                            this._node = node;
                            this._currentTimeout = -1;
                            this._count = -1;
                            this._callback = lang.hitch(_c78, _c79);
                            this._fireEventAndReload();
                            this._evt = lang.mixin({
                                faux: true
                            }, evt);
                        }
                    },
                    stop: function () {
                        if (this._timer) {
                            clearTimeout(this._timer);
                            this._timer = null;
                        }
                        if (this._obj) {
                            this._callback(-1, this._node, this._evt);
                            this._obj = null;
                        }
                    },
                    addKeyListener: function (node, _c7d, _c7e, _c7f, _c80, _c81, _c82) {
                        if (_c7d.keyCode) {
                            _c7d.charOrCode = _c7d.keyCode;
                            _c75.deprecated("keyCode attribute parameter for dijit.typematic.addKeyListener is deprecated. Use charOrCode instead.", "", "2.0");
                        } else {
                            if (_c7d.charCode) {
                                _c7d.charOrCode = String.fromCharCode(_c7d.charCode);
                                _c75.deprecated("charCode attribute parameter for dijit.typematic.addKeyListener is deprecated. Use charOrCode instead.", "", "2.0");
                            }
                        }
                        var _c83 = [on(node, _c73._keypress, lang.hitch(this, function (evt) {
                            if (evt.charOrCode == _c7d.charOrCode && (_c7d.ctrlKey === undefined || _c7d.ctrlKey == evt.ctrlKey) && (_c7d.altKey === undefined || _c7d.altKey == evt.altKey) && (_c7d.metaKey === undefined || _c7d.metaKey == (evt.metaKey || false)) && (_c7d.shiftKey === undefined || _c7d.shiftKey == evt.shiftKey)) {
                                _c74.stop(evt);
                                _c77.trigger(evt, _c7e, node, _c7f, _c7d, _c80, _c81, _c82);
                            } else {
                                if (_c77._obj == _c7d) {
                                    _c77.stop();
                                }
                            }
                        })), on(node, "keyup", lang.hitch(this, function () {
                            if (_c77._obj == _c7d) {
                                _c77.stop();
                            }
                        }))];
                        return {
                            remove: function () {
                                _c72.forEach(_c83, function (h) {
                                    h.remove();
                                });
                            }
                        };
                    },
                    addMouseListener: function (node, _c84, _c85, _c86, _c87, _c88) {
                        var _c89 = [on(node, "mousedown", lang.hitch(this, function (evt) {
                            _c74.stop(evt);
                            _c77.trigger(evt, _c84, node, _c85, node, _c86, _c87, _c88);
                        })), on(node, "mouseup", lang.hitch(this, function (evt) {
                            if (this._obj) {
                                _c74.stop(evt);
                            }
                            _c77.stop();
                        })), on(node, "mouseout", lang.hitch(this, function (evt) {
                            _c74.stop(evt);
                            _c77.stop();
                        })), on(node, "mousemove", lang.hitch(this, function (evt) {
                            evt.preventDefault();
                        })), on(node, "dblclick", lang.hitch(this, function (evt) {
                            _c74.stop(evt);
                            if (has("ie")) {
                                _c77.trigger(evt, _c84, node, _c85, node, _c86, _c87, _c88);
                                setTimeout(lang.hitch(this, _c77.stop), 50);
                            }
                        }))];
                        return {
                            remove: function () {
                                _c72.forEach(_c89, function (h) {
                                    h.remove();
                                });
                            }
                        };
                    },
                    addListener: function (_c8a, _c8b, _c8c, _c8d, _c8e, _c8f, _c90, _c91) {
                        var _c92 = [this.addKeyListener(_c8b, _c8c, _c8d, _c8e, _c8f, _c90, _c91), this.addMouseListener(_c8a, _c8d, _c8e, _c8f, _c90, _c91)];
                        return {
                            remove: function () {
                                _c72.forEach(_c92, function (h) {
                                    h.remove();
                                });
                            }
                        };
                    }
                });
                return _c77;
            });
        },
        "url:dijit/templates/TimePicker.html": "<div id=\"widget_${id}\" class=\"dijitMenu\"\n    ><div data-dojo-attach-point=\"upArrow\" class=\"dijitButtonNode dijitUpArrowButton\" data-dojo-attach-event=\"onmouseenter:_buttonMouse,onmouseleave:_buttonMouse\"\n\t\t><div class=\"dijitReset dijitInline dijitArrowButtonInner\" role=\"presentation\">&#160;</div\n\t\t><div class=\"dijitArrowButtonChar\">&#9650;</div></div\n    ><div data-dojo-attach-point=\"timeMenu,focusNode\" data-dojo-attach-event=\"onclick:_onOptionSelected,onmouseover,onmouseout\"></div\n    ><div data-dojo-attach-point=\"downArrow\" class=\"dijitButtonNode dijitDownArrowButton\" data-dojo-attach-event=\"onmouseenter:_buttonMouse,onmouseleave:_buttonMouse\"\n\t\t><div class=\"dijitReset dijitInline dijitArrowButtonInner\" role=\"presentation\">&#160;</div\n\t\t><div class=\"dijitArrowButtonChar\">&#9660;</div></div\n></div>\n",
        "dijit/layout/AccordionContainer": function () {
            require({
                cache: {
                    "url:dijit/layout/templates/AccordionButton.html": "<div data-dojo-attach-event='onclick:_onTitleClick' class='dijitAccordionTitle' role=\"presentation\">\n\t<div data-dojo-attach-point='titleNode,focusNode' data-dojo-attach-event='onkeypress:_onTitleKeyPress'\n\t\t\tclass='dijitAccordionTitleFocus' role=\"tab\" aria-expanded=\"false\"\n\t\t><span class='dijitInline dijitAccordionArrow' role=\"presentation\"></span\n\t\t><span class='arrowTextUp' role=\"presentation\">+</span\n\t\t><span class='arrowTextDown' role=\"presentation\">-</span\n\t\t><img src=\"${_blankGif}\" alt=\"\" class=\"dijitIcon\" data-dojo-attach-point='iconNode' style=\"vertical-align: middle\" role=\"presentation\"/>\n\t\t<span role=\"presentation\" data-dojo-attach-point='titleTextNode' class='dijitAccordionText'></span>\n\t</div>\n</div>\n"
                }
            });
            define("dijit/layout/AccordionContainer", ["require", "dojo/_base/array", "dojo/_base/declare", "dojo/_base/event", "dojo/_base/fx", "dojo/dom", "dojo/dom-attr", "dojo/dom-class", "dojo/dom-construct", "dojo/dom-geometry", "dojo/_base/kernel", "dojo/keys", "dojo/_base/lang", "dojo/_base/sniff", "dojo/topic", "../focus", "../_base/manager", "dojo/ready", "../_Widget", "../_Container", "../_TemplatedMixin", "../_CssStateMixin", "./StackContainer", "./ContentPane", "dojo/text!./templates/AccordionButton.html"], function (_c93, _c94, _c95, _c96, fx, dom, _c97, _c98, _c99, _c9a, _c9b, keys, lang, has, _c9c, _c9d, _c9e, _c9f, _ca0, _ca1, _ca2, _ca3, _ca4, _ca5, _ca6) {
                var _ca7 = _c95("dijit.layout._AccordionButton", [_ca0, _ca2, _ca3], {
                    templateString: _ca6,
                    label: "",
                    _setLabelAttr: {
                        node: "titleTextNode",
                        type: "innerHTML"
                    },
                    title: "",
                    _setTitleAttr: {
                        node: "titleTextNode",
                        type: "attribute",
                        attribute: "title"
                    },
                    iconClassAttr: "",
                    _setIconClassAttr: {
                        node: "iconNode",
                        type: "class"
                    },
                    baseClass: "dijitAccordionTitle",
                    getParent: function () {
                        return this.parent;
                    },
                    buildRendering: function () {
                        this.inherited(arguments);
                        var _ca8 = this.id.replace(" ", "_");
                        _c97.set(this.titleTextNode, "id", _ca8 + "_title");
                        this.focusNode.setAttribute("aria-labelledby", _c97.get(this.titleTextNode, "id"));
                        dom.setSelectable(this.domNode, false);
                    },
                    getTitleHeight: function () {
                        return _c9a.getMarginSize(this.domNode).h;
                    },
                    _onTitleClick: function () {
                        var _ca9 = this.getParent();
                        _ca9.selectChild(this.contentWidget, true);
                        _c9d.focus(this.focusNode);
                    },
                    _onTitleKeyPress: function (evt) {
                        return this.getParent()._onKeyPress(evt, this.contentWidget);
                    },
                    _setSelectedAttr: function (_caa) {
                        this._set("selected", _caa);
                        this.focusNode.setAttribute("aria-expanded", _caa);
                        this.focusNode.setAttribute("aria-selected", _caa);
                        this.focusNode.setAttribute("tabIndex", _caa ? "0" : "-1");
                    }
                });
                var _cab = _c95("dijit.layout._AccordionInnerContainer", [_ca0, _ca3], {
                    baseClass: "dijitAccordionInnerContainer",
                    isLayoutContainer: true,
                    buildRendering: function () {
                        this.domNode = _c99.place("<div class='" + this.baseClass + "' role='presentation'>", this.contentWidget.domNode, "after");
                        var _cac = this.contentWidget,
                            cls = lang.isString(this.buttonWidget) ? lang.getObject(this.buttonWidget) : this.buttonWidget;
                        this.button = _cac._buttonWidget = (new cls({
                            contentWidget: _cac,
                            label: _cac.title,
                            title: _cac.tooltip,
                            dir: _cac.dir,
                            lang: _cac.lang,
                            textDir: _cac.textDir,
                            iconClass: _cac.iconClass,
                            id: _cac.id + "_button",
                            parent: this.parent
                        })).placeAt(this.domNode);
                        this.containerNode = _c99.place("<div class='dijitAccordionChildWrapper' style='display:none'>", this.domNode);
                        _c99.place(this.contentWidget.domNode, this.containerNode);
                    },
                    postCreate: function () {
                        this.inherited(arguments);
                        var _cad = this.button;
                        this._contentWidgetWatches = [this.contentWidget.watch("title", lang.hitch(this, function (name, _cae, _caf) {
                            _cad.set("label", _caf);
                        })), this.contentWidget.watch("tooltip", lang.hitch(this, function (name, _cb0, _cb1) {
                            _cad.set("title", _cb1);
                        })), this.contentWidget.watch("iconClass", lang.hitch(this, function (name, _cb2, _cb3) {
                            _cad.set("iconClass", _cb3);
                        }))];
                    },
                    _setSelectedAttr: function (_cb4) {
                        this._set("selected", _cb4);
                        this.button.set("selected", _cb4);
                        if (_cb4) {
                            var cw = this.contentWidget;
                            if (cw.onSelected) {
                                cw.onSelected();
                            }
                        }
                    },
                    startup: function () {
                        this.contentWidget.startup();
                    },
                    destroy: function () {
                        this.button.destroyRecursive();
                        _c94.forEach(this._contentWidgetWatches || [], function (w) {
                            w.unwatch();
                        });
                        delete this.contentWidget._buttonWidget;
                        delete this.contentWidget._wrapperWidget;
                        this.inherited(arguments);
                    },
                    destroyDescendants: function (_cb5) {
                        this.contentWidget.destroyRecursive(_cb5);
                    }
                });
                var _cb6 = _c95("dijit.layout.AccordionContainer", _ca4, {
                    duration: _c9e.defaultDuration,
                    buttonWidget: _ca7,
                    baseClass: "dijitAccordionContainer",
                    buildRendering: function () {
                        this.inherited(arguments);
                        this.domNode.style.overflow = "hidden";
                        this.domNode.setAttribute("role", "tablist");
                    },
                    startup: function () {
                        if (this._started) {
                            return;
                        }
                        this.inherited(arguments);
                        if (this.selectedChildWidget) {
                            var _cb7 = this.selectedChildWidget.containerNode.style;
                            _cb7.display = "";
                            _cb7.overflow = "auto";
                            this.selectedChildWidget._wrapperWidget.set("selected", true);
                        }
                    },
                    layout: function () {
                        var _cb8 = this.selectedChildWidget;
                        if (!_cb8) {
                            return;
                        }
                        var _cb9 = _cb8._wrapperWidget.domNode,
                            _cba = _c9a.getMarginExtents(_cb9),
                            _cbb = _c9a.getPadBorderExtents(_cb9),
                            _cbc = _cb8._wrapperWidget.containerNode,
                            _cbd = _c9a.getMarginExtents(_cbc),
                            _cbe = _c9a.getPadBorderExtents(_cbc),
                            _cbf = this._contentBox;
                        var _cc0 = 0;
                        _c94.forEach(this.getChildren(), function (_cc1) {
                            if (_cc1 != _cb8) {
                                _cc0 += _c9a.getMarginSize(_cc1._wrapperWidget.domNode).h;
                            }
                        });
                        this._verticalSpace = _cbf.h - _cc0 - _cba.h - _cbb.h - _cbd.h - _cbe.h - _cb8._buttonWidget.getTitleHeight();
                        this._containerContentBox = {
                            h: this._verticalSpace,
                            w: this._contentBox.w - _cba.w - _cbb.w - _cbd.w - _cbe.w
                        };
                        if (_cb8) {
                            _cb8.resize(this._containerContentBox);
                        }
                    },
                    _setupChild: function (_cc2) {
                        _cc2._wrapperWidget = _cab({
                            contentWidget: _cc2,
                            buttonWidget: this.buttonWidget,
                            id: _cc2.id + "_wrapper",
                            dir: _cc2.dir,
                            lang: _cc2.lang,
                            textDir: _cc2.textDir,
                            parent: this
                        });
                        this.inherited(arguments);
                    },
                    addChild: function (_cc3, _cc4) {
                        if (this._started) {
                            var _cc5 = this.containerNode;
                            if (_cc4 && typeof _cc4 == "number") {
                                var _cc6 = _ca0.prototype.getChildren.call(this);
                                if (_cc6 && _cc6.length >= _cc4) {
                                    _cc5 = _cc6[_cc4 - 1].domNode;
                                    _cc4 = "after";
                                }
                            }
                            _c99.place(_cc3.domNode, _cc5, _cc4);
                            if (!_cc3._started) {
                                _cc3.startup();
                            }
                            this._setupChild(_cc3);
                            _c9c.publish(this.id + "-addChild", _cc3, _cc4);
                            this.layout();
                            if (!this.selectedChildWidget) {
                                this.selectChild(_cc3);
                            }
                        } else {
                            this.inherited(arguments);
                        }
                    },
                    removeChild: function (_cc7) {
                        if (_cc7._wrapperWidget) {
                            _c99.place(_cc7.domNode, _cc7._wrapperWidget.domNode, "after");
                            _cc7._wrapperWidget.destroy();
                            delete _cc7._wrapperWidget;
                        }
                        _c98.remove(_cc7.domNode, "dijitHidden");
                        this.inherited(arguments);
                    },
                    getChildren: function () {
                        return _c94.map(this.inherited(arguments), function (_cc8) {
                            return _cc8.declaredClass == "dijit.layout._AccordionInnerContainer" ? _cc8.contentWidget : _cc8;
                        }, this);
                    },
                    destroy: function () {
                        if (this._animation) {
                            this._animation.stop();
                        }
                        _c94.forEach(this.getChildren(), function (_cc9) {
                            if (_cc9._wrapperWidget) {
                                _cc9._wrapperWidget.destroy();
                            } else {
                                _cc9.destroyRecursive();
                            }
                        });
                        this.inherited(arguments);
                    },
                    _showChild: function (_cca) {
                        _cca._wrapperWidget.containerNode.style.display = "block";
                        return this.inherited(arguments);
                    },
                    _hideChild: function (_ccb) {
                        _ccb._wrapperWidget.containerNode.style.display = "none";
                        this.inherited(arguments);
                    },
                    _transition: function (_ccc, _ccd, _cce) {
                        if (has("ie") < 8) {
                            _cce = false;
                        }
                        if (this._animation) {
                            this._animation.stop(true);
                            delete this._animation;
                        }
                        var self = this;
                        if (_ccc) {
                            _ccc._wrapperWidget.set("selected", true);
                            var d = this._showChild(_ccc);
                            if (this.doLayout && _ccc.resize) {
                                _ccc.resize(this._containerContentBox);
                            }
                        }
                        if (_ccd) {
                            _ccd._wrapperWidget.set("selected", false);
                            if (!_cce) {
                                this._hideChild(_ccd);
                            }
                        }
                        if (_cce) {
                            var _ccf = _ccc._wrapperWidget.containerNode,
                                _cd0 = _ccd._wrapperWidget.containerNode;
                            var _cd1 = _ccc._wrapperWidget.containerNode,
                                _cd2 = _c9a.getMarginExtents(_cd1),
                                _cd3 = _c9a.getPadBorderExtents(_cd1),
                                _cd4 = _cd2.h + _cd3.h;
                            _cd0.style.height = (self._verticalSpace - _cd4) + "px";
                            this._animation = new fx.Animation({
                                node: _ccf,
                                duration: this.duration,
                                curve: [1, this._verticalSpace - _cd4 - 1],
                                onAnimate: function (_cd5) {
                                    _cd5 = Math.floor(_cd5);
                                    _ccf.style.height = _cd5 + "px";
                                    _cd0.style.height = (self._verticalSpace - _cd4 - _cd5) + "px";
                                },
                                onEnd: function () {
                                    delete self._animation;
                                    _ccf.style.height = "auto";
                                    _ccd._wrapperWidget.containerNode.style.display = "none";
                                    _cd0.style.height = "auto";
                                    self._hideChild(_ccd);
                                }
                            });
                            this._animation.onStop = this._animation.onEnd;
                            this._animation.play();
                        }
                        return d;
                    },
                    _onKeyPress: function (e, _cd6) {
                        if (this.disabled || e.altKey || !(_cd6 || e.ctrlKey)) {
                            return;
                        }
                        var c = e.charOrCode;
                        if ((_cd6 && (c == keys.LEFT_ARROW || c == keys.UP_ARROW)) || (e.ctrlKey && c == keys.PAGE_UP)) {
                            this._adjacent(false)._buttonWidget._onTitleClick();
                            _c96.stop(e);
                        } else {
                            if ((_cd6 && (c == keys.RIGHT_ARROW || c == keys.DOWN_ARROW)) || (e.ctrlKey && (c == keys.PAGE_DOWN || c == keys.TAB))) {
                                this._adjacent(true)._buttonWidget._onTitleClick();
                                _c96.stop(e);
                            }
                        }
                    }
                });
                if (!_c9b.isAsync) {
                    _c9f(0, function () {
                        var _cd7 = ["dijit/layout/AccordionPane"];
                        _c93(_cd7);
                    });
                }
                _cb6._InnerContainer = _cab;
                _cb6._Button = _ca7;
                return _cb6;
            });
        },
        "dijit/layout/StackContainer": function () {
            define("dijit/layout/StackContainer", ["dojo/_base/array", "dojo/cookie", "dojo/_base/declare", "dojo/dom-class", "dojo/_base/kernel", "dojo/_base/lang", "dojo/ready", "dojo/topic", "../registry", "../_WidgetBase", "./_LayoutWidget", "dojo/i18n!../nls/common"], function (_cd8, _cd9, _cda, _cdb, _cdc, lang, _cdd, _cde, _cdf, _ce0, _ce1) {
                if (!_cdc.isAsync) {
                    _cdd(0, function () {
                        var _ce2 = ["dijit/layout/StackController"];
                        require(_ce2);
                    });
                }
                lang.extend(_ce0, {
                    selected: false,
                    closable: false,
                    iconClass: "dijitNoIcon",
                    showTitle: true
                });
                return _cda("dijit.layout.StackContainer", _ce1, {
                    doLayout: true,
                    persist: false,
                    baseClass: "dijitStackContainer",
                    buildRendering: function () {
                        this.inherited(arguments);
                        _cdb.add(this.domNode, "dijitLayoutContainer");
                        this.containerNode.setAttribute("role", "tabpanel");
                    },
                    postCreate: function () {
                        this.inherited(arguments);
                        this.connect(this.domNode, "onkeypress", this._onKeyPress);
                    },
                    startup: function () {
                        if (this._started) {
                            return;
                        }
                        var _ce3 = this.getChildren();
                        _cd8.forEach(_ce3, this._setupChild, this);
                        if (this.persist) {
                            this.selectedChildWidget = _cdf.byId(_cd9(this.id + "_selectedChild"));
                        } else {
                            _cd8.some(_ce3, function (_ce4) {
                                if (_ce4.selected) {
                                    this.selectedChildWidget = _ce4;
                                }
                                return _ce4.selected;
                            }, this);
                        }
                        var _ce5 = this.selectedChildWidget;
                        if (!_ce5 && _ce3[0]) {
                            _ce5 = this.selectedChildWidget = _ce3[0];
                            _ce5.selected = true;
                        }
                        _cde.publish(this.id + "-startup", {
                            children: _ce3,
                            selected: _ce5
                        });
                        this.inherited(arguments);
                    },
                    resize: function () {
                        if (!this._hasBeenShown) {
                            this._hasBeenShown = true;
                            var _ce6 = this.selectedChildWidget;
                            if (_ce6) {
                                this._showChild(_ce6);
                            }
                        }
                        this.inherited(arguments);
                    },
                    _setupChild: function (_ce7) {
                        this.inherited(arguments);
                        _cdb.replace(_ce7.domNode, "dijitHidden", "dijitVisible");
                        _ce7.domNode.title = "";
                    },
                    addChild: function (_ce8, _ce9) {
                        this.inherited(arguments);
                        if (this._started) {
                            _cde.publish(this.id + "-addChild", _ce8, _ce9);
                            this.layout();
                            if (!this.selectedChildWidget) {
                                this.selectChild(_ce8);
                            }
                        }
                    },
                    removeChild: function (page) {
                        this.inherited(arguments);
                        if (this._started) {
                            _cde.publish(this.id + "-removeChild", page);
                        }
                        if (this._descendantsBeingDestroyed) {
                            return;
                        }
                        if (this.selectedChildWidget === page) {
                            this.selectedChildWidget = undefined;
                            if (this._started) {
                                var _cea = this.getChildren();
                                if (_cea.length) {
                                    this.selectChild(_cea[0]);
                                }
                            }
                        }
                        if (this._started) {
                            this.layout();
                        }
                    },
                    selectChild: function (page, _ceb) {
                        page = _cdf.byId(page);
                        if (this.selectedChildWidget != page) {
                            var d = this._transition(page, this.selectedChildWidget, _ceb);
                            this._set("selectedChildWidget", page);
                            _cde.publish(this.id + "-selectChild", page);
                            if (this.persist) {
                                _cd9(this.id + "_selectedChild", this.selectedChildWidget.id);
                            }
                        }
                        return d;
                    },
                    _transition: function (_cec, _ced) {
                        if (_ced) {
                            this._hideChild(_ced);
                        }
                        var d = this._showChild(_cec);
                        if (_cec.resize) {
                            if (this.doLayout) {
                                _cec.resize(this._containerContentBox || this._contentBox);
                            } else {
                                _cec.resize();
                            }
                        }
                        return d;
                    },
                    _adjacent: function (_cee) {
                        var _cef = this.getChildren();
                        var _cf0 = _cd8.indexOf(_cef, this.selectedChildWidget);
                        _cf0 += _cee ? 1 : _cef.length - 1;
                        return _cef[_cf0 % _cef.length];
                    },
                    forward: function () {
                        return this.selectChild(this._adjacent(true), true);
                    },
                    back: function () {
                        return this.selectChild(this._adjacent(false), true);
                    },
                    _onKeyPress: function (e) {
                        _cde.publish(this.id + "-containerKeyPress", {
                            e: e,
                            page: this
                        });
                    },
                    layout: function () {
                        var _cf1 = this.selectedChildWidget;
                        if (_cf1 && _cf1.resize) {
                            if (this.doLayout) {
                                _cf1.resize(this._containerContentBox || this._contentBox);
                            } else {
                                _cf1.resize();
                            }
                        }
                    },
                    _showChild: function (page) {
                        var _cf2 = this.getChildren();
                        page.isFirstChild = (page == _cf2[0]);
                        page.isLastChild = (page == _cf2[_cf2.length - 1]);
                        page._set("selected", true);
                        _cdb.replace(page.domNode, "dijitVisible", "dijitHidden");
                        return (page._onShow && page._onShow()) || true;
                    },
                    _hideChild: function (page) {
                        page._set("selected", false);
                        _cdb.replace(page.domNode, "dijitHidden", "dijitVisible");
                        page.onHide && page.onHide();
                    },
                    closeChild: function (page) {
                        var _cf3 = page.onClose(this, page);
                        if (_cf3) {
                            this.removeChild(page);
                            page.destroyRecursive();
                        }
                    },
                    destroyDescendants: function (_cf4) {
                        this._descendantsBeingDestroyed = true;
                        this.selectedChildWidget = undefined;
                        _cd8.forEach(this.getChildren(), function (_cf5) {
                            if (!_cf4) {
                                this.removeChild(_cf5);
                            }
                            _cf5.destroyRecursive(_cf4);
                        }, this);
                        this._descendantsBeingDestroyed = false;
                    }
                });
            });
        },
        "dojo/cookie": function () {
            define(["./_base/kernel", "./regexp"], function (dojo, _cf6) {
                dojo.cookie = function (name, _cf7, _cf8) {
                    var c = document.cookie,
                        ret;
                    if (arguments.length == 1) {
                        var _cf9 = c.match(new RegExp("(?:^|; )" + _cf6.escapeString(name) + "=([^;]*)"));
                        ret = _cf9 ? decodeURIComponent(_cf9[1]) : undefined;
                    } else {
                        _cf8 = _cf8 || {};
                        var exp = _cf8.expires;
                        if (typeof exp == "number") {
                            var d = new Date();
                            d.setTime(d.getTime() + exp * 24 * 60 * 60 * 1000);
                            exp = _cf8.expires = d;
                        }
                        if (exp && exp.toUTCString) {
                            _cf8.expires = exp.toUTCString();
                        }
                        _cf7 = encodeURIComponent(_cf7);
                        var _cfa = name + "=" + _cf7,
                            _cfb;
                        for (_cfb in _cf8) {
                            _cfa += "; " + _cfb;
                            var _cfc = _cf8[_cfb];
                            if (_cfc !== true) {
                                _cfa += "=" + _cfc;
                            }
                        }
                        document.cookie = _cfa;
                    }
                    return ret;
                };
                dojo.cookie.isSupported = function () {
                    if (!("cookieEnabled" in navigator)) {
                        this("__djCookieTest__", "CookiesAllowed");
                        navigator.cookieEnabled = this("__djCookieTest__") == "CookiesAllowed";
                        if (navigator.cookieEnabled) {
                            this("__djCookieTest__", "", {
                                expires: -1
                            });
                        }
                    }
                    return navigator.cookieEnabled;
                };
                return dojo.cookie;
            });
        },
        "dijit/layout/_LayoutWidget": function () {
            define("dijit/layout/_LayoutWidget", ["dojo/_base/lang", "../_Widget", "../_Container", "../_Contained", "dojo/_base/declare", "dojo/dom-class", "dojo/dom-geometry", "dojo/dom-style", "dojo/_base/sniff", "dojo/_base/window"], function (lang, _cfd, _cfe, _cff, _d00, _d01, _d02, _d03, has, win) {
                return _d00("dijit.layout._LayoutWidget", [_cfd, _cfe, _cff], {
                    baseClass: "dijitLayoutContainer",
                    isLayoutContainer: true,
                    buildRendering: function () {
                        this.inherited(arguments);
                        _d01.add(this.domNode, "dijitContainer");
                    },
                    startup: function () {
                        if (this._started) {
                            return;
                        }
                        this.inherited(arguments);
                        var _d04 = this.getParent && this.getParent();
                        if (!(_d04 && _d04.isLayoutContainer)) {
                            this.resize();
                            this.connect(win.global, "onresize", function () {
                                this.resize();
                            });
                        }
                    },
                    resize: function (_d05, _d06) {
                        var node = this.domNode;
                        if (_d05) {
                            _d02.setMarginBox(node, _d05);
                        }
                        var mb = _d06 || {};
                        lang.mixin(mb, _d05 || {});
                        if (!("h" in mb) || !("w" in mb)) {
                            mb = lang.mixin(_d02.getMarginBox(node), mb);
                        }
                        var cs = _d03.getComputedStyle(node);
                        var me = _d02.getMarginExtents(node, cs);
                        var be = _d02.getBorderExtents(node, cs);
                        var bb = (this._borderBox = {
                            w: mb.w - (me.w + be.w),
                            h: mb.h - (me.h + be.h)
                        });
                        var pe = _d02.getPadExtents(node, cs);
                        this._contentBox = {
                            l: _d03.toPixelValue(node, cs.paddingLeft),
                            t: _d03.toPixelValue(node, cs.paddingTop),
                            w: bb.w - pe.w,
                            h: bb.h - pe.h
                        };
                        this.layout();
                    },
                    layout: function () {},
                    _setupChild: function (_d07) {
                        var cls = this.baseClass + "-child " + (_d07.baseClass ? this.baseClass + "-" + _d07.baseClass : "");
                        _d01.add(_d07.domNode, cls);
                    },
                    addChild: function (_d08, _d09) {
                        this.inherited(arguments);
                        if (this._started) {
                            this._setupChild(_d08);
                        }
                    },
                    removeChild: function (_d0a) {
                        var cls = this.baseClass + "-child" + (_d0a.baseClass ? " " + this.baseClass + "-" + _d0a.baseClass : "");
                        _d01.remove(_d0a.domNode, cls);
                        this.inherited(arguments);
                    }
                });
            });
        },
        "url:dijit/layout/templates/AccordionButton.html": "<div data-dojo-attach-event='onclick:_onTitleClick' class='dijitAccordionTitle' role=\"presentation\">\n\t<div data-dojo-attach-point='titleNode,focusNode' data-dojo-attach-event='onkeypress:_onTitleKeyPress'\n\t\t\tclass='dijitAccordionTitleFocus' role=\"tab\" aria-expanded=\"false\"\n\t\t><span class='dijitInline dijitAccordionArrow' role=\"presentation\"></span\n\t\t><span class='arrowTextUp' role=\"presentation\">+</span\n\t\t><span class='arrowTextDown' role=\"presentation\">-</span\n\t\t><img src=\"${_blankGif}\" alt=\"\" class=\"dijitIcon\" data-dojo-attach-point='iconNode' style=\"vertical-align: middle\" role=\"presentation\"/>\n\t\t<span role=\"presentation\" data-dojo-attach-point='titleTextNode' class='dijitAccordionText'></span>\n\t</div>\n</div>\n",
        "dijit/form/Select": function () {
            require({
                cache: {
                    "url:dijit/form/templates/Select.html": "<table class=\"dijit dijitReset dijitInline dijitLeft\"\n\tdata-dojo-attach-point=\"_buttonNode,tableNode,focusNode\" cellspacing='0' cellpadding='0'\n\trole=\"combobox\" aria-haspopup=\"true\"\n\t><tbody role=\"presentation\"><tr role=\"presentation\"\n\t\t><td class=\"dijitReset dijitStretch dijitButtonContents dijitButtonNode\" role=\"presentation\"\n\t\t\t><span class=\"dijitReset dijitInline dijitButtonText\"  data-dojo-attach-point=\"containerNode,_popupStateNode\"></span\n\t\t\t><input type=\"hidden\" ${!nameAttrSetting} data-dojo-attach-point=\"valueNode\" value=\"${value}\" aria-hidden=\"true\"\n\t\t/></td><td class=\"dijitReset dijitRight dijitButtonNode dijitArrowButton dijitDownArrowButton\"\n\t\t\t\tdata-dojo-attach-point=\"titleNode\" role=\"presentation\"\n\t\t\t><div class=\"dijitReset dijitArrowButtonInner\" role=\"presentation\"></div\n\t\t\t><div class=\"dijitReset dijitArrowButtonChar\" role=\"presentation\">&#9660;</div\n\t\t></td\n\t></tr></tbody\n></table>\n"
                }
            });
            define("dijit/form/Select", ["dojo/_base/array", "dojo/_base/declare", "dojo/dom-attr", "dojo/dom-class", "dojo/dom-construct", "dojo/dom-geometry", "dojo/_base/event", "dojo/i18n", "dojo/_base/lang", "./_FormSelectWidget", "../_HasDropDown", "../Menu", "../MenuItem", "../MenuSeparator", "../Tooltip", "dojo/text!./templates/Select.html", "dojo/i18n!./nls/validate"], function (_d0b, _d0c, _d0d, _d0e, _d0f, _d10, _d11, i18n, lang, _d12, _d13, Menu, _d14, _d15, _d16, _d17) {
                var _d18 = _d0c("dijit.form._SelectMenu", Menu, {
                    buildRendering: function () {
                        this.inherited(arguments);
                        var o = (this.menuTableNode = this.domNode);
                        var n = (this.domNode = _d0f.create("div", {
                            style: {
                                overflowX: "hidden",
                                overflowY: "scroll"
                            }
                        }));
                        if (o.parentNode) {
                            o.parentNode.replaceChild(n, o);
                        }
                        _d0e.remove(o, "dijitMenuTable");
                        n.className = o.className + " dijitSelectMenu";
                        o.className = "dijitReset dijitMenuTable";
                        o.setAttribute("role", "listbox");
                        n.setAttribute("role", "presentation");
                        n.appendChild(o);
                    },
                    postCreate: function () {
                        this.inherited(arguments);
                        this.connect(this.domNode, "onmousemove", _d11.stop);
                    },
                    resize: function (mb) {
                        if (mb) {
                            _d10.setMarginBox(this.domNode, mb);
                            if ("w" in mb) {
                                this.menuTableNode.style.width = "100%";
                            }
                        }
                    }
                });
                var _d19 = _d0c("dijit.form.Select", [_d12, _d13], {
                    baseClass: "dijitSelect",
                    templateString: _d17,
                    required: false,
                    state: "",
                    message: "",
                    tooltipPosition: [],
                    emptyLabel: "&#160;",
                    _isLoaded: false,
                    _childrenLoaded: false,
                    _fillContent: function () {
                        this.inherited(arguments);
                        if (this.options.length && !this.value && this.srcNodeRef) {
                            var si = this.srcNodeRef.selectedIndex || 0;
                            this.value = this.options[si >= 0 ? si : 0].value;
                        }
                        this.dropDown = new _d18({
                            id: this.id + "_menu"
                        });
                        _d0e.add(this.dropDown.domNode, this.baseClass + "Menu");
                    },
                    _getMenuItemForOption: function (_d1a) {
                        if (!_d1a.value && !_d1a.label) {
                            return new _d15();
                        } else {
                            var _d1b = lang.hitch(this, "_setValueAttr", _d1a);
                            var item = new _d14({
                                option: _d1a,
                                label: _d1a.label || this.emptyLabel,
                                onClick: _d1b,
                                disabled: _d1a.disabled || false
                            });
                            item.focusNode.setAttribute("role", "listitem");
                            return item;
                        }
                    },
                    _addOptionItem: function (_d1c) {
                        if (this.dropDown) {
                            this.dropDown.addChild(this._getMenuItemForOption(_d1c));
                        }
                    },
                    _getChildren: function () {
                        if (!this.dropDown) {
                            return [];
                        }
                        return this.dropDown.getChildren();
                    },
                    _loadChildren: function (_d1d) {
                        if (_d1d === true) {
                            if (this.dropDown) {
                                delete this.dropDown.focusedChild;
                            }
                            if (this.options.length) {
                                this.inherited(arguments);
                            } else {
                                _d0b.forEach(this._getChildren(), function (_d1e) {
                                    _d1e.destroyRecursive();
                                });
                                var item = new _d14({
                                    label: "&#160;"
                                });
                                this.dropDown.addChild(item);
                            }
                        } else {
                            this._updateSelection();
                        }
                        this._isLoaded = false;
                        this._childrenLoaded = true;
                        if (!this._loadingStore) {
                            this._setValueAttr(this.value);
                        }
                    },
                    _setValueAttr: function (_d1f) {
                        this.inherited(arguments);
                        _d0d.set(this.valueNode, "value", this.get("value"));
                        this.validate(this.focused);
                    },
                    _setDisabledAttr: function (_d20) {
                        this.inherited(arguments);
                        this.validate(this.focused);
                    },
                    _setRequiredAttr: function (_d21) {
                        this._set("required", _d21);
                        this.focusNode.setAttribute("aria-required", _d21);
                        this.validate(this.focused);
                    },
                    _setDisplay: function (_d22) {
                        var lbl = _d22 || this.emptyLabel;
                        this.containerNode.innerHTML = "<span class=\"dijitReset dijitInline " + this.baseClass + "Label\">" + lbl + "</span>";
                        this.focusNode.setAttribute("aria-valuetext", lbl);
                    },
                    validate: function (_d23) {
                        var _d24 = this.disabled || this.isValid(_d23);
                        this._set("state", _d24 ? "" : "Incomplete");
                        this.focusNode.setAttribute("aria-invalid", _d24 ? "false" : "true");
                        var _d25 = _d24 ? "" : this._missingMsg;
                        if (_d25 && this.focused && this._hasBeenBlurred) {
                            _d16.show(_d25, this.domNode, this.tooltipPosition, !this.isLeftToRight());
                        } else {
                            _d16.hide(this.domNode);
                        }
                        this._set("message", _d25);
                        return _d24;
                    },
                    isValid: function () {
                        return (!this.required || this.value === 0 || !(/^\s*$/.test(this.value || "")));
                    },
                    reset: function () {
                        this.inherited(arguments);
                        _d16.hide(this.domNode);
                        this.validate(this.focused);
                    },
                    postMixInProperties: function () {
                        this.inherited(arguments);
                        this._missingMsg = i18n.getLocalization("dijit.form", "validate", this.lang).missingMessage;
                    },
                    postCreate: function () {
                        this.inherited(arguments);
                        this.connect(this.domNode, "onmousemove", _d11.stop);
                    },
                    _setStyleAttr: function (_d26) {
                        this.inherited(arguments);
                        _d0e.toggle(this.domNode, this.baseClass + "FixedWidth", !! this.domNode.style.width);
                    },
                    isLoaded: function () {
                        return this._isLoaded;
                    },
                    loadDropDown: function (_d27) {
                        this._loadChildren(true);
                        this._isLoaded = true;
                        _d27();
                    },
                    closeDropDown: function () {
                        this.inherited(arguments);
                        if (this.dropDown && this.dropDown.menuTableNode) {
                            this.dropDown.menuTableNode.style.width = "";
                        }
                    },
                    uninitialize: function (_d28) {
                        if (this.dropDown && !this.dropDown._destroyed) {
                            this.dropDown.destroyRecursive(_d28);
                            delete this.dropDown;
                        }
                        this.inherited(arguments);
                    },
                    _onFocus: function () {
                        this.validate(true);
                        this.inherited(arguments);
                    },
                    _onBlur: function () {
                        _d16.hide(this.domNode);
                        this.inherited(arguments);
                    }
                });
                _d19._Menu = _d18;
                return _d19;
            });
        },
        "dijit/form/_FormSelectWidget": function () {
            define("dijit/form/_FormSelectWidget", ["dojo/_base/array", "dojo/aspect", "dojo/data/util/sorter", "dojo/_base/declare", "dojo/dom", "dojo/dom-class", "dojo/_base/kernel", "dojo/_base/lang", "dojo/query", "./_FormValueWidget"], function (_d29, _d2a, _d2b, _d2c, dom, _d2d, _d2e, lang, _d2f, _d30) {
                return _d2c("dijit.form._FormSelectWidget", _d30, {
                    multiple: false,
                    options: null,
                    store: null,
                    query: null,
                    queryOptions: null,
                    onFetch: null,
                    sortByLabel: true,
                    loadChildrenOnOpen: false,
                    getOptions: function (_d31) {
                        var _d32 = _d31,
                            opts = this.options || [],
                            l = opts.length;
                        if (_d32 === undefined) {
                            return opts;
                        }
                        if (lang.isArray(_d32)) {
                            return _d29.map(_d32, "return this.getOptions(item);", this);
                        }
                        if (lang.isObject(_d31)) {
                            if (!_d29.some(this.options, function (o, idx) {
                                if (o === _d32 || (o.value && o.value === _d32.value)) {
                                    _d32 = idx;
                                    return true;
                                }
                                return false;
                            })) {
                                _d32 = -1;
                            }
                        }
                        if (typeof _d32 == "string") {
                            for (var i = 0; i < l; i++) {
                                if (opts[i].value === _d32) {
                                    _d32 = i;
                                    break;
                                }
                            }
                        }
                        if (typeof _d32 == "number" && _d32 >= 0 && _d32 < l) {
                            return this.options[_d32];
                        }
                        return null;
                    },
                    addOption: function (_d33) {
                        if (!lang.isArray(_d33)) {
                            _d33 = [_d33];
                        }
                        _d29.forEach(_d33, function (i) {
                            if (i && lang.isObject(i)) {
                                this.options.push(i);
                            }
                        }, this);
                        this._loadChildren();
                    },
                    removeOption: function (_d34) {
                        if (!lang.isArray(_d34)) {
                            _d34 = [_d34];
                        }
                        var _d35 = this.getOptions(_d34);
                        _d29.forEach(_d35, function (i) {
                            if (i) {
                                this.options = _d29.filter(this.options, function (node) {
                                    return (node.value !== i.value || node.label !== i.label);
                                });
                                this._removeOptionItem(i);
                            }
                        }, this);
                        this._loadChildren();
                    },
                    updateOption: function (_d36) {
                        if (!lang.isArray(_d36)) {
                            _d36 = [_d36];
                        }
                        _d29.forEach(_d36, function (i) {
                            var _d37 = this.getOptions(i),
                                k;
                            if (_d37) {
                                for (k in i) {
                                    _d37[k] = i[k];
                                }
                            }
                        }, this);
                        this._loadChildren();
                    },
                    setStore: function (_d38, _d39, _d3a) {
                        var _d3b = this.store;
                        _d3a = _d3a || {};
                        if (_d3b !== _d38) {
                            var h;
                            while (h = this._notifyConnections.pop()) {
                                h.remove();
                            }
                            if (_d38 && _d38.getFeatures()["dojo.data.api.Notification"]) {
                                this._notifyConnections = [_d2a.after(_d38, "onNew", lang.hitch(this, "_onNewItem"), true), _d2a.after(_d38, "onDelete", lang.hitch(this, "_onDeleteItem"), true), _d2a.after(_d38, "onSet", lang.hitch(this, "_onSetItem"), true)];
                            }
                            this._set("store", _d38);
                        }
                        this._onChangeActive = false;
                        if (this.options && this.options.length) {
                            this.removeOption(this.options);
                        }
                        if (_d38) {
                            this._loadingStore = true;
                            _d38.fetch(lang.delegate(_d3a, {
                                onComplete: function (_d3c, opts) {
                                    if (this.sortByLabel && !_d3a.sort && _d3c.length) {
                                        _d3c.sort(_d2b.createSortFunction([{
                                            attribute: _d38.getLabelAttributes(_d3c[0])[0]
                                        }], _d38));
                                    }
                                    if (_d3a.onFetch) {
                                        _d3c = _d3a.onFetch.call(this, _d3c, opts);
                                    }
                                    _d29.forEach(_d3c, function (i) {
                                        this._addOptionForItem(i);
                                    }, this);
                                    this._loadingStore = false;
                                    this.set("value", "_pendingValue" in this ? this._pendingValue : _d39);
                                    delete this._pendingValue;
                                    if (!this.loadChildrenOnOpen) {
                                        this._loadChildren();
                                    } else {
                                        this._pseudoLoadChildren(_d3c);
                                    }
                                    this._fetchedWith = opts;
                                    this._lastValueReported = this.multiple ? [] : null;
                                    this._onChangeActive = true;
                                    this.onSetStore();
                                    this._handleOnChange(this.value);
                                },
                                scope: this
                            }));
                        } else {
                            delete this._fetchedWith;
                        }
                        return _d3b;
                    },
                    _setValueAttr: function (_d3d, _d3e) {
                        if (this._loadingStore) {
                            this._pendingValue = _d3d;
                            return;
                        }
                        var opts = this.getOptions() || [];
                        if (!lang.isArray(_d3d)) {
                            _d3d = [_d3d];
                        }
                        _d29.forEach(_d3d, function (i, idx) {
                            if (!lang.isObject(i)) {
                                i = i + "";
                            }
                            if (typeof i === "string") {
                                _d3d[idx] = _d29.filter(opts, function (node) {
                                    return node.value === i;
                                })[0] || {
                                    value: "",
                                    label: ""
                                };
                            }
                        }, this);
                        _d3d = _d29.filter(_d3d, function (i) {
                            return i && i.value;
                        });
                        if (!this.multiple && (!_d3d[0] || !_d3d[0].value) && opts.length) {
                            _d3d[0] = opts[0];
                        }
                        _d29.forEach(opts, function (i) {
                            i.selected = _d29.some(_d3d, function (v) {
                                return v.value === i.value;
                            });
                        });
                        var val = _d29.map(_d3d, function (i) {
                            return i.value;
                        }),
                            disp = _d29.map(_d3d, function (i) {
                                return i.label;
                            });
                        this._set("value", this.multiple ? val : val[0]);
                        this._setDisplay(this.multiple ? disp : disp[0]);
                        this._updateSelection();
                        this._handleOnChange(this.value, _d3e);
                    },
                    _getDisplayedValueAttr: function () {
                        var val = this.get("value");
                        if (!lang.isArray(val)) {
                            val = [val];
                        }
                        var ret = _d29.map(this.getOptions(val), function (v) {
                            if (v && "label" in v) {
                                return v.label;
                            } else {
                                if (v) {
                                    return v.value;
                                }
                            }
                            return null;
                        }, this);
                        return this.multiple ? ret : ret[0];
                    },
                    _loadChildren: function () {
                        if (this._loadingStore) {
                            return;
                        }
                        _d29.forEach(this._getChildren(), function (_d3f) {
                            _d3f.destroyRecursive();
                        });
                        _d29.forEach(this.options, this._addOptionItem, this);
                        this._updateSelection();
                    },
                    _updateSelection: function () {
                        this._set("value", this._getValueFromOpts());
                        var val = this.value;
                        if (!lang.isArray(val)) {
                            val = [val];
                        }
                        if (val && val[0]) {
                            _d29.forEach(this._getChildren(), function (_d40) {
                                var _d41 = _d29.some(val, function (v) {
                                    return _d40.option && (v === _d40.option.value);
                                });
                                _d2d.toggle(_d40.domNode, this.baseClass + "SelectedOption", _d41);
                                _d40.domNode.setAttribute("aria-selected", _d41);
                            }, this);
                        }
                    },
                    _getValueFromOpts: function () {
                        var opts = this.getOptions() || [];
                        if (!this.multiple && opts.length) {
                            var opt = _d29.filter(opts, function (i) {
                                return i.selected;
                            })[0];
                            if (opt && opt.value) {
                                return opt.value;
                            } else {
                                opts[0].selected = true;
                                return opts[0].value;
                            }
                        } else {
                            if (this.multiple) {
                                return _d29.map(_d29.filter(opts, function (i) {
                                    return i.selected;
                                }), function (i) {
                                    return i.value;
                                }) || [];
                            }
                        }
                        return "";
                    },
                    _onNewItem: function (item, _d42) {
                        if (!_d42 || !_d42.parent) {
                            this._addOptionForItem(item);
                        }
                    },
                    _onDeleteItem: function (item) {
                        var _d43 = this.store;
                        this.removeOption(_d43.getIdentity(item));
                    },
                    _onSetItem: function (item) {
                        this.updateOption(this._getOptionObjForItem(item));
                    },
                    _getOptionObjForItem: function (item) {
                        var _d44 = this.store,
                            _d45 = _d44.getLabel(item),
                            _d46 = (_d45 ? _d44.getIdentity(item) : null);
                        return {
                            value: _d46,
                            label: _d45,
                            item: item
                        };
                    },
                    _addOptionForItem: function (item) {
                        var _d47 = this.store;
                        if (!_d47.isItemLoaded(item)) {
                            _d47.loadItem({
                                item: item,
                                onItem: function (i) {
                                    this._addOptionForItem(i);
                                },
                                scope: this
                            });
                            return;
                        }
                        var _d48 = this._getOptionObjForItem(item);
                        this.addOption(_d48);
                    },
                    constructor: function (_d49) {
                        this._oValue = (_d49 || {}).value || null;
                        this._notifyConnections = [];
                    },
                    buildRendering: function () {
                        this.inherited(arguments);
                        dom.setSelectable(this.focusNode, false);
                    },
                    _fillContent: function () {
                        var opts = this.options;
                        if (!opts) {
                            opts = this.options = this.srcNodeRef ? _d2f("> *", this.srcNodeRef).map(function (node) {
                                if (node.getAttribute("type") === "separator") {
                                    return {
                                        value: "",
                                        label: "",
                                        selected: false,
                                        disabled: false
                                    };
                                }
                                return {
                                    value: (node.getAttribute("data-" + _d2e._scopeName + "-value") || node.getAttribute("value")),
                                    label: String(node.innerHTML),
                                    selected: node.getAttribute("selected") || false,
                                    disabled: node.getAttribute("disabled") || false
                                };
                            }, this) : [];
                        }
                        if (!this.value) {
                            this._set("value", this._getValueFromOpts());
                        } else {
                            if (this.multiple && typeof this.value == "string") {
                                this._set("value", this.value.split(","));
                            }
                        }
                    },
                    postCreate: function () {
                        this.inherited(arguments);
                        this.connect(this, "onChange", "_updateSelection");
                        this.connect(this, "startup", "_loadChildren");
                        this._setValueAttr(this.value, null);
                    },
                    startup: function () {
                        this.inherited(arguments);
                        var _d4a = this.store,
                            _d4b = {};
                        _d29.forEach(["query", "queryOptions", "onFetch"], function (i) {
                            if (this[i]) {
                                _d4b[i] = this[i];
                            }
                            delete this[i];
                        }, this);
                        if (_d4a && _d4a.getFeatures()["dojo.data.api.Identity"]) {
                            this.store = null;
                            this.setStore(_d4a, this._oValue, _d4b);
                        }
                    },
                    destroy: function () {
                        var h;
                        while (h = this._notifyConnections.pop()) {
                            h.remove();
                        }
                        this.inherited(arguments);
                    },
                    _addOptionItem: function () {},
                    _removeOptionItem: function () {},
                    _setDisplay: function () {},
                    _getChildren: function () {
                        return [];
                    },
                    _getSelectedOptionsAttr: function () {
                        return this.getOptions(this.get("value"));
                    },
                    _pseudoLoadChildren: function () {},
                    onSetStore: function () {}
                });
            });
        },
        "dijit/Menu": function () {
            define("dijit/Menu", ["require", "dojo/_base/array", "dojo/_base/declare", "dojo/_base/event", "dojo/dom", "dojo/dom-attr", "dojo/dom-geometry", "dojo/dom-style", "dojo/_base/kernel", "dojo/keys", "dojo/_base/lang", "dojo/on", "dojo/_base/sniff", "dojo/_base/window", "dojo/window", "./popup", "./DropDownMenu", "dojo/ready"], function (_d4c, _d4d, _d4e, _d4f, dom, _d50, _d51, _d52, _d53, keys, lang, on, has, win, _d54, pm, _d55, _d56) {
                if (!_d53.isAsync) {
                    _d56(0, function () {
                        var _d57 = ["dijit/MenuItem", "dijit/PopupMenuItem", "dijit/CheckedMenuItem", "dijit/MenuSeparator"];
                        _d4c(_d57);
                    });
                }
                return _d4e("dijit.Menu", _d55, {
                    constructor: function () {
                        this._bindings = [];
                    },
                    targetNodeIds: [],
                    contextMenuForWindow: false,
                    leftClickToOpen: false,
                    refocus: true,
                    postCreate: function () {
                        if (this.contextMenuForWindow) {
                            this.bindDomNode(win.body());
                        } else {
                            _d4d.forEach(this.targetNodeIds, this.bindDomNode, this);
                        }
                        this.inherited(arguments);
                    },
                    _iframeContentWindow: function (_d58) {
                        return _d54.get(this._iframeContentDocument(_d58)) || this._iframeContentDocument(_d58)["__parent__"] || (_d58.name && win.doc.frames[_d58.name]) || null;
                    },
                    _iframeContentDocument: function (_d59) {
                        return _d59.contentDocument || (_d59.contentWindow && _d59.contentWindow.document) || (_d59.name && win.doc.frames[_d59.name] && win.doc.frames[_d59.name].document) || null;
                    },
                    bindDomNode: function (node) {
                        node = dom.byId(node);
                        var cn;
                        if (node.tagName.toLowerCase() == "iframe") {
                            var _d5a = node,
                                _d5b = this._iframeContentWindow(_d5a);
                            cn = win.withGlobal(_d5b, win.body);
                        } else {
                            cn = (node == win.body() ? win.doc.documentElement : node);
                        }
                        var _d5c = {
                            node: node,
                            iframe: _d5a
                        };
                        _d50.set(node, "_dijitMenu" + this.id, this._bindings.push(_d5c));
                        var _d5d = lang.hitch(this, function (cn) {
                            return [on(cn, this.leftClickToOpen ? "click" : "contextmenu", lang.hitch(this, function (evt) {
                                _d4f.stop(evt);
                                this._scheduleOpen(evt.target, _d5a, {
                                    x: evt.pageX,
                                    y: evt.pageY
                                });
                            })), on(cn, "keydown", lang.hitch(this, function (evt) {
                                if (evt.shiftKey && evt.keyCode == keys.F10) {
                                    _d4f.stop(evt);
                                    this._scheduleOpen(evt.target, _d5a);
                                }
                            }))];
                        });
                        _d5c.connects = cn ? _d5d(cn) : [];
                        if (_d5a) {
                            _d5c.onloadHandler = lang.hitch(this, function () {
                                var _d5e = this._iframeContentWindow(_d5a);
                                cn = win.withGlobal(_d5e, win.body);
                                _d5c.connects = _d5d(cn);
                            });
                            if (_d5a.addEventListener) {
                                _d5a.addEventListener("load", _d5c.onloadHandler, false);
                            } else {
                                _d5a.attachEvent("onload", _d5c.onloadHandler);
                            }
                        }
                    },
                    unBindDomNode: function (_d5f) {
                        var node;
                        try {
                            node = dom.byId(_d5f);
                        } catch (e) {
                            return;
                        }
                        var _d60 = "_dijitMenu" + this.id;
                        if (node && _d50.has(node, _d60)) {
                            var bid = _d50.get(node, _d60) - 1,
                                b = this._bindings[bid],
                                h;
                            while (h = b.connects.pop()) {
                                h.remove();
                            }
                            var _d61 = b.iframe;
                            if (_d61) {
                                if (_d61.removeEventListener) {
                                    _d61.removeEventListener("load", b.onloadHandler, false);
                                } else {
                                    _d61.detachEvent("onload", b.onloadHandler);
                                }
                            }
                            _d50.remove(node, _d60);
                            delete this._bindings[bid];
                        }
                    },
                    _scheduleOpen: function (_d62, _d63, _d64) {
                        if (!this._openTimer) {
                            this._openTimer = setTimeout(lang.hitch(this, function () {
                                delete this._openTimer;
                                this._openMyself({
                                    target: _d62,
                                    iframe: _d63,
                                    coords: _d64
                                });
                            }), 1);
                        }
                    },
                    _openMyself: function (args) {
                        var _d65 = args.target,
                            _d66 = args.iframe,
                            _d67 = args.coords;
                        if (_d67) {
                            if (_d66) {
                                var ifc = _d51.position(_d66, true),
                                    _d68 = this._iframeContentWindow(_d66),
                                    _d69 = win.withGlobal(_d68, "_docScroll", dojo);
                                var cs = _d52.getComputedStyle(_d66),
                                    tp = _d52.toPixelValue,
                                    left = (has("ie") && has("quirks") ? 0 : tp(_d66, cs.paddingLeft)) + (has("ie") && has("quirks") ? tp(_d66, cs.borderLeftWidth) : 0),
                                    top = (has("ie") && has("quirks") ? 0 : tp(_d66, cs.paddingTop)) + (has("ie") && has("quirks") ? tp(_d66, cs.borderTopWidth) : 0);
                                _d67.x += ifc.x + left - _d69.x;
                                _d67.y += ifc.y + top - _d69.y;
                            }
                        } else {
                            _d67 = _d51.position(_d65, true);
                            _d67.x += 10;
                            _d67.y += 10;
                        }
                        var self = this;
                        var _d6a = this._focusManager.get("prevNode");
                        var _d6b = this._focusManager.get("curNode");
                        var _d6c = !_d6b || (dom.isDescendant(_d6b, this.domNode)) ? _d6a : _d6b;

                        function _d6d() {
                            if (self.refocus && _d6c) {
                                _d6c.focus();
                            }
                            pm.close(self);
                        };
                        pm.open({
                            popup: this,
                            x: _d67.x,
                            y: _d67.y,
                            onExecute: _d6d,
                            onCancel: _d6d,
                            orient: this.isLeftToRight() ? "L" : "R"
                        });
                        this.focus();
                        this._onBlur = function () {
                            this.inherited("_onBlur", arguments);
                            pm.close(this);
                        };
                    },
                    uninitialize: function () {
                        _d4d.forEach(this._bindings, function (b) {
                            if (b) {
                                this.unBindDomNode(b.node);
                            }
                        }, this);
                        this.inherited(arguments);
                    }
                });
            });
        },
        "dijit/DropDownMenu": function () {
            require({
                cache: {
                    "url:dijit/templates/Menu.html": "<table class=\"dijit dijitMenu dijitMenuPassive dijitReset dijitMenuTable\" role=\"menu\" tabIndex=\"${tabIndex}\" data-dojo-attach-event=\"onkeypress:_onKeyPress\" cellspacing=\"0\">\n\t<tbody class=\"dijitReset\" data-dojo-attach-point=\"containerNode\"></tbody>\n</table>\n"
                }
            });
            define("dijit/DropDownMenu", ["dojo/_base/declare", "dojo/_base/event", "dojo/keys", "dojo/text!./templates/Menu.html", "./_OnDijitClickMixin", "./_MenuBase"], function (_d6e, _d6f, keys, _d70, _d71, _d72) {
                return _d6e("dijit.DropDownMenu", [_d72, _d71], {
                    templateString: _d70,
                    baseClass: "dijitMenu",
                    postCreate: function () {
                        var l = this.isLeftToRight();
                        this._openSubMenuKey = l ? keys.RIGHT_ARROW : keys.LEFT_ARROW;
                        this._closeSubMenuKey = l ? keys.LEFT_ARROW : keys.RIGHT_ARROW;
                        this.connectKeyNavHandlers([keys.UP_ARROW], [keys.DOWN_ARROW]);
                    },
                    _onKeyPress: function (evt) {
                        if (evt.ctrlKey || evt.altKey) {
                            return;
                        }
                        switch (evt.charOrCode) {
                        case this._openSubMenuKey:
                            this._moveToPopup(evt);
                            _d6f.stop(evt);
                            break;
                        case this._closeSubMenuKey:
                            if (this.parentMenu) {
                                if (this.parentMenu._isMenuBar) {
                                    this.parentMenu.focusPrev();
                                } else {
                                    this.onCancel(false);
                                }
                            } else {
                                _d6f.stop(evt);
                            }
                            break;
                        }
                    }
                });
            });
        },
        "url:dijit/templates/Menu.html": "<table class=\"dijit dijitMenu dijitMenuPassive dijitReset dijitMenuTable\" role=\"menu\" tabIndex=\"${tabIndex}\" data-dojo-attach-event=\"onkeypress:_onKeyPress\" cellspacing=\"0\">\n\t<tbody class=\"dijitReset\" data-dojo-attach-point=\"containerNode\"></tbody>\n</table>\n",
        "dijit/_MenuBase": function () {
            define("dijit/_MenuBase", ["./popup", "dojo/window", "./_Widget", "./_KeyNavContainer", "./_TemplatedMixin", "dojo/_base/declare", "dojo/dom", "dojo/dom-attr", "dojo/dom-class", "dojo/_base/lang", "dojo/_base/array"], function (pm, _d73, _d74, _d75, _d76, _d77, dom, _d78, _d79, lang, _d7a) {
                return _d77("dijit._MenuBase", [_d74, _d76, _d75], {
                    parentMenu: null,
                    popupDelay: 500,
                    onExecute: function () {},
                    onCancel: function () {},
                    _moveToPopup: function (evt) {
                        if (this.focusedChild && this.focusedChild.popup && !this.focusedChild.disabled) {
                            this.focusedChild._onClick(evt);
                        } else {
                            var _d7b = this._getTopMenu();
                            if (_d7b && _d7b._isMenuBar) {
                                _d7b.focusNext();
                            }
                        }
                    },
                    _onPopupHover: function () {
                        if (this.currentPopup && this.currentPopup._pendingClose_timer) {
                            var _d7c = this.currentPopup.parentMenu;
                            if (_d7c.focusedChild) {
                                _d7c.focusedChild._setSelected(false);
                            }
                            _d7c.focusedChild = this.currentPopup.from_item;
                            _d7c.focusedChild._setSelected(true);
                            this._stopPendingCloseTimer(this.currentPopup);
                        }
                    },
                    onItemHover: function (item) {
                        if (this.isActive) {
                            this.focusChild(item);
                            if (this.focusedChild.popup && !this.focusedChild.disabled && !this.hover_timer) {
                                this.hover_timer = setTimeout(lang.hitch(this, "_openPopup"), this.popupDelay);
                            }
                        }
                        if (this.focusedChild) {
                            this.focusChild(item);
                        }
                        this._hoveredChild = item;
                    },
                    _onChildBlur: function (item) {
                        this._stopPopupTimer();
                        item._setSelected(false);
                        var _d7d = item.popup;
                        if (_d7d) {
                            this._stopPendingCloseTimer(_d7d);
                            _d7d._pendingClose_timer = setTimeout(function () {
                                _d7d._pendingClose_timer = null;
                                if (_d7d.parentMenu) {
                                    _d7d.parentMenu.currentPopup = null;
                                }
                                pm.close(_d7d);
                            }, this.popupDelay);
                        }
                    },
                    onItemUnhover: function (item) {
                        if (this.isActive) {
                            this._stopPopupTimer();
                        }
                        if (this._hoveredChild == item) {
                            this._hoveredChild = null;
                        }
                    },
                    _stopPopupTimer: function () {
                        if (this.hover_timer) {
                            clearTimeout(this.hover_timer);
                            this.hover_timer = null;
                        }
                    },
                    _stopPendingCloseTimer: function (_d7e) {
                        if (_d7e._pendingClose_timer) {
                            clearTimeout(_d7e._pendingClose_timer);
                            _d7e._pendingClose_timer = null;
                        }
                    },
                    _stopFocusTimer: function () {
                        if (this._focus_timer) {
                            clearTimeout(this._focus_timer);
                            this._focus_timer = null;
                        }
                    },
                    _getTopMenu: function () {
                        for (var top = this; top.parentMenu; top = top.parentMenu) {}
                        return top;
                    },
                    onItemClick: function (item, evt) {
                        if (typeof this.isShowingNow == "undefined") {
                            this._markActive();
                        }
                        this.focusChild(item);
                        if (item.disabled) {
                            return false;
                        }
                        if (item.popup) {
                            this._openPopup();
                        } else {
                            this.onExecute();
                            item.onClick(evt);
                        }
                    },
                    _openPopup: function () {
                        this._stopPopupTimer();
                        var _d7f = this.focusedChild;
                        if (!_d7f) {
                            return;
                        }
                        var _d80 = _d7f.popup;
                        if (_d80.isShowingNow) {
                            return;
                        }
                        if (this.currentPopup) {
                            this._stopPendingCloseTimer(this.currentPopup);
                            pm.close(this.currentPopup);
                        }
                        _d80.parentMenu = this;
                        _d80.from_item = _d7f;
                        var self = this;
                        pm.open({
                            parent: this,
                            popup: _d80,
                            around: _d7f.domNode,
                            orient: this._orient || ["after", "before"],
                            onCancel: function () {
                                self.focusChild(_d7f);
                                self._cleanUp();
                                _d7f._setSelected(true);
                                self.focusedChild = _d7f;
                            },
                            onExecute: lang.hitch(this, "_cleanUp")
                        });
                        this.currentPopup = _d80;
                        _d80.connect(_d80.domNode, "onmouseenter", lang.hitch(self, "_onPopupHover"));
                        if (_d80.focus) {
                            _d80._focus_timer = setTimeout(lang.hitch(_d80, function () {
                                this._focus_timer = null;
                                this.focus();
                            }), 0);
                        }
                    },
                    _markActive: function () {
                        this.isActive = true;
                        _d79.replace(this.domNode, "dijitMenuActive", "dijitMenuPassive");
                    },
                    onOpen: function () {
                        this.isShowingNow = true;
                        this._markActive();
                    },
                    _markInactive: function () {
                        this.isActive = false;
                        _d79.replace(this.domNode, "dijitMenuPassive", "dijitMenuActive");
                    },
                    onClose: function () {
                        this._stopFocusTimer();
                        this._markInactive();
                        this.isShowingNow = false;
                        this.parentMenu = null;
                    },
                    _closeChild: function () {
                        this._stopPopupTimer();
                        if (this.currentPopup) {
                            if (_d7a.indexOf(this._focusManager.activeStack, this.id) >= 0) {
                                _d78.set(this.focusedChild.focusNode, "tabIndex", this.tabIndex);
                                this.focusedChild.focusNode.focus();
                            }
                            pm.close(this.currentPopup);
                            this.currentPopup = null;
                        }
                        if (this.focusedChild) {
                            this.focusedChild._setSelected(false);
                            this.focusedChild._onUnhover();
                            this.focusedChild = null;
                        }
                    },
                    _onItemFocus: function (item) {
                        if (this._hoveredChild && this._hoveredChild != item) {
                            this._hoveredChild._onUnhover();
                        }
                    },
                    _onBlur: function () {
                        this._cleanUp();
                        this.inherited(arguments);
                    },
                    _cleanUp: function () {
                        this._closeChild();
                        if (typeof this.isShowingNow == "undefined") {
                            this._markInactive();
                        }
                    }
                });
            });
        },
        "dijit/_KeyNavContainer": function () {
            define("dijit/_KeyNavContainer", ["dojo/_base/kernel", "./_Container", "./_FocusMixin", "dojo/_base/array", "dojo/keys", "dojo/_base/declare", "dojo/_base/event", "dojo/dom-attr", "dojo/_base/lang"], function (_d81, _d82, _d83, _d84, keys, _d85, _d86, _d87, lang) {
                return _d85("dijit._KeyNavContainer", [_d83, _d82], {
                    tabIndex: "0",
                    connectKeyNavHandlers: function (_d88, _d89) {
                        var _d8a = (this._keyNavCodes = {});
                        var prev = lang.hitch(this, "focusPrev");
                        var next = lang.hitch(this, "focusNext");
                        _d84.forEach(_d88, function (code) {
                            _d8a[code] = prev;
                        });
                        _d84.forEach(_d89, function (code) {
                            _d8a[code] = next;
                        });
                        _d8a[keys.HOME] = lang.hitch(this, "focusFirstChild");
                        _d8a[keys.END] = lang.hitch(this, "focusLastChild");
                        this.connect(this.domNode, "onkeypress", "_onContainerKeypress");
                        this.connect(this.domNode, "onfocus", "_onContainerFocus");
                    },
                    startupKeyNavChildren: function () {
                        _d81.deprecated("startupKeyNavChildren() call no longer needed", "", "2.0");
                    },
                    startup: function () {
                        this.inherited(arguments);
                        _d84.forEach(this.getChildren(), lang.hitch(this, "_startupChild"));
                    },
                    addChild: function (_d8b, _d8c) {
                        this.inherited(arguments);
                        this._startupChild(_d8b);
                    },
                    focus: function () {
                        this.focusFirstChild();
                    },
                    focusFirstChild: function () {
                        this.focusChild(this._getFirstFocusableChild());
                    },
                    focusLastChild: function () {
                        this.focusChild(this._getLastFocusableChild());
                    },
                    focusNext: function () {
                        this.focusChild(this._getNextFocusableChild(this.focusedChild, 1));
                    },
                    focusPrev: function () {
                        this.focusChild(this._getNextFocusableChild(this.focusedChild, -1), true);
                    },
                    focusChild: function (_d8d, last) {
                        if (!_d8d) {
                            return;
                        }
                        if (this.focusedChild && _d8d !== this.focusedChild) {
                            this._onChildBlur(this.focusedChild);
                        }
                        _d8d.set("tabIndex", this.tabIndex);
                        _d8d.focus(last ? "end" : "start");
                        this._set("focusedChild", _d8d);
                    },
                    _startupChild: function (_d8e) {
                        _d8e.set("tabIndex", "-1");
                        this.connect(_d8e, "_onFocus", function () {
                            _d8e.set("tabIndex", this.tabIndex);
                        });
                        this.connect(_d8e, "_onBlur", function () {
                            _d8e.set("tabIndex", "-1");
                        });
                    },
                    _onContainerFocus: function (evt) {
                        if (evt.target !== this.domNode || this.focusedChild) {
                            return;
                        }
                        this.focusFirstChild();
                        _d87.set(this.domNode, "tabIndex", "-1");
                    },
                    _onBlur: function (evt) {
                        if (this.tabIndex) {
                            _d87.set(this.domNode, "tabIndex", this.tabIndex);
                        }
                        this.focusedChild = null;
                        this.inherited(arguments);
                    },
                    _onContainerKeypress: function (evt) {
                        if (evt.ctrlKey || evt.altKey) {
                            return;
                        }
                        var func = this._keyNavCodes[evt.charOrCode];
                        if (func) {
                            func();
                            _d86.stop(evt);
                        }
                    },
                    _onChildBlur: function () {},
                    _getFirstFocusableChild: function () {
                        return this._getNextFocusableChild(null, 1);
                    },
                    _getLastFocusableChild: function () {
                        return this._getNextFocusableChild(null, -1);
                    },
                    _getNextFocusableChild: function (_d8f, dir) {
                        if (_d8f) {
                            _d8f = this._getSiblingOfChild(_d8f, dir);
                        }
                        var _d90 = this.getChildren();
                        for (var i = 0; i < _d90.length; i++) {
                            if (!_d8f) {
                                _d8f = _d90[(dir > 0) ? 0 : (_d90.length - 1)];
                            }
                            if (_d8f.isFocusable()) {
                                return _d8f;
                            }
                            _d8f = this._getSiblingOfChild(_d8f, dir);
                        }
                        return null;
                    }
                });
            });
        },
        "dijit/MenuSeparator": function () {
            require({
                cache: {
                    "url:dijit/templates/MenuSeparator.html": "<tr class=\"dijitMenuSeparator\">\n\t<td class=\"dijitMenuSeparatorIconCell\">\n\t\t<div class=\"dijitMenuSeparatorTop\"></div>\n\t\t<div class=\"dijitMenuSeparatorBottom\"></div>\n\t</td>\n\t<td colspan=\"3\" class=\"dijitMenuSeparatorLabelCell\">\n\t\t<div class=\"dijitMenuSeparatorTop dijitMenuSeparatorLabel\"></div>\n\t\t<div class=\"dijitMenuSeparatorBottom\"></div>\n\t</td>\n</tr>"
                }
            });
            define("dijit/MenuSeparator", ["dojo/_base/declare", "dojo/dom", "./_WidgetBase", "./_TemplatedMixin", "./_Contained", "dojo/text!./templates/MenuSeparator.html"], function (_d91, dom, _d92, _d93, _d94, _d95) {
                return _d91("dijit.MenuSeparator", [_d92, _d93, _d94], {
                    templateString: _d95,
                    buildRendering: function () {
                        this.inherited(arguments);
                        dom.setSelectable(this.domNode, false);
                    },
                    isFocusable: function () {
                        return false;
                    }
                });
            });
        },
        "url:dijit/templates/MenuSeparator.html": "<tr class=\"dijitMenuSeparator\">\n\t<td class=\"dijitMenuSeparatorIconCell\">\n\t\t<div class=\"dijitMenuSeparatorTop\"></div>\n\t\t<div class=\"dijitMenuSeparatorBottom\"></div>\n\t</td>\n\t<td colspan=\"3\" class=\"dijitMenuSeparatorLabelCell\">\n\t\t<div class=\"dijitMenuSeparatorTop dijitMenuSeparatorLabel\"></div>\n\t\t<div class=\"dijitMenuSeparatorBottom\"></div>\n\t</td>\n</tr>",
        "url:dijit/form/templates/Select.html": "<table class=\"dijit dijitReset dijitInline dijitLeft\"\n\tdata-dojo-attach-point=\"_buttonNode,tableNode,focusNode\" cellspacing='0' cellpadding='0'\n\trole=\"combobox\" aria-haspopup=\"true\"\n\t><tbody role=\"presentation\"><tr role=\"presentation\"\n\t\t><td class=\"dijitReset dijitStretch dijitButtonContents dijitButtonNode\" role=\"presentation\"\n\t\t\t><span class=\"dijitReset dijitInline dijitButtonText\"  data-dojo-attach-point=\"containerNode,_popupStateNode\"></span\n\t\t\t><input type=\"hidden\" ${!nameAttrSetting} data-dojo-attach-point=\"valueNode\" value=\"${value}\" aria-hidden=\"true\"\n\t\t/></td><td class=\"dijitReset dijitRight dijitButtonNode dijitArrowButton dijitDownArrowButton\"\n\t\t\t\tdata-dojo-attach-point=\"titleNode\" role=\"presentation\"\n\t\t\t><div class=\"dijitReset dijitArrowButtonInner\" role=\"presentation\"></div\n\t\t\t><div class=\"dijitReset dijitArrowButtonChar\" role=\"presentation\">&#9660;</div\n\t\t></td\n\t></tr></tbody\n></table>\n",
        "dijit/form/RadioButton": function () {
            define("dijit/form/RadioButton", ["dojo/_base/declare", "./CheckBox", "./_RadioButtonMixin"], function (_d96, _d97, _d98) {
                return _d96("dijit.form.RadioButton", [_d97, _d98], {
                    baseClass: "dijitRadio"
                });
            });
        },
        "dijit/form/CheckBox": function () {
            require({
                cache: {
                    "url:dijit/form/templates/CheckBox.html": "<div class=\"dijit dijitReset dijitInline\" role=\"presentation\"\n\t><input\n\t \t${!nameAttrSetting} type=\"${type}\" ${checkedAttrSetting}\n\t\tclass=\"dijitReset dijitCheckBoxInput\"\n\t\tdata-dojo-attach-point=\"focusNode\"\n\t \tdata-dojo-attach-event=\"onclick:_onClick\"\n/></div>\n"
                }
            });
            define("dijit/form/CheckBox", ["require", "dojo/_base/declare", "dojo/dom-attr", "dojo/_base/kernel", "dojo/query", "dojo/ready", "./ToggleButton", "./_CheckBoxMixin", "dojo/text!./templates/CheckBox.html", "dojo/NodeList-dom"], function (_d99, _d9a, _d9b, _d9c, _d9d, _d9e, _d9f, _da0, _da1) {
                if (!_d9c.isAsync) {
                    _d9e(0, function () {
                        var _da2 = ["dijit/form/RadioButton"];
                        _d99(_da2);
                    });
                }
                return _d9a("dijit.form.CheckBox", [_d9f, _da0], {
                    templateString: _da1,
                    baseClass: "dijitCheckBox",
                    _setValueAttr: function (_da3, _da4) {
                        if (typeof _da3 == "string") {
                            this._set("value", _da3);
                            _d9b.set(this.focusNode, "value", _da3);
                            _da3 = true;
                        }
                        if (this._created) {
                            this.set("checked", _da3, _da4);
                        }
                    },
                    _getValueAttr: function () {
                        return (this.checked ? this.value : false);
                    },
                    _setIconClassAttr: null,
                    postMixInProperties: function () {
                        this.inherited(arguments);
                        this.checkedAttrSetting = this.checked ? "checked" : "";
                    },
                    _fillContent: function () {},
                    _onFocus: function () {
                        if (this.id) {
                            _d9d("label[for='" + this.id + "']").addClass("dijitFocusedLabel");
                        }
                        this.inherited(arguments);
                    },
                    _onBlur: function () {
                        if (this.id) {
                            _d9d("label[for='" + this.id + "']").removeClass("dijitFocusedLabel");
                        }
                        this.inherited(arguments);
                    }
                });
            });
        },
        "dijit/form/ToggleButton": function () {
            define("dijit/form/ToggleButton", ["dojo/_base/declare", "dojo/_base/kernel", "./Button", "./_ToggleButtonMixin"], function (_da5, _da6, _da7, _da8) {
                return _da5("dijit.form.ToggleButton", [_da7, _da8], {
                    baseClass: "dijitToggleButton",
                    setChecked: function (_da9) {
                        _da6.deprecated("setChecked(" + _da9 + ") is deprecated. Use set('checked'," + _da9 + ") instead.", "", "2.0");
                        this.set("checked", _da9);
                    }
                });
            });
        },
        "dijit/form/_ToggleButtonMixin": function () {
            define("dijit/form/_ToggleButtonMixin", ["dojo/_base/declare", "dojo/dom-attr"], function (_daa, _dab) {
                return _daa("dijit.form._ToggleButtonMixin", null, {
                    checked: false,
                    _aria_attr: "aria-pressed",
                    _onClick: function (evt) {
                        var _dac = this.checked;
                        this._set("checked", !_dac);
                        var ret = this.inherited(arguments);
                        this.set("checked", ret ? this.checked : _dac);
                        return ret;
                    },
                    _setCheckedAttr: function (_dad, _dae) {
                        this._set("checked", _dad);
                        _dab.set(this.focusNode || this.domNode, "checked", _dad);
                        (this.focusNode || this.domNode).setAttribute(this._aria_attr, _dad ? "true" : "false");
                        this._handleOnChange(_dad, _dae);
                    },
                    reset: function () {
                        this._hasBeenBlurred = false;
                        this.set("checked", this.params.checked || false);
                    }
                });
            });
        },
        "dijit/form/_CheckBoxMixin": function () {
            define("dijit/form/_CheckBoxMixin", ["dojo/_base/declare", "dojo/dom-attr", "dojo/_base/event"], function (_daf, _db0, _db1) {
                return _daf("dijit.form._CheckBoxMixin", null, {
                    type: "checkbox",
                    value: "on",
                    readOnly: false,
                    _aria_attr: "aria-checked",
                    _setReadOnlyAttr: function (_db2) {
                        this._set("readOnly", _db2);
                        _db0.set(this.focusNode, "readOnly", _db2);
                        this.focusNode.setAttribute("aria-readonly", _db2);
                    },
                    _setLabelAttr: undefined,
                    postMixInProperties: function () {
                        if (this.value == "") {
                            this.value = "on";
                        }
                        this.inherited(arguments);
                    },
                    reset: function () {
                        this.inherited(arguments);
                        this._set("value", this.params.value || "on");
                        _db0.set(this.focusNode, "value", this.value);
                    },
                    _onClick: function (e) {
                        if (this.readOnly) {
                            _db1.stop(e);
                            return false;
                        }
                        return this.inherited(arguments);
                    }
                });
            });
        },
        "url:dijit/form/templates/CheckBox.html": "<div class=\"dijit dijitReset dijitInline\" role=\"presentation\"\n\t><input\n\t \t${!nameAttrSetting} type=\"${type}\" ${checkedAttrSetting}\n\t\tclass=\"dijitReset dijitCheckBoxInput\"\n\t\tdata-dojo-attach-point=\"focusNode\"\n\t \tdata-dojo-attach-event=\"onclick:_onClick\"\n/></div>\n",
        "dijit/form/_RadioButtonMixin": function () {
            define("dijit/form/_RadioButtonMixin", ["dojo/_base/array", "dojo/_base/declare", "dojo/dom-attr", "dojo/_base/event", "dojo/_base/lang", "dojo/query", "dojo/_base/window", "../registry"], function (_db3, _db4, _db5, _db6, lang, _db7, win, _db8) {
                return _db4("dijit.form._RadioButtonMixin", null, {
                    type: "radio",
                    _getRelatedWidgets: function () {
                        var ary = [];
                        _db7("input[type=radio]", this.focusNode.form || win.doc).forEach(lang.hitch(this, function (_db9) {
                            if (_db9.name == this.name && _db9.form == this.focusNode.form) {
                                var _dba = _db8.getEnclosingWidget(_db9);
                                if (_dba) {
                                    ary.push(_dba);
                                }
                            }
                        }));
                        return ary;
                    },
                    _setCheckedAttr: function (_dbb) {
                        this.inherited(arguments);
                        if (!this._created) {
                            return;
                        }
                        if (_dbb) {
                            _db3.forEach(this._getRelatedWidgets(), lang.hitch(this, function (_dbc) {
                                if (_dbc != this && _dbc.checked) {
                                    _dbc.set("checked", false);
                                }
                            }));
                        }
                    },
                    _onClick: function (e) {
                        if (this.checked || this.disabled) {
                            _db6.stop(e);
                            return false;
                        }
                        if (this.readOnly) {
                            _db6.stop(e);
                            _db3.forEach(this._getRelatedWidgets(), lang.hitch(this, function (_dbd) {
                                _db5.set(this.focusNode || this.domNode, "checked", _dbd.checked);
                            }));
                            return false;
                        }
                        return this.inherited(arguments);
                    }
                });
            });
        },
        "dojox/html/ellipsis": function () {
            define("dojox/html/ellipsis", ["dojo/_base/kernel", "dojo/_base/lang", "dojo/_base/array", "dojo/_base/Color", "dojo/colors"], function (d) {
                if (d.isFF < 7) {
                    var _dbe = 1;
                    if ("dojoxFFEllipsisDelay" in d.config) {
                        _dbe = Number(d.config.dojoxFFEllipsisDelay);
                        if (isNaN(_dbe)) {
                            _dbe = 1;
                        }
                    }
                    try {
                        var _dbf = (function () {
                            var sNS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
                            var xml = document.createElementNS(sNS, "window");
                            var _dc0 = document.createElementNS(sNS, "description");
                            _dc0.setAttribute("crop", "end");
                            xml.appendChild(_dc0);
                            return function (n) {
                                var x = xml.cloneNode(true);
                                x.firstChild.setAttribute("value", n.textContent);
                                n.innerHTML = "";
                                n.appendChild(x);
                            };
                        })();
                    } catch (e) {}
                    var _dc1 = d.create;
                    var dd = d.doc;
                    var dp = d.place;
                    var _dc2 = _dc1("iframe", {
                        className: "dojoxEllipsisIFrame",
                        src: "javascript:'<html><head><script>if(\"loadFirebugConsole\" in window){window.loadFirebugConsole();}</script></head><body></body></html>'"
                    });
                    var _dc3 = function (r, cnt) {
                            if (r.collapsed) {
                                return;
                            }
                            if (cnt > 0) {
                                do {
                                    _dc3(r);
                                    cnt--;
                                } while (cnt);
                                return;
                            }
                            if (r.endContainer.nodeType == 3 && r.endOffset > 0) {
                                r.setEnd(r.endContainer, r.endOffset - 1);
                            } else {
                                if (r.endContainer.nodeType == 3) {
                                    r.setEndBefore(r.endContainer);
                                    _dc3(r);
                                    return;
                                } else {
                                    if (r.endOffset && r.endContainer.childNodes.length >= r.endOffset) {
                                        var _dc4 = r.endContainer.childNodes[r.endOffset - 1];
                                        if (_dc4.nodeType == 3) {
                                            r.setEnd(_dc4, _dc4.length - 1);
                                        } else {
                                            if (_dc4.childNodes.length) {
                                                r.setEnd(_dc4, _dc4.childNodes.length);
                                                _dc3(r);
                                                return;
                                            } else {
                                                r.setEndBefore(_dc4);
                                                _dc3(r);
                                                return;
                                            }
                                        }
                                    } else {
                                        r.setEndBefore(r.endContainer);
                                        _dc3(r);
                                        return;
                                    }
                                }
                            }
                        };
                    var _dc5 = function (n) {
                            var c = _dc1("div", {
                                className: "dojoxEllipsisContainer"
                            });
                            var e = _dc1("div", {
                                className: "dojoxEllipsisShown",
                                style: {
                                    display: "none"
                                }
                            });
                            n.parentNode.replaceChild(c, n);
                            c.appendChild(n);
                            c.appendChild(e);
                            var i = _dc2.cloneNode(true);
                            var ns = n.style;
                            var es = e.style;
                            var _dc6;
                            var _dc7 = function () {
                                    ns.display = "";
                                    es.display = "none";
                                    if (n.scrollWidth <= n.offsetWidth) {
                                        return;
                                    }
                                    var r = dd.createRange();
                                    r.selectNodeContents(n);
                                    ns.display = "none";
                                    es.display = "";
                                    var done = false;
                                    do {
                                        var _dc8 = 1;
                                        dp(r.cloneContents(), e, "only");
                                        var sw = e.scrollWidth,
                                            ow = e.offsetWidth;
                                        done = (sw <= ow);
                                        var pct = (1 - ((ow * 1) / sw));
                                        if (pct > 0) {
                                            _dc8 = Math.max(Math.round(e.textContent.length * pct) - 1, 1);
                                        }
                                        _dc3(r, _dc8);
                                    } while (!r.collapsed && !done);
                                };
                            i.onload = function () {
                                i.contentWindow.onresize = _dc7;
                                _dc7();
                            };
                            c.appendChild(i);
                        };
                    var hc = d.hasClass;
                    var doc = d.doc;
                    var s, fn, opt;
                    if (doc.querySelectorAll) {
                        s = doc;
                        fn = "querySelectorAll";
                        opt = ".dojoxEllipsis";
                    } else {
                        if (doc.getElementsByClassName) {
                            s = doc;
                            fn = "getElementsByClassName";
                            opt = "dojoxEllipsis";
                        } else {
                            s = d;
                            fn = "query";
                            opt = ".dojoxEllipsis";
                        }
                    }
                    fx = function () {
                        d.forEach(s[fn].apply(s, [opt]), function (n) {
                            if (!n || n._djx_ellipsis_done) {
                                return;
                            }
                            n._djx_ellipsis_done = true;
                            if (_dbf && n.textContent == n.innerHTML && !hc(n, "dojoxEllipsisSelectable")) {
                                _dbf(n);
                            } else {
                                _dc5(n);
                            }
                        });
                    };
                    d.addOnLoad(function () {
                        var t = null;
                        var c = null;
                        var _dc9 = function () {
                                if (c) {
                                    d.disconnect(c);
                                    c = null;
                                }
                                if (t) {
                                    clearTimeout(t);
                                }
                                t = setTimeout(function () {
                                    t = null;
                                    fx();
                                    c = d.connect(d.body(), "DOMSubtreeModified", _dc9);
                                }, _dbe);
                            };
                        _dc9();
                    });
                }
            });
        },
        "dojo/colors": function () {
            define(["./_base/kernel", "./_base/lang", "./_base/Color", "./_base/array"], function (dojo, lang, _dca, _dcb) {
                var _dcc = lang.getObject("dojo.colors", true);
                var _dcd = function (m1, m2, h) {
                        if (h < 0) {
                            ++h;
                        }
                        if (h > 1) {
                            --h;
                        }
                        var h6 = 6 * h;
                        if (h6 < 1) {
                            return m1 + (m2 - m1) * h6;
                        }
                        if (2 * h < 1) {
                            return m2;
                        }
                        if (3 * h < 2) {
                            return m1 + (m2 - m1) * (2 / 3 - h) * 6;
                        }
                        return m1;
                    };
                dojo.colorFromRgb = _dca.fromRgb = function (_dce, obj) {
                    var m = _dce.toLowerCase().match(/^(rgba?|hsla?)\(([\s\.\-,%0-9]+)\)/);
                    if (m) {
                        var c = m[2].split(/\s*,\s*/),
                            l = c.length,
                            t = m[1],
                            a;
                        if ((t == "rgb" && l == 3) || (t == "rgba" && l == 4)) {
                            var r = c[0];
                            if (r.charAt(r.length - 1) == "%") {
                                a = _dcb.map(c, function (x) {
                                    return parseFloat(x) * 2.56;
                                });
                                if (l == 4) {
                                    a[3] = c[3];
                                }
                                return _dca.fromArray(a, obj);
                            }
                            return _dca.fromArray(c, obj);
                        }
                        if ((t == "hsl" && l == 3) || (t == "hsla" && l == 4)) {
                            var H = ((parseFloat(c[0]) % 360) + 360) % 360 / 360,
                                S = parseFloat(c[1]) / 100,
                                L = parseFloat(c[2]) / 100,
                                m2 = L <= 0.5 ? L * (S + 1) : L + S - L * S,
                                m1 = 2 * L - m2;
                            a = [_dcd(m1, m2, H + 1 / 3) * 256, _dcd(m1, m2, H) * 256, _dcd(m1, m2, H - 1 / 3) * 256, 1];
                            if (l == 4) {
                                a[3] = c[3];
                            }
                            return _dca.fromArray(a, obj);
                        }
                    }
                    return null;
                };
                var _dcf = function (c, low, high) {
                        c = Number(c);
                        return isNaN(c) ? high : c < low ? low : c > high ? high : c;
                    };
                _dca.prototype.sanitize = function () {
                    var t = this;
                    t.r = Math.round(_dcf(t.r, 0, 255));
                    t.g = Math.round(_dcf(t.g, 0, 255));
                    t.b = Math.round(_dcf(t.b, 0, 255));
                    t.a = _dcf(t.a, 0, 1);
                    return this;
                };
                _dcc.makeGrey = _dca.makeGrey = function (g, a) {
                    return _dca.fromArray([g, g, g, a]);
                };
                lang.mixin(_dca.named, {
                    "aliceblue": [240, 248, 255],
                    "antiquewhite": [250, 235, 215],
                    "aquamarine": [127, 255, 212],
                    "azure": [240, 255, 255],
                    "beige": [245, 245, 220],
                    "bisque": [255, 228, 196],
                    "blanchedalmond": [255, 235, 205],
                    "blueviolet": [138, 43, 226],
                    "brown": [165, 42, 42],
                    "burlywood": [222, 184, 135],
                    "cadetblue": [95, 158, 160],
                    "chartreuse": [127, 255, 0],
                    "chocolate": [210, 105, 30],
                    "coral": [255, 127, 80],
                    "cornflowerblue": [100, 149, 237],
                    "cornsilk": [255, 248, 220],
                    "crimson": [220, 20, 60],
                    "cyan": [0, 255, 255],
                    "darkblue": [0, 0, 139],
                    "darkcyan": [0, 139, 139],
                    "darkgoldenrod": [184, 134, 11],
                    "darkgray": [169, 169, 169],
                    "darkgreen": [0, 100, 0],
                    "darkgrey": [169, 169, 169],
                    "darkkhaki": [189, 183, 107],
                    "darkmagenta": [139, 0, 139],
                    "darkolivegreen": [85, 107, 47],
                    "darkorange": [255, 140, 0],
                    "darkorchid": [153, 50, 204],
                    "darkred": [139, 0, 0],
                    "darksalmon": [233, 150, 122],
                    "darkseagreen": [143, 188, 143],
                    "darkslateblue": [72, 61, 139],
                    "darkslategray": [47, 79, 79],
                    "darkslategrey": [47, 79, 79],
                    "darkturquoise": [0, 206, 209],
                    "darkviolet": [148, 0, 211],
                    "deeppink": [255, 20, 147],
                    "deepskyblue": [0, 191, 255],
                    "dimgray": [105, 105, 105],
                    "dimgrey": [105, 105, 105],
                    "dodgerblue": [30, 144, 255],
                    "firebrick": [178, 34, 34],
                    "floralwhite": [255, 250, 240],
                    "forestgreen": [34, 139, 34],
                    "gainsboro": [220, 220, 220],
                    "ghostwhite": [248, 248, 255],
                    "gold": [255, 215, 0],
                    "goldenrod": [218, 165, 32],
                    "greenyellow": [173, 255, 47],
                    "grey": [128, 128, 128],
                    "honeydew": [240, 255, 240],
                    "hotpink": [255, 105, 180],
                    "indianred": [205, 92, 92],
                    "indigo": [75, 0, 130],
                    "ivory": [255, 255, 240],
                    "khaki": [240, 230, 140],
                    "lavender": [230, 230, 250],
                    "lavenderblush": [255, 240, 245],
                    "lawngreen": [124, 252, 0],
                    "lemonchiffon": [255, 250, 205],
                    "lightblue": [173, 216, 230],
                    "lightcoral": [240, 128, 128],
                    "lightcyan": [224, 255, 255],
                    "lightgoldenrodyellow": [250, 250, 210],
                    "lightgray": [211, 211, 211],
                    "lightgreen": [144, 238, 144],
                    "lightgrey": [211, 211, 211],
                    "lightpink": [255, 182, 193],
                    "lightsalmon": [255, 160, 122],
                    "lightseagreen": [32, 178, 170],
                    "lightskyblue": [135, 206, 250],
                    "lightslategray": [119, 136, 153],
                    "lightslategrey": [119, 136, 153],
                    "lightsteelblue": [176, 196, 222],
                    "lightyellow": [255, 255, 224],
                    "limegreen": [50, 205, 50],
                    "linen": [250, 240, 230],
                    "magenta": [255, 0, 255],
                    "mediumaquamarine": [102, 205, 170],
                    "mediumblue": [0, 0, 205],
                    "mediumorchid": [186, 85, 211],
                    "mediumpurple": [147, 112, 219],
                    "mediumseagreen": [60, 179, 113],
                    "mediumslateblue": [123, 104, 238],
                    "mediumspringgreen": [0, 250, 154],
                    "mediumturquoise": [72, 209, 204],
                    "mediumvioletred": [199, 21, 133],
                    "midnightblue": [25, 25, 112],
                    "mintcream": [245, 255, 250],
                    "mistyrose": [255, 228, 225],
                    "moccasin": [255, 228, 181],
                    "navajowhite": [255, 222, 173],
                    "oldlace": [253, 245, 230],
                    "olivedrab": [107, 142, 35],
                    "orange": [255, 165, 0],
                    "orangered": [255, 69, 0],
                    "orchid": [218, 112, 214],
                    "palegoldenrod": [238, 232, 170],
                    "palegreen": [152, 251, 152],
                    "paleturquoise": [175, 238, 238],
                    "palevioletred": [219, 112, 147],
                    "papayawhip": [255, 239, 213],
                    "peachpuff": [255, 218, 185],
                    "peru": [205, 133, 63],
                    "pink": [255, 192, 203],
                    "plum": [221, 160, 221],
                    "powderblue": [176, 224, 230],
                    "rosybrown": [188, 143, 143],
                    "royalblue": [65, 105, 225],
                    "saddlebrown": [139, 69, 19],
                    "salmon": [250, 128, 114],
                    "sandybrown": [244, 164, 96],
                    "seagreen": [46, 139, 87],
                    "seashell": [255, 245, 238],
                    "sienna": [160, 82, 45],
                    "skyblue": [135, 206, 235],
                    "slateblue": [106, 90, 205],
                    "slategray": [112, 128, 144],
                    "slategrey": [112, 128, 144],
                    "snow": [255, 250, 250],
                    "springgreen": [0, 255, 127],
                    "steelblue": [70, 130, 180],
                    "tan": [210, 180, 140],
                    "thistle": [216, 191, 216],
                    "tomato": [255, 99, 71],
                    "turquoise": [64, 224, 208],
                    "violet": [238, 130, 238],
                    "wheat": [245, 222, 179],
                    "whitesmoke": [245, 245, 245],
                    "yellowgreen": [154, 205, 50]
                });
                return _dca;
            });
        },
        "dojox/grid/cells/dijit": function () {
            define("dojox/grid/cells/dijit", ["dojo/_base/kernel", "../../main", "dojo/_base/declare", "dojo/_base/array", "dojo/_base/lang", "dojo/_base/json", "dojo/_base/connect", "dojo/_base/sniff", "dojo/dom", "dojo/dom-attr", "dojo/dom-construct", "dojo/dom-geometry", "dojo/data/ItemFileReadStore", "dijit/form/DateTextBox", "dijit/form/TimeTextBox", "dijit/form/ComboBox", "dijit/form/CheckBox", "dijit/form/TextBox", "dijit/form/NumberSpinner", "dijit/form/NumberTextBox", "dijit/form/CurrencyTextBox", "dijit/form/HorizontalSlider", "dijit/Editor", "../util", "./_base"], function (dojo, _dd0, _dd1, _dd2, lang, json, _dd3, has, dom, _dd4, _dd5, _dd6, _dd7, _dd8, _dd9, _dda, _ddb, _ddc, _ddd, _dde, _ddf, _de0, _de1, util, _de2) {
                var _de3 = _dd1("dojox.grid.cells._Widget", _de2, {
                    widgetClass: _ddc,
                    constructor: function (_de4) {
                        this.widget = null;
                        if (typeof this.widgetClass == "string") {
                            dojo.deprecated("Passing a string to widgetClass is deprecated", "pass the widget class object instead", "2.0");
                            this.widgetClass = lang.getObject(this.widgetClass);
                        }
                    },
                    formatEditing: function (_de5, _de6) {
                        this.needFormatNode(_de5, _de6);
                        return "<div></div>";
                    },
                    getValue: function (_de7) {
                        return this.widget.get("value");
                    },
                    _unescapeHTML: function (_de8) {
                        return (_de8 && _de8.replace && this.grid.escapeHTMLInData) ? _de8.replace(/&lt;/g, "<").replace(/&amp;/g, "&") : _de8;
                    },
                    setValue: function (_de9, _dea) {
                        if (this.widget && this.widget.set) {
                            _dea = this._unescapeHTML(_dea);
                            if (this.widget.onLoadDeferred) {
                                var self = this;
                                this.widget.onLoadDeferred.addCallback(function () {
                                    self.widget.set("value", _dea === null ? "" : _dea);
                                });
                            } else {
                                this.widget.set("value", _dea);
                            }
                        } else {
                            this.inherited(arguments);
                        }
                    },
                    getWidgetProps: function (_deb) {
                        return lang.mixin({
                            dir: this.dir,
                            lang: this.lang
                        }, this.widgetProps || {}, {
                            constraints: lang.mixin({}, this.constraint) || {},
                            value: this._unescapeHTML(_deb)
                        });
                    },
                    createWidget: function (_dec, _ded, _dee) {
                        return new this.widgetClass(this.getWidgetProps(_ded), _dec);
                    },
                    attachWidget: function (_def, _df0, _df1) {
                        _def.appendChild(this.widget.domNode);
                        this.setValue(_df1, _df0);
                    },
                    formatNode: function (_df2, _df3, _df4) {
                        if (!this.widgetClass) {
                            return _df3;
                        }
                        if (!this.widget) {
                            this.widget = this.createWidget.apply(this, arguments);
                        } else {
                            this.attachWidget.apply(this, arguments);
                        }
                        this.sizeWidget.apply(this, arguments);
                        this.grid.views.renormalizeRow(_df4);
                        this.grid.scroller.rowHeightChanged(_df4, true);
                        this.focus();
                        return undefined;
                    },
                    sizeWidget: function (_df5, _df6, _df7) {
                        var p = this.getNode(_df7),
                            box = dojo.contentBox(p);
                        dojo.marginBox(this.widget.domNode, {
                            w: box.w
                        });
                    },
                    focus: function (_df8, _df9) {
                        if (this.widget) {
                            setTimeout(lang.hitch(this.widget, function () {
                                util.fire(this, "focus");
                            }), 0);
                        }
                    },
                    _finish: function (_dfa) {
                        this.inherited(arguments);
                        util.removeNode(this.widget.domNode);
                        if (has("ie")) {
                            dom.setSelectable(this.widget.domNode, true);
                        }
                    }
                });
                _de3.markupFactory = function (node, cell) {
                    _de2.markupFactory(node, cell);
                    var _dfb = lang.trim(_dd4.get(node, "widgetProps") || "");
                    var _dfc = lang.trim(_dd4.get(node, "constraint") || "");
                    var _dfd = lang.trim(_dd4.get(node, "widgetClass") || "");
                    if (_dfb) {
                        cell.widgetProps = json.fromJson(_dfb);
                    }
                    if (_dfc) {
                        cell.constraint = json.fromJson(_dfc);
                    }
                    if (_dfd) {
                        cell.widgetClass = lang.getObject(_dfd);
                    }
                };
                var _dda = _dd1("dojox.grid.cells.ComboBox", _de3, {
                    widgetClass: _dda,
                    getWidgetProps: function (_dfe) {
                        var _dff = [];
                        _dd2.forEach(this.options, function (o) {
                            _dff.push({
                                name: o,
                                value: o
                            });
                        });
                        var _e00 = new _dd7({
                            data: {
                                identifier: "name",
                                items: _dff
                            }
                        });
                        return lang.mixin({}, this.widgetProps || {}, {
                            value: _dfe,
                            store: _e00
                        });
                    },
                    getValue: function () {
                        var e = this.widget;
                        e.set("displayedValue", e.get("displayedValue"));
                        return e.get("value");
                    }
                });
                _dda.markupFactory = function (node, cell) {
                    _de3.markupFactory(node, cell);
                    var _e01 = lang.trim(_dd4.get(node, "options") || "");
                    if (_e01) {
                        var o = _e01.split(",");
                        if (o[0] != _e01) {
                            cell.options = o;
                        }
                    }
                };
                var _dd8 = _dd1("dojox.grid.cells.DateTextBox", _de3, {
                    widgetClass: _dd8,
                    setValue: function (_e02, _e03) {
                        if (this.widget) {
                            this.widget.set("value", new Date(_e03));
                        } else {
                            this.inherited(arguments);
                        }
                    },
                    getWidgetProps: function (_e04) {
                        return lang.mixin(this.inherited(arguments), {
                            value: new Date(_e04)
                        });
                    }
                });
                _dd8.markupFactory = function (node, cell) {
                    _de3.markupFactory(node, cell);
                };
                var _ddb = _dd1("dojox.grid.cells.CheckBox", _de3, {
                    widgetClass: _ddb,
                    getValue: function () {
                        return this.widget.checked;
                    },
                    setValue: function (_e05, _e06) {
                        if (this.widget && this.widget.attributeMap.checked) {
                            this.widget.set("checked", _e06);
                        } else {
                            this.inherited(arguments);
                        }
                    },
                    sizeWidget: function (_e07, _e08, _e09) {
                        return;
                    }
                });
                _ddb.markupFactory = function (node, cell) {
                    _de3.markupFactory(node, cell);
                };
                var _de1 = _dd1("dojox.grid.cells.Editor", _de3, {
                    widgetClass: _de1,
                    getWidgetProps: function (_e0a) {
                        return lang.mixin({}, this.widgetProps || {}, {
                            height: this.widgetHeight || "100px"
                        });
                    },
                    createWidget: function (_e0b, _e0c, _e0d) {
                        var _e0e = new this.widgetClass(this.getWidgetProps(_e0c), _e0b);
                        _dd3.connect(_e0e, "onLoad", lang.hitch(this, "populateEditor"));
                        return _e0e;
                    },
                    formatNode: function (_e0f, _e10, _e11) {
                        this.content = _e10;
                        this.inherited(arguments);
                        if (has("mozilla")) {
                            var e = this.widget;
                            e.open();
                            if (this.widgetToolbar) {
                                _dd5.place(e.toolbar.domNode, e.editingArea, "before");
                            }
                        }
                    },
                    populateEditor: function () {
                        this.widget.set("value", this.content);
                        this.widget.placeCursorAtEnd();
                    }
                });
                _de1.markupFactory = function (node, cell) {
                    _de3.markupFactory(node, cell);
                    var h = lang.trim(_dd4.get(node, "widgetHeight") || "");
                    if (h) {
                        if ((h != "auto") && (h.substr(-2) != "em")) {
                            h = parseInt(h, 10) + "px";
                        }
                        cell.widgetHeight = h;
                    }
                };
                return _dd0.grid.cells.dijit;
            });
        },
        "dijit/form/NumberSpinner": function () {
            define("dijit/form/NumberSpinner", ["dojo/_base/declare", "dojo/_base/event", "dojo/keys", "./_Spinner", "./NumberTextBox"], function (_e12, _e13, keys, _e14, _e15) {
                return _e12("dijit.form.NumberSpinner", [_e14, _e15.Mixin], {
                    adjust: function (val, _e16) {
                        var tc = this.constraints,
                            v = isNaN(val),
                            _e17 = !isNaN(tc.max),
                            _e18 = !isNaN(tc.min);
                        if (v && _e16 != 0) {
                            val = (_e16 > 0) ? _e18 ? tc.min : _e17 ? tc.max : 0 : _e17 ? this.constraints.max : _e18 ? tc.min : 0;
                        }
                        var _e19 = val + _e16;
                        if (v || isNaN(_e19)) {
                            return val;
                        }
                        if (_e17 && (_e19 > tc.max)) {
                            _e19 = tc.max;
                        }
                        if (_e18 && (_e19 < tc.min)) {
                            _e19 = tc.min;
                        }
                        return _e19;
                    },
                    _onKeyPress: function (e) {
                        if ((e.charOrCode == keys.HOME || e.charOrCode == keys.END) && !(e.ctrlKey || e.altKey || e.metaKey) && typeof this.get("value") != "undefined") {
                            var _e1a = this.constraints[(e.charOrCode == keys.HOME ? "min" : "max")];
                            if (typeof _e1a == "number") {
                                this._setValueAttr(_e1a, false);
                            }
                            _e13.stop(e);
                        }
                    }
                });
            });
        },
        "dijit/form/_Spinner": function () {
            require({
                cache: {
                    "url:dijit/form/templates/Spinner.html": "<div class=\"dijit dijitReset dijitInline dijitLeft\"\n\tid=\"widget_${id}\" role=\"presentation\"\n\t><div class=\"dijitReset dijitButtonNode dijitSpinnerButtonContainer\"\n\t\t><input class=\"dijitReset dijitInputField dijitSpinnerButtonInner\" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\n\t\t/><div class=\"dijitReset dijitLeft dijitButtonNode dijitArrowButton dijitUpArrowButton\"\n\t\t\tdata-dojo-attach-point=\"upArrowNode\"\n\t\t\t><div class=\"dijitArrowButtonInner\"\n\t\t\t\t><input class=\"dijitReset dijitInputField\" value=\"&#9650;\" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\n\t\t\t\t\t${_buttonInputDisabled}\n\t\t\t/></div\n\t\t></div\n\t\t><div class=\"dijitReset dijitLeft dijitButtonNode dijitArrowButton dijitDownArrowButton\"\n\t\t\tdata-dojo-attach-point=\"downArrowNode\"\n\t\t\t><div class=\"dijitArrowButtonInner\"\n\t\t\t\t><input class=\"dijitReset dijitInputField\" value=\"&#9660;\" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\n\t\t\t\t\t${_buttonInputDisabled}\n\t\t\t/></div\n\t\t></div\n\t></div\n\t><div class='dijitReset dijitValidationContainer'\n\t\t><input class=\"dijitReset dijitInputField dijitValidationIcon dijitValidationInner\" value=\"&#935;\" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\n\t/></div\n\t><div class=\"dijitReset dijitInputField dijitInputContainer\"\n\t\t><input class='dijitReset dijitInputInner' data-dojo-attach-point=\"textbox,focusNode\" type=\"${type}\" data-dojo-attach-event=\"onkeypress:_onKeyPress\"\n\t\t\trole=\"spinbutton\" autocomplete=\"off\" ${!nameAttrSetting}\n\t/></div\n></div>\n"
                }
            });
            define("dijit/form/_Spinner", ["dojo/_base/declare", "dojo/_base/event", "dojo/keys", "dojo/_base/lang", "dojo/_base/sniff", "dijit/typematic", "./RangeBoundTextBox", "dojo/text!./templates/Spinner.html", "./_TextBoxMixin"], function (_e1b, _e1c, keys, lang, has, _e1d, _e1e, _e1f, _e20) {
                return _e1b("dijit.form._Spinner", _e1e, {
                    defaultTimeout: 500,
                    minimumTimeout: 10,
                    timeoutChangeRate: 0.9,
                    smallDelta: 1,
                    largeDelta: 10,
                    templateString: _e1f,
                    baseClass: "dijitTextBox dijitSpinner",
                    cssStateNodes: {
                        "upArrowNode": "dijitUpArrowButton",
                        "downArrowNode": "dijitDownArrowButton"
                    },
                    adjust: function (val) {
                        return val;
                    },
                    _arrowPressed: function (_e21, _e22, _e23) {
                        if (this.disabled || this.readOnly) {
                            return;
                        }
                        this._setValueAttr(this.adjust(this.get("value"), _e22 * _e23), false);
                        _e20.selectInputText(this.textbox, this.textbox.value.length);
                    },
                    _arrowReleased: function () {
                        this._wheelTimer = null;
                    },
                    _typematicCallback: function (_e24, node, evt) {
                        var inc = this.smallDelta;
                        if (node == this.textbox) {
                            var key = evt.charOrCode;
                            inc = (key == keys.PAGE_UP || key == keys.PAGE_DOWN) ? this.largeDelta : this.smallDelta;
                            node = (key == keys.UP_ARROW || key == keys.PAGE_UP) ? this.upArrowNode : this.downArrowNode;
                        }
                        if (_e24 == -1) {
                            this._arrowReleased(node);
                        } else {
                            this._arrowPressed(node, (node == this.upArrowNode) ? 1 : -1, inc);
                        }
                    },
                    _wheelTimer: null,
                    _mouseWheeled: function (evt) {
                        _e1c.stop(evt);
                        var _e25 = evt.wheelDelta / 120;
                        if (Math.floor(_e25) != _e25) {
                            _e25 = evt.wheelDelta > 0 ? 1 : -1;
                        }
                        var _e26 = evt.detail ? (evt.detail * -1) : _e25;
                        if (_e26 !== 0) {
                            var node = this[(_e26 > 0 ? "upArrowNode" : "downArrowNode")];
                            this._arrowPressed(node, _e26, this.smallDelta);
                            if (!this._wheelTimer) {
                                clearTimeout(this._wheelTimer);
                            }
                            this._wheelTimer = setTimeout(lang.hitch(this, "_arrowReleased", node), 50);
                        }
                    },
                    postCreate: function () {
                        this.inherited(arguments);
                        this.connect(this.domNode, !has("mozilla") ? "onmousewheel" : "DOMMouseScroll", "_mouseWheeled");
                        this._connects.push(_e1d.addListener(this.upArrowNode, this.textbox, {
                            charOrCode: keys.UP_ARROW,
                            ctrlKey: false,
                            altKey: false,
                            shiftKey: false,
                            metaKey: false
                        }, this, "_typematicCallback", this.timeoutChangeRate, this.defaultTimeout, this.minimumTimeout));
                        this._connects.push(_e1d.addListener(this.downArrowNode, this.textbox, {
                            charOrCode: keys.DOWN_ARROW,
                            ctrlKey: false,
                            altKey: false,
                            shiftKey: false,
                            metaKey: false
                        }, this, "_typematicCallback", this.timeoutChangeRate, this.defaultTimeout, this.minimumTimeout));
                        this._connects.push(_e1d.addListener(this.upArrowNode, this.textbox, {
                            charOrCode: keys.PAGE_UP,
                            ctrlKey: false,
                            altKey: false,
                            shiftKey: false,
                            metaKey: false
                        }, this, "_typematicCallback", this.timeoutChangeRate, this.defaultTimeout, this.minimumTimeout));
                        this._connects.push(_e1d.addListener(this.downArrowNode, this.textbox, {
                            charOrCode: keys.PAGE_DOWN,
                            ctrlKey: false,
                            altKey: false,
                            shiftKey: false,
                            metaKey: false
                        }, this, "_typematicCallback", this.timeoutChangeRate, this.defaultTimeout, this.minimumTimeout));
                    }
                });
            });
        },
        "url:dijit/form/templates/Spinner.html": "<div class=\"dijit dijitReset dijitInline dijitLeft\"\n\tid=\"widget_${id}\" role=\"presentation\"\n\t><div class=\"dijitReset dijitButtonNode dijitSpinnerButtonContainer\"\n\t\t><input class=\"dijitReset dijitInputField dijitSpinnerButtonInner\" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\n\t\t/><div class=\"dijitReset dijitLeft dijitButtonNode dijitArrowButton dijitUpArrowButton\"\n\t\t\tdata-dojo-attach-point=\"upArrowNode\"\n\t\t\t><div class=\"dijitArrowButtonInner\"\n\t\t\t\t><input class=\"dijitReset dijitInputField\" value=\"&#9650;\" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\n\t\t\t\t\t${_buttonInputDisabled}\n\t\t\t/></div\n\t\t></div\n\t\t><div class=\"dijitReset dijitLeft dijitButtonNode dijitArrowButton dijitDownArrowButton\"\n\t\t\tdata-dojo-attach-point=\"downArrowNode\"\n\t\t\t><div class=\"dijitArrowButtonInner\"\n\t\t\t\t><input class=\"dijitReset dijitInputField\" value=\"&#9660;\" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\n\t\t\t\t\t${_buttonInputDisabled}\n\t\t\t/></div\n\t\t></div\n\t></div\n\t><div class='dijitReset dijitValidationContainer'\n\t\t><input class=\"dijitReset dijitInputField dijitValidationIcon dijitValidationInner\" value=\"&#935;\" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\n\t/></div\n\t><div class=\"dijitReset dijitInputField dijitInputContainer\"\n\t\t><input class='dijitReset dijitInputInner' data-dojo-attach-point=\"textbox,focusNode\" type=\"${type}\" data-dojo-attach-event=\"onkeypress:_onKeyPress\"\n\t\t\trole=\"spinbutton\" autocomplete=\"off\" ${!nameAttrSetting}\n\t/></div\n></div>\n",
        "dijit/form/CurrencyTextBox": function () {
            define("dijit/form/CurrencyTextBox", ["dojo/currency", "dojo/_base/declare", "dojo/_base/lang", "./NumberTextBox"], function (_e27, _e28, lang, _e29) {
                return _e28("dijit.form.CurrencyTextBox", _e29, {
                    currency: "",
                    baseClass: "dijitTextBox dijitCurrencyTextBox",
                    regExpGen: function (_e2a) {
                        return "(" + (this.focused ? this.inherited(arguments, [lang.mixin({}, _e2a, this.editOptions)]) + "|" : "") + _e27.regexp(_e2a) + ")";
                    },
                    _formatter: _e27.format,
                    _parser: _e27.parse,
                    parse: function (_e2b, _e2c) {
                        var v = this.inherited(arguments);
                        if (isNaN(v) && /\d+/.test(_e2b)) {
                            v = lang.hitch(lang.mixin({}, this, {
                                _parser: _e29.prototype._parser
                            }), "inherited")(arguments);
                        }
                        return v;
                    },
                    _setConstraintsAttr: function (_e2d) {
                        if (!_e2d.currency && this.currency) {
                            _e2d.currency = this.currency;
                        }
                        this.inherited(arguments, [_e27._mixInDefaults(lang.mixin(_e2d, {
                            exponent: false
                        }))]);
                    }
                });
            });
        },
        "dojo/currency": function () {
            define(["./_base/kernel", "./_base/lang", "./_base/array", "./number", "./i18n", "./i18n!./cldr/nls/currency", "./cldr/monetary"], function (dojo, lang, _e2e, _e2f, i18n, _e30, _e31) {
                lang.getObject("currency", true, dojo);
                dojo.currency._mixInDefaults = function (_e32) {
                    _e32 = _e32 || {};
                    _e32.type = "currency";
                    var _e33 = i18n.getLocalization("dojo.cldr", "currency", _e32.locale) || {};
                    var iso = _e32.currency;
                    var data = _e31.getData(iso);
                    _e2e.forEach(["displayName", "symbol", "group", "decimal"], function (prop) {
                        data[prop] = _e33[iso + "_" + prop];
                    });
                    data.fractional = [true, false];
                    return lang.mixin(data, _e32);
                };
                dojo.currency.format = function (_e34, _e35) {
                    return _e2f.format(_e34, dojo.currency._mixInDefaults(_e35));
                };
                dojo.currency.regexp = function (_e36) {
                    return _e2f.regexp(dojo.currency._mixInDefaults(_e36));
                };
                dojo.currency.parse = function (_e37, _e38) {
                    return _e2f.parse(_e37, dojo.currency._mixInDefaults(_e38));
                };
                return dojo.currency;
            });
        },
        "dojo/cldr/nls/currency": function () {
            define({
                root: {
                    "USD_symbol": "US$",
                    "CAD_symbol": "CA$",
                    "GBP_symbol": "£",
                    "HKD_symbol": "HK$",
                    "JPY_symbol": "JP¥",
                    "AUD_symbol": "AU$",
                    "CNY_symbol": "CN¥",
                    "EUR_symbol": "€"
                },
                "ar": true,
                "ca": true,
                "cs": true,
                "da": true,
                "de": true,
                "el": true,
                "en": true,
                "en-au": true,
                "en-ca": true,
                "es": true,
                "fi": true,
                "fr": true,
                "he": true,
                "hu": true,
                "it": true,
                "ja": true,
                "ko": true,
                "nb": true,
                "nl": true,
                "pl": true,
                "pt": true,
                "ro": true,
                "ru": true,
                "sk": true,
                "sl": true,
                "sv": true,
                "th": true,
                "tr": true,
                "zh": true,
                "zh-hant": true,
                "zh-hk": true,
                "zh-tw": true
            });
        },
        "dojo/cldr/monetary": function () {
            define(["../main"], function (dojo) {
                dojo.getObject("cldr.monetary", true, dojo);
                dojo.cldr.monetary.getData = function (code) {
                    var _e39 = {
                        ADP: 0,
                        AFN: 0,
                        ALL: 0,
                        AMD: 0,
                        BHD: 3,
                        BIF: 0,
                        BYR: 0,
                        CLF: 0,
                        CLP: 0,
                        COP: 0,
                        CRC: 0,
                        DJF: 0,
                        ESP: 0,
                        GNF: 0,
                        GYD: 0,
                        HUF: 0,
                        IDR: 0,
                        IQD: 0,
                        IRR: 3,
                        ISK: 0,
                        ITL: 0,
                        JOD: 3,
                        JPY: 0,
                        KMF: 0,
                        KPW: 0,
                        KRW: 0,
                        KWD: 3,
                        LAK: 0,
                        LBP: 0,
                        LUF: 0,
                        LYD: 3,
                        MGA: 0,
                        MGF: 0,
                        MMK: 0,
                        MNT: 0,
                        MRO: 0,
                        MUR: 0,
                        OMR: 3,
                        PKR: 0,
                        PYG: 0,
                        RSD: 0,
                        RWF: 0,
                        SLL: 0,
                        SOS: 0,
                        STD: 0,
                        SYP: 0,
                        TMM: 0,
                        TND: 3,
                        TRL: 0,
                        TZS: 0,
                        UGX: 0,
                        UZS: 0,
                        VND: 0,
                        VUV: 0,
                        XAF: 0,
                        XOF: 0,
                        XPF: 0,
                        YER: 0,
                        ZMK: 0,
                        ZWD: 0
                    };
                    var _e3a = {
                        CHF: 5
                    };
                    var _e3b = _e39[code],
                        _e3c = _e3a[code];
                    if (typeof _e3b == "undefined") {
                        _e3b = 2;
                    }
                    if (typeof _e3c == "undefined") {
                        _e3c = 0;
                    }
                    return {
                        places: _e3b,
                        round: _e3c
                    };
                };
                return dojo.cldr.monetary;
            });
        },
        "dijit/form/HorizontalSlider": function () {
            require({
                cache: {
                    "url:dijit/form/templates/HorizontalSlider.html": "<table class=\"dijit dijitReset dijitSlider dijitSliderH\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" rules=\"none\" data-dojo-attach-event=\"onkeypress:_onKeyPress,onkeyup:_onKeyUp\"\n\t><tr class=\"dijitReset\"\n\t\t><td class=\"dijitReset\" colspan=\"2\"></td\n\t\t><td data-dojo-attach-point=\"topDecoration\" class=\"dijitReset dijitSliderDecoration dijitSliderDecorationT dijitSliderDecorationH\"></td\n\t\t><td class=\"dijitReset\" colspan=\"2\"></td\n\t></tr\n\t><tr class=\"dijitReset\"\n\t\t><td class=\"dijitReset dijitSliderButtonContainer dijitSliderButtonContainerH\"\n\t\t\t><div class=\"dijitSliderDecrementIconH\" style=\"display:none\" data-dojo-attach-point=\"decrementButton\"><span class=\"dijitSliderButtonInner\">-</span></div\n\t\t></td\n\t\t><td class=\"dijitReset\"\n\t\t\t><div class=\"dijitSliderBar dijitSliderBumper dijitSliderBumperH dijitSliderLeftBumper\" data-dojo-attach-event=\"press:_onClkDecBumper\"></div\n\t\t></td\n\t\t><td class=\"dijitReset\"\n\t\t\t><input data-dojo-attach-point=\"valueNode\" type=\"hidden\" ${!nameAttrSetting}\n\t\t\t/><div class=\"dijitReset dijitSliderBarContainerH\" role=\"presentation\" data-dojo-attach-point=\"sliderBarContainer\"\n\t\t\t\t><div role=\"presentation\" data-dojo-attach-point=\"progressBar\" class=\"dijitSliderBar dijitSliderBarH dijitSliderProgressBar dijitSliderProgressBarH\" data-dojo-attach-event=\"press:_onBarClick\"\n\t\t\t\t\t><div class=\"dijitSliderMoveable dijitSliderMoveableH\"\n\t\t\t\t\t\t><div data-dojo-attach-point=\"sliderHandle,focusNode\" class=\"dijitSliderImageHandle dijitSliderImageHandleH\" data-dojo-attach-event=\"press:_onHandleClick\" role=\"slider\" valuemin=\"${minimum}\" valuemax=\"${maximum}\"></div\n\t\t\t\t\t></div\n\t\t\t\t></div\n\t\t\t\t><div role=\"presentation\" data-dojo-attach-point=\"remainingBar\" class=\"dijitSliderBar dijitSliderBarH dijitSliderRemainingBar dijitSliderRemainingBarH\" data-dojo-attach-event=\"press:_onBarClick\"></div\n\t\t\t></div\n\t\t></td\n\t\t><td class=\"dijitReset\"\n\t\t\t><div class=\"dijitSliderBar dijitSliderBumper dijitSliderBumperH dijitSliderRightBumper\" data-dojo-attach-event=\"press:_onClkIncBumper\"></div\n\t\t></td\n\t\t><td class=\"dijitReset dijitSliderButtonContainer dijitSliderButtonContainerH\"\n\t\t\t><div class=\"dijitSliderIncrementIconH\" style=\"display:none\" data-dojo-attach-point=\"incrementButton\"><span class=\"dijitSliderButtonInner\">+</span></div\n\t\t></td\n\t></tr\n\t><tr class=\"dijitReset\"\n\t\t><td class=\"dijitReset\" colspan=\"2\"></td\n\t\t><td data-dojo-attach-point=\"containerNode,bottomDecoration\" class=\"dijitReset dijitSliderDecoration dijitSliderDecorationB dijitSliderDecorationH\"></td\n\t\t><td class=\"dijitReset\" colspan=\"2\"></td\n\t></tr\n></table>\n"
                }
            });
            define("dijit/form/HorizontalSlider", ["dojo/_base/array", "dojo/_base/declare", "dojo/dnd/move", "dojo/_base/event", "dojo/_base/fx", "dojo/dom-geometry", "dojo/dom-style", "dojo/keys", "dojo/_base/lang", "dojo/_base/sniff", "dojo/dnd/Moveable", "dojo/dnd/Mover", "dojo/query", "../registry", "../focus", "../typematic", "./Button", "./_FormValueWidget", "../_Container", "dojo/text!./templates/HorizontalSlider.html"], function (_e3d, _e3e, move, _e3f, fx, _e40, _e41, keys, lang, has, _e42, _e43, _e44, _e45, _e46, _e47, _e48, _e49, _e4a, _e4b) {
                var _e4c = _e3e("dijit.form._SliderMover", _e43, {
                    onMouseMove: function (e) {
                        var _e4d = this.widget;
                        var _e4e = _e4d._abspos;
                        if (!_e4e) {
                            _e4e = _e4d._abspos = _e40.position(_e4d.sliderBarContainer, true);
                            _e4d._setPixelValue_ = lang.hitch(_e4d, "_setPixelValue");
                            _e4d._isReversed_ = _e4d._isReversed();
                        }
                        var _e4f = e[_e4d._mousePixelCoord] - _e4e[_e4d._startingPixelCoord];
                        _e4d._setPixelValue_(_e4d._isReversed_ ? (_e4e[_e4d._pixelCount] - _e4f) : _e4f, _e4e[_e4d._pixelCount], false);
                    },
                    destroy: function (e) {
                        _e43.prototype.destroy.apply(this, arguments);
                        var _e50 = this.widget;
                        _e50._abspos = null;
                        _e50._setValueAttr(_e50.value, true);
                    }
                });
                var _e51 = _e3e("dijit.form.HorizontalSlider", [_e49, _e4a], {
                    templateString: _e4b,
                    value: 0,
                    showButtons: true,
                    minimum: 0,
                    maximum: 100,
                    discreteValues: Infinity,
                    pageIncrement: 2,
                    clickSelect: true,
                    slideDuration: _e45.defaultDuration,
                    _setIdAttr: "",
                    baseClass: "dijitSlider",
                    cssStateNodes: {
                        incrementButton: "dijitSliderIncrementButton",
                        decrementButton: "dijitSliderDecrementButton",
                        focusNode: "dijitSliderThumb"
                    },
                    _mousePixelCoord: "pageX",
                    _pixelCount: "w",
                    _startingPixelCoord: "x",
                    _handleOffsetCoord: "left",
                    _progressPixelSize: "width",
                    _onKeyUp: function (e) {
                        if (this.disabled || this.readOnly || e.altKey || e.ctrlKey || e.metaKey) {
                            return;
                        }
                        this._setValueAttr(this.value, true);
                    },
                    _onKeyPress: function (e) {
                        if (this.disabled || this.readOnly || e.altKey || e.ctrlKey || e.metaKey) {
                            return;
                        }
                        switch (e.charOrCode) {
                        case keys.HOME:
                            this._setValueAttr(this.minimum, false);
                            break;
                        case keys.END:
                            this._setValueAttr(this.maximum, false);
                            break;
                        case ((this._descending || this.isLeftToRight()) ? keys.RIGHT_ARROW : keys.LEFT_ARROW):
                        case (this._descending === false ? keys.DOWN_ARROW : keys.UP_ARROW):
                        case (this._descending === false ? keys.PAGE_DOWN : keys.PAGE_UP):
                            this.increment(e);
                            break;
                        case ((this._descending || this.isLeftToRight()) ? keys.LEFT_ARROW : keys.RIGHT_ARROW):
                        case (this._descending === false ? keys.UP_ARROW : keys.DOWN_ARROW):
                        case (this._descending === false ? keys.PAGE_UP : keys.PAGE_DOWN):
                            this.decrement(e);
                            break;
                        default:
                            return;
                        }
                        _e3f.stop(e);
                    },
                    _onHandleClick: function (e) {
                        if (this.disabled || this.readOnly) {
                            return;
                        }
                        if (!has("ie")) {
                            _e46.focus(this.sliderHandle);
                        }
                        _e3f.stop(e);
                    },
                    _isReversed: function () {
                        return !this.isLeftToRight();
                    },
                    _onBarClick: function (e) {
                        if (this.disabled || this.readOnly || !this.clickSelect) {
                            return;
                        }
                        _e46.focus(this.sliderHandle);
                        _e3f.stop(e);
                        var _e52 = _e40.position(this.sliderBarContainer, true);
                        var _e53 = e[this._mousePixelCoord] - _e52[this._startingPixelCoord];
                        this._setPixelValue(this._isReversed() ? (_e52[this._pixelCount] - _e53) : _e53, _e52[this._pixelCount], true);
                        this._movable.onMouseDown(e);
                    },
                    _setPixelValue: function (_e54, _e55, _e56) {
                        if (this.disabled || this.readOnly) {
                            return;
                        }
                        var _e57 = this.discreteValues;
                        if (_e57 <= 1 || _e57 == Infinity) {
                            _e57 = _e55;
                        }
                        _e57--;
                        var _e58 = _e55 / _e57;
                        var _e59 = Math.round(_e54 / _e58);
                        this._setValueAttr(Math.max(Math.min((this.maximum - this.minimum) * _e59 / _e57 + this.minimum, this.maximum), this.minimum), _e56);
                    },
                    _setValueAttr: function (_e5a, _e5b) {
                        this._set("value", _e5a);
                        this.valueNode.value = _e5a;
                        this.focusNode.setAttribute("aria-valuenow", _e5a);
                        this.inherited(arguments);
                        var _e5c = (_e5a - this.minimum) / (this.maximum - this.minimum);
                        var _e5d = (this._descending === false) ? this.remainingBar : this.progressBar;
                        var _e5e = (this._descending === false) ? this.progressBar : this.remainingBar;
                        if (this._inProgressAnim && this._inProgressAnim.status != "stopped") {
                            this._inProgressAnim.stop(true);
                        }
                        if (_e5b && this.slideDuration > 0 && _e5d.style[this._progressPixelSize]) {
                            var _e5f = this;
                            var _e60 = {};
                            var _e61 = parseFloat(_e5d.style[this._progressPixelSize]);
                            var _e62 = this.slideDuration * (_e5c - _e61 / 100);
                            if (_e62 == 0) {
                                return;
                            }
                            if (_e62 < 0) {
                                _e62 = 0 - _e62;
                            }
                            _e60[this._progressPixelSize] = {
                                start: _e61,
                                end: _e5c * 100,
                                units: "%"
                            };
                            this._inProgressAnim = fx.animateProperty({
                                node: _e5d,
                                duration: _e62,
                                onAnimate: function (v) {
                                    _e5e.style[_e5f._progressPixelSize] = (100 - parseFloat(v[_e5f._progressPixelSize])) + "%";
                                },
                                onEnd: function () {
                                    delete _e5f._inProgressAnim;
                                },
                                properties: _e60
                            });
                            this._inProgressAnim.play();
                        } else {
                            _e5d.style[this._progressPixelSize] = (_e5c * 100) + "%";
                            _e5e.style[this._progressPixelSize] = ((1 - _e5c) * 100) + "%";
                        }
                    },
                    _bumpValue: function (_e63, _e64) {
                        if (this.disabled || this.readOnly) {
                            return;
                        }
                        var s = _e41.getComputedStyle(this.sliderBarContainer);
                        var c = _e40.getContentBox(this.sliderBarContainer, s);
                        var _e65 = this.discreteValues;
                        if (_e65 <= 1 || _e65 == Infinity) {
                            _e65 = c[this._pixelCount];
                        }
                        _e65--;
                        var _e66 = (this.value - this.minimum) * _e65 / (this.maximum - this.minimum) + _e63;
                        if (_e66 < 0) {
                            _e66 = 0;
                        }
                        if (_e66 > _e65) {
                            _e66 = _e65;
                        }
                        _e66 = _e66 * (this.maximum - this.minimum) / _e65 + this.minimum;
                        this._setValueAttr(_e66, _e64);
                    },
                    _onClkBumper: function (val) {
                        if (this.disabled || this.readOnly || !this.clickSelect) {
                            return;
                        }
                        this._setValueAttr(val, true);
                    },
                    _onClkIncBumper: function () {
                        this._onClkBumper(this._descending === false ? this.minimum : this.maximum);
                    },
                    _onClkDecBumper: function () {
                        this._onClkBumper(this._descending === false ? this.maximum : this.minimum);
                    },
                    decrement: function (e) {
                        this._bumpValue(e.charOrCode == keys.PAGE_DOWN ? -this.pageIncrement : -1);
                    },
                    increment: function (e) {
                        this._bumpValue(e.charOrCode == keys.PAGE_UP ? this.pageIncrement : 1);
                    },
                    _mouseWheeled: function (evt) {
                        _e3f.stop(evt);
                        var _e67 = !has("mozilla");
                        var _e68 = evt[(_e67 ? "wheelDelta" : "detail")] * (_e67 ? 1 : -1);
                        this._bumpValue(_e68 < 0 ? -1 : 1, true);
                    },
                    startup: function () {
                        if (this._started) {
                            return;
                        }
                        _e3d.forEach(this.getChildren(), function (_e69) {
                            if (this[_e69.container] != this.containerNode) {
                                this[_e69.container].appendChild(_e69.domNode);
                            }
                        }, this);
                        this.inherited(arguments);
                    },
                    _typematicCallback: function (_e6a, _e6b, e) {
                        if (_e6a == -1) {
                            this._setValueAttr(this.value, true);
                        } else {
                            this[(_e6b == (this._descending ? this.incrementButton : this.decrementButton)) ? "decrement" : "increment"](e);
                        }
                    },
                    buildRendering: function () {
                        this.inherited(arguments);
                        if (this.showButtons) {
                            this.incrementButton.style.display = "";
                            this.decrementButton.style.display = "";
                        }
                        var _e6c = _e44("label[for=\"" + this.id + "\"]");
                        if (_e6c.length) {
                            _e6c[0].id = (this.id + "_label");
                            this.focusNode.setAttribute("aria-labelledby", _e6c[0].id);
                        }
                        this.focusNode.setAttribute("aria-valuemin", this.minimum);
                        this.focusNode.setAttribute("aria-valuemax", this.maximum);
                    },
                    postCreate: function () {
                        this.inherited(arguments);
                        if (this.showButtons) {
                            this._connects.push(_e47.addMouseListener(this.decrementButton, this, "_typematicCallback", 25, 500));
                            this._connects.push(_e47.addMouseListener(this.incrementButton, this, "_typematicCallback", 25, 500));
                        }
                        this.connect(this.domNode, !has("mozilla") ? "onmousewheel" : "DOMMouseScroll", "_mouseWheeled");
                        var _e6d = _e3e(_e4c, {
                            widget: this
                        });
                        this._movable = new _e42(this.sliderHandle, {
                            mover: _e6d
                        });
                        this._layoutHackIE7();
                    },
                    destroy: function () {
                        this._movable.destroy();
                        if (this._inProgressAnim && this._inProgressAnim.status != "stopped") {
                            this._inProgressAnim.stop(true);
                        }
                        this._supportingWidgets = _e45.findWidgets(this.domNode);
                        this.inherited(arguments);
                    }
                });
                _e51._Mover = _e4c;
                return _e51;
            });
        },
        "dojo/dnd/move": function () {
            define(["../main", "./Mover", "./Moveable"], function (dojo) {
                dojo.declare("dojo.dnd.move.constrainedMoveable", dojo.dnd.Moveable, {
                    constraints: function () {},
                    within: false,
                    constructor: function (node, _e6e) {
                        if (!_e6e) {
                            _e6e = {};
                        }
                        this.constraints = _e6e.constraints;
                        this.within = _e6e.within;
                    },
                    onFirstMove: function (_e6f) {
                        var c = this.constraintBox = this.constraints.call(this, _e6f);
                        c.r = c.l + c.w;
                        c.b = c.t + c.h;
                        if (this.within) {
                            var mb = dojo._getMarginSize(_e6f.node);
                            c.r -= mb.w;
                            c.b -= mb.h;
                        }
                    },
                    onMove: function (_e70, _e71) {
                        var c = this.constraintBox,
                            s = _e70.node.style;
                        this.onMoving(_e70, _e71);
                        _e71.l = _e71.l < c.l ? c.l : c.r < _e71.l ? c.r : _e71.l;
                        _e71.t = _e71.t < c.t ? c.t : c.b < _e71.t ? c.b : _e71.t;
                        s.left = _e71.l + "px";
                        s.top = _e71.t + "px";
                        this.onMoved(_e70, _e71);
                    }
                });
                dojo.declare("dojo.dnd.move.boxConstrainedMoveable", dojo.dnd.move.constrainedMoveable, {
                    box: {},
                    constructor: function (node, _e72) {
                        var box = _e72 && _e72.box;
                        this.constraints = function () {
                            return box;
                        };
                    }
                });
                dojo.declare("dojo.dnd.move.parentConstrainedMoveable", dojo.dnd.move.constrainedMoveable, {
                    area: "content",
                    constructor: function (node, _e73) {
                        var area = _e73 && _e73.area;
                        this.constraints = function () {
                            var n = this.node.parentNode,
                                s = dojo.getComputedStyle(n),
                                mb = dojo._getMarginBox(n, s);
                            if (area == "margin") {
                                return mb;
                            }
                            var t = dojo._getMarginExtents(n, s);
                            mb.l += t.l, mb.t += t.t, mb.w -= t.w, mb.h -= t.h;
                            if (area == "border") {
                                return mb;
                            }
                            t = dojo._getBorderExtents(n, s);
                            mb.l += t.l, mb.t += t.t, mb.w -= t.w, mb.h -= t.h;
                            if (area == "padding") {
                                return mb;
                            }
                            t = dojo._getPadExtents(n, s);
                            mb.l += t.l, mb.t += t.t, mb.w -= t.w, mb.h -= t.h;
                            return mb;
                        };
                    }
                });
                dojo.dnd.constrainedMover = dojo.dnd.move.constrainedMover;
                dojo.dnd.boxConstrainedMover = dojo.dnd.move.boxConstrainedMover;
                dojo.dnd.parentConstrainedMover = dojo.dnd.move.parentConstrainedMover;
                return dojo.dnd.move;
            });
        },
        "url:dijit/form/templates/HorizontalSlider.html": "<table class=\"dijit dijitReset dijitSlider dijitSliderH\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" rules=\"none\" data-dojo-attach-event=\"onkeypress:_onKeyPress,onkeyup:_onKeyUp\"\n\t><tr class=\"dijitReset\"\n\t\t><td class=\"dijitReset\" colspan=\"2\"></td\n\t\t><td data-dojo-attach-point=\"topDecoration\" class=\"dijitReset dijitSliderDecoration dijitSliderDecorationT dijitSliderDecorationH\"></td\n\t\t><td class=\"dijitReset\" colspan=\"2\"></td\n\t></tr\n\t><tr class=\"dijitReset\"\n\t\t><td class=\"dijitReset dijitSliderButtonContainer dijitSliderButtonContainerH\"\n\t\t\t><div class=\"dijitSliderDecrementIconH\" style=\"display:none\" data-dojo-attach-point=\"decrementButton\"><span class=\"dijitSliderButtonInner\">-</span></div\n\t\t></td\n\t\t><td class=\"dijitReset\"\n\t\t\t><div class=\"dijitSliderBar dijitSliderBumper dijitSliderBumperH dijitSliderLeftBumper\" data-dojo-attach-event=\"press:_onClkDecBumper\"></div\n\t\t></td\n\t\t><td class=\"dijitReset\"\n\t\t\t><input data-dojo-attach-point=\"valueNode\" type=\"hidden\" ${!nameAttrSetting}\n\t\t\t/><div class=\"dijitReset dijitSliderBarContainerH\" role=\"presentation\" data-dojo-attach-point=\"sliderBarContainer\"\n\t\t\t\t><div role=\"presentation\" data-dojo-attach-point=\"progressBar\" class=\"dijitSliderBar dijitSliderBarH dijitSliderProgressBar dijitSliderProgressBarH\" data-dojo-attach-event=\"press:_onBarClick\"\n\t\t\t\t\t><div class=\"dijitSliderMoveable dijitSliderMoveableH\"\n\t\t\t\t\t\t><div data-dojo-attach-point=\"sliderHandle,focusNode\" class=\"dijitSliderImageHandle dijitSliderImageHandleH\" data-dojo-attach-event=\"press:_onHandleClick\" role=\"slider\" valuemin=\"${minimum}\" valuemax=\"${maximum}\"></div\n\t\t\t\t\t></div\n\t\t\t\t></div\n\t\t\t\t><div role=\"presentation\" data-dojo-attach-point=\"remainingBar\" class=\"dijitSliderBar dijitSliderBarH dijitSliderRemainingBar dijitSliderRemainingBarH\" data-dojo-attach-event=\"press:_onBarClick\"></div\n\t\t\t></div\n\t\t></td\n\t\t><td class=\"dijitReset\"\n\t\t\t><div class=\"dijitSliderBar dijitSliderBumper dijitSliderBumperH dijitSliderRightBumper\" data-dojo-attach-event=\"press:_onClkIncBumper\"></div\n\t\t></td\n\t\t><td class=\"dijitReset dijitSliderButtonContainer dijitSliderButtonContainerH\"\n\t\t\t><div class=\"dijitSliderIncrementIconH\" style=\"display:none\" data-dojo-attach-point=\"incrementButton\"><span class=\"dijitSliderButtonInner\">+</span></div\n\t\t></td\n\t></tr\n\t><tr class=\"dijitReset\"\n\t\t><td class=\"dijitReset\" colspan=\"2\"></td\n\t\t><td data-dojo-attach-point=\"containerNode,bottomDecoration\" class=\"dijitReset dijitSliderDecoration dijitSliderDecorationB dijitSliderDecorationH\"></td\n\t\t><td class=\"dijitReset\" colspan=\"2\"></td\n\t></tr\n></table>\n",
        "dijit/Editor": function () {
            define("dijit/Editor", ["dojo/_base/array", "dojo/_base/declare", "dojo/_base/Deferred", "dojo/i18n", "dojo/dom-attr", "dojo/dom-class", "dojo/dom-geometry", "dojo/dom-style", "dojo/_base/event", "dojo/keys", "dojo/_base/lang", "dojo/_base/sniff", "dojo/string", "dojo/topic", "dojo/_base/window", "./_base/focus", "./_Container", "./Toolbar", "./ToolbarSeparator", "./layout/_LayoutWidget", "./form/ToggleButton", "./_editor/_Plugin", "./_editor/plugins/EnterKeyHandling", "./_editor/html", "./_editor/range", "./_editor/RichText", ".", "dojo/i18n!./_editor/nls/commands"], function (_e74, _e75, _e76, i18n, _e77, _e78, _e79, _e7a, _e7b, keys, lang, has, _e7c, _e7d, win, _e7e, _e7f, _e80, _e81, _e82, _e83, _e84, _e85, html, _e86, _e87, _e88) {
                var _e89 = _e75("dijit.Editor", _e87, {
                    plugins: null,
                    extraPlugins: null,
                    constructor: function () {
                        if (!lang.isArray(this.plugins)) {
                            this.plugins = ["undo", "redo", "|", "cut", "copy", "paste", "|", "bold", "italic", "underline", "strikethrough", "|", "insertOrderedList", "insertUnorderedList", "indent", "outdent", "|", "justifyLeft", "justifyRight", "justifyCenter", "justifyFull", _e85];
                        }
                        this._plugins = [];
                        this._editInterval = this.editActionInterval * 1000;
                        if (has("ie")) {
                            this.events.push("onBeforeDeactivate");
                            this.events.push("onBeforeActivate");
                        }
                    },
                    postMixInProperties: function () {
                        this.setValueDeferred = new _e76();
                        this.inherited(arguments);
                    },
                    postCreate: function () {
                        this._steps = this._steps.slice(0);
                        this._undoedSteps = this._undoedSteps.slice(0);
                        if (lang.isArray(this.extraPlugins)) {
                            this.plugins = this.plugins.concat(this.extraPlugins);
                        }
                        this.inherited(arguments);
                        this.commands = i18n.getLocalization("dijit._editor", "commands", this.lang);
                        if (!this.toolbar) {
                            this.toolbar = new _e80({
                                dir: this.dir,
                                lang: this.lang
                            });
                            this.header.appendChild(this.toolbar.domNode);
                        }
                        _e74.forEach(this.plugins, this.addPlugin, this);
                        this.setValueDeferred.callback(true);
                        _e78.add(this.iframe.parentNode, "dijitEditorIFrameContainer");
                        _e78.add(this.iframe, "dijitEditorIFrame");
                        _e77.set(this.iframe, "allowTransparency", true);
                        if (has("webkit")) {
                            _e7a.set(this.domNode, "KhtmlUserSelect", "none");
                        }
                        this.toolbar.startup();
                        this.onNormalizedDisplayChanged();
                    },
                    destroy: function () {
                        _e74.forEach(this._plugins, function (p) {
                            if (p && p.destroy) {
                                p.destroy();
                            }
                        });
                        this._plugins = [];
                        this.toolbar.destroyRecursive();
                        delete this.toolbar;
                        this.inherited(arguments);
                    },
                    addPlugin: function (_e8a, _e8b) {
                        var args = lang.isString(_e8a) ? {
                            name: _e8a
                        } : lang.isFunction(_e8a) ? {
                            ctor: _e8a
                        } : _e8a;
                        if (!args.setEditor) {
                            var o = {
                                "args": args,
                                "plugin": null,
                                "editor": this
                            };
                            if (args.name) {
                                if (_e84.registry[args.name]) {
                                    o.plugin = _e84.registry[args.name](args);
                                } else {
                                    _e7d.publish(_e88._scopeName + ".Editor.getPlugin", o);
                                }
                            }
                            if (!o.plugin) {
                                var pc = args.ctor || lang.getObject(args.name);
                                if (pc) {
                                    o.plugin = new pc(args);
                                }
                            }
                            if (!o.plugin) {
                                console.warn("Cannot find plugin", _e8a);
                                return;
                            }
                            _e8a = o.plugin;
                        }
                        if (arguments.length > 1) {
                            this._plugins[_e8b] = _e8a;
                        } else {
                            this._plugins.push(_e8a);
                        }
                        _e8a.setEditor(this);
                        if (lang.isFunction(_e8a.setToolbar)) {
                            _e8a.setToolbar(this.toolbar);
                        }
                    },
                    resize: function (size) {
                        if (size) {
                            _e82.prototype.resize.apply(this, arguments);
                        }
                    },
                    layout: function () {
                        var _e8c = (this._contentBox.h - (this.getHeaderHeight() + this.getFooterHeight() + _e79.getPadBorderExtents(this.iframe.parentNode).h + _e79.getMarginExtents(this.iframe.parentNode).h));
                        this.editingArea.style.height = _e8c + "px";
                        if (this.iframe) {
                            this.iframe.style.height = "100%";
                        }
                        this._layoutMode = true;
                    },
                    _onIEMouseDown: function (e) {
                        var _e8d;
                        var b = this.document.body;
                        var _e8e = b.clientWidth;
                        var _e8f = b.clientHeight;
                        var _e90 = b.clientLeft;
                        var _e91 = b.offsetWidth;
                        var _e92 = b.offsetHeight;
                        var _e93 = b.offsetLeft;
                        if (/^rtl$/i.test(b.dir || "")) {
                            if (_e8e < _e91 && e.x > _e8e && e.x < _e91) {
                                _e8d = true;
                            }
                        } else {
                            if (e.x < _e90 && e.x > _e93) {
                                _e8d = true;
                            }
                        }
                        if (!_e8d) {
                            if (_e8f < _e92 && e.y > _e8f && e.y < _e92) {
                                _e8d = true;
                            }
                        }
                        if (!_e8d) {
                            delete this._cursorToStart;
                            delete this._savedSelection;
                            if (e.target.tagName == "BODY") {
                                setTimeout(lang.hitch(this, "placeCursorAtEnd"), 0);
                            }
                            this.inherited(arguments);
                        }
                    },
                    onBeforeActivate: function () {
                        this._restoreSelection();
                    },
                    onBeforeDeactivate: function (e) {
                        if (this.customUndo) {
                            this.endEditing(true);
                        }
                        if (e.target.tagName != "BODY") {
                            this._saveSelection();
                        }
                    },
                    customUndo: true,
                    editActionInterval: 3,
                    beginEditing: function (cmd) {
                        if (!this._inEditing) {
                            this._inEditing = true;
                            this._beginEditing(cmd);
                        }
                        if (this.editActionInterval > 0) {
                            if (this._editTimer) {
                                clearTimeout(this._editTimer);
                            }
                            this._editTimer = setTimeout(lang.hitch(this, this.endEditing), this._editInterval);
                        }
                    },
                    _steps: [],
                    _undoedSteps: [],
                    execCommand: function (cmd) {
                        if (this.customUndo && (cmd == "undo" || cmd == "redo")) {
                            return this[cmd]();
                        } else {
                            if (this.customUndo) {
                                this.endEditing();
                                this._beginEditing();
                            }
                            var r = this.inherited(arguments);
                            if (this.customUndo) {
                                this._endEditing();
                            }
                            return r;
                        }
                    },
                    _pasteImpl: function () {
                        return this._clipboardCommand("paste");
                    },
                    _cutImpl: function () {
                        return this._clipboardCommand("cut");
                    },
                    _copyImpl: function () {
                        return this._clipboardCommand("copy");
                    },
                    _clipboardCommand: function (cmd) {
                        var r;
                        try {
                            r = this.document.execCommand(cmd, false, null);
                            if (has("webkit") && !r) {
                                throw {
                                    code: 1011
                                };
                            }
                        } catch (e) {
                            if (e.code == 1011) {
                                var sub = _e7c.substitute,
                                    _e94 = {
                                        cut: "X",
                                        copy: "C",
                                        paste: "V"
                                    };
                                alert(sub(this.commands.systemShortcut, [this.commands[cmd], sub(this.commands[has("mac") ? "appleKey" : "ctrlKey"], [_e94[cmd]])]));
                            }
                            r = false;
                        }
                        return r;
                    },
                    queryCommandEnabled: function (cmd) {
                        if (this.customUndo && (cmd == "undo" || cmd == "redo")) {
                            return cmd == "undo" ? (this._steps.length > 1) : (this._undoedSteps.length > 0);
                        } else {
                            return this.inherited(arguments);
                        }
                    },
                    _moveToBookmark: function (b) {
                        var _e95 = b.mark;
                        var mark = b.mark;
                        var col = b.isCollapsed;
                        var r, _e96, _e97, sel;
                        if (mark) {
                            if (has("ie") < 9) {
                                if (lang.isArray(mark)) {
                                    _e95 = [];
                                    _e74.forEach(mark, function (n) {
                                        _e95.push(_e86.getNode(n, this.editNode));
                                    }, this);
                                    win.withGlobal(this.window, "moveToBookmark", _e88, [{
                                        mark: _e95,
                                        isCollapsed: col
                                    }]);
                                } else {
                                    if (mark.startContainer && mark.endContainer) {
                                        sel = _e86.getSelection(this.window);
                                        if (sel && sel.removeAllRanges) {
                                            sel.removeAllRanges();
                                            r = _e86.create(this.window);
                                            _e96 = _e86.getNode(mark.startContainer, this.editNode);
                                            _e97 = _e86.getNode(mark.endContainer, this.editNode);
                                            if (_e96 && _e97) {
                                                r.setStart(_e96, mark.startOffset);
                                                r.setEnd(_e97, mark.endOffset);
                                                sel.addRange(r);
                                            }
                                        }
                                    }
                                }
                            } else {
                                sel = _e86.getSelection(this.window);
                                if (sel && sel.removeAllRanges) {
                                    sel.removeAllRanges();
                                    r = _e86.create(this.window);
                                    _e96 = _e86.getNode(mark.startContainer, this.editNode);
                                    _e97 = _e86.getNode(mark.endContainer, this.editNode);
                                    if (_e96 && _e97) {
                                        r.setStart(_e96, mark.startOffset);
                                        r.setEnd(_e97, mark.endOffset);
                                        sel.addRange(r);
                                    }
                                }
                            }
                        }
                    },
                    _changeToStep: function (from, to) {
                        this.setValue(to.text);
                        var b = to.bookmark;
                        if (!b) {
                            return;
                        }
                        this._moveToBookmark(b);
                    },
                    undo: function () {
                        var ret = false;
                        if (!this._undoRedoActive) {
                            this._undoRedoActive = true;
                            this.endEditing(true);
                            var s = this._steps.pop();
                            if (s && this._steps.length > 0) {
                                this.focus();
                                this._changeToStep(s, this._steps[this._steps.length - 1]);
                                this._undoedSteps.push(s);
                                this.onDisplayChanged();
                                delete this._undoRedoActive;
                                ret = true;
                            }
                            delete this._undoRedoActive;
                        }
                        return ret;
                    },
                    redo: function () {
                        var ret = false;
                        if (!this._undoRedoActive) {
                            this._undoRedoActive = true;
                            this.endEditing(true);
                            var s = this._undoedSteps.pop();
                            if (s && this._steps.length > 0) {
                                this.focus();
                                this._changeToStep(this._steps[this._steps.length - 1], s);
                                this._steps.push(s);
                                this.onDisplayChanged();
                                ret = true;
                            }
                            delete this._undoRedoActive;
                        }
                        return ret;
                    },
                    endEditing: function (_e98) {
                        if (this._editTimer) {
                            clearTimeout(this._editTimer);
                        }
                        if (this._inEditing) {
                            this._endEditing(_e98);
                            this._inEditing = false;
                        }
                    },
                    _getBookmark: function () {
                        var b = win.withGlobal(this.window, _e7e.getBookmark);
                        var tmp = [];
                        if (b && b.mark) {
                            var mark = b.mark;
                            if (has("ie") < 9) {
                                var sel = _e86.getSelection(this.window);
                                if (!lang.isArray(mark)) {
                                    if (sel) {
                                        var _e99;
                                        if (sel.rangeCount) {
                                            _e99 = sel.getRangeAt(0);
                                        }
                                        if (_e99) {
                                            b.mark = _e99.cloneRange();
                                        } else {
                                            b.mark = win.withGlobal(this.window, _e7e.getBookmark);
                                        }
                                    }
                                } else {
                                    _e74.forEach(b.mark, function (n) {
                                        tmp.push(_e86.getIndex(n, this.editNode).o);
                                    }, this);
                                    b.mark = tmp;
                                }
                            }
                            try {
                                if (b.mark && b.mark.startContainer) {
                                    tmp = _e86.getIndex(b.mark.startContainer, this.editNode).o;
                                    b.mark = {
                                        startContainer: tmp,
                                        startOffset: b.mark.startOffset,
                                        endContainer: b.mark.endContainer === b.mark.startContainer ? tmp : _e86.getIndex(b.mark.endContainer, this.editNode).o,
                                        endOffset: b.mark.endOffset
                                    };
                                }
                            } catch (e) {
                                b.mark = null;
                            }
                        }
                        return b;
                    },
                    _beginEditing: function () {
                        if (this._steps.length === 0) {
                            this._steps.push({
                                "text": html.getChildrenHtml(this.editNode),
                                "bookmark": this._getBookmark()
                            });
                        }
                    },
                    _endEditing: function () {
                        var v = html.getChildrenHtml(this.editNode);
                        this._undoedSteps = [];
                        this._steps.push({
                            text: v,
                            bookmark: this._getBookmark()
                        });
                    },
                    onKeyDown: function (e) {
                        if (!has("ie") && !this.iframe && e.keyCode == keys.TAB && !this.tabIndent) {
                            this._saveSelection();
                        }
                        if (!this.customUndo) {
                            this.inherited(arguments);
                            return;
                        }
                        var k = e.keyCode;
                        if (e.ctrlKey && !e.altKey) {
                            if (k == 90 || k == 122) {
                                _e7b.stop(e);
                                this.undo();
                                return;
                            } else {
                                if (k == 89 || k == 121) {
                                    _e7b.stop(e);
                                    this.redo();
                                    return;
                                }
                            }
                        }
                        this.inherited(arguments);
                        switch (k) {
                        case keys.ENTER:
                        case keys.BACKSPACE:
                        case keys.DELETE:
                            this.beginEditing();
                            break;
                        case 88:
                        case 86:
                            if (e.ctrlKey && !e.altKey && !e.metaKey) {
                                this.endEditing();
                                if (e.keyCode == 88) {
                                    this.beginEditing("cut");
                                    setTimeout(lang.hitch(this, this.endEditing), 1);
                                } else {
                                    this.beginEditing("paste");
                                    setTimeout(lang.hitch(this, this.endEditing), 1);
                                }
                                break;
                            }
                        default:
                            if (!e.ctrlKey && !e.altKey && !e.metaKey && (e.keyCode < keys.F1 || e.keyCode > keys.F15)) {
                                this.beginEditing();
                                break;
                            }
                        case keys.ALT:
                            this.endEditing();
                            break;
                        case keys.UP_ARROW:
                        case keys.DOWN_ARROW:
                        case keys.LEFT_ARROW:
                        case keys.RIGHT_ARROW:
                        case keys.HOME:
                        case keys.END:
                        case keys.PAGE_UP:
                        case keys.PAGE_DOWN:
                            this.endEditing(true);
                            break;
                        case keys.CTRL:
                        case keys.SHIFT:
                        case keys.TAB:
                            break;
                        }
                    },
                    _onBlur: function () {
                        this.inherited(arguments);
                        this.endEditing(true);
                    },
                    _saveSelection: function () {
                        try {
                            this._savedSelection = this._getBookmark();
                        } catch (e) {}
                    },
                    _restoreSelection: function () {
                        if (this._savedSelection) {
                            delete this._cursorToStart;
                            if (win.withGlobal(this.window, "isCollapsed", _e88)) {
                                this._moveToBookmark(this._savedSelection);
                            }
                            delete this._savedSelection;
                        }
                    },
                    onClick: function () {
                        this.endEditing(true);
                        this.inherited(arguments);
                    },
                    replaceValue: function (html) {
                        if (!this.customUndo) {
                            this.inherited(arguments);
                        } else {
                            if (this.isClosed) {
                                this.setValue(html);
                            } else {
                                this.beginEditing();
                                if (!html) {
                                    html = "&#160;";
                                }
                                this.setValue(html);
                                this.endEditing();
                            }
                        }
                    },
                    _setDisabledAttr: function (_e9a) {
                        var _e9b = lang.hitch(this, function () {
                            if ((!this.disabled && _e9a) || (!this._buttonEnabledPlugins && _e9a)) {
                                _e74.forEach(this._plugins, function (p) {
                                    p.set("disabled", true);
                                });
                            } else {
                                if (this.disabled && !_e9a) {
                                    _e74.forEach(this._plugins, function (p) {
                                        p.set("disabled", false);
                                    });
                                }
                            }
                        });
                        this.setValueDeferred.addCallback(_e9b);
                        this.inherited(arguments);
                    },
                    _setStateClass: function () {
                        try {
                            this.inherited(arguments);
                            if (this.document && this.document.body) {
                                _e7a.set(this.document.body, "color", _e7a.get(this.iframe, "color"));
                            }
                        } catch (e) {}
                    }
                });

                function _e9c(args) {
                    return new _e84({
                        command: args.name
                    });
                };

                function _e9d(args) {
                    return new _e84({
                        buttonClass: _e83,
                        command: args.name
                    });
                };
                lang.mixin(_e84.registry, {
                    "undo": _e9c,
                    "redo": _e9c,
                    "cut": _e9c,
                    "copy": _e9c,
                    "paste": _e9c,
                    "insertOrderedList": _e9c,
                    "insertUnorderedList": _e9c,
                    "indent": _e9c,
                    "outdent": _e9c,
                    "justifyCenter": _e9c,
                    "justifyFull": _e9c,
                    "justifyLeft": _e9c,
                    "justifyRight": _e9c,
                    "delete": _e9c,
                    "selectAll": _e9c,
                    "removeFormat": _e9c,
                    "unlink": _e9c,
                    "insertHorizontalRule": _e9c,
                    "bold": _e9d,
                    "italic": _e9d,
                    "underline": _e9d,
                    "strikethrough": _e9d,
                    "subscript": _e9d,
                    "superscript": _e9d,
                    "|": function () {
                        return new _e84({
                            button: new _e81(),
                            setEditor: function (_e9e) {
                                this.editor = _e9e;
                            }
                        });
                    }
                });
                return _e89;
            });
        },
        "dijit/_base/focus": function () {
            define("dijit/_base/focus", ["dojo/_base/array", "dojo/dom", "dojo/_base/lang", "dojo/topic", "dojo/_base/window", "../focus", ".."], function (_e9f, dom, lang, _ea0, win, _ea1, _ea2) {
                lang.mixin(_ea2, {
                    _curFocus: null,
                    _prevFocus: null,
                    isCollapsed: function () {
                        return _ea2.getBookmark().isCollapsed;
                    },
                    getBookmark: function () {
                        var bm, rg, tg, sel = win.doc.selection,
                            cf = _ea1.curNode;
                        if (win.global.getSelection) {
                            sel = win.global.getSelection();
                            if (sel) {
                                if (sel.isCollapsed) {
                                    tg = cf ? cf.tagName : "";
                                    if (tg) {
                                        tg = tg.toLowerCase();
                                        if (tg == "textarea" || (tg == "input" && (!cf.type || cf.type.toLowerCase() == "text"))) {
                                            sel = {
                                                start: cf.selectionStart,
                                                end: cf.selectionEnd,
                                                node: cf,
                                                pRange: true
                                            };
                                            return {
                                                isCollapsed: (sel.end <= sel.start),
                                                mark: sel
                                            };
                                        }
                                    }
                                    bm = {
                                        isCollapsed: true
                                    };
                                    if (sel.rangeCount) {
                                        bm.mark = sel.getRangeAt(0).cloneRange();
                                    }
                                } else {
                                    rg = sel.getRangeAt(0);
                                    bm = {
                                        isCollapsed: false,
                                        mark: rg.cloneRange()
                                    };
                                }
                            }
                        } else {
                            if (sel) {
                                tg = cf ? cf.tagName : "";
                                tg = tg.toLowerCase();
                                if (cf && tg && (tg == "button" || tg == "textarea" || tg == "input")) {
                                    if (sel.type && sel.type.toLowerCase() == "none") {
                                        return {
                                            isCollapsed: true,
                                            mark: null
                                        };
                                    } else {
                                        rg = sel.createRange();
                                        return {
                                            isCollapsed: rg.text && rg.text.length ? false : true,
                                            mark: {
                                                range: rg,
                                                pRange: true
                                            }
                                        };
                                    }
                                }
                                bm = {};
                                try {
                                    rg = sel.createRange();
                                    bm.isCollapsed = !(sel.type == "Text" ? rg.htmlText.length : rg.length);
                                } catch (e) {
                                    bm.isCollapsed = true;
                                    return bm;
                                }
                                if (sel.type.toUpperCase() == "CONTROL") {
                                    if (rg.length) {
                                        bm.mark = [];
                                        var i = 0,
                                            len = rg.length;
                                        while (i < len) {
                                            bm.mark.push(rg.item(i++));
                                        }
                                    } else {
                                        bm.isCollapsed = true;
                                        bm.mark = null;
                                    }
                                } else {
                                    bm.mark = rg.getBookmark();
                                }
                            } else {
                                console.warn("No idea how to store the current selection for this browser!");
                            }
                        }
                        return bm;
                    },
                    moveToBookmark: function (_ea3) {
                        var _ea4 = win.doc,
                            mark = _ea3.mark;
                        if (mark) {
                            if (win.global.getSelection) {
                                var sel = win.global.getSelection();
                                if (sel && sel.removeAllRanges) {
                                    if (mark.pRange) {
                                        var n = mark.node;
                                        n.selectionStart = mark.start;
                                        n.selectionEnd = mark.end;
                                    } else {
                                        sel.removeAllRanges();
                                        sel.addRange(mark);
                                    }
                                } else {
                                    console.warn("No idea how to restore selection for this browser!");
                                }
                            } else {
                                if (_ea4.selection && mark) {
                                    var rg;
                                    if (mark.pRange) {
                                        rg = mark.range;
                                    } else {
                                        if (lang.isArray(mark)) {
                                            rg = _ea4.body.createControlRange();
                                            _e9f.forEach(mark, function (n) {
                                                rg.addElement(n);
                                            });
                                        } else {
                                            rg = _ea4.body.createTextRange();
                                            rg.moveToBookmark(mark);
                                        }
                                    }
                                    rg.select();
                                }
                            }
                        }
                    },
                    getFocus: function (menu, _ea5) {
                        var node = !_ea1.curNode || (menu && dom.isDescendant(_ea1.curNode, menu.domNode)) ? _ea2._prevFocus : _ea1.curNode;
                        return {
                            node: node,
                            bookmark: node && (node == _ea1.curNode) && win.withGlobal(_ea5 || win.global, _ea2.getBookmark),
                            openedForWindow: _ea5
                        };
                    },
                    _activeStack: [],
                    registerIframe: function (_ea6) {
                        return _ea1.registerIframe(_ea6);
                    },
                    unregisterIframe: function (_ea7) {
                        _ea7 && _ea7.remove();
                    },
                    registerWin: function (_ea8, _ea9) {
                        return _ea1.registerWin(_ea8, _ea9);
                    },
                    unregisterWin: function (_eaa) {
                        _eaa && _eaa.remove();
                    }
                });
                _ea1.focus = function (_eab) {
                    if (!_eab) {
                        return;
                    }
                    var node = "node" in _eab ? _eab.node : _eab,
                        _eac = _eab.bookmark,
                        _ead = _eab.openedForWindow,
                        _eae = _eac ? _eac.isCollapsed : false;
                    if (node) {
                        var _eaf = (node.tagName.toLowerCase() == "iframe") ? node.contentWindow : node;
                        if (_eaf && _eaf.focus) {
                            try {
                                _eaf.focus();
                            } catch (e) {}
                        }
                        _ea1._onFocusNode(node);
                    }
                    if (_eac && win.withGlobal(_ead || win.global, _ea2.isCollapsed) && !_eae) {
                        if (_ead) {
                            _ead.focus();
                        }
                        try {
                            win.withGlobal(_ead || win.global, _ea2.moveToBookmark, null, [_eac]);
                        } catch (e2) {}
                    }
                };
                _ea1.watch("curNode", function (name, _eb0, _eb1) {
                    _ea2._curFocus = _eb1;
                    _ea2._prevFocus = _eb0;
                    if (_eb1) {
                        _ea0.publish("focusNode", _eb1);
                    }
                });
                _ea1.watch("activeStack", function (name, _eb2, _eb3) {
                    _ea2._activeStack = _eb3;
                });
                _ea1.on("widget-blur", function (_eb4, by) {
                    _ea0.publish("widgetBlur", _eb4, by);
                });
                _ea1.on("widget-focus", function (_eb5, by) {
                    _ea0.publish("widgetFocus", _eb5, by);
                });
                return _ea2;
            });
        },
        "dijit/Toolbar": function () {
            define("dijit/Toolbar", ["require", "dojo/_base/declare", "dojo/_base/kernel", "dojo/keys", "dojo/ready", "./_Widget", "./_KeyNavContainer", "./_TemplatedMixin"], function (_eb6, _eb7, _eb8, keys, _eb9, _eba, _ebb, _ebc) {
                if (!_eb8.isAsync) {
                    _eb9(0, function () {
                        var _ebd = ["dijit/ToolbarSeparator"];
                        _eb6(_ebd);
                    });
                }
                return _eb7("dijit.Toolbar", [_eba, _ebc, _ebb], {
                    templateString: "<div class=\"dijit\" role=\"toolbar\" tabIndex=\"${tabIndex}\" data-dojo-attach-point=\"containerNode\">" + "</div>",
                    baseClass: "dijitToolbar",
                    postCreate: function () {
                        this.inherited(arguments);
                        this.connectKeyNavHandlers(this.isLeftToRight() ? [keys.LEFT_ARROW] : [keys.RIGHT_ARROW], this.isLeftToRight() ? [keys.RIGHT_ARROW] : [keys.LEFT_ARROW]);
                    }
                });
            });
        },
        "dijit/ToolbarSeparator": function () {
            define("dijit/ToolbarSeparator", ["dojo/_base/declare", "dojo/dom", "./_Widget", "./_TemplatedMixin"], function (_ebe, dom, _ebf, _ec0) {
                return _ebe("dijit.ToolbarSeparator", [_ebf, _ec0], {
                    templateString: "<div class=\"dijitToolbarSeparator dijitInline\" role=\"presentation\"></div>",
                    buildRendering: function () {
                        this.inherited(arguments);
                        dom.setSelectable(this.domNode, false);
                    },
                    isFocusable: function () {
                        return false;
                    }
                });
            });
        },
        "dijit/_editor/_Plugin": function () {
            define("dijit/_editor/_Plugin", ["dojo/_base/connect", "dojo/_base/declare", "dojo/_base/lang", "../form/Button"], function (_ec1, _ec2, lang, _ec3) {
                var _ec4 = _ec2("dijit._editor._Plugin", null, {
                    constructor: function (args) {
                        this.params = args || {};
                        lang.mixin(this, this.params);
                        this._connects = [];
                        this._attrPairNames = {};
                    },
                    editor: null,
                    iconClassPrefix: "dijitEditorIcon",
                    button: null,
                    command: "",
                    useDefaultCommand: true,
                    buttonClass: _ec3,
                    disabled: false,
                    getLabel: function (key) {
                        return this.editor.commands[key];
                    },
                    _initButton: function () {
                        if (this.command.length) {
                            var _ec5 = this.getLabel(this.command),
                                _ec6 = this.editor,
                                _ec7 = this.iconClassPrefix + " " + this.iconClassPrefix + this.command.charAt(0).toUpperCase() + this.command.substr(1);
                            if (!this.button) {
                                var _ec8 = lang.mixin({
                                    label: _ec5,
                                    dir: _ec6.dir,
                                    lang: _ec6.lang,
                                    showLabel: false,
                                    iconClass: _ec7,
                                    dropDown: this.dropDown,
                                    tabIndex: "-1"
                                }, this.params || {});
                                this.button = new this.buttonClass(_ec8);
                            }
                        }
                        if (this.get("disabled") && this.button) {
                            this.button.set("disabled", this.get("disabled"));
                        }
                    },
                    destroy: function () {
                        var h;
                        while (h = this._connects.pop()) {
                            h.remove();
                        }
                        if (this.dropDown) {
                            this.dropDown.destroyRecursive();
                        }
                    },
                    connect: function (o, f, tf) {
                        this._connects.push(_ec1.connect(o, f, this, tf));
                    },
                    updateState: function () {
                        var e = this.editor,
                            c = this.command,
                            _ec9, _eca;
                        if (!e || !e.isLoaded || !c.length) {
                            return;
                        }
                        var _ecb = this.get("disabled");
                        if (this.button) {
                            try {
                                _eca = !_ecb && e.queryCommandEnabled(c);
                                if (this.enabled !== _eca) {
                                    this.enabled = _eca;
                                    this.button.set("disabled", !_eca);
                                }
                                if (typeof this.button.checked == "boolean") {
                                    _ec9 = e.queryCommandState(c);
                                    if (this.checked !== _ec9) {
                                        this.checked = _ec9;
                                        this.button.set("checked", e.queryCommandState(c));
                                    }
                                }
                            } catch (e) {}
                        }
                    },
                    setEditor: function (_ecc) {
                        this.editor = _ecc;
                        this._initButton();
                        if (this.button && this.useDefaultCommand) {
                            if (this.editor.queryCommandAvailable(this.command)) {
                                this.connect(this.button, "onClick", lang.hitch(this.editor, "execCommand", this.command, this.commandArg));
                            } else {
                                this.button.domNode.style.display = "none";
                            }
                        }
                        this.connect(this.editor, "onNormalizedDisplayChanged", "updateState");
                    },
                    setToolbar: function (_ecd) {
                        if (this.button) {
                            _ecd.addChild(this.button);
                        }
                    },
                    set: function (name, _ece) {
                        if (typeof name === "object") {
                            for (var x in name) {
                                this.set(x, name[x]);
                            }
                            return this;
                        }
                        var _ecf = this._getAttrNames(name);
                        if (this[_ecf.s]) {
                            var _ed0 = this[_ecf.s].apply(this, Array.prototype.slice.call(arguments, 1));
                        } else {
                            this._set(name, _ece);
                        }
                        return _ed0 || this;
                    },
                    get: function (name) {
                        var _ed1 = this._getAttrNames(name);
                        return this[_ed1.g] ? this[_ed1.g]() : this[name];
                    },
                    _setDisabledAttr: function (_ed2) {
                        this.disabled = _ed2;
                        this.updateState();
                    },
                    _getAttrNames: function (name) {
                        var apn = this._attrPairNames;
                        if (apn[name]) {
                            return apn[name];
                        }
                        var uc = name.charAt(0).toUpperCase() + name.substr(1);
                        return (apn[name] = {
                            s: "_set" + uc + "Attr",
                            g: "_get" + uc + "Attr"
                        });
                    },
                    _set: function (name, _ed3) {
                        this[name] = _ed3;
                    }
                });
                _ec4.registry = {};
                return _ec4;
            });
        },
        "dijit/_editor/plugins/EnterKeyHandling": function () {
            define("dijit/_editor/plugins/EnterKeyHandling", ["dojo/_base/declare", "dojo/dom-construct", "dojo/_base/event", "dojo/keys", "dojo/_base/lang", "dojo/_base/sniff", "dojo/_base/window", "dojo/window", "../_Plugin", "../RichText", "../range", "../selection"], function (_ed4, _ed5, _ed6, keys, lang, has, win, _ed7, _ed8, _ed9, _eda, _edb) {
                return _ed4("dijit._editor.plugins.EnterKeyHandling", _ed8, {
                    blockNodeForEnter: "BR",
                    constructor: function (args) {
                        if (args) {
                            if ("blockNodeForEnter" in args) {
                                args.blockNodeForEnter = args.blockNodeForEnter.toUpperCase();
                            }
                            lang.mixin(this, args);
                        }
                    },
                    setEditor: function (_edc) {
                        if (this.editor === _edc) {
                            return;
                        }
                        this.editor = _edc;
                        if (this.blockNodeForEnter == "BR") {
                            this.editor.customUndo = true;
                            _edc.onLoadDeferred.addCallback(lang.hitch(this, function (d) {
                                this.connect(_edc.document, "onkeypress", function (e) {
                                    if (e.charOrCode == keys.ENTER) {
                                        var ne = lang.mixin({}, e);
                                        ne.shiftKey = true;
                                        if (!this.handleEnterKey(ne)) {
                                            _ed6.stop(e);
                                        }
                                    }
                                });
                                return d;
                            }));
                        } else {
                            if (this.blockNodeForEnter) {
                                var h = lang.hitch(this, this.handleEnterKey);
                                _edc.addKeyHandler(13, 0, 0, h);
                                _edc.addKeyHandler(13, 0, 1, h);
                                this.connect(this.editor, "onKeyPressed", "onKeyPressed");
                            }
                        }
                    },
                    onKeyPressed: function () {
                        if (this._checkListLater) {
                            if (win.withGlobal(this.editor.window, "isCollapsed", dijit)) {
                                var _edd = win.withGlobal(this.editor.window, "getAncestorElement", _ede, ["LI"]);
                                if (!_edd) {
                                    _ed9.prototype.execCommand.call(this.editor, "formatblock", this.blockNodeForEnter);
                                    var _edf = win.withGlobal(this.editor.window, "getAncestorElement", _ede, [this.blockNodeForEnter]);
                                    if (_edf) {
                                        _edf.innerHTML = this.bogusHtmlContent;
                                        if (has("ie")) {
                                            var r = this.editor.document.selection.createRange();
                                            r.move("character", -1);
                                            r.select();
                                        }
                                    } else {
                                        console.error("onKeyPressed: Cannot find the new block node");
                                    }
                                } else {
                                    if (has("mozilla")) {
                                        if (_edd.parentNode.parentNode.nodeName == "LI") {
                                            _edd = _edd.parentNode.parentNode;
                                        }
                                    }
                                    var fc = _edd.firstChild;
                                    if (fc && fc.nodeType == 1 && (fc.nodeName == "UL" || fc.nodeName == "OL")) {
                                        _edd.insertBefore(fc.ownerDocument.createTextNode(" "), fc);
                                        var _ee0 = _eda.create(this.editor.window);
                                        _ee0.setStart(_edd.firstChild, 0);
                                        var _ede = _eda.getSelection(this.editor.window, true);
                                        _ede.removeAllRanges();
                                        _ede.addRange(_ee0);
                                    }
                                }
                            }
                            this._checkListLater = false;
                        }
                        if (this._pressedEnterInBlock) {
                            if (this._pressedEnterInBlock.previousSibling) {
                                this.removeTrailingBr(this._pressedEnterInBlock.previousSibling);
                            }
                            delete this._pressedEnterInBlock;
                        }
                    },
                    bogusHtmlContent: "&#160;",
                    blockNodes: /^(?:P|H1|H2|H3|H4|H5|H6|LI)$/,
                    handleEnterKey: function (e) {
                        var _ee1, _ee2, _ee3, _ee4, _ee5, _ee6, doc = this.editor.document,
                            br, rs, txt;
                        if (e.shiftKey) {
                            var _ee7 = win.withGlobal(this.editor.window, "getParentElement", _edb);
                            var _ee8 = _eda.getAncestor(_ee7, this.blockNodes);
                            if (_ee8) {
                                if (_ee8.tagName == "LI") {
                                    return true;
                                }
                                _ee1 = _eda.getSelection(this.editor.window);
                                _ee2 = _ee1.getRangeAt(0);
                                if (!_ee2.collapsed) {
                                    _ee2.deleteContents();
                                    _ee1 = _eda.getSelection(this.editor.window);
                                    _ee2 = _ee1.getRangeAt(0);
                                }
                                if (_eda.atBeginningOfContainer(_ee8, _ee2.startContainer, _ee2.startOffset)) {
                                    br = doc.createElement("br");
                                    _ee3 = _eda.create(this.editor.window);
                                    _ee8.insertBefore(br, _ee8.firstChild);
                                    _ee3.setStartAfter(br);
                                    _ee1.removeAllRanges();
                                    _ee1.addRange(_ee3);
                                } else {
                                    if (_eda.atEndOfContainer(_ee8, _ee2.startContainer, _ee2.startOffset)) {
                                        _ee3 = _eda.create(this.editor.window);
                                        br = doc.createElement("br");
                                        _ee8.appendChild(br);
                                        _ee8.appendChild(doc.createTextNode(" "));
                                        _ee3.setStart(_ee8.lastChild, 0);
                                        _ee1.removeAllRanges();
                                        _ee1.addRange(_ee3);
                                    } else {
                                        rs = _ee2.startContainer;
                                        if (rs && rs.nodeType == 3) {
                                            txt = rs.nodeValue;
                                            win.withGlobal(this.editor.window, function () {
                                                _ee4 = doc.createTextNode(txt.substring(0, _ee2.startOffset));
                                                _ee5 = doc.createTextNode(txt.substring(_ee2.startOffset));
                                                _ee6 = doc.createElement("br");
                                                if (_ee5.nodeValue == "" && has("webkit")) {
                                                    _ee5 = doc.createTextNode(" ");
                                                }
                                                _ed5.place(_ee4, rs, "after");
                                                _ed5.place(_ee6, _ee4, "after");
                                                _ed5.place(_ee5, _ee6, "after");
                                                _ed5.destroy(rs);
                                                _ee3 = _eda.create();
                                                _ee3.setStart(_ee5, 0);
                                                _ee1.removeAllRanges();
                                                _ee1.addRange(_ee3);
                                            });
                                            return false;
                                        }
                                        return true;
                                    }
                                }
                            } else {
                                _ee1 = _eda.getSelection(this.editor.window);
                                if (_ee1.rangeCount) {
                                    _ee2 = _ee1.getRangeAt(0);
                                    if (_ee2 && _ee2.startContainer) {
                                        if (!_ee2.collapsed) {
                                            _ee2.deleteContents();
                                            _ee1 = _eda.getSelection(this.editor.window);
                                            _ee2 = _ee1.getRangeAt(0);
                                        }
                                        rs = _ee2.startContainer;
                                        if (rs && rs.nodeType == 3) {
                                            win.withGlobal(this.editor.window, lang.hitch(this, function () {
                                                var _ee9 = false;
                                                var _eea = _ee2.startOffset;
                                                if (rs.length < _eea) {
                                                    ret = this._adjustNodeAndOffset(rs, _eea);
                                                    rs = ret.node;
                                                    _eea = ret.offset;
                                                }
                                                txt = rs.nodeValue;
                                                _ee4 = doc.createTextNode(txt.substring(0, _eea));
                                                _ee5 = doc.createTextNode(txt.substring(_eea));
                                                _ee6 = doc.createElement("br");
                                                if (!_ee5.length) {
                                                    _ee5 = doc.createTextNode(" ");
                                                    _ee9 = true;
                                                }
                                                if (_ee4.length) {
                                                    _ed5.place(_ee4, rs, "after");
                                                } else {
                                                    _ee4 = rs;
                                                }
                                                _ed5.place(_ee6, _ee4, "after");
                                                _ed5.place(_ee5, _ee6, "after");
                                                _ed5.destroy(rs);
                                                _ee3 = _eda.create();
                                                _ee3.setStart(_ee5, 0);
                                                _ee3.setEnd(_ee5, _ee5.length);
                                                _ee1.removeAllRanges();
                                                _ee1.addRange(_ee3);
                                                if (_ee9 && !has("webkit")) {
                                                    _edb.remove();
                                                } else {
                                                    _edb.collapse(true);
                                                }
                                            }));
                                        } else {
                                            var _eeb;
                                            if (_ee2.startOffset >= 0) {
                                                _eeb = rs.childNodes[_ee2.startOffset];
                                            }
                                            win.withGlobal(this.editor.window, lang.hitch(this, function () {
                                                var _eec = doc.createElement("br");
                                                var _eed = doc.createTextNode(" ");
                                                if (!_eeb) {
                                                    rs.appendChild(_eec);
                                                    rs.appendChild(_eed);
                                                } else {
                                                    _ed5.place(_eec, _eeb, "before");
                                                    _ed5.place(_eed, _eec, "after");
                                                }
                                                _ee3 = _eda.create(win.global);
                                                _ee3.setStart(_eed, 0);
                                                _ee3.setEnd(_eed, _eed.length);
                                                _ee1.removeAllRanges();
                                                _ee1.addRange(_ee3);
                                                _edb.collapse(true);
                                            }));
                                        }
                                    }
                                } else {
                                    _ed9.prototype.execCommand.call(this.editor, "inserthtml", "<br>");
                                }
                            }
                            return false;
                        }
                        var _eee = true;
                        _ee1 = _eda.getSelection(this.editor.window);
                        _ee2 = _ee1.getRangeAt(0);
                        if (!_ee2.collapsed) {
                            _ee2.deleteContents();
                            _ee1 = _eda.getSelection(this.editor.window);
                            _ee2 = _ee1.getRangeAt(0);
                        }
                        var _eef = _eda.getBlockAncestor(_ee2.endContainer, null, this.editor.editNode);
                        var _ef0 = _eef.blockNode;
                        if ((this._checkListLater = (_ef0 && (_ef0.nodeName == "LI" || _ef0.parentNode.nodeName == "LI")))) {
                            if (has("mozilla")) {
                                this._pressedEnterInBlock = _ef0;
                            }
                            if (/^(\s|&nbsp;|&#160;|\xA0|<span\b[^>]*\bclass=['"]Apple-style-span['"][^>]*>(\s|&nbsp;|&#160;|\xA0)<\/span>)?(<br>)?$/.test(_ef0.innerHTML)) {
                                _ef0.innerHTML = "";
                                if (has("webkit")) {
                                    _ee3 = _eda.create(this.editor.window);
                                    _ee3.setStart(_ef0, 0);
                                    _ee1.removeAllRanges();
                                    _ee1.addRange(_ee3);
                                }
                                this._checkListLater = false;
                            }
                            return true;
                        }
                        if (!_eef.blockNode || _eef.blockNode === this.editor.editNode) {
                            try {
                                _ed9.prototype.execCommand.call(this.editor, "formatblock", this.blockNodeForEnter);
                            } catch (e2) {}
                            _eef = {
                                blockNode: win.withGlobal(this.editor.window, "getAncestorElement", _edb, [this.blockNodeForEnter]),
                                blockContainer: this.editor.editNode
                            };
                            if (_eef.blockNode) {
                                if (_eef.blockNode != this.editor.editNode && (!(_eef.blockNode.textContent || _eef.blockNode.innerHTML).replace(/^\s+|\s+$/g, "").length)) {
                                    this.removeTrailingBr(_eef.blockNode);
                                    return false;
                                }
                            } else {
                                _eef.blockNode = this.editor.editNode;
                            }
                            _ee1 = _eda.getSelection(this.editor.window);
                            _ee2 = _ee1.getRangeAt(0);
                        }
                        var _ef1 = doc.createElement(this.blockNodeForEnter);
                        _ef1.innerHTML = this.bogusHtmlContent;
                        this.removeTrailingBr(_eef.blockNode);
                        var _ef2 = _ee2.endOffset;
                        var node = _ee2.endContainer;
                        if (node.length < _ef2) {
                            var ret = this._adjustNodeAndOffset(node, _ef2);
                            node = ret.node;
                            _ef2 = ret.offset;
                        }
                        if (_eda.atEndOfContainer(_eef.blockNode, node, _ef2)) {
                            if (_eef.blockNode === _eef.blockContainer) {
                                _eef.blockNode.appendChild(_ef1);
                            } else {
                                _ed5.place(_ef1, _eef.blockNode, "after");
                            }
                            _eee = false;
                            _ee3 = _eda.create(this.editor.window);
                            _ee3.setStart(_ef1, 0);
                            _ee1.removeAllRanges();
                            _ee1.addRange(_ee3);
                            if (this.editor.height) {
                                _ed7.scrollIntoView(_ef1);
                            }
                        } else {
                            if (_eda.atBeginningOfContainer(_eef.blockNode, _ee2.startContainer, _ee2.startOffset)) {
                                _ed5.place(_ef1, _eef.blockNode, _eef.blockNode === _eef.blockContainer ? "first" : "before");
                                if (_ef1.nextSibling && this.editor.height) {
                                    _ee3 = _eda.create(this.editor.window);
                                    _ee3.setStart(_ef1.nextSibling, 0);
                                    _ee1.removeAllRanges();
                                    _ee1.addRange(_ee3);
                                    _ed7.scrollIntoView(_ef1.nextSibling);
                                }
                                _eee = false;
                            } else {
                                if (_eef.blockNode === _eef.blockContainer) {
                                    _eef.blockNode.appendChild(_ef1);
                                } else {
                                    _ed5.place(_ef1, _eef.blockNode, "after");
                                }
                                _eee = false;
                                if (_eef.blockNode.style) {
                                    if (_ef1.style) {
                                        if (_eef.blockNode.style.cssText) {
                                            _ef1.style.cssText = _eef.blockNode.style.cssText;
                                        }
                                    }
                                }
                                rs = _ee2.startContainer;
                                var _ef3;
                                if (rs && rs.nodeType == 3) {
                                    var _ef4, _ef5;
                                    _ef2 = _ee2.endOffset;
                                    if (rs.length < _ef2) {
                                        ret = this._adjustNodeAndOffset(rs, _ef2);
                                        rs = ret.node;
                                        _ef2 = ret.offset;
                                    }
                                    txt = rs.nodeValue;
                                    _ee4 = doc.createTextNode(txt.substring(0, _ef2));
                                    _ee5 = doc.createTextNode(txt.substring(_ef2, txt.length));
                                    _ed5.place(_ee4, rs, "before");
                                    _ed5.place(_ee5, rs, "after");
                                    _ed5.destroy(rs);
                                    var _ef6 = _ee4.parentNode;
                                    while (_ef6 !== _eef.blockNode) {
                                        var tg = _ef6.tagName;
                                        var _ef7 = doc.createElement(tg);
                                        if (_ef6.style) {
                                            if (_ef7.style) {
                                                if (_ef6.style.cssText) {
                                                    _ef7.style.cssText = _ef6.style.cssText;
                                                }
                                            }
                                        }
                                        if (_ef6.tagName === "FONT") {
                                            if (_ef6.color) {
                                                _ef7.color = _ef6.color;
                                            }
                                            if (_ef6.face) {
                                                _ef7.face = _ef6.face;
                                            }
                                            if (_ef6.size) {
                                                _ef7.size = _ef6.size;
                                            }
                                        }
                                        _ef4 = _ee5;
                                        while (_ef4) {
                                            _ef5 = _ef4.nextSibling;
                                            _ef7.appendChild(_ef4);
                                            _ef4 = _ef5;
                                        }
                                        _ed5.place(_ef7, _ef6, "after");
                                        _ee4 = _ef6;
                                        _ee5 = _ef7;
                                        _ef6 = _ef6.parentNode;
                                    }
                                    _ef4 = _ee5;
                                    if (_ef4.nodeType == 1 || (_ef4.nodeType == 3 && _ef4.nodeValue)) {
                                        _ef1.innerHTML = "";
                                    }
                                    _ef3 = _ef4;
                                    while (_ef4) {
                                        _ef5 = _ef4.nextSibling;
                                        _ef1.appendChild(_ef4);
                                        _ef4 = _ef5;
                                    }
                                }
                                _ee3 = _eda.create(this.editor.window);
                                var _ef8;
                                var _ef9 = _ef3;
                                if (this.blockNodeForEnter !== "BR") {
                                    while (_ef9) {
                                        _ef8 = _ef9;
                                        _ef5 = _ef9.firstChild;
                                        _ef9 = _ef5;
                                    }
                                    if (_ef8 && _ef8.parentNode) {
                                        _ef1 = _ef8.parentNode;
                                        _ee3.setStart(_ef1, 0);
                                        _ee1.removeAllRanges();
                                        _ee1.addRange(_ee3);
                                        if (this.editor.height) {
                                            _ed7.scrollIntoView(_ef1);
                                        }
                                        if (has("mozilla")) {
                                            this._pressedEnterInBlock = _eef.blockNode;
                                        }
                                    } else {
                                        _eee = true;
                                    }
                                } else {
                                    _ee3.setStart(_ef1, 0);
                                    _ee1.removeAllRanges();
                                    _ee1.addRange(_ee3);
                                    if (this.editor.height) {
                                        _ed7.scrollIntoView(_ef1);
                                    }
                                    if (has("mozilla")) {
                                        this._pressedEnterInBlock = _eef.blockNode;
                                    }
                                }
                            }
                        }
                        return _eee;
                    },
                    _adjustNodeAndOffset: function (node, _efa) {
                        while (node.length < _efa && node.nextSibling && node.nextSibling.nodeType == 3) {
                            _efa = _efa - node.length;
                            node = node.nextSibling;
                        }
                        return {
                            "node": node,
                            "offset": _efa
                        };
                    },
                    removeTrailingBr: function (_efb) {
                        var para = /P|DIV|LI/i.test(_efb.tagName) ? _efb : _edb.getParentOfType(_efb, ["P", "DIV", "LI"]);
                        if (!para) {
                            return;
                        }
                        if (para.lastChild) {
                            if ((para.childNodes.length > 1 && para.lastChild.nodeType == 3 && /^[\s\xAD]*$/.test(para.lastChild.nodeValue)) || para.lastChild.tagName == "BR") {
                                _ed5.destroy(para.lastChild);
                            }
                        }
                        if (!para.childNodes.length) {
                            para.innerHTML = this.bogusHtmlContent;
                        }
                    }
                });
            });
        },
        "dijit/_editor/RichText": function () {
            define("dijit/_editor/RichText", ["dojo/_base/array", "dojo/_base/config", "dojo/_base/declare", "dojo/_base/Deferred", "dojo/dom", "dojo/dom-attr", "dojo/dom-class", "dojo/dom-construct", "dojo/dom-geometry", "dojo/dom-style", "dojo/_base/event", "dojo/_base/kernel", "dojo/keys", "dojo/_base/lang", "dojo/on", "dojo/query", "dojo/ready", "dojo/_base/sniff", "dojo/topic", "dojo/_base/unload", "dojo/_base/url", "dojo/_base/window", "../_Widget", "../_CssStateMixin", "./selection", "./range", "./html", "../focus", ".."], function (_efc, _efd, _efe, _eff, dom, _f00, _f01, _f02, _f03, _f04, _f05, _f06, keys, lang, on, _f07, _f08, has, _f09, _f0a, _f0b, win, _f0c, _f0d, _f0e, _f0f, _f10, _f11, _f12) {
                var _f13 = _efe("dijit._editor.RichText", [_f0c, _f0d], {
                    constructor: function (_f14) {
                        this.contentPreFilters = [];
                        this.contentPostFilters = [];
                        this.contentDomPreFilters = [];
                        this.contentDomPostFilters = [];
                        this.editingAreaStyleSheets = [];
                        this.events = [].concat(this.events);
                        this._keyHandlers = {};
                        if (_f14 && lang.isString(_f14.value)) {
                            this.value = _f14.value;
                        }
                        this.onLoadDeferred = new _eff();
                    },
                    baseClass: "dijitEditor",
                    inheritWidth: false,
                    focusOnLoad: false,
                    name: "",
                    styleSheets: "",
                    height: "300px",
                    minHeight: "1em",
                    isClosed: true,
                    isLoaded: false,
                    _SEPARATOR: "@@**%%__RICHTEXTBOUNDRY__%%**@@",
                    _NAME_CONTENT_SEP: "@@**%%:%%**@@",
                    onLoadDeferred: null,
                    isTabIndent: false,
                    disableSpellCheck: false,
                    postCreate: function () {
                        if ("textarea" === this.domNode.tagName.toLowerCase()) {
                            console.warn("RichText should not be used with the TEXTAREA tag.  See dijit._editor.RichText docs.");
                        }
                        this.contentPreFilters = [lang.hitch(this, "_preFixUrlAttributes")].concat(this.contentPreFilters);
                        if (has("mozilla")) {
                            this.contentPreFilters = [this._normalizeFontStyle].concat(this.contentPreFilters);
                            this.contentPostFilters = [this._removeMozBogus].concat(this.contentPostFilters);
                        }
                        if (has("webkit")) {
                            this.contentPreFilters = [this._removeWebkitBogus].concat(this.contentPreFilters);
                            this.contentPostFilters = [this._removeWebkitBogus].concat(this.contentPostFilters);
                        }
                        if (has("ie")) {
                            this.contentPostFilters = [this._normalizeFontStyle].concat(this.contentPostFilters);
                            this.contentDomPostFilters = [lang.hitch(this, this._stripBreakerNodes)].concat(this.contentDomPostFilters);
                        }
                        this.inherited(arguments);
                        _f09.publish(_f12._scopeName + "._editor.RichText::init", this);
                        this.open();
                        this.setupDefaultShortcuts();
                    },
                    setupDefaultShortcuts: function () {
                        var exec = lang.hitch(this, function (cmd, arg) {
                            return function () {
                                return !this.execCommand(cmd, arg);
                            };
                        });
                        var _f15 = {
                            b: exec("bold"),
                            i: exec("italic"),
                            u: exec("underline"),
                            a: exec("selectall"),
                            s: function () {
                                this.save(true);
                            },
                            m: function () {
                                this.isTabIndent = !this.isTabIndent;
                            },
                            "1": exec("formatblock", "h1"),
                            "2": exec("formatblock", "h2"),
                            "3": exec("formatblock", "h3"),
                            "4": exec("formatblock", "h4"),
                            "\\": exec("insertunorderedlist")
                        };
                        if (!has("ie")) {
                            _f15.Z = exec("redo");
                        }
                        var key;
                        for (key in _f15) {
                            this.addKeyHandler(key, true, false, _f15[key]);
                        }
                    },
                    events: ["onKeyPress", "onKeyDown", "onKeyUp"],
                    captureEvents: [],
                    _editorCommandsLocalized: false,
                    _localizeEditorCommands: function () {
                        if (_f13._editorCommandsLocalized) {
                            this._local2NativeFormatNames = _f13._local2NativeFormatNames;
                            this._native2LocalFormatNames = _f13._native2LocalFormatNames;
                            return;
                        }
                        _f13._editorCommandsLocalized = true;
                        _f13._local2NativeFormatNames = {};
                        _f13._native2LocalFormatNames = {};
                        this._local2NativeFormatNames = _f13._local2NativeFormatNames;
                        this._native2LocalFormatNames = _f13._native2LocalFormatNames;
                        var _f16 = ["div", "p", "pre", "h1", "h2", "h3", "h4", "h5", "h6", "ol", "ul", "address"];
                        var _f17 = "",
                            _f18, i = 0;
                        while ((_f18 = _f16[i++])) {
                            if (_f18.charAt(1) !== "l") {
                                _f17 += "<" + _f18 + "><span>content</span></" + _f18 + "><br/>";
                            } else {
                                _f17 += "<" + _f18 + "><li>content</li></" + _f18 + "><br/>";
                            }
                        }
                        var _f19 = {
                            position: "absolute",
                            top: "0px",
                            zIndex: 10,
                            opacity: 0.01
                        };
                        var div = _f02.create("div", {
                            style: _f19,
                            innerHTML: _f17
                        });
                        win.body().appendChild(div);
                        var _f1a = lang.hitch(this, function () {
                            var node = div.firstChild;
                            while (node) {
                                try {
                                    _f0e.selectElement(node.firstChild);
                                    var _f1b = node.tagName.toLowerCase();
                                    this._local2NativeFormatNames[_f1b] = document.queryCommandValue("formatblock");
                                    this._native2LocalFormatNames[this._local2NativeFormatNames[_f1b]] = _f1b;
                                    node = node.nextSibling.nextSibling;
                                } catch (e) {}
                            }
                            div.parentNode.removeChild(div);
                            div.innerHTML = "";
                        });
                        setTimeout(_f1a, 0);
                    },
                    open: function (_f1c) {
                        if (!this.onLoadDeferred || this.onLoadDeferred.fired >= 0) {
                            this.onLoadDeferred = new _eff();
                        }
                        if (!this.isClosed) {
                            this.close();
                        }
                        _f09.publish(_f12._scopeName + "._editor.RichText::open", this);
                        if (arguments.length === 1 && _f1c.nodeName) {
                            this.domNode = _f1c;
                        }
                        var dn = this.domNode;
                        var html;
                        if (lang.isString(this.value)) {
                            html = this.value;
                            delete this.value;
                            dn.innerHTML = "";
                        } else {
                            if (dn.nodeName && dn.nodeName.toLowerCase() == "textarea") {
                                var ta = (this.textarea = dn);
                                this.name = ta.name;
                                html = ta.value;
                                dn = this.domNode = win.doc.createElement("div");
                                dn.setAttribute("widgetId", this.id);
                                ta.removeAttribute("widgetId");
                                dn.cssText = ta.cssText;
                                dn.className += " " + ta.className;
                                _f02.place(dn, ta, "before");
                                var _f1d = lang.hitch(this, function () {
                                    _f04.set(ta, {
                                        display: "block",
                                        position: "absolute",
                                        top: "-1000px"
                                    });
                                    if (has("ie")) {
                                        var s = ta.style;
                                        this.__overflow = s.overflow;
                                        s.overflow = "hidden";
                                    }
                                });
                                if (has("ie")) {
                                    setTimeout(_f1d, 10);
                                } else {
                                    _f1d();
                                }
                                if (ta.form) {
                                    var _f1e = ta.value;
                                    this.reset = function () {
                                        var _f1f = this.getValue();
                                        if (_f1f !== _f1e) {
                                            this.replaceValue(_f1e);
                                        }
                                    };
                                    on(ta.form, "submit", lang.hitch(this, function () {
                                        _f00.set(ta, "disabled", this.disabled);
                                        ta.value = this.getValue();
                                    }));
                                }
                            } else {
                                html = _f10.getChildrenHtml(dn);
                                dn.innerHTML = "";
                            }
                        }
                        this.value = html;
                        if (dn.nodeName && dn.nodeName === "LI") {
                            dn.innerHTML = " <br>";
                        }
                        this.header = dn.ownerDocument.createElement("div");
                        dn.appendChild(this.header);
                        this.editingArea = dn.ownerDocument.createElement("div");
                        dn.appendChild(this.editingArea);
                        this.footer = dn.ownerDocument.createElement("div");
                        dn.appendChild(this.footer);
                        if (!this.name) {
                            this.name = this.id + "_AUTOGEN";
                        }
                        if (this.name !== "" && (!_efd["useXDomain"] || _efd["allowXdRichTextSave"])) {
                            var _f20 = dom.byId(_f12._scopeName + "._editor.RichText.value");
                            if (_f20 && _f20.value !== "") {
                                var _f21 = _f20.value.split(this._SEPARATOR),
                                    i = 0,
                                    dat;
                                while ((dat = _f21[i++])) {
                                    var data = dat.split(this._NAME_CONTENT_SEP);
                                    if (data[0] === this.name) {
                                        html = data[1];
                                        _f21 = _f21.splice(i, 1);
                                        _f20.value = _f21.join(this._SEPARATOR);
                                        break;
                                    }
                                }
                            }
                            if (!_f13._globalSaveHandler) {
                                _f13._globalSaveHandler = {};
                                _f0a.addOnUnload(function () {
                                    var id;
                                    for (id in _f13._globalSaveHandler) {
                                        var f = _f13._globalSaveHandler[id];
                                        if (lang.isFunction(f)) {
                                            f();
                                        }
                                    }
                                });
                            }
                            _f13._globalSaveHandler[this.id] = lang.hitch(this, "_saveContent");
                        }
                        this.isClosed = false;
                        var ifr = (this.editorObject = this.iframe = win.doc.createElement("iframe"));
                        ifr.id = this.id + "_iframe";
                        this._iframeSrc = this._getIframeDocTxt();
                        ifr.style.border = "none";
                        ifr.style.width = "100%";
                        if (this._layoutMode) {
                            ifr.style.height = "100%";
                        } else {
                            if (has("ie") >= 7) {
                                if (this.height) {
                                    ifr.style.height = this.height;
                                }
                                if (this.minHeight) {
                                    ifr.style.minHeight = this.minHeight;
                                }
                            } else {
                                ifr.style.height = this.height ? this.height : this.minHeight;
                            }
                        }
                        ifr.frameBorder = 0;
                        ifr._loadFunc = lang.hitch(this, function (w) {
                            this.window = w;
                            this.document = this.window.document;
                            if (has("ie")) {
                                this._localizeEditorCommands();
                            }
                            this.onLoad(html);
                        });
                        var _f22 = "parent." + _f12._scopeName + ".byId(\"" + this.id + "\")._iframeSrc";
                        var s = "javascript:(function(){try{return " + _f22 + "}catch(e){document.open();document.domain=\"" + document.domain + "\";document.write(" + _f22 + ");document.close();}})()";
                        ifr.setAttribute("src", s);
                        this.editingArea.appendChild(ifr);
                        if (has("safari") <= 4) {
                            var src = ifr.getAttribute("src");
                            if (!src || src.indexOf("javascript") === -1) {
                                setTimeout(function () {
                                    ifr.setAttribute("src", s);
                                }, 0);
                            }
                        }
                        if (dn.nodeName === "LI") {
                            dn.lastChild.style.marginTop = "-1.2em";
                        }
                        _f01.add(this.domNode, this.baseClass);
                    },
                    _local2NativeFormatNames: {},
                    _native2LocalFormatNames: {},
                    _getIframeDocTxt: function () {
                        var _f23 = _f04.getComputedStyle(this.domNode);
                        var html = "";
                        var _f24 = true;
                        if (has("ie") || has("webkit") || (!this.height && !has("mozilla"))) {
                            html = "<div id='dijitEditorBody'></div>";
                            _f24 = false;
                        } else {
                            if (has("mozilla")) {
                                this._cursorToStart = true;
                                html = "&#160;";
                            }
                        }
                        var font = [_f23.fontWeight, _f23.fontSize, _f23.fontFamily].join(" ");
                        var _f25 = _f23.lineHeight;
                        if (_f25.indexOf("px") >= 0) {
                            _f25 = parseFloat(_f25) / parseFloat(_f23.fontSize);
                        } else {
                            if (_f25.indexOf("em") >= 0) {
                                _f25 = parseFloat(_f25);
                            } else {
                                _f25 = "normal";
                            }
                        }
                        var _f26 = "";
                        var self = this;
                        this.style.replace(/(^|;)\s*(line-|font-?)[^;]+/ig, function (_f27) {
                            _f27 = _f27.replace(/^;/ig, "") + ";";
                            var s = _f27.split(":")[0];
                            if (s) {
                                s = lang.trim(s);
                                s = s.toLowerCase();
                                var i;
                                var sC = "";
                                for (i = 0; i < s.length; i++) {
                                    var c = s.charAt(i);
                                    switch (c) {
                                    case "-":
                                        i++;
                                        c = s.charAt(i).toUpperCase();
                                    default:
                                        sC += c;
                                    }
                                }
                                _f04.set(self.domNode, sC, "");
                            }
                            _f26 += _f27 + ";";
                        });
                        var _f28 = _f07("label[for=\"" + this.id + "\"]");
                        return [this.isLeftToRight() ? "<html>\n<head>\n" : "<html dir='rtl'>\n<head>\n", (has("mozilla") && _f28.length ? "<title>" + _f28[0].innerHTML + "</title>\n" : ""), "<meta http-equiv='Content-Type' content='text/html'>\n", "<style>\n", "\tbody,html {\n", "\t\tbackground:transparent;\n", "\t\tpadding: 1px 0 0 0;\n", "\t\tmargin: -1px 0 0 0;\n", ((has("webkit")) ? "\t\twidth: 100%;\n" : ""), ((has("webkit")) ? "\t\theight: 100%;\n" : ""), "\t}\n", "\tbody{\n", "\t\ttop:0px;\n", "\t\tleft:0px;\n", "\t\tright:0px;\n", "\t\tfont:", font, ";\n", ((this.height || has("opera")) ? "" : "\t\tposition: fixed;\n"), "\t\tmin-height:", this.minHeight, ";\n", "\t\tline-height:", _f25, ";\n", "\t}\n", "\tp{ margin: 1em 0; }\n", (!_f24 && !this.height ? "\tbody,html {overflow-y: hidden;}\n" : ""), "\t#dijitEditorBody{overflow-x: auto; overflow-y:" + (this.height ? "auto;" : "hidden;") + " outline: 0px;}\n", "\tli > ul:-moz-first-node, li > ol:-moz-first-node{ padding-top: 1.2em; }\n", (!has("ie") ? "\tli{ min-height:1.2em; }\n" : ""), "</style>\n", this._applyEditingAreaStyleSheets(), "\n", "</head>\n<body ", (_f24 ? "id='dijitEditorBody' " : ""), "onload='frameElement._loadFunc(window,document)' style='" + _f26 + "'>", html, "</body>\n</html>"].join("");
                    },
                    _applyEditingAreaStyleSheets: function () {
                        var _f29 = [];
                        if (this.styleSheets) {
                            _f29 = this.styleSheets.split(";");
                            this.styleSheets = "";
                        }
                        _f29 = _f29.concat(this.editingAreaStyleSheets);
                        this.editingAreaStyleSheets = [];
                        var text = "",
                            i = 0,
                            url;
                        while ((url = _f29[i++])) {
                            var _f2a = (new _f0b(win.global.location, url)).toString();
                            this.editingAreaStyleSheets.push(_f2a);
                            text += "<link rel=\"stylesheet\" type=\"text/css\" href=\"" + _f2a + "\"/>";
                        }
                        return text;
                    },
                    addStyleSheet: function (uri) {
                        var url = uri.toString();
                        if (url.charAt(0) === "." || (url.charAt(0) !== "/" && !uri.host)) {
                            url = (new _f0b(win.global.location, url)).toString();
                        }
                        if (_efc.indexOf(this.editingAreaStyleSheets, url) > -1) {
                            return;
                        }
                        this.editingAreaStyleSheets.push(url);
                        this.onLoadDeferred.addCallback(lang.hitch(this, function () {
                            if (this.document.createStyleSheet) {
                                this.document.createStyleSheet(url);
                            } else {
                                var head = this.document.getElementsByTagName("head")[0];
                                var _f2b = this.document.createElement("link");
                                _f2b.rel = "stylesheet";
                                _f2b.type = "text/css";
                                _f2b.href = url;
                                head.appendChild(_f2b);
                            }
                        }));
                    },
                    removeStyleSheet: function (uri) {
                        var url = uri.toString();
                        if (url.charAt(0) === "." || (url.charAt(0) !== "/" && !uri.host)) {
                            url = (new _f0b(win.global.location, url)).toString();
                        }
                        var _f2c = _efc.indexOf(this.editingAreaStyleSheets, url);
                        if (_f2c === -1) {
                            return;
                        }
                        delete this.editingAreaStyleSheets[_f2c];
                        win.withGlobal(this.window, "query", dojo, ["link:[href=\"" + url + "\"]"]).orphan();
                    },
                    disabled: false,
                    _mozSettingProps: {
                        "styleWithCSS": false
                    },
                    _setDisabledAttr: function (_f2d) {
                        _f2d = !! _f2d;
                        this._set("disabled", _f2d);
                        if (!this.isLoaded) {
                            return;
                        }
                        if (has("ie") || has("webkit") || has("opera")) {
                            var _f2e = has("ie") && (this.isLoaded || !this.focusOnLoad);
                            if (_f2e) {
                                this.editNode.unselectable = "on";
                            }
                            this.editNode.contentEditable = !_f2d;
                            if (_f2e) {
                                var _f2f = this;
                                setTimeout(function () {
                                    if (_f2f.editNode) {
                                        _f2f.editNode.unselectable = "off";
                                    }
                                }, 0);
                            }
                        } else {
                            try {
                                this.document.designMode = (_f2d ? "off" : "on");
                            } catch (e) {
                                return;
                            }
                            if (!_f2d && this._mozSettingProps) {
                                var ps = this._mozSettingProps;
                                var n;
                                for (n in ps) {
                                    if (ps.hasOwnProperty(n)) {
                                        try {
                                            this.document.execCommand(n, false, ps[n]);
                                        } catch (e2) {}
                                    }
                                }
                            }
                        }
                        this._disabledOK = true;
                    },
                    onLoad: function (html) {
                        if (!this.window.__registeredWindow) {
                            this.window.__registeredWindow = true;
                            this._iframeRegHandle = _f11.registerIframe(this.iframe);
                        }
                        if (!has("ie") && !has("webkit") && (this.height || has("mozilla"))) {
                            this.editNode = this.document.body;
                        } else {
                            this.editNode = this.document.body.firstChild;
                            var _f30 = this;
                            if (has("ie")) {
                                this.tabStop = _f02.create("div", {
                                    tabIndex: -1
                                }, this.editingArea);
                                this.iframe.onfocus = function () {
                                    _f30.editNode.setActive();
                                };
                            }
                        }
                        this.focusNode = this.editNode;
                        var _f31 = this.events.concat(this.captureEvents);
                        var ap = this.iframe ? this.document : this.editNode;
                        _efc.forEach(_f31, function (item) {
                            this.connect(ap, item.toLowerCase(), item);
                        }, this);
                        this.connect(ap, "onmouseup", "onClick");
                        if (has("ie")) {
                            this.connect(this.document, "onmousedown", "_onIEMouseDown");
                            this.editNode.style.zoom = 1;
                        } else {
                            this.connect(this.document, "onmousedown", function () {
                                delete this._cursorToStart;
                            });
                        }
                        if (has("webkit")) {
                            this._webkitListener = this.connect(this.document, "onmouseup", "onDisplayChanged");
                            this.connect(this.document, "onmousedown", function (e) {
                                var t = e.target;
                                if (t && (t === this.document.body || t === this.document)) {
                                    setTimeout(lang.hitch(this, "placeCursorAtEnd"), 0);
                                }
                            });
                        }
                        if (has("ie")) {
                            try {
                                this.document.execCommand("RespectVisibilityInDesign", true, null);
                            } catch (e) {}
                        }
                        this.isLoaded = true;
                        this.set("disabled", this.disabled);
                        var _f32 = lang.hitch(this, function () {
                            this.setValue(html);
                            if (this.onLoadDeferred) {
                                this.onLoadDeferred.callback(true);
                            }
                            this.onDisplayChanged();
                            if (this.focusOnLoad) {
                                _f08(lang.hitch(this, function () {
                                    setTimeout(lang.hitch(this, "focus"), this.updateInterval);
                                }));
                            }
                            this.value = this.getValue(true);
                        });
                        if (this.setValueDeferred) {
                            this.setValueDeferred.addCallback(_f32);
                        } else {
                            _f32();
                        }
                    },
                    onKeyDown: function (e) {
                        if (e.keyCode === keys.TAB && this.isTabIndent) {
                            _f05.stop(e);
                            if (this.queryCommandEnabled((e.shiftKey ? "outdent" : "indent"))) {
                                this.execCommand((e.shiftKey ? "outdent" : "indent"));
                            }
                        }
                        if (has("ie")) {
                            if (e.keyCode == keys.TAB && !this.isTabIndent) {
                                if (e.shiftKey && !e.ctrlKey && !e.altKey) {
                                    this.iframe.focus();
                                } else {
                                    if (!e.shiftKey && !e.ctrlKey && !e.altKey) {
                                        this.tabStop.focus();
                                    }
                                }
                            } else {
                                if (e.keyCode === keys.BACKSPACE && this.document.selection.type === "Control") {
                                    _f05.stop(e);
                                    this.execCommand("delete");
                                } else {
                                    if ((65 <= e.keyCode && e.keyCode <= 90) || (e.keyCode >= 37 && e.keyCode <= 40)) {
                                        e.charCode = e.keyCode;
                                        this.onKeyPress(e);
                                    }
                                }
                            }
                        }
                        if (has("ff")) {
                            if (e.keyCode === keys.PAGE_UP || e.keyCode === keys.PAGE_DOWN) {
                                if (this.editNode.clientHeight >= this.editNode.scrollHeight) {
                                    e.preventDefault();
                                }
                            }
                        }
                        return true;
                    },
                    onKeyUp: function () {},
                    setDisabled: function (_f33) {
                        _f06.deprecated("dijit.Editor::setDisabled is deprecated", "use dijit.Editor::attr(\"disabled\",boolean) instead", 2);
                        this.set("disabled", _f33);
                    },
                    _setValueAttr: function (_f34) {
                        this.setValue(_f34);
                    },
                    _setDisableSpellCheckAttr: function (_f35) {
                        if (this.document) {
                            _f00.set(this.document.body, "spellcheck", !_f35);
                        } else {
                            this.onLoadDeferred.addCallback(lang.hitch(this, function () {
                                _f00.set(this.document.body, "spellcheck", !_f35);
                            }));
                        }
                        this._set("disableSpellCheck", _f35);
                    },
                    onKeyPress: function (e) {
                        var c = (e.keyChar && e.keyChar.toLowerCase()) || e.keyCode,
                            _f36 = this._keyHandlers[c],
                            args = arguments;
                        if (_f36 && !e.altKey) {
                            _efc.some(_f36, function (h) {
                                if (!(h.shift ^ e.shiftKey) && !(h.ctrl ^ (e.ctrlKey || e.metaKey))) {
                                    if (!h.handler.apply(this, args)) {
                                        e.preventDefault();
                                    }
                                    return true;
                                }
                            }, this);
                        }
                        if (!this._onKeyHitch) {
                            this._onKeyHitch = lang.hitch(this, "onKeyPressed");
                        }
                        setTimeout(this._onKeyHitch, 1);
                        return true;
                    },
                    addKeyHandler: function (key, ctrl, _f37, _f38) {
                        if (!lang.isArray(this._keyHandlers[key])) {
                            this._keyHandlers[key] = [];
                        }
                        this._keyHandlers[key].push({
                            shift: _f37 || false,
                            ctrl: ctrl || false,
                            handler: _f38
                        });
                    },
                    onKeyPressed: function () {
                        this.onDisplayChanged();
                    },
                    onClick: function (e) {
                        this.onDisplayChanged(e);
                    },
                    _onIEMouseDown: function () {
                        if (!this.focused && !this.disabled) {
                            this.focus();
                        }
                    },
                    _onBlur: function (e) {
                        this.inherited(arguments);
                        var _f39 = this.getValue(true);
                        if (_f39 !== this.value) {
                            this.onChange(_f39);
                        }
                        this._set("value", _f39);
                    },
                    _onFocus: function (e) {
                        if (!this.disabled) {
                            if (!this._disabledOK) {
                                this.set("disabled", false);
                            }
                            this.inherited(arguments);
                        }
                    },
                    blur: function () {
                        if (!has("ie") && this.window.document.documentElement && this.window.document.documentElement.focus) {
                            this.window.document.documentElement.focus();
                        } else {
                            if (win.doc.body.focus) {
                                win.doc.body.focus();
                            }
                        }
                    },
                    focus: function () {
                        if (!this.isLoaded) {
                            this.focusOnLoad = true;
                            return;
                        }
                        if (this._cursorToStart) {
                            delete this._cursorToStart;
                            if (this.editNode.childNodes) {
                                this.placeCursorAtStart();
                                return;
                            }
                        }
                        if (!has("ie")) {
                            _f11.focus(this.iframe);
                        } else {
                            if (this.editNode && this.editNode.focus) {
                                this.iframe.fireEvent("onfocus", document.createEventObject());
                            }
                        }
                    },
                    updateInterval: 200,
                    _updateTimer: null,
                    onDisplayChanged: function () {
                        if (this._updateTimer) {
                            clearTimeout(this._updateTimer);
                        }
                        if (!this._updateHandler) {
                            this._updateHandler = lang.hitch(this, "onNormalizedDisplayChanged");
                        }
                        this._updateTimer = setTimeout(this._updateHandler, this.updateInterval);
                    },
                    onNormalizedDisplayChanged: function () {
                        delete this._updateTimer;
                    },
                    onChange: function () {},
                    _normalizeCommand: function (cmd, _f3a) {
                        var _f3b = cmd.toLowerCase();
                        if (_f3b === "formatblock") {
                            if (has("safari") && _f3a === undefined) {
                                _f3b = "heading";
                            }
                        } else {
                            if (_f3b === "hilitecolor" && !has("mozilla")) {
                                _f3b = "backcolor";
                            }
                        }
                        return _f3b;
                    },
                    _qcaCache: {},
                    queryCommandAvailable: function (_f3c) {
                        var ca = this._qcaCache[_f3c];
                        if (ca !== undefined) {
                            return ca;
                        }
                        return (this._qcaCache[_f3c] = this._queryCommandAvailable(_f3c));
                    },
                    _queryCommandAvailable: function (_f3d) {
                        var ie = 1;
                        var _f3e = 1 << 1;
                        var _f3f = 1 << 2;
                        var _f40 = 1 << 3;

                        function _f41(_f42) {
                            return {
                                ie: Boolean(_f42 & ie),
                                mozilla: Boolean(_f42 & _f3e),
                                webkit: Boolean(_f42 & _f3f),
                                opera: Boolean(_f42 & _f40)
                            };
                        };
                        var _f43 = null;
                        switch (_f3d.toLowerCase()) {
                        case "bold":
                        case "italic":
                        case "underline":
                        case "subscript":
                        case "superscript":
                        case "fontname":
                        case "fontsize":
                        case "forecolor":
                        case "hilitecolor":
                        case "justifycenter":
                        case "justifyfull":
                        case "justifyleft":
                        case "justifyright":
                        case "delete":
                        case "selectall":
                        case "toggledir":
                            _f43 = _f41(_f3e | ie | _f3f | _f40);
                            break;
                        case "createlink":
                        case "unlink":
                        case "removeformat":
                        case "inserthorizontalrule":
                        case "insertimage":
                        case "insertorderedlist":
                        case "insertunorderedlist":
                        case "indent":
                        case "outdent":
                        case "formatblock":
                        case "inserthtml":
                        case "undo":
                        case "redo":
                        case "strikethrough":
                        case "tabindent":
                            _f43 = _f41(_f3e | ie | _f40 | _f3f);
                            break;
                        case "blockdirltr":
                        case "blockdirrtl":
                        case "dirltr":
                        case "dirrtl":
                        case "inlinedirltr":
                        case "inlinedirrtl":
                            _f43 = _f41(ie);
                            break;
                        case "cut":
                        case "copy":
                        case "paste":
                            _f43 = _f41(ie | _f3e | _f3f);
                            break;
                        case "inserttable":
                            _f43 = _f41(_f3e | ie);
                            break;
                        case "insertcell":
                        case "insertcol":
                        case "insertrow":
                        case "deletecells":
                        case "deletecols":
                        case "deleterows":
                        case "mergecells":
                        case "splitcell":
                            _f43 = _f41(ie | _f3e);
                            break;
                        default:
                            return false;
                        }
                        return (has("ie") && _f43.ie) || (has("mozilla") && _f43.mozilla) || (has("webkit") && _f43.webkit) || (has("opera") && _f43.opera);
                    },
                    execCommand: function (_f44, _f45) {
                        var _f46;
                        this.focus();
                        _f44 = this._normalizeCommand(_f44, _f45);
                        if (_f45 !== undefined) {
                            if (_f44 === "heading") {
                                throw new Error("unimplemented");
                            } else {
                                if ((_f44 === "formatblock") && has("ie")) {
                                    _f45 = "<" + _f45 + ">";
                                }
                            }
                        }
                        var _f47 = "_" + _f44 + "Impl";
                        if (this[_f47]) {
                            _f46 = this[_f47](_f45);
                        } else {
                            _f45 = arguments.length > 1 ? _f45 : null;
                            if (_f45 || _f44 !== "createlink") {
                                _f46 = this.document.execCommand(_f44, false, _f45);
                            }
                        }
                        this.onDisplayChanged();
                        return _f46;
                    },
                    queryCommandEnabled: function (_f48) {
                        if (this.disabled || !this._disabledOK) {
                            return false;
                        }
                        _f48 = this._normalizeCommand(_f48);
                        var _f49 = "_" + _f48 + "EnabledImpl";
                        if (this[_f49]) {
                            return this[_f49](_f48);
                        } else {
                            return this._browserQueryCommandEnabled(_f48);
                        }
                    },
                    queryCommandState: function (_f4a) {
                        if (this.disabled || !this._disabledOK) {
                            return false;
                        }
                        _f4a = this._normalizeCommand(_f4a);
                        try {
                            return this.document.queryCommandState(_f4a);
                        } catch (e) {
                            return false;
                        }
                    },
                    queryCommandValue: function (_f4b) {
                        if (this.disabled || !this._disabledOK) {
                            return false;
                        }
                        var r;
                        _f4b = this._normalizeCommand(_f4b);
                        if (has("ie") && _f4b === "formatblock") {
                            r = this._native2LocalFormatNames[this.document.queryCommandValue(_f4b)];
                        } else {
                            if (has("mozilla") && _f4b === "hilitecolor") {
                                var _f4c;
                                try {
                                    _f4c = this.document.queryCommandValue("styleWithCSS");
                                } catch (e) {
                                    _f4c = false;
                                }
                                this.document.execCommand("styleWithCSS", false, true);
                                r = this.document.queryCommandValue(_f4b);
                                this.document.execCommand("styleWithCSS", false, _f4c);
                            } else {
                                r = this.document.queryCommandValue(_f4b);
                            }
                        }
                        return r;
                    },
                    _sCall: function (name, args) {
                        return win.withGlobal(this.window, name, _f0e, args);
                    },
                    placeCursorAtStart: function () {
                        this.focus();
                        var _f4d = false;
                        if (has("mozilla")) {
                            var _f4e = this.editNode.firstChild;
                            while (_f4e) {
                                if (_f4e.nodeType === 3) {
                                    if (_f4e.nodeValue.replace(/^\s+|\s+$/g, "").length > 0) {
                                        _f4d = true;
                                        this._sCall("selectElement", [_f4e]);
                                        break;
                                    }
                                } else {
                                    if (_f4e.nodeType === 1) {
                                        _f4d = true;
                                        var tg = _f4e.tagName ? _f4e.tagName.toLowerCase() : "";
                                        if (/br|input|img|base|meta|area|basefont|hr|link/.test(tg)) {
                                            this._sCall("selectElement", [_f4e]);
                                        } else {
                                            this._sCall("selectElementChildren", [_f4e]);
                                        }
                                        break;
                                    }
                                }
                                _f4e = _f4e.nextSibling;
                            }
                        } else {
                            _f4d = true;
                            this._sCall("selectElementChildren", [this.editNode]);
                        }
                        if (_f4d) {
                            this._sCall("collapse", [true]);
                        }
                    },
                    placeCursorAtEnd: function () {
                        this.focus();
                        var _f4f = false;
                        if (has("mozilla")) {
                            var last = this.editNode.lastChild;
                            while (last) {
                                if (last.nodeType === 3) {
                                    if (last.nodeValue.replace(/^\s+|\s+$/g, "").length > 0) {
                                        _f4f = true;
                                        this._sCall("selectElement", [last]);
                                        break;
                                    }
                                } else {
                                    if (last.nodeType === 1) {
                                        _f4f = true;
                                        if (last.lastChild) {
                                            this._sCall("selectElement", [last.lastChild]);
                                        } else {
                                            this._sCall("selectElement", [last]);
                                        }
                                        break;
                                    }
                                }
                                last = last.previousSibling;
                            }
                        } else {
                            _f4f = true;
                            this._sCall("selectElementChildren", [this.editNode]);
                        }
                        if (_f4f) {
                            this._sCall("collapse", [false]);
                        }
                    },
                    getValue: function (_f50) {
                        if (this.textarea) {
                            if (this.isClosed || !this.isLoaded) {
                                return this.textarea.value;
                            }
                        }
                        return this._postFilterContent(null, _f50);
                    },
                    _getValueAttr: function () {
                        return this.getValue(true);
                    },
                    setValue: function (html) {
                        if (!this.isLoaded) {
                            this.onLoadDeferred.addCallback(lang.hitch(this, function () {
                                this.setValue(html);
                            }));
                            return;
                        }
                        this._cursorToStart = true;
                        if (this.textarea && (this.isClosed || !this.isLoaded)) {
                            this.textarea.value = html;
                        } else {
                            html = this._preFilterContent(html);
                            var node = this.isClosed ? this.domNode : this.editNode;
                            if (html && has("mozilla") && html.toLowerCase() === "<p></p>") {
                                html = "<p>&#160;</p>";
                            }
                            if (!html && has("webkit")) {
                                html = "&#160;";
                            }
                            node.innerHTML = html;
                            this._preDomFilterContent(node);
                        }
                        this.onDisplayChanged();
                        this._set("value", this.getValue(true));
                    },
                    replaceValue: function (html) {
                        if (this.isClosed) {
                            this.setValue(html);
                        } else {
                            if (this.window && this.window.getSelection && !has("mozilla")) {
                                this.setValue(html);
                            } else {
                                if (this.window && this.window.getSelection) {
                                    html = this._preFilterContent(html);
                                    this.execCommand("selectall");
                                    if (!html) {
                                        this._cursorToStart = true;
                                        html = "&#160;";
                                    }
                                    this.execCommand("inserthtml", html);
                                    this._preDomFilterContent(this.editNode);
                                } else {
                                    if (this.document && this.document.selection) {
                                        this.setValue(html);
                                    }
                                }
                            }
                        }
                        this._set("value", this.getValue(true));
                    },
                    _preFilterContent: function (html) {
                        var ec = html;
                        _efc.forEach(this.contentPreFilters, function (ef) {
                            if (ef) {
                                ec = ef(ec);
                            }
                        });
                        return ec;
                    },
                    _preDomFilterContent: function (dom) {
                        dom = dom || this.editNode;
                        _efc.forEach(this.contentDomPreFilters, function (ef) {
                            if (ef && lang.isFunction(ef)) {
                                ef(dom);
                            }
                        }, this);
                    },
                    _postFilterContent: function (dom, _f51) {
                        var ec;
                        if (!lang.isString(dom)) {
                            dom = dom || this.editNode;
                            if (this.contentDomPostFilters.length) {
                                if (_f51) {
                                    dom = lang.clone(dom);
                                }
                                _efc.forEach(this.contentDomPostFilters, function (ef) {
                                    dom = ef(dom);
                                });
                            }
                            ec = _f10.getChildrenHtml(dom);
                        } else {
                            ec = dom;
                        }
                        if (!lang.trim(ec.replace(/^\xA0\xA0*/, "").replace(/\xA0\xA0*$/, "")).length) {
                            ec = "";
                        }
                        _efc.forEach(this.contentPostFilters, function (ef) {
                            ec = ef(ec);
                        });
                        return ec;
                    },
                    _saveContent: function () {
                        var _f52 = dom.byId(_f12._scopeName + "._editor.RichText.value");
                        if (_f52) {
                            if (_f52.value) {
                                _f52.value += this._SEPARATOR;
                            }
                            _f52.value += this.name + this._NAME_CONTENT_SEP + this.getValue(true);
                        }
                    },
                    escapeXml: function (str, _f53) {
                        str = str.replace(/&/gm, "&amp;").replace(/</gm, "&lt;").replace(/>/gm, "&gt;").replace(/"/gm, "&quot;");
                        if (!_f53) {
                            str = str.replace(/'/gm, "&#39;");
                        }
                        return str;
                    },
                    getNodeHtml: function (node) {
                        _f06.deprecated("dijit.Editor::getNodeHtml is deprecated", "use dijit/_editor/html::getNodeHtml instead", 2);
                        return _f10.getNodeHtml(node);
                    },
                    getNodeChildrenHtml: function (dom) {
                        _f06.deprecated("dijit.Editor::getNodeChildrenHtml is deprecated", "use dijit/_editor/html::getChildrenHtml instead", 2);
                        return _f10.getChildrenHtml(dom);
                    },
                    close: function (save) {
                        if (this.isClosed) {
                            return;
                        }
                        if (!arguments.length) {
                            save = true;
                        }
                        if (save) {
                            this._set("value", this.getValue(true));
                        }
                        if (this.interval) {
                            clearInterval(this.interval);
                        }
                        if (this._webkitListener) {
                            this.disconnect(this._webkitListener);
                            delete this._webkitListener;
                        }
                        if (has("ie")) {
                            this.iframe.onfocus = null;
                        }
                        this.iframe._loadFunc = null;
                        if (this._iframeRegHandle) {
                            this._iframeRegHandle.remove();
                            delete this._iframeRegHandle;
                        }
                        if (this.textarea) {
                            var s = this.textarea.style;
                            s.position = "";
                            s.left = s.top = "";
                            if (has("ie")) {
                                s.overflow = this.__overflow;
                                this.__overflow = null;
                            }
                            this.textarea.value = this.value;
                            _f02.destroy(this.domNode);
                            this.domNode = this.textarea;
                        } else {
                            this.domNode.innerHTML = this.value;
                        }
                        delete this.iframe;
                        _f01.remove(this.domNode, this.baseClass);
                        this.isClosed = true;
                        this.isLoaded = false;
                        delete this.editNode;
                        delete this.focusNode;
                        if (this.window && this.window._frameElement) {
                            this.window._frameElement = null;
                        }
                        this.window = null;
                        this.document = null;
                        this.editingArea = null;
                        this.editorObject = null;
                    },
                    destroy: function () {
                        if (!this.isClosed) {
                            this.close(false);
                        }
                        if (this._updateTimer) {
                            clearTimeout(this._updateTimer);
                        }
                        this.inherited(arguments);
                        if (_f13._globalSaveHandler) {
                            delete _f13._globalSaveHandler[this.id];
                        }
                    },
                    _removeMozBogus: function (html) {
                        return html.replace(/\stype="_moz"/gi, "").replace(/\s_moz_dirty=""/gi, "").replace(/_moz_resizing="(true|false)"/gi, "");
                    },
                    _removeWebkitBogus: function (html) {
                        html = html.replace(/\sclass="webkit-block-placeholder"/gi, "");
                        html = html.replace(/\sclass="apple-style-span"/gi, "");
                        html = html.replace(/<meta charset=\"utf-8\" \/>/gi, "");
                        return html;
                    },
                    _normalizeFontStyle: function (html) {
                        return html.replace(/<(\/)?strong([ \>])/gi, "<$1b$2").replace(/<(\/)?em([ \>])/gi, "<$1i$2");
                    },
                    _preFixUrlAttributes: function (html) {
                        return html.replace(/(?:(<a(?=\s).*?\shref=)("|')(.*?)\2)|(?:(<a\s.*?href=)([^"'][^ >]+))/gi, "$1$4$2$3$5$2 _djrealurl=$2$3$5$2").replace(/(?:(<img(?=\s).*?\ssrc=)("|')(.*?)\2)|(?:(<img\s.*?src=)([^"'][^ >]+))/gi, "$1$4$2$3$5$2 _djrealurl=$2$3$5$2");
                    },
                    _browserQueryCommandEnabled: function (_f54) {
                        if (!_f54) {
                            return false;
                        }
                        var elem = has("ie") ? this.document.selection.createRange() : this.document;
                        try {
                            return elem.queryCommandEnabled(_f54);
                        } catch (e) {
                            return false;
                        }
                    },
                    _createlinkEnabledImpl: function () {
                        var _f55 = true;
                        if (has("opera")) {
                            var sel = this.window.getSelection();
                            if (sel.isCollapsed) {
                                _f55 = true;
                            } else {
                                _f55 = this.document.queryCommandEnabled("createlink");
                            }
                        } else {
                            _f55 = this._browserQueryCommandEnabled("createlink");
                        }
                        return _f55;
                    },
                    _unlinkEnabledImpl: function () {
                        var _f56 = true;
                        if (has("mozilla") || has("webkit")) {
                            _f56 = this._sCall("hasAncestorElement", ["a"]);
                        } else {
                            _f56 = this._browserQueryCommandEnabled("unlink");
                        }
                        return _f56;
                    },
                    _inserttableEnabledImpl: function () {
                        var _f57 = true;
                        if (has("mozilla") || has("webkit")) {
                            _f57 = true;
                        } else {
                            _f57 = this._browserQueryCommandEnabled("inserttable");
                        }
                        return _f57;
                    },
                    _cutEnabledImpl: function () {
                        var _f58 = true;
                        if (has("webkit")) {
                            var sel = this.window.getSelection();
                            if (sel) {
                                sel = sel.toString();
                            }
                            _f58 = !! sel;
                        } else {
                            _f58 = this._browserQueryCommandEnabled("cut");
                        }
                        return _f58;
                    },
                    _copyEnabledImpl: function () {
                        var _f59 = true;
                        if (has("webkit")) {
                            var sel = this.window.getSelection();
                            if (sel) {
                                sel = sel.toString();
                            }
                            _f59 = !! sel;
                        } else {
                            _f59 = this._browserQueryCommandEnabled("copy");
                        }
                        return _f59;
                    },
                    _pasteEnabledImpl: function () {
                        var _f5a = true;
                        if (has("webkit")) {
                            return true;
                        } else {
                            _f5a = this._browserQueryCommandEnabled("paste");
                        }
                        return _f5a;
                    },
                    _inserthorizontalruleImpl: function (_f5b) {
                        if (has("ie")) {
                            return this._inserthtmlImpl("<hr>");
                        }
                        return this.document.execCommand("inserthorizontalrule", false, _f5b);
                    },
                    _unlinkImpl: function (_f5c) {
                        if ((this.queryCommandEnabled("unlink")) && (has("mozilla") || has("webkit"))) {
                            var a = this._sCall("getAncestorElement", ["a"]);
                            this._sCall("selectElement", [a]);
                            return this.document.execCommand("unlink", false, null);
                        }
                        return this.document.execCommand("unlink", false, _f5c);
                    },
                    _hilitecolorImpl: function (_f5d) {
                        var _f5e;
                        var _f5f = this._handleTextColorOrProperties("hilitecolor", _f5d);
                        if (!_f5f) {
                            if (has("mozilla")) {
                                this.document.execCommand("styleWithCSS", false, true);
                                _f5e = this.document.execCommand("hilitecolor", false, _f5d);
                                this.document.execCommand("styleWithCSS", false, false);
                            } else {
                                _f5e = this.document.execCommand("hilitecolor", false, _f5d);
                            }
                        }
                        return _f5e;
                    },
                    _backcolorImpl: function (_f60) {
                        if (has("ie")) {
                            _f60 = _f60 ? _f60 : null;
                        }
                        var _f61 = this._handleTextColorOrProperties("backcolor", _f60);
                        if (!_f61) {
                            _f61 = this.document.execCommand("backcolor", false, _f60);
                        }
                        return _f61;
                    },
                    _forecolorImpl: function (_f62) {
                        if (has("ie")) {
                            _f62 = _f62 ? _f62 : null;
                        }
                        var _f63 = false;
                        _f63 = this._handleTextColorOrProperties("forecolor", _f62);
                        if (!_f63) {
                            _f63 = this.document.execCommand("forecolor", false, _f62);
                        }
                        return _f63;
                    },
                    _inserthtmlImpl: function (_f64) {
                        _f64 = this._preFilterContent(_f64);
                        var rv = true;
                        if (has("ie")) {
                            var _f65 = this.document.selection.createRange();
                            if (this.document.selection.type.toUpperCase() === "CONTROL") {
                                var n = _f65.item(0);
                                while (_f65.length) {
                                    _f65.remove(_f65.item(0));
                                }
                                n.outerHTML = _f64;
                            } else {
                                _f65.pasteHTML(_f64);
                            }
                            _f65.select();
                        } else {
                            if (has("mozilla") && !_f64.length) {
                                this._sCall("remove");
                            } else {
                                rv = this.document.execCommand("inserthtml", false, _f64);
                            }
                        }
                        return rv;
                    },
                    _boldImpl: function (_f66) {
                        var _f67 = false;
                        if (has("ie")) {
                            this._adaptIESelection();
                            _f67 = this._adaptIEFormatAreaAndExec("bold");
                        }
                        if (!_f67) {
                            _f67 = this.document.execCommand("bold", false, _f66);
                        }
                        return _f67;
                    },
                    _italicImpl: function (_f68) {
                        var _f69 = false;
                        if (has("ie")) {
                            this._adaptIESelection();
                            _f69 = this._adaptIEFormatAreaAndExec("italic");
                        }
                        if (!_f69) {
                            _f69 = this.document.execCommand("italic", false, _f68);
                        }
                        return _f69;
                    },
                    _underlineImpl: function (_f6a) {
                        var _f6b = false;
                        if (has("ie")) {
                            this._adaptIESelection();
                            _f6b = this._adaptIEFormatAreaAndExec("underline");
                        }
                        if (!_f6b) {
                            _f6b = this.document.execCommand("underline", false, _f6a);
                        }
                        return _f6b;
                    },
                    _strikethroughImpl: function (_f6c) {
                        var _f6d = false;
                        if (has("ie")) {
                            this._adaptIESelection();
                            _f6d = this._adaptIEFormatAreaAndExec("strikethrough");
                        }
                        if (!_f6d) {
                            _f6d = this.document.execCommand("strikethrough", false, _f6c);
                        }
                        return _f6d;
                    },
                    _superscriptImpl: function (_f6e) {
                        var _f6f = false;
                        if (has("ie")) {
                            this._adaptIESelection();
                            _f6f = this._adaptIEFormatAreaAndExec("superscript");
                        }
                        if (!_f6f) {
                            _f6f = this.document.execCommand("superscript", false, _f6e);
                        }
                        return _f6f;
                    },
                    _subscriptImpl: function (_f70) {
                        var _f71 = false;
                        if (has("ie")) {
                            this._adaptIESelection();
                            _f71 = this._adaptIEFormatAreaAndExec("subscript");
                        }
                        if (!_f71) {
                            _f71 = this.document.execCommand("subscript", false, _f70);
                        }
                        return _f71;
                    },
                    _fontnameImpl: function (_f72) {
                        var _f73;
                        if (has("ie")) {
                            _f73 = this._handleTextColorOrProperties("fontname", _f72);
                        }
                        if (!_f73) {
                            _f73 = this.document.execCommand("fontname", false, _f72);
                        }
                        return _f73;
                    },
                    _fontsizeImpl: function (_f74) {
                        var _f75;
                        if (has("ie")) {
                            _f75 = this._handleTextColorOrProperties("fontsize", _f74);
                        }
                        if (!_f75) {
                            _f75 = this.document.execCommand("fontsize", false, _f74);
                        }
                        return _f75;
                    },
                    _insertorderedlistImpl: function (_f76) {
                        var _f77 = false;
                        if (has("ie")) {
                            _f77 = this._adaptIEList("insertorderedlist", _f76);
                        }
                        if (!_f77) {
                            _f77 = this.document.execCommand("insertorderedlist", false, _f76);
                        }
                        return _f77;
                    },
                    _insertunorderedlistImpl: function (_f78) {
                        var _f79 = false;
                        if (has("ie")) {
                            _f79 = this._adaptIEList("insertunorderedlist", _f78);
                        }
                        if (!_f79) {
                            _f79 = this.document.execCommand("insertunorderedlist", false, _f78);
                        }
                        return _f79;
                    },
                    getHeaderHeight: function () {
                        return this._getNodeChildrenHeight(this.header);
                    },
                    getFooterHeight: function () {
                        return this._getNodeChildrenHeight(this.footer);
                    },
                    _getNodeChildrenHeight: function (node) {
                        var h = 0;
                        if (node && node.childNodes) {
                            var i;
                            for (i = 0; i < node.childNodes.length; i++) {
                                var size = _f03.position(node.childNodes[i]);
                                h += size.h;
                            }
                        }
                        return h;
                    },
                    _isNodeEmpty: function (node, _f7a) {
                        if (node.nodeType === 1) {
                            if (node.childNodes.length > 0) {
                                return this._isNodeEmpty(node.childNodes[0], _f7a);
                            }
                            return true;
                        } else {
                            if (node.nodeType === 3) {
                                return (node.nodeValue.substring(_f7a) === "");
                            }
                        }
                        return false;
                    },
                    _removeStartingRangeFromRange: function (node, _f7b) {
                        if (node.nextSibling) {
                            _f7b.setStart(node.nextSibling, 0);
                        } else {
                            var _f7c = node.parentNode;
                            while (_f7c && _f7c.nextSibling == null) {
                                _f7c = _f7c.parentNode;
                            }
                            if (_f7c) {
                                _f7b.setStart(_f7c.nextSibling, 0);
                            }
                        }
                        return _f7b;
                    },
                    _adaptIESelection: function () {
                        var _f7d = _f0f.getSelection(this.window);
                        if (_f7d && _f7d.rangeCount && !_f7d.isCollapsed) {
                            var _f7e = _f7d.getRangeAt(0);
                            var _f7f = _f7e.startContainer;
                            var _f80 = _f7e.startOffset;
                            while (_f7f.nodeType === 3 && _f80 >= _f7f.length && _f7f.nextSibling) {
                                _f80 = _f80 - _f7f.length;
                                _f7f = _f7f.nextSibling;
                            }
                            var _f81 = null;
                            while (this._isNodeEmpty(_f7f, _f80) && _f7f !== _f81) {
                                _f81 = _f7f;
                                _f7e = this._removeStartingRangeFromRange(_f7f, _f7e);
                                _f7f = _f7e.startContainer;
                                _f80 = 0;
                            }
                            _f7d.removeAllRanges();
                            _f7d.addRange(_f7e);
                        }
                    },
                    _adaptIEFormatAreaAndExec: function (_f82) {
                        var _f83 = _f0f.getSelection(this.window);
                        var doc = this.document;
                        var rs, ret, _f84, txt, _f85, _f86, _f87, _f88;
                        if (_f82 && _f83 && _f83.isCollapsed) {
                            var _f89 = this.queryCommandValue(_f82);
                            if (_f89) {
                                var _f8a = this._tagNamesForCommand(_f82);
                                _f84 = _f83.getRangeAt(0);
                                var fs = _f84.startContainer;
                                if (fs.nodeType === 3) {
                                    var _f8b = _f84.endOffset;
                                    if (fs.length < _f8b) {
                                        ret = this._adjustNodeAndOffset(rs, _f8b);
                                        fs = ret.node;
                                        _f8b = ret.offset;
                                    }
                                }
                                var _f8c;
                                while (fs && fs !== this.editNode) {
                                    var _f8d = fs.tagName ? fs.tagName.toLowerCase() : "";
                                    if (_efc.indexOf(_f8a, _f8d) > -1) {
                                        _f8c = fs;
                                        break;
                                    }
                                    fs = fs.parentNode;
                                }
                                if (_f8c) {
                                    rs = _f84.startContainer;
                                    var _f8e = doc.createElement(_f8c.tagName);
                                    _f02.place(_f8e, _f8c, "after");
                                    if (rs && rs.nodeType === 3) {
                                        var _f8f, _f90;
                                        var _f91 = _f84.endOffset;
                                        if (rs.length < _f91) {
                                            ret = this._adjustNodeAndOffset(rs, _f91);
                                            rs = ret.node;
                                            _f91 = ret.offset;
                                        }
                                        txt = rs.nodeValue;
                                        _f85 = doc.createTextNode(txt.substring(0, _f91));
                                        var _f92 = txt.substring(_f91, txt.length);
                                        if (_f92) {
                                            _f86 = doc.createTextNode(_f92);
                                        }
                                        _f02.place(_f85, rs, "before");
                                        if (_f86) {
                                            _f87 = doc.createElement("span");
                                            _f87.className = "ieFormatBreakerSpan";
                                            _f02.place(_f87, rs, "after");
                                            _f02.place(_f86, _f87, "after");
                                            _f86 = _f87;
                                        }
                                        _f02.destroy(rs);
                                        var _f93 = _f85.parentNode;
                                        var _f94 = [];
                                        var _f95;
                                        while (_f93 !== _f8c) {
                                            var tg = _f93.tagName;
                                            _f95 = {
                                                tagName: tg
                                            };
                                            _f94.push(_f95);
                                            var _f96 = doc.createElement(tg);
                                            if (_f93.style) {
                                                if (_f96.style) {
                                                    if (_f93.style.cssText) {
                                                        _f96.style.cssText = _f93.style.cssText;
                                                        _f95.cssText = _f93.style.cssText;
                                                    }
                                                }
                                            }
                                            if (_f93.tagName === "FONT") {
                                                if (_f93.color) {
                                                    _f96.color = _f93.color;
                                                    _f95.color = _f93.color;
                                                }
                                                if (_f93.face) {
                                                    _f96.face = _f93.face;
                                                    _f95.face = _f93.face;
                                                }
                                                if (_f93.size) {
                                                    _f96.size = _f93.size;
                                                    _f95.size = _f93.size;
                                                }
                                            }
                                            if (_f93.className) {
                                                _f96.className = _f93.className;
                                                _f95.className = _f93.className;
                                            }
                                            if (_f86) {
                                                _f8f = _f86;
                                                while (_f8f) {
                                                    _f90 = _f8f.nextSibling;
                                                    _f96.appendChild(_f8f);
                                                    _f8f = _f90;
                                                }
                                            }
                                            if (_f96.tagName == _f93.tagName) {
                                                _f87 = doc.createElement("span");
                                                _f87.className = "ieFormatBreakerSpan";
                                                _f02.place(_f87, _f93, "after");
                                                _f02.place(_f96, _f87, "after");
                                            } else {
                                                _f02.place(_f96, _f93, "after");
                                            }
                                            _f85 = _f93;
                                            _f86 = _f96;
                                            _f93 = _f93.parentNode;
                                        }
                                        if (_f86) {
                                            _f8f = _f86;
                                            if (_f8f.nodeType === 1 || (_f8f.nodeType === 3 && _f8f.nodeValue)) {
                                                _f8e.innerHTML = "";
                                            }
                                            while (_f8f) {
                                                _f90 = _f8f.nextSibling;
                                                _f8e.appendChild(_f8f);
                                                _f8f = _f90;
                                            }
                                        }
                                        if (_f94.length) {
                                            _f95 = _f94.pop();
                                            var _f97 = doc.createElement(_f95.tagName);
                                            if (_f95.cssText && _f97.style) {
                                                _f97.style.cssText = _f95.cssText;
                                            }
                                            if (_f95.className) {
                                                _f97.className = _f95.className;
                                            }
                                            if (_f95.tagName === "FONT") {
                                                if (_f95.color) {
                                                    _f97.color = _f95.color;
                                                }
                                                if (_f95.face) {
                                                    _f97.face = _f95.face;
                                                }
                                                if (_f95.size) {
                                                    _f97.size = _f95.size;
                                                }
                                            }
                                            _f02.place(_f97, _f8e, "before");
                                            while (_f94.length) {
                                                _f95 = _f94.pop();
                                                var _f98 = doc.createElement(_f95.tagName);
                                                if (_f95.cssText && _f98.style) {
                                                    _f98.style.cssText = _f95.cssText;
                                                }
                                                if (_f95.className) {
                                                    _f98.className = _f95.className;
                                                }
                                                if (_f95.tagName === "FONT") {
                                                    if (_f95.color) {
                                                        _f98.color = _f95.color;
                                                    }
                                                    if (_f95.face) {
                                                        _f98.face = _f95.face;
                                                    }
                                                    if (_f95.size) {
                                                        _f98.size = _f95.size;
                                                    }
                                                }
                                                _f97.appendChild(_f98);
                                                _f97 = _f98;
                                            }
                                            _f88 = doc.createTextNode(".");
                                            _f87.appendChild(_f88);
                                            _f97.appendChild(_f88);
                                            win.withGlobal(this.window, lang.hitch(this, function () {
                                                var _f99 = _f0f.create();
                                                _f99.setStart(_f88, 0);
                                                _f99.setEnd(_f88, _f88.length);
                                                _f83.removeAllRanges();
                                                _f83.addRange(_f99);
                                                _f0e.collapse(false);
                                                _f88.parentNode.innerHTML = "";
                                            }));
                                        } else {
                                            _f87 = doc.createElement("span");
                                            _f87.className = "ieFormatBreakerSpan";
                                            _f88 = doc.createTextNode(".");
                                            _f87.appendChild(_f88);
                                            _f02.place(_f87, _f8e, "before");
                                            win.withGlobal(this.window, lang.hitch(this, function () {
                                                var _f9a = _f0f.create();
                                                _f9a.setStart(_f88, 0);
                                                _f9a.setEnd(_f88, _f88.length);
                                                _f83.removeAllRanges();
                                                _f83.addRange(_f9a);
                                                _f0e.collapse(false);
                                                _f88.parentNode.innerHTML = "";
                                            }));
                                        }
                                        if (!_f8e.firstChild) {
                                            _f02.destroy(_f8e);
                                        }
                                        return true;
                                    }
                                }
                                return false;
                            } else {
                                _f84 = _f83.getRangeAt(0);
                                rs = _f84.startContainer;
                                if (rs && rs.nodeType === 3) {
                                    win.withGlobal(this.window, lang.hitch(this, function () {
                                        var _f9b = _f84.startOffset;
                                        if (rs.length < _f9b) {
                                            ret = this._adjustNodeAndOffset(rs, _f9b);
                                            rs = ret.node;
                                            _f9b = ret.offset;
                                        }
                                        txt = rs.nodeValue;
                                        _f85 = doc.createTextNode(txt.substring(0, _f9b));
                                        var _f9c = txt.substring(_f9b);
                                        if (_f9c !== "") {
                                            _f86 = doc.createTextNode(txt.substring(_f9b));
                                        }
                                        _f87 = doc.createElement("span");
                                        _f88 = doc.createTextNode(".");
                                        _f87.appendChild(_f88);
                                        if (_f85.length) {
                                            _f02.place(_f85, rs, "after");
                                        } else {
                                            _f85 = rs;
                                        }
                                        _f02.place(_f87, _f85, "after");
                                        if (_f86) {
                                            _f02.place(_f86, _f87, "after");
                                        }
                                        _f02.destroy(rs);
                                        var _f9d = _f0f.create();
                                        _f9d.setStart(_f88, 0);
                                        _f9d.setEnd(_f88, _f88.length);
                                        _f83.removeAllRanges();
                                        _f83.addRange(_f9d);
                                        doc.execCommand(_f82);
                                        _f02.place(_f87.firstChild, _f87, "before");
                                        _f02.destroy(_f87);
                                        _f9d.setStart(_f88, 0);
                                        _f9d.setEnd(_f88, _f88.length);
                                        _f83.removeAllRanges();
                                        _f83.addRange(_f9d);
                                        _f0e.collapse(false);
                                        _f88.parentNode.innerHTML = "";
                                    }));
                                    return true;
                                }
                            }
                        } else {
                            return false;
                        }
                    },
                    _adaptIEList: function (_f9e) {
                        var _f9f = _f0f.getSelection(this.window);
                        if (_f9f.isCollapsed) {
                            if (_f9f.rangeCount && !this.queryCommandValue(_f9e)) {
                                var _fa0 = _f9f.getRangeAt(0);
                                var sc = _fa0.startContainer;
                                if (sc && sc.nodeType == 3) {
                                    if (!_fa0.startOffset) {
                                        win.withGlobal(this.window, lang.hitch(this, function () {
                                            var _fa1 = "ul";
                                            if (_f9e === "insertorderedlist") {
                                                _fa1 = "ol";
                                            }
                                            var list = _f02.create(_fa1);
                                            var li = _f02.create("li", null, list);
                                            _f02.place(list, sc, "before");
                                            li.appendChild(sc);
                                            _f02.create("br", null, list, "after");
                                            var _fa2 = _f0f.create();
                                            _fa2.setStart(sc, 0);
                                            _fa2.setEnd(sc, sc.length);
                                            _f9f.removeAllRanges();
                                            _f9f.addRange(_fa2);
                                            _f0e.collapse(true);
                                        }));
                                        return true;
                                    }
                                }
                            }
                        }
                        return false;
                    },
                    _handleTextColorOrProperties: function (_fa3, _fa4) {
                        var _fa5 = _f0f.getSelection(this.window);
                        var doc = this.document;
                        var rs, ret, _fa6, txt, _fa7, _fa8, _fa9, _faa;
                        _fa4 = _fa4 || null;
                        if (_fa3 && _fa5 && _fa5.isCollapsed) {
                            if (_fa5.rangeCount) {
                                _fa6 = _fa5.getRangeAt(0);
                                rs = _fa6.startContainer;
                                if (rs && rs.nodeType === 3) {
                                    win.withGlobal(this.window, lang.hitch(this, function () {
                                        var _fab = _fa6.startOffset;
                                        if (rs.length < _fab) {
                                            ret = this._adjustNodeAndOffset(rs, _fab);
                                            rs = ret.node;
                                            _fab = ret.offset;
                                        }
                                        txt = rs.nodeValue;
                                        _fa7 = doc.createTextNode(txt.substring(0, _fab));
                                        var _fac = txt.substring(_fab);
                                        if (_fac !== "") {
                                            _fa8 = doc.createTextNode(txt.substring(_fab));
                                        }
                                        _fa9 = _f02.create("span");
                                        _faa = doc.createTextNode(".");
                                        _fa9.appendChild(_faa);
                                        var _fad = _f02.create("span");
                                        _fa9.appendChild(_fad);
                                        if (_fa7.length) {
                                            _f02.place(_fa7, rs, "after");
                                        } else {
                                            _fa7 = rs;
                                        }
                                        _f02.place(_fa9, _fa7, "after");
                                        if (_fa8) {
                                            _f02.place(_fa8, _fa9, "after");
                                        }
                                        _f02.destroy(rs);
                                        var _fae = _f0f.create();
                                        _fae.setStart(_faa, 0);
                                        _fae.setEnd(_faa, _faa.length);
                                        _fa5.removeAllRanges();
                                        _fa5.addRange(_fae);
                                        if (has("webkit")) {
                                            var _faf = "color";
                                            if (_fa3 === "hilitecolor" || _fa3 === "backcolor") {
                                                _faf = "backgroundColor";
                                            }
                                            _f04.set(_fa9, _faf, _fa4);
                                            _f0e.remove();
                                            _f02.destroy(_fad);
                                            _fa9.innerHTML = "&#160;";
                                            _f0e.selectElement(_fa9);
                                            this.focus();
                                        } else {
                                            this.execCommand(_fa3, _fa4);
                                            _f02.place(_fa9.firstChild, _fa9, "before");
                                            _f02.destroy(_fa9);
                                            _fae.setStart(_faa, 0);
                                            _fae.setEnd(_faa, _faa.length);
                                            _fa5.removeAllRanges();
                                            _fa5.addRange(_fae);
                                            _f0e.collapse(false);
                                            _faa.parentNode.removeChild(_faa);
                                        }
                                    }));
                                    return true;
                                }
                            }
                        }
                        return false;
                    },
                    _adjustNodeAndOffset: function (node, _fb0) {
                        while (node.length < _fb0 && node.nextSibling && node.nextSibling.nodeType === 3) {
                            _fb0 = _fb0 - node.length;
                            node = node.nextSibling;
                        }
                        return {
                            "node": node,
                            "offset": _fb0
                        };
                    },
                    _tagNamesForCommand: function (_fb1) {
                        if (_fb1 === "bold") {
                            return ["b", "strong"];
                        } else {
                            if (_fb1 === "italic") {
                                return ["i", "em"];
                            } else {
                                if (_fb1 === "strikethrough") {
                                    return ["s", "strike"];
                                } else {
                                    if (_fb1 === "superscript") {
                                        return ["sup"];
                                    } else {
                                        if (_fb1 === "subscript") {
                                            return ["sub"];
                                        } else {
                                            if (_fb1 === "underline") {
                                                return ["u"];
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        return [];
                    },
                    _stripBreakerNodes: function (node) {
                        win.withGlobal(this.window, lang.hitch(this, function () {
                            var _fb2 = _f07(".ieFormatBreakerSpan", node);
                            var i;
                            for (i = 0; i < _fb2.length; i++) {
                                var b = _fb2[i];
                                while (b.firstChild) {
                                    _f02.place(b.firstChild, b, "before");
                                }
                                _f02.destroy(b);
                            }
                        }));
                        return node;
                    }
                });
                return _f13;
            });
        },
        "dijit/_editor/selection": function () {
            define("dijit/_editor/selection", ["dojo/dom", "dojo/_base/lang", "dojo/_base/sniff", "dojo/_base/window", ".."], function (dom, lang, has, win, _fb3) {
                lang.getObject("_editor.selection", true, _fb3);
                lang.mixin(_fb3._editor.selection, {
                    getType: function () {
                        if (has("ie") < 9) {
                            return win.doc.selection.type.toLowerCase();
                        } else {
                            var _fb4 = "text";
                            var oSel;
                            try {
                                oSel = win.global.getSelection();
                            } catch (e) {}
                            if (oSel && oSel.rangeCount == 1) {
                                var _fb5 = oSel.getRangeAt(0);
                                if ((_fb5.startContainer == _fb5.endContainer) && ((_fb5.endOffset - _fb5.startOffset) == 1) && (_fb5.startContainer.nodeType != 3)) {
                                    _fb4 = "control";
                                }
                            }
                            return _fb4;
                        }
                    },
                    getSelectedText: function () {
                        if (has("ie") < 9) {
                            if (_fb3._editor.selection.getType() == "control") {
                                return null;
                            }
                            return win.doc.selection.createRange().text;
                        } else {
                            var _fb6 = win.global.getSelection();
                            if (_fb6) {
                                return _fb6.toString();
                            }
                        }
                        return "";
                    },
                    getSelectedHtml: function () {
                        if (has("ie") < 9) {
                            if (_fb3._editor.selection.getType() == "control") {
                                return null;
                            }
                            return win.doc.selection.createRange().htmlText;
                        } else {
                            var _fb7 = win.global.getSelection();
                            if (_fb7 && _fb7.rangeCount) {
                                var i;
                                var html = "";
                                for (i = 0; i < _fb7.rangeCount; i++) {
                                    var frag = _fb7.getRangeAt(i).cloneContents();
                                    var div = win.doc.createElement("div");
                                    div.appendChild(frag);
                                    html += div.innerHTML;
                                }
                                return html;
                            }
                            return null;
                        }
                    },
                    getSelectedElement: function () {
                        if (_fb3._editor.selection.getType() == "control") {
                            if (has("ie") < 9) {
                                var _fb8 = win.doc.selection.createRange();
                                if (_fb8 && _fb8.item) {
                                    return win.doc.selection.createRange().item(0);
                                }
                            } else {
                                var _fb9 = win.global.getSelection();
                                return _fb9.anchorNode.childNodes[_fb9.anchorOffset];
                            }
                        }
                        return null;
                    },
                    getParentElement: function () {
                        if (_fb3._editor.selection.getType() == "control") {
                            var p = this.getSelectedElement();
                            if (p) {
                                return p.parentNode;
                            }
                        } else {
                            if (has("ie") < 9) {
                                var r = win.doc.selection.createRange();
                                r.collapse(true);
                                return r.parentElement();
                            } else {
                                var _fba = win.global.getSelection();
                                if (_fba) {
                                    var node = _fba.anchorNode;
                                    while (node && (node.nodeType != 1)) {
                                        node = node.parentNode;
                                    }
                                    return node;
                                }
                            }
                        }
                        return null;
                    },
                    hasAncestorElement: function (_fbb) {
                        return this.getAncestorElement.apply(this, arguments) != null;
                    },
                    getAncestorElement: function (_fbc) {
                        var node = this.getSelectedElement() || this.getParentElement();
                        return this.getParentOfType(node, arguments);
                    },
                    isTag: function (node, tags) {
                        if (node && node.tagName) {
                            var _fbd = node.tagName.toLowerCase();
                            for (var i = 0; i < tags.length; i++) {
                                var _fbe = String(tags[i]).toLowerCase();
                                if (_fbd == _fbe) {
                                    return _fbe;
                                }
                            }
                        }
                        return "";
                    },
                    getParentOfType: function (node, tags) {
                        while (node) {
                            if (this.isTag(node, tags).length) {
                                return node;
                            }
                            node = node.parentNode;
                        }
                        return null;
                    },
                    collapse: function (_fbf) {
                        if (window.getSelection) {
                            var _fc0 = win.global.getSelection();
                            if (_fc0.removeAllRanges) {
                                if (_fbf) {
                                    _fc0.collapseToStart();
                                } else {
                                    _fc0.collapseToEnd();
                                }
                            } else {
                                _fc0.collapse(_fbf);
                            }
                        } else {
                            if (has("ie")) {
                                var _fc1 = win.doc.selection.createRange();
                                _fc1.collapse(_fbf);
                                _fc1.select();
                            }
                        }
                    },
                    remove: function () {
                        var sel = win.doc.selection;
                        if (has("ie") < 9) {
                            if (sel.type.toLowerCase() != "none") {
                                sel.clear();
                            }
                            return sel;
                        } else {
                            sel = win.global.getSelection();
                            sel.deleteFromDocument();
                            return sel;
                        }
                    },
                    selectElementChildren: function (_fc2, _fc3) {
                        var _fc4 = win.global;
                        var doc = win.doc;
                        var _fc5;
                        _fc2 = dom.byId(_fc2);
                        if (doc.selection && has("ie") < 9 && win.body().createTextRange) {
                            _fc5 = _fc2.ownerDocument.body.createTextRange();
                            _fc5.moveToElementText(_fc2);
                            if (!_fc3) {
                                try {
                                    _fc5.select();
                                } catch (e) {}
                            }
                        } else {
                            if (_fc4.getSelection) {
                                var _fc6 = win.global.getSelection();
                                if (has("opera")) {
                                    if (_fc6.rangeCount) {
                                        _fc5 = _fc6.getRangeAt(0);
                                    } else {
                                        _fc5 = doc.createRange();
                                    }
                                    _fc5.setStart(_fc2, 0);
                                    _fc5.setEnd(_fc2, (_fc2.nodeType == 3) ? _fc2.length : _fc2.childNodes.length);
                                    _fc6.addRange(_fc5);
                                } else {
                                    _fc6.selectAllChildren(_fc2);
                                }
                            }
                        }
                    },
                    selectElement: function (_fc7, _fc8) {
                        var _fc9;
                        var doc = win.doc;
                        var _fca = win.global;
                        _fc7 = dom.byId(_fc7);
                        if (has("ie") < 9 && win.body().createTextRange) {
                            try {
                                var tg = _fc7.tagName ? _fc7.tagName.toLowerCase() : "";
                                if (tg === "img" || tg === "table") {
                                    _fc9 = win.body().createControlRange();
                                } else {
                                    _fc9 = win.body().createRange();
                                }
                                _fc9.addElement(_fc7);
                                if (!_fc8) {
                                    _fc9.select();
                                }
                            } catch (e) {
                                this.selectElementChildren(_fc7, _fc8);
                            }
                        } else {
                            if (_fca.getSelection) {
                                var _fcb = _fca.getSelection();
                                _fc9 = doc.createRange();
                                if (_fcb.removeAllRanges) {
                                    if (has("opera")) {
                                        if (_fcb.getRangeAt(0)) {
                                            _fc9 = _fcb.getRangeAt(0);
                                        }
                                    }
                                    _fc9.selectNode(_fc7);
                                    _fcb.removeAllRanges();
                                    _fcb.addRange(_fc9);
                                }
                            }
                        }
                    },
                    inSelection: function (node) {
                        if (node) {
                            var _fcc;
                            var doc = win.doc;
                            var _fcd;
                            if (win.global.getSelection) {
                                var sel = win.global.getSelection();
                                if (sel && sel.rangeCount > 0) {
                                    _fcd = sel.getRangeAt(0);
                                }
                                if (_fcd && _fcd.compareBoundaryPoints && doc.createRange) {
                                    try {
                                        _fcc = doc.createRange();
                                        _fcc.setStart(node, 0);
                                        if (_fcd.compareBoundaryPoints(_fcd.START_TO_END, _fcc) === 1) {
                                            return true;
                                        }
                                    } catch (e) {}
                                }
                            } else {
                                if (doc.selection) {
                                    _fcd = doc.selection.createRange();
                                    try {
                                        _fcc = node.ownerDocument.body.createControlRange();
                                        if (_fcc) {
                                            _fcc.addElement(node);
                                        }
                                    } catch (e1) {
                                        try {
                                            _fcc = node.ownerDocument.body.createTextRange();
                                            _fcc.moveToElementText(node);
                                        } catch (e2) {}
                                    }
                                    if (_fcd && _fcc) {
                                        if (_fcd.compareEndPoints("EndToStart", _fcc) === 1) {
                                            return true;
                                        }
                                    }
                                }
                            }
                        }
                        return false;
                    }
                });
                return _fb3._editor.selection;
            });
        },
        "dijit/_editor/range": function () {
            define("dijit/_editor/range", ["dojo/_base/array", "dojo/_base/declare", "dojo/_base/lang", "dojo/_base/window", ".."], function (_fce, _fcf, lang, win, _fd0) {
                _fd0.range = {};
                _fd0.range.getIndex = function (node, _fd1) {
                    var ret = [],
                        retR = [];
                    var _fd2 = node;
                    var _fd3, n;
                    while (node != _fd1) {
                        var i = 0;
                        _fd3 = node.parentNode;
                        while ((n = _fd3.childNodes[i++])) {
                            if (n === node) {
                                --i;
                                break;
                            }
                        }
                        ret.unshift(i);
                        retR.unshift(i - _fd3.childNodes.length);
                        node = _fd3;
                    }
                    if (ret.length > 0 && _fd2.nodeType == 3) {
                        n = _fd2.previousSibling;
                        while (n && n.nodeType == 3) {
                            ret[ret.length - 1]--;
                            n = n.previousSibling;
                        }
                        n = _fd2.nextSibling;
                        while (n && n.nodeType == 3) {
                            retR[retR.length - 1]++;
                            n = n.nextSibling;
                        }
                    }
                    return {
                        o: ret,
                        r: retR
                    };
                };
                _fd0.range.getNode = function (_fd4, _fd5) {
                    if (!lang.isArray(_fd4) || _fd4.length == 0) {
                        return _fd5;
                    }
                    var node = _fd5;
                    _fce.every(_fd4, function (i) {
                        if (i >= 0 && i < node.childNodes.length) {
                            node = node.childNodes[i];
                        } else {
                            node = null;
                            return false;
                        }
                        return true;
                    });
                    return node;
                };
                _fd0.range.getCommonAncestor = function (n1, n2, root) {
                    root = root || n1.ownerDocument.body;
                    var _fd6 = function (n) {
                            var as = [];
                            while (n) {
                                as.unshift(n);
                                if (n !== root) {
                                    n = n.parentNode;
                                } else {
                                    break;
                                }
                            }
                            return as;
                        };
                    var n1as = _fd6(n1);
                    var n2as = _fd6(n2);
                    var m = Math.min(n1as.length, n2as.length);
                    var com = n1as[0];
                    for (var i = 1; i < m; i++) {
                        if (n1as[i] === n2as[i]) {
                            com = n1as[i];
                        } else {
                            break;
                        }
                    }
                    return com;
                };
                _fd0.range.getAncestor = function (node, _fd7, root) {
                    root = root || node.ownerDocument.body;
                    while (node && node !== root) {
                        var name = node.nodeName.toUpperCase();
                        if (_fd7.test(name)) {
                            return node;
                        }
                        node = node.parentNode;
                    }
                    return null;
                };
                _fd0.range.BlockTagNames = /^(?:P|DIV|H1|H2|H3|H4|H5|H6|ADDRESS|PRE|OL|UL|LI|DT|DE)$/;
                _fd0.range.getBlockAncestor = function (node, _fd8, root) {
                    root = root || node.ownerDocument.body;
                    _fd8 = _fd8 || _fd0.range.BlockTagNames;
                    var _fd9 = null,
                        _fda;
                    while (node && node !== root) {
                        var name = node.nodeName.toUpperCase();
                        if (!_fd9 && _fd8.test(name)) {
                            _fd9 = node;
                        }
                        if (!_fda && (/^(?:BODY|TD|TH|CAPTION)$/).test(name)) {
                            _fda = node;
                        }
                        node = node.parentNode;
                    }
                    return {
                        blockNode: _fd9,
                        blockContainer: _fda || node.ownerDocument.body
                    };
                };
                _fd0.range.atBeginningOfContainer = function (_fdb, node, _fdc) {
                    var _fdd = false;
                    var _fde = (_fdc == 0);
                    if (!_fde && node.nodeType == 3) {
                        if (/^[\s\xA0]+$/.test(node.nodeValue.substr(0, _fdc))) {
                            _fde = true;
                        }
                    }
                    if (_fde) {
                        var _fdf = node;
                        _fdd = true;
                        while (_fdf && _fdf !== _fdb) {
                            if (_fdf.previousSibling) {
                                _fdd = false;
                                break;
                            }
                            _fdf = _fdf.parentNode;
                        }
                    }
                    return _fdd;
                };
                _fd0.range.atEndOfContainer = function (_fe0, node, _fe1) {
                    var _fe2 = false;
                    var _fe3 = (_fe1 == (node.length || node.childNodes.length));
                    if (!_fe3 && node.nodeType == 3) {
                        if (/^[\s\xA0]+$/.test(node.nodeValue.substr(_fe1))) {
                            _fe3 = true;
                        }
                    }
                    if (_fe3) {
                        var _fe4 = node;
                        _fe2 = true;
                        while (_fe4 && _fe4 !== _fe0) {
                            if (_fe4.nextSibling) {
                                _fe2 = false;
                                break;
                            }
                            _fe4 = _fe4.parentNode;
                        }
                    }
                    return _fe2;
                };
                _fd0.range.adjacentNoneTextNode = function (_fe5, next) {
                    var node = _fe5;
                    var len = (0 - _fe5.length) || 0;
                    var prop = next ? "nextSibling" : "previousSibling";
                    while (node) {
                        if (node.nodeType != 3) {
                            break;
                        }
                        len += node.length;
                        node = node[prop];
                    }
                    return [node, len];
                };
                _fd0.range._w3c = Boolean(window["getSelection"]);
                _fd0.range.create = function (_fe6) {
                    if (_fd0.range._w3c) {
                        return (_fe6 || win.global).document.createRange();
                    } else {
                        return new _fd0.range.W3CRange;
                    }
                };
                _fd0.range.getSelection = function (win, _fe7) {
                    if (_fd0.range._w3c) {
                        return win.getSelection();
                    } else {
                        var s = new _fd0.range.ie.selection(win);
                        if (!_fe7) {
                            s._getCurrentSelection();
                        }
                        return s;
                    }
                };
                if (!_fd0.range._w3c) {
                    _fd0.range.ie = {
                        cachedSelection: {},
                        selection: function (win) {
                            this._ranges = [];
                            this.addRange = function (r, _fe8) {
                                this._ranges.push(r);
                                if (!_fe8) {
                                    r._select();
                                }
                                this.rangeCount = this._ranges.length;
                            };
                            this.removeAllRanges = function () {
                                this._ranges = [];
                                this.rangeCount = 0;
                            };
                            var _fe9 = function () {
                                    var r = win.document.selection.createRange();
                                    var type = win.document.selection.type.toUpperCase();
                                    if (type == "CONTROL") {
                                        return new _fd0.range.W3CRange(_fd0.range.ie.decomposeControlRange(r));
                                    } else {
                                        return new _fd0.range.W3CRange(_fd0.range.ie.decomposeTextRange(r));
                                    }
                                };
                            this.getRangeAt = function (i) {
                                return this._ranges[i];
                            };
                            this._getCurrentSelection = function () {
                                this.removeAllRanges();
                                var r = _fe9();
                                if (r) {
                                    this.addRange(r, true);
                                    this.isCollapsed = r.collapsed;
                                } else {
                                    this.isCollapsed = true;
                                }
                            };
                        },
                        decomposeControlRange: function (_fea) {
                            var _feb = _fea.item(0),
                                _fec = _fea.item(_fea.length - 1);
                            var _fed = _feb.parentNode,
                                _fee = _fec.parentNode;
                            var _fef = _fd0.range.getIndex(_feb, _fed).o[0];
                            var _ff0 = _fd0.range.getIndex(_fec, _fee).o[0] + 1;
                            return [_fed, _fef, _fee, _ff0];
                        },
                        getEndPoint: function (_ff1, end) {
                            var _ff2 = _ff1.duplicate();
                            _ff2.collapse(!end);
                            var _ff3 = "EndTo" + (end ? "End" : "Start");
                            var _ff4 = _ff2.parentElement();
                            var _ff5, _ff6, _ff7;
                            if (_ff4.childNodes.length > 0) {
                                _fce.every(_ff4.childNodes, function (node, i) {
                                    var _ff8;
                                    if (node.nodeType != 3) {
                                        _ff2.moveToElementText(node);
                                        if (_ff2.compareEndPoints(_ff3, _ff1) > 0) {
                                            if (_ff7 && _ff7.nodeType == 3) {
                                                _ff5 = _ff7;
                                                _ff8 = true;
                                            } else {
                                                _ff5 = _ff4;
                                                _ff6 = i;
                                                return false;
                                            }
                                        } else {
                                            if (i == _ff4.childNodes.length - 1) {
                                                _ff5 = _ff4;
                                                _ff6 = _ff4.childNodes.length;
                                                return false;
                                            }
                                        }
                                    } else {
                                        if (i == _ff4.childNodes.length - 1) {
                                            _ff5 = node;
                                            _ff8 = true;
                                        }
                                    }
                                    if (_ff8 && _ff5) {
                                        var _ff9 = _fd0.range.adjacentNoneTextNode(_ff5)[0];
                                        if (_ff9) {
                                            _ff5 = _ff9.nextSibling;
                                        } else {
                                            _ff5 = _ff4.firstChild;
                                        }
                                        var _ffa = _fd0.range.adjacentNoneTextNode(_ff5);
                                        _ff9 = _ffa[0];
                                        var _ffb = _ffa[1];
                                        if (_ff9) {
                                            _ff2.moveToElementText(_ff9);
                                            _ff2.collapse(false);
                                        } else {
                                            _ff2.moveToElementText(_ff4);
                                        }
                                        _ff2.setEndPoint(_ff3, _ff1);
                                        _ff6 = _ff2.text.length - _ffb;
                                        return false;
                                    }
                                    _ff7 = node;
                                    return true;
                                });
                            } else {
                                _ff5 = _ff4;
                                _ff6 = 0;
                            }
                            if (!end && _ff5.nodeType == 1 && _ff6 == _ff5.childNodes.length) {
                                var _ffc = _ff5.nextSibling;
                                if (_ffc && _ffc.nodeType == 3) {
                                    _ff5 = _ffc;
                                    _ff6 = 0;
                                }
                            }
                            return [_ff5, _ff6];
                        },
                        setEndPoint: function (_ffd, _ffe, _fff) {
                            var _1000 = _ffd.duplicate(),
                                node, len;
                            if (_ffe.nodeType != 3) {
                                if (_fff > 0) {
                                    node = _ffe.childNodes[_fff - 1];
                                    if (node) {
                                        if (node.nodeType == 3) {
                                            _ffe = node;
                                            _fff = node.length;
                                        } else {
                                            if (node.nextSibling && node.nextSibling.nodeType == 3) {
                                                _ffe = node.nextSibling;
                                                _fff = 0;
                                            } else {
                                                _1000.moveToElementText(node.nextSibling ? node : _ffe);
                                                var _1001 = node.parentNode;
                                                var _1002 = _1001.insertBefore(node.ownerDocument.createTextNode(" "), node.nextSibling);
                                                _1000.collapse(false);
                                                _1001.removeChild(_1002);
                                            }
                                        }
                                    }
                                } else {
                                    _1000.moveToElementText(_ffe);
                                    _1000.collapse(true);
                                }
                            }
                            if (_ffe.nodeType == 3) {
                                var _1003 = _fd0.range.adjacentNoneTextNode(_ffe);
                                var _1004 = _1003[0];
                                len = _1003[1];
                                if (_1004) {
                                    _1000.moveToElementText(_1004);
                                    _1000.collapse(false);
                                    if (_1004.contentEditable != "inherit") {
                                        len++;
                                    }
                                } else {
                                    _1000.moveToElementText(_ffe.parentNode);
                                    _1000.collapse(true);
                                }
                                _fff += len;
                                if (_fff > 0) {
                                    if (_1000.move("character", _fff) != _fff) {
                                        console.error("Error when moving!");
                                    }
                                }
                            }
                            return _1000;
                        },
                        decomposeTextRange: function (range) {
                            var _1005 = _fd0.range.ie.getEndPoint(range);
                            var _1006 = _1005[0],
                                _1007 = _1005[1];
                            var _1008 = _1005[0],
                                _1009 = _1005[1];
                            if (range.htmlText.length) {
                                if (range.htmlText == range.text) {
                                    _1009 = _1007 + range.text.length;
                                } else {
                                    _1005 = _fd0.range.ie.getEndPoint(range, true);
                                    _1008 = _1005[0], _1009 = _1005[1];
                                }
                            }
                            return [_1006, _1007, _1008, _1009];
                        },
                        setRange: function (range, _100a, _100b, _100c, _100d, _100e) {
                            var start = _fd0.range.ie.setEndPoint(range, _100a, _100b);
                            range.setEndPoint("StartToStart", start);
                            if (!_100e) {
                                var end = _fd0.range.ie.setEndPoint(range, _100c, _100d);
                            }
                            range.setEndPoint("EndToEnd", end || start);
                            return range;
                        }
                    };
                    _fcf("dijit.range.W3CRange", null, {
                        constructor: function () {
                            if (arguments.length > 0) {
                                this.setStart(arguments[0][0], arguments[0][1]);
                                this.setEnd(arguments[0][2], arguments[0][3]);
                            } else {
                                this.commonAncestorContainer = null;
                                this.startContainer = null;
                                this.startOffset = 0;
                                this.endContainer = null;
                                this.endOffset = 0;
                                this.collapsed = true;
                            }
                        },
                        _updateInternal: function () {
                            if (this.startContainer !== this.endContainer) {
                                this.commonAncestorContainer = _fd0.range.getCommonAncestor(this.startContainer, this.endContainer);
                            } else {
                                this.commonAncestorContainer = this.startContainer;
                            }
                            this.collapsed = (this.startContainer === this.endContainer) && (this.startOffset == this.endOffset);
                        },
                        setStart: function (node, _100f) {
                            _100f = parseInt(_100f);
                            if (this.startContainer === node && this.startOffset == _100f) {
                                return;
                            }
                            delete this._cachedBookmark;
                            this.startContainer = node;
                            this.startOffset = _100f;
                            if (!this.endContainer) {
                                this.setEnd(node, _100f);
                            } else {
                                this._updateInternal();
                            }
                        },
                        setEnd: function (node, _1010) {
                            _1010 = parseInt(_1010);
                            if (this.endContainer === node && this.endOffset == _1010) {
                                return;
                            }
                            delete this._cachedBookmark;
                            this.endContainer = node;
                            this.endOffset = _1010;
                            if (!this.startContainer) {
                                this.setStart(node, _1010);
                            } else {
                                this._updateInternal();
                            }
                        },
                        setStartAfter: function (node, _1011) {
                            this._setPoint("setStart", node, _1011, 1);
                        },
                        setStartBefore: function (node, _1012) {
                            this._setPoint("setStart", node, _1012, 0);
                        },
                        setEndAfter: function (node, _1013) {
                            this._setPoint("setEnd", node, _1013, 1);
                        },
                        setEndBefore: function (node, _1014) {
                            this._setPoint("setEnd", node, _1014, 0);
                        },
                        _setPoint: function (what, node, _1015, ext) {
                            var index = _fd0.range.getIndex(node, node.parentNode).o;
                            this[what](node.parentNode, index.pop() + ext);
                        },
                        _getIERange: function () {
                            var r = (this._body || this.endContainer.ownerDocument.body).createTextRange();
                            _fd0.range.ie.setRange(r, this.startContainer, this.startOffset, this.endContainer, this.endOffset, this.collapsed);
                            return r;
                        },
                        getBookmark: function () {
                            this._getIERange();
                            return this._cachedBookmark;
                        },
                        _select: function () {
                            var r = this._getIERange();
                            r.select();
                        },
                        deleteContents: function () {
                            var s = this.startContainer,
                                r = this._getIERange();
                            if (s.nodeType === 3 && !this.startOffset) {
                                this.setStartBefore(s);
                            }
                            r.pasteHTML("");
                            this.endContainer = this.startContainer;
                            this.endOffset = this.startOffset;
                            this.collapsed = true;
                        },
                        cloneRange: function () {
                            var r = new _fd0.range.W3CRange([this.startContainer, this.startOffset, this.endContainer, this.endOffset]);
                            r._body = this._body;
                            return r;
                        },
                        detach: function () {
                            this._body = null;
                            this.commonAncestorContainer = null;
                            this.startContainer = null;
                            this.startOffset = 0;
                            this.endContainer = null;
                            this.endOffset = 0;
                            this.collapsed = true;
                        }
                    });
                }
                return _fd0.range;
            });
        },
        "dijit/_editor/html": function () {
            define("dijit/_editor/html", ["dojo/_base/lang", "dojo/_base/sniff", ".."], function (lang, has, dijit) {
                lang.getObject("_editor", true, dijit);
                dijit._editor.escapeXml = function (str, _1016) {
                    str = str.replace(/&/gm, "&amp;").replace(/</gm, "&lt;").replace(/>/gm, "&gt;").replace(/"/gm, "&quot;");
                    if (!_1016) {
                        str = str.replace(/'/gm, "&#39;");
                    }
                    return str;
                };
                dijit._editor.getNodeHtml = function (node) {
                    var _1017;
                    switch (node.nodeType) {
                    case 1:
                        var lName = node.nodeName.toLowerCase();
                        if (!lName || lName.charAt(0) == "/") {
                            return "";
                        }
                        _1017 = "<" + lName;
                        var _1018 = [];
                        var attr;
                        if (has("ie") && node.outerHTML) {
                            var s = node.outerHTML;
                            s = s.substr(0, s.indexOf(">")).replace(/(['"])[^"']*\1/g, "");
                            var reg = /(\b\w+)\s?=/g;
                            var m, key;
                            while ((m = reg.exec(s))) {
                                key = m[1];
                                if (key.substr(0, 3) != "_dj") {
                                    if (key == "src" || key == "href") {
                                        if (node.getAttribute("_djrealurl")) {
                                            _1018.push([key, node.getAttribute("_djrealurl")]);
                                            continue;
                                        }
                                    }
                                    var val, match;
                                    switch (key) {
                                    case "style":
                                        val = node.style.cssText.toLowerCase();
                                        break;
                                    case "class":
                                        val = node.className;
                                        break;
                                    case "width":
                                        if (lName === "img") {
                                            match = /width=(\S+)/i.exec(s);
                                            if (match) {
                                                val = match[1];
                                            }
                                            break;
                                        }
                                    case "height":
                                        if (lName === "img") {
                                            match = /height=(\S+)/i.exec(s);
                                            if (match) {
                                                val = match[1];
                                            }
                                            break;
                                        }
                                    default:
                                        val = node.getAttribute(key);
                                    }
                                    if (val != null) {
                                        _1018.push([key, val.toString()]);
                                    }
                                }
                            }
                        } else {
                            var i = 0;
                            while ((attr = node.attributes[i++])) {
                                var n = attr.name;
                                if (n.substr(0, 3) != "_dj") {
                                    var v = attr.value;
                                    if (n == "src" || n == "href") {
                                        if (node.getAttribute("_djrealurl")) {
                                            v = node.getAttribute("_djrealurl");
                                        }
                                    }
                                    _1018.push([n, v]);
                                }
                            }
                        }
                        _1018.sort(function (a, b) {
                            return a[0] < b[0] ? -1 : (a[0] == b[0] ? 0 : 1);
                        });
                        var j = 0;
                        while ((attr = _1018[j++])) {
                            _1017 += " " + attr[0] + "=\"" + (lang.isString(attr[1]) ? dijit._editor.escapeXml(attr[1], true) : attr[1]) + "\"";
                        }
                        if (lName === "script") {
                            _1017 += ">" + node.innerHTML + "</" + lName + ">";
                        } else {
                            if (node.childNodes.length) {
                                _1017 += ">" + dijit._editor.getChildrenHtml(node) + "</" + lName + ">";
                            } else {
                                switch (lName) {
                                case "br":
                                case "hr":
                                case "img":
                                case "input":
                                case "base":
                                case "meta":
                                case "area":
                                case "basefont":
                                    _1017 += " />";
                                    break;
                                default:
                                    _1017 += "></" + lName + ">";
                                }
                            }
                        }
                        break;
                    case 4:
                    case 3:
                        _1017 = dijit._editor.escapeXml(node.nodeValue, true);
                        break;
                    case 8:
                        _1017 = "<!--" + dijit._editor.escapeXml(node.nodeValue, true) + "-->";
                        break;
                    default:
                        _1017 = "<!-- Element not recognized - Type: " + node.nodeType + " Name: " + node.nodeName + "-->";
                    }
                    return _1017;
                };
                dijit._editor.getChildrenHtml = function (dom) {
                    var out = "";
                    if (!dom) {
                        return out;
                    }
                    var nodes = dom["childNodes"] || dom;
                    var _1019 = !has("ie") || nodes !== dom;
                    var node, i = 0;
                    while ((node = nodes[i++])) {
                        if (!_1019 || node.parentNode == dom) {
                            out += dijit._editor.getNodeHtml(node);
                        }
                    }
                    return out;
                };
                return dijit._editor;
            });
        },
        "dijit/_editor/nls/commands": function () {
            define("dijit/_editor/nls/commands", {
                root: ({
                    "bold": "Bold",
                    "copy": "Copy",
                    "cut": "Cut",
                    "delete": "Delete",
                    "indent": "Indent",
                    "insertHorizontalRule": "Horizontal Rule",
                    "insertOrderedList": "Numbered List",
                    "insertUnorderedList": "Bullet List",
                    "italic": "Italic",
                    "justifyCenter": "Align Center",
                    "justifyFull": "Justify",
                    "justifyLeft": "Align Left",
                    "justifyRight": "Align Right",
                    "outdent": "Outdent",
                    "paste": "Paste",
                    "redo": "Redo",
                    "removeFormat": "Remove Format",
                    "selectAll": "Select All",
                    "strikethrough": "Strikethrough",
                    "subscript": "Subscript",
                    "superscript": "Superscript",
                    "underline": "Underline",
                    "undo": "Undo",
                    "unlink": "Remove Link",
                    "createLink": "Create Link",
                    "toggleDir": "Toggle Direction",
                    "insertImage": "Insert Image",
                    "insertTable": "Insert/Edit Table",
                    "toggleTableBorder": "Toggle Table Border",
                    "deleteTable": "Delete Table",
                    "tableProp": "Table Property",
                    "htmlToggle": "HTML Source",
                    "foreColor": "Foreground Color",
                    "hiliteColor": "Background Color",
                    "plainFormatBlock": "Paragraph Style",
                    "formatBlock": "Paragraph Style",
                    "fontSize": "Font Size",
                    "fontName": "Font Name",
                    "tabIndent": "Tab Indent",
                    "fullScreen": "Toggle Full Screen",
                    "viewSource": "View HTML Source",
                    "print": "Print",
                    "newPage": "New Page",
                    "systemShortcut": "The \"${0}\" action is only available in your browser using a keyboard shortcut. Use ${1}.",
                    "ctrlKey": "ctrl+${0}",
                    "appleKey": "⌘${0}"
                }),
                "zh": true,
                "zh-tw": true,
                "tr": true,
                "th": true,
                "sv": true,
                "sl": true,
                "sk": true,
                "ru": true,
                "ro": true,
                "pt": true,
                "pt-pt": true,
                "pl": true,
                "nl": true,
                "nb": true,
                "ko": true,
                "kk": true,
                "ja": true,
                "it": true,
                "hu": true,
                "hr": true,
                "he": true,
                "fr": true,
                "fi": true,
                "es": true,
                "el": true,
                "de": true,
                "da": true,
                "cs": true,
                "ca": true,
                "az": true,
                "ar": true
            });
        },
        "dojox/grid/enhanced/plugins/filter/FilterStatusTip": function () {
            define("dojox/grid/enhanced/plugins/filter/FilterStatusTip", ["dojo/_base/declare", "dojo/_base/array", "dojo/_base/lang", "dojo/query", "dojo/cache", "dojo/string", "dojo/date/locale", "dijit/_Widget", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "dijit/TooltipDialog", "dijit/form/Button", "dijit/_base/popup", "dojo/i18n!../../nls/Filter"], function (_101a, array, lang, query, cache, _101b, _101c, _101d, _101e, _101f, _1020, _1021, popup) {
                var _1022 = "",
                    _1023 = "",
                    _1024 = "",
                    _1025 = "",
                    _1026 = "dojoxGridFStatusTipOddRow",
                    _1027 = "dojoxGridFStatusTipHandle",
                    _1028 = "dojoxGridFStatusTipCondition",
                    _1029 = "dojoxGridFStatusTipDelRuleBtnIcon",
                    _102a = "</tbody></table>";
                var _102b = _101a("dojox.grid.enhanced.plugins.filter.FilterStatusPane", [_101d, _101e], {
                    templateString: cache("dojox.grid", "enhanced/templates/FilterStatusPane.html")
                });
                return _101a("dojox.grid.enhanced.plugins.filter.FilterStatusTip", null, {
                    constructor: function (args) {
                        var _102c = this.plugin = args.plugin;
                        this._statusHeader = ["<table border='0' cellspacing='0' class='", _1022, "'><thead><tr class='", _1023, "'><th class='", _1024, "'><div>", _102c.nls["statusTipHeaderColumn"], "</div></th><th class='", _1024, " lastColumn'><div>", _102c.nls["statusTipHeaderCondition"], "</div></th></tr></thead><tbody>"].join("");
                        this._removedCriterias = [];
                        this._rules = [];
                        this.statusPane = new _102b();
                        this._dlg = new _1020({
                            "class": "dojoxGridFStatusTipDialog",
                            content: this.statusPane,
                            autofocus: false
                        });
                        this._dlg.connect(this._dlg.domNode, "onmouseleave", lang.hitch(this, this.closeDialog));
                        this._dlg.connect(this._dlg.domNode, "click", lang.hitch(this, this._modifyFilter));
                    },
                    destroy: function () {
                        this._dlg.destroyRecursive();
                    },
                    showDialog: function (pos_x, pos_y, _102d) {
                        this._pos = {
                            x: pos_x,
                            y: pos_y
                        };
                        popup.close(this._dlg);
                        this._removedCriterias = [];
                        this._rules = [];
                        this._updateStatus(_102d);
                        popup.open({
                            popup: this._dlg,
                            parent: this.plugin.filterBar,
                            onCancel: function () {},
                            x: pos_x - 12,
                            y: pos_y - 3
                        });
                    },
                    closeDialog: function () {
                        popup.close(this._dlg);
                        if (this._removedCriterias.length) {
                            this.plugin.filterDefDialog.removeCriteriaBoxes(this._removedCriterias);
                            this._removedCriterias = [];
                            this.plugin.filterDefDialog.onFilter();
                        }
                    },
                    _updateStatus: function (_102e) {
                        var res, p = this.plugin,
                            nls = p.nls,
                            sp = this.statusPane,
                            fdg = p.filterDefDialog;
                        if (fdg.getCriteria() === 0) {
                            sp.statusTitle.innerHTML = nls["statusTipTitleNoFilter"];
                            sp.statusRel.innerHTML = "";
                            var cell = p.grid.layout.cells[_102e];
                            var _102f = cell ? "'" + (cell.name || cell.field) + "'" : nls["anycolumn"];
                            res = _101b.substitute(nls["statusTipMsg"], [_102f]);
                        } else {
                            sp.statusTitle.innerHTML = nls["statusTipTitleHasFilter"];
                            sp.statusRel.innerHTML = fdg._relOpCls == "logicall" ? nls["statusTipRelAll"] : nls["statusTipRelAny"];
                            this._rules = [];
                            var i = 0,
                                c = fdg.getCriteria(i++);
                            while (c) {
                                c.index = i - 1;
                                this._rules.push(c);
                                c = fdg.getCriteria(i++);
                            }
                            res = this._createStatusDetail();
                        }
                        sp.statusDetailNode.innerHTML = res;
                        this._addButtonForRules();
                    },
                    _createStatusDetail: function () {
                        return this._statusHeader + array.map(this._rules, function (rule, i) {
                            return this._getCriteriaStr(rule, i);
                        }, this).join("") + _102a;
                    },
                    _addButtonForRules: function () {
                        if (this._rules.length > 1) {
                            query("." + _1027, this.statusPane.statusDetailNode).forEach(lang.hitch(this, function (nd, idx) {
                                (new _1021({
                                    label: this.plugin.nls["removeRuleButton"],
                                    showLabel: false,
                                    iconClass: _1029,
                                    onClick: lang.hitch(this, function (e) {
                                        e.stopPropagation();
                                        this._removedCriterias.push(this._rules[idx].index);
                                        this._rules.splice(idx, 1);
                                        this.statusPane.statusDetailNode.innerHTML = this._createStatusDetail();
                                        this._addButtonForRules();
                                    })
                                })).placeAt(nd, "last");
                            }));
                        }
                    },
                    _getCriteriaStr: function (c, _1030) {
                        var res = ["<tr class='", _1025, " ", (_1030 % 2 ? _1026 : ""), "'><td class='", _1024, "'>", c.colTxt, "</td><td class='", _1024, "'><div class='", _1027, "'><span class='", _1028, "'>", c.condTxt, "&nbsp;</span>", c.formattedVal, "</div></td></tr>"];
                        return res.join("");
                    },
                    _modifyFilter: function () {
                        this.closeDialog();
                        var p = this.plugin;
                        p.filterDefDialog.showDialog(p.filterBar.getColumnIdx(this._pos.x));
                    }
                });
                return FilterStatusTip;
            });
        },
        "dijit/TooltipDialog": function () {
            require({
                cache: {
                    "url:dijit/templates/TooltipDialog.html": "<div role=\"presentation\" tabIndex=\"-1\">\n\t<div class=\"dijitTooltipContainer\" role=\"presentation\">\n\t\t<div class =\"dijitTooltipContents dijitTooltipFocusNode\" data-dojo-attach-point=\"containerNode\" role=\"dialog\"></div>\n\t</div>\n\t<div class=\"dijitTooltipConnector\" role=\"presentation\"></div>\n</div>\n"
                }
            });
            define("dijit/TooltipDialog", ["dojo/_base/declare", "dojo/dom-class", "dojo/_base/event", "dojo/keys", "dojo/_base/lang", "./focus", "./layout/ContentPane", "./_DialogMixin", "./form/_FormMixin", "./_TemplatedMixin", "dojo/text!./templates/TooltipDialog.html", "."], function (_1031, _1032, event, keys, lang, focus, _1033, _1034, _1035, _1036, _1037, dijit) {
                return _1031("dijit.TooltipDialog", [_1033, _1036, _1035, _1034], {
                    title: "",
                    doLayout: false,
                    autofocus: true,
                    baseClass: "dijitTooltipDialog",
                    _firstFocusItem: null,
                    _lastFocusItem: null,
                    templateString: _1037,
                    _setTitleAttr: function (title) {
                        this.containerNode.title = title;
                        this._set("title", title);
                    },
                    postCreate: function () {
                        this.inherited(arguments);
                        this.connect(this.containerNode, "onkeypress", "_onKey");
                    },
                    orient: function (node, _1038, _1039) {
                        var newC = "dijitTooltipAB" + (_1039.charAt(1) == "L" ? "Left" : "Right") + " dijitTooltip" + (_1039.charAt(0) == "T" ? "Below" : "Above");
                        _1032.replace(this.domNode, newC, this._currentOrientClass || "");
                        this._currentOrientClass = newC;
                    },
                    focus: function () {
                        this._getFocusItems(this.containerNode);
                        focus.focus(this._firstFocusItem);
                    },
                    onOpen: function (pos) {
                        this.orient(this.domNode, pos.aroundCorner, pos.corner);
                        this._onShow();
                    },
                    onClose: function () {
                        this.onHide();
                    },
                    _onKey: function (evt) {
                        var node = evt.target;
                        if (evt.charOrCode === keys.TAB) {
                            this._getFocusItems(this.containerNode);
                        }
                        var _103a = (this._firstFocusItem == this._lastFocusItem);
                        if (evt.charOrCode == keys.ESCAPE) {
                            setTimeout(lang.hitch(this, "onCancel"), 0);
                            event.stop(evt);
                        } else {
                            if (node == this._firstFocusItem && evt.shiftKey && evt.charOrCode === keys.TAB) {
                                if (!_103a) {
                                    focus.focus(this._lastFocusItem);
                                }
                                event.stop(evt);
                            } else {
                                if (node == this._lastFocusItem && evt.charOrCode === keys.TAB && !evt.shiftKey) {
                                    if (!_103a) {
                                        focus.focus(this._firstFocusItem);
                                    }
                                    event.stop(evt);
                                } else {
                                    if (evt.charOrCode === keys.TAB) {
                                        evt.stopPropagation();
                                    }
                                }
                            }
                        }
                    }
                });
            });
        },
        "url:dijit/templates/TooltipDialog.html": "<div role=\"presentation\" tabIndex=\"-1\">\n\t<div class=\"dijitTooltipContainer\" role=\"presentation\">\n\t\t<div class =\"dijitTooltipContents dijitTooltipFocusNode\" data-dojo-attach-point=\"containerNode\" role=\"dialog\"></div>\n\t</div>\n\t<div class=\"dijitTooltipConnector\" role=\"presentation\"></div>\n</div>\n",
        "dijit/_base/popup": function () {
            define("dijit/_base/popup", ["dojo/dom-class", "../popup", "../BackgroundIframe"], function (_103b, popup) {
                var _103c = popup._createWrapper;
                popup._createWrapper = function (_103d) {
                    if (!_103d.declaredClass) {
                        _103d = {
                            _popupWrapper: (_103d.parentNode && _103b.contains(_103d.parentNode, "dijitPopup")) ? _103d.parentNode : null,
                            domNode: _103d,
                            destroy: function () {}
                        };
                    }
                    return _103c.call(this, _103d);
                };
                var _103e = popup.open;
                popup.open = function (args) {
                    if (args.orient && typeof args.orient != "string" && !("length" in args.orient)) {
                        var ary = [];
                        for (var key in args.orient) {
                            ary.push({
                                aroundCorner: key,
                                corner: args.orient[key]
                            });
                        }
                        args.orient = ary;
                    }
                    return _103e.call(this, args);
                };
                return popup;
            });
        },
        "dojox/grid/enhanced/nls/Filter": function () {
            define("dojox/grid/enhanced/nls/Filter", {
                root: ({
                    "clearFilterDialogTitle": "Clear Filter",
                    "filterDefDialogTitle": "Filter",
                    "ruleTitleTemplate": "Rule ${0}",
                    "conditionEqual": "equal",
                    "conditionNotEqual": "does not equal",
                    "conditionLess": "is less than",
                    "conditionLessEqual": "less than or equal",
                    "conditionLarger": "is greater than",
                    "conditionLargerEqual": "greater than or equal",
                    "conditionContains": "contains",
                    "conditionIs": "is",
                    "conditionStartsWith": "starts with",
                    "conditionEndWith": "ends with",
                    "conditionNotContain": "does not contain",
                    "conditionIsNot": "is not",
                    "conditionNotStartWith": "does not start with",
                    "conditionNotEndWith": "does not end with",
                    "conditionBefore": "before",
                    "conditionAfter": "after",
                    "conditionRange": "range",
                    "conditionIsEmpty": "is empty",
                    "all": "all",
                    "any": "any",
                    "relationAll": "all rules",
                    "waiRelAll": "Match all of the following rules:",
                    "relationAny": "any rules",
                    "waiRelAny": "Match any of the following rules:",
                    "relationMsgFront": "Match:",
                    "relationMsgTail": "",
                    "and": "and",
                    "or": "or",
                    "addRuleButton": "Add Rule",
                    "waiAddRuleButton": "Add a new rule",
                    "removeRuleButton": "Remove Rule",
                    "waiRemoveRuleButtonTemplate": "Remove rule ${0}",
                    "cancelButton": "Cancel",
                    "waiCancelButton": "Cancel this dialog",
                    "clearButton": "Clear",
                    "waiClearButton": "Clear the filter",
                    "filterButton": "Filter",
                    "waiFilterButton": "Submit the filter",
                    "columnSelectLabel": "Column",
                    "waiColumnSelectTemplate": "Column for rule ${0}",
                    "conditionSelectLabel": "Condition",
                    "waiConditionSelectTemplate": "Condition for rule ${0}",
                    "valueBoxLabel": "Value",
                    "waiValueBoxTemplate": "Enter value to filter for rule ${0}",
                    "rangeTo": "to",
                    "rangeTemplate": "from ${0} to ${1}",
                    "statusTipHeaderColumn": "Column",
                    "statusTipHeaderCondition": "Rules",
                    "statusTipTitle": "Filter Bar",
                    "statusTipMsg": "Click the filter bar here to filter on values in ${0}.",
                    "anycolumn": "any column",
                    "statusTipTitleNoFilter": "Filter Bar",
                    "statusTipTitleHasFilter": "Filter",
                    "statusTipRelAny": "Match any rules.",
                    "statusTipRelAll": "Match all rules.",
                    "defaultItemsName": "items",
                    "filterBarMsgHasFilterTemplate": "${0} of ${1} ${2} shown.",
                    "filterBarMsgNoFilterTemplate": "No filter applied",
                    "filterBarDefButton": "Define filter",
                    "waiFilterBarDefButton": "Filter the table",
                    "a11yFilterBarDefButton": "Filter...",
                    "filterBarClearButton": "Clear filter",
                    "waiFilterBarClearButton": "Clear the filter",
                    "closeFilterBarBtn": "Close filter bar",
                    "clearFilterMsg": "This will remove the filter and show all available records.",
                    "anyColumnOption": "Any Column",
                    "trueLabel": "True",
                    "falseLabel": "False"
                }),
                "ar": true,
                "ca": true,
                "cs": true,
                "da": true,
                "de": true,
                "el": true,
                "es": true,
                "fi": true,
                "fr": true,
                "he": true,
                "hr": true,
                "hu": true,
                "hr": true,
                "it": true,
                "ja": true,
                "kk": true,
                "ko": true,
                "nb": true,
                "nl": true,
                "pl": true,
                "pt": true,
                "pt-pt": true,
                "ro": true,
                "ru": true,
                "sk": true,
                "sl": true,
                "sv": true,
                "th": true,
                "tr": true,
                "zh": true,
                "zh-tw": true
            });
        },
        "dojox/grid/enhanced/plugins/filter/ClearFilterConfirm": function () {
            define("dojox/grid/enhanced/plugins/filter/ClearFilterConfirm", ["dojo/_base/declare", "dojo/cache", "dijit/_Widget", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin"], function (_103f, cache, _1040, _1041, _1042) {
                return _103f("dojox.grid.enhanced.plugins.filter.ClearFilterConfirm", [_1040, _1041, _1042], {
                    templateString: cache("dojox.grid", "enhanced/templates/ClearFilterConfirmPane.html"),
                    widgetsInTemplate: true,
                    plugin: null,
                    postMixInProperties: function () {
                        var nls = this.plugin.nls;
                        this._clearBtnLabel = nls["clearButton"];
                        this._cancelBtnLabel = nls["cancelButton"];
                        this._clearFilterMsg = nls["clearFilterMsg"];
                    },
                    postCreate: function () {
                        this.inherited(arguments);
                        this.cancelBtn.domNode.setAttribute("aria-label", this.plugin.nls["waiCancelButton"]);
                        this.clearBtn.domNode.setAttribute("aria-label", this.plugin.nls["waiClearButton"]);
                    },
                    uninitialize: function () {
                        this.plugin = null;
                    },
                    _onCancel: function () {
                        this.plugin.clearFilterDialog.hide();
                    },
                    _onClear: function () {
                        this.plugin.clearFilterDialog.hide();
                        this.plugin.filterDefDialog.clearFilter(this.plugin.filterDefDialog._clearWithoutRefresh);
                    }
                });
            });
        },
        "dojox/grid/enhanced/plugins/exporter/CSVWriter": function () {
            define("dojox/grid/enhanced/plugins/exporter/CSVWriter", ["dojo/_base/declare", "dojo/_base/array", "./_ExportWriter", "../Exporter"], function (_1043, array, _1044, _1045) {
                _1045.registerWriter("csv", "dojox.grid.enhanced.plugins.exporter.CSVWriter");
                return _1043("dojox.grid.enhanced.plugins.exporter.CSVWriter", _1044, {
                    _separator: ",",
                    _newline: "\r\n",
                    constructor: function (_1046) {
                        if (_1046) {
                            this._separator = _1046.separator ? _1046.separator : this._separator;
                            this._newline = _1046.newline ? _1046.newline : this._newline;
                        }
                        this._headers = [];
                        this._dataRows = [];
                    },
                    _formatCSVCell: function (_1047) {
                        if (_1047 === null || _1047 === undefined) {
                            return "";
                        }
                        var _1048 = String(_1047).replace(/"/g, "\"\"");
                        if (_1048.indexOf(this._separator) >= 0 || _1048.search(/[" \t\r\n]/) >= 0) {
                            _1048 = "\"" + _1048 + "\"";
                        }
                        return _1048;
                    },
                    beforeContentRow: function (_1049) {
                        var row = [],
                            func = this._formatCSVCell;
                        array.forEach(_1049.grid.layout.cells, function (cell) {
                            if (!cell.hidden && array.indexOf(_1049.spCols, cell.index) < 0) {
                                row.push(func(this._getExportDataForCell(_1049.rowIndex, _1049.row, cell, _1049.grid)));
                            }
                        }, this);
                        this._dataRows.push(row);
                        return false;
                    },
                    handleCell: function (_104a) {
                        var cell = _104a.cell;
                        if (_104a.isHeader && !cell.hidden && array.indexOf(_104a.spCols, cell.index) < 0) {
                            this._headers.push(cell.name || cell.field);
                        }
                    },
                    toString: function () {
                        var _104b = this._headers.join(this._separator);
                        for (var i = this._dataRows.length - 1; i >= 0; --i) {
                            this._dataRows[i] = this._dataRows[i].join(this._separator);
                        }
                        return _104b + this._newline + this._dataRows.join(this._newline);
                    }
                });
            });
        },
        "dojox/grid/enhanced/plugins/exporter/_ExportWriter": function () {
            define("dojox/grid/enhanced/plugins/exporter/_ExportWriter", ["dojo/_base/declare"], function (_104c) {
                return _104c("dojox.grid.enhanced.plugins.exporter._ExportWriter", null, {
                    constructor: function (_104d) {},
                    _getExportDataForCell: function (_104e, _104f, cell, grid) {
                        var data = (cell.get || grid.get).call(cell, _104e, _104f);
                        if (this.formatter) {
                            return this.formatter(data, cell, _104e, _104f);
                        } else {
                            return data;
                        }
                    },
                    beforeHeader: function (grid) {
                        return true;
                    },
                    afterHeader: function () {},
                    beforeContent: function (items) {
                        return true;
                    },
                    afterContent: function () {},
                    beforeContentRow: function (_1050) {
                        return true;
                    },
                    afterContentRow: function (_1051) {},
                    beforeView: function (_1052) {
                        return true;
                    },
                    afterView: function (_1053) {},
                    beforeSubrow: function (_1054) {
                        return true;
                    },
                    afterSubrow: function (_1055) {},
                    handleCell: function (_1056) {},
                    toString: function () {
                        return "";
                    }
                });
            });
        },
        "dojox/grid/enhanced/plugins/Exporter": function () {
            define("dojox/grid/enhanced/plugins/Exporter", ["dojo/_base/declare", "dojo/_base/array", "dojo/_base/lang", "../_Plugin", "../../_RowSelector", "../../EnhancedGrid", "../../cells/_base"], function (_1057, array, lang, _1058, _1059, _105a) {
                var _105b = lang.getObject("dojox.grid.cells");
                var _105c = _1057("dojox.grid.enhanced.plugins.Exporter", _1058, {
                    name: "exporter",
                    constructor: function (grid, args) {
                        this.grid = grid;
                        this.formatter = (args && lang.isObject(args)) && args.exportFormatter;
                        this._mixinGrid();
                    },
                    _mixinGrid: function () {
                        var g = this.grid;
                        g.exportTo = lang.hitch(this, this.exportTo);
                        g.exportGrid = lang.hitch(this, this.exportGrid);
                        g.exportSelected = lang.hitch(this, this.exportSelected);
                        g.setExportFormatter = lang.hitch(this, this.setExportFormatter);
                    },
                    setExportFormatter: function (_105d) {
                        this.formatter = _105d;
                    },
                    exportGrid: function (type, args, _105e) {
                        if (lang.isFunction(args)) {
                            _105e = args;
                            args = {};
                        }
                        if (!lang.isString(type) || !lang.isFunction(_105e)) {
                            return;
                        }
                        args = args || {};
                        var g = this.grid,
                            _105f = this,
                            _1060 = this._getExportWriter(type, args.writerArgs),
                            _1061 = (args.fetchArgs && lang.isObject(args.fetchArgs)) ? args.fetchArgs : {},
                            _1062 = _1061.onComplete;
                        if (g.store) {
                            _1061.onComplete = function (items, _1063) {
                                if (_1062) {
                                    _1062(items, _1063);
                                }
                                _105e(_105f._goThroughGridData(items, _1060));
                            };
                            _1061.sort = _1061.sort || g.getSortProps();
                            g._storeLayerFetch(_1061);
                        } else {
                            var start = _1061.start || 0,
                                count = _1061.count || -1,
                                items = [];
                            for (var i = start; i != start + count && i < g.rowCount; ++i) {
                                items.push(g.getItem(i));
                            }
                            _105e(this._goThroughGridData(items, _1060));
                        }
                    },
                    exportSelected: function (type, _1064) {
                        if (!lang.isString(type)) {
                            return "";
                        }
                        var _1065 = this._getExportWriter(type, _1064);
                        return this._goThroughGridData(this.grid.selection.getSelected(), _1065);
                    },
                    _buildRow: function (_1066, _1067) {
                        var _1068 = this;
                        array.forEach(_1066._views, function (view, vIdx) {
                            _1066.view = view;
                            _1066.viewIdx = vIdx;
                            if (_1067.beforeView(_1066)) {
                                array.forEach(view.structure.cells, function (_1069, srIdx) {
                                    _1066.subrow = _1069;
                                    _1066.subrowIdx = srIdx;
                                    if (_1067.beforeSubrow(_1066)) {
                                        array.forEach(_1069, function (cell, cIdx) {
                                            if (_1066.isHeader && _1068._isSpecialCol(cell)) {
                                                _1066.spCols.push(cell.index);
                                            }
                                            _1066.cell = cell;
                                            _1066.cellIdx = cIdx;
                                            _1067.handleCell(_1066);
                                        });
                                        _1067.afterSubrow(_1066);
                                    }
                                });
                                _1067.afterView(_1066);
                            }
                        });
                    },
                    _goThroughGridData: function (items, _106a) {
                        var grid = this.grid,
                            views = array.filter(grid.views.views, function (view) {
                                return !(view instanceof _1059);
                            }),
                            _106b = {
                                "grid": grid,
                                "isHeader": true,
                                "spCols": [],
                                "_views": views,
                                "colOffset": (views.length < grid.views.views.length ? -1 : 0)
                            };
                        if (_106a.beforeHeader(grid)) {
                            this._buildRow(_106b, _106a);
                            _106a.afterHeader();
                        }
                        _106b.isHeader = false;
                        if (_106a.beforeContent(items)) {
                            array.forEach(items, function (item, rIdx) {
                                _106b.row = item;
                                _106b.rowIdx = rIdx;
                                if (_106a.beforeContentRow(_106b)) {
                                    this._buildRow(_106b, _106a);
                                    _106a.afterContentRow(_106b);
                                }
                            }, this);
                            _106a.afterContent();
                        }
                        return _106a.toString();
                    },
                    _isSpecialCol: function (_106c) {
                        return _106c.isRowSelector || _106c instanceof _105b.RowIndex;
                    },
                    _getExportWriter: function (_106d, _106e) {
                        var _106f, cls, _1070 = _105c;
                        if (_1070.writerNames) {
                            _106f = _1070.writerNames[_106d.toLowerCase()];
                            cls = lang.getObject(_106f);
                            if (cls) {
                                var _1071 = new cls(_106e);
                                _1071.formatter = this.formatter;
                                return _1071;
                            } else {
                                throw new Error("Please make sure class \"" + _106f + "\" is required.");
                            }
                        }
                        throw new Error("The writer for \"" + _106d + "\" has not been registered.");
                    }
                });
                _105c.registerWriter = function (_1072, _1073) {
                    _105c.writerNames = _105c.writerNames || {};
                    _105c.writerNames[_1072] = _1073;
                };
                _105a.registerPlugin(_105c);
                return _105c;
            });
        },
        "dojox/grid/enhanced/plugins/Printer": function () {
            define("dojox/grid/enhanced/plugins/Printer", ["dojo/_base/declare", "dojo/_base/html", "dojo/_base/Deferred", "dojo/_base/lang", "dojo/_base/sniff", "dojo/_base/xhr", "dojo/_base/array", "dojo/query", "dojo/DeferredList", "../_Plugin", "../../EnhancedGrid", "./exporter/TableWriter"], function (_1074, html, _1075, lang, has, xhr, array, query, _1076, _1077, _1078, _1079) {
                var _107a = _1074("dojox.grid.enhanced.plugins.Printer", _1077, {
                    name: "printer",
                    constructor: function (grid) {
                        this.grid = grid;
                        this._mixinGrid(grid);
                        grid.setExportFormatter(function (data, cell, _107b, _107c) {
                            return cell.format(_107b, _107c);
                        });
                    },
                    _mixinGrid: function () {
                        var g = this.grid;
                        g.printGrid = lang.hitch(this, this.printGrid);
                        g.printSelected = lang.hitch(this, this.printSelected);
                        g.exportToHTML = lang.hitch(this, this.exportToHTML);
                        g.exportSelectedToHTML = lang.hitch(this, this.exportSelectedToHTML);
                        g.normalizePrintedGrid = lang.hitch(this, this.normalizeRowHeight);
                    },
                    printGrid: function (args) {
                        this.exportToHTML(args, lang.hitch(this, this._print));
                    },
                    printSelected: function (args) {
                        this.exportSelectedToHTML(args, lang.hitch(this, this._print));
                    },
                    exportToHTML: function (args, _107d) {
                        args = this._formalizeArgs(args);
                        var _107e = this;
                        this.grid.exportGrid("table", args, function (str) {
                            _107e._wrapHTML(args.title, args.cssFiles, args.titleInBody + str).then(_107d);
                        });
                    },
                    exportSelectedToHTML: function (args, _107f) {
                        args = this._formalizeArgs(args);
                        var _1080 = this;
                        this.grid.exportSelected("table", args.writerArgs, function (str) {
                            _1080._wrapHTML(args.title, args.cssFiles, args.titleInBody + str).then(_107f);
                        });
                    },
                    _loadCSSFiles: function (_1081) {
                        var dl = array.map(_1081, function (_1082) {
                            _1082 = lang.trim(_1082);
                            if (_1082.substring(_1082.length - 4).toLowerCase() === ".css") {
                                return xhr.get({
                                    url: _1082
                                });
                            } else {
                                var d = new _1075();
                                d.callback(_1082);
                                return d;
                            }
                        });
                        return _1076.prototype.gatherResults(dl);
                    },
                    _print: function (_1083) {
                        var win, _1084 = this,
                            _1085 = function (w) {
                                var doc = w.document;
                                doc.open();
                                doc.write(_1083);
                                doc.close();
                                _1084.normalizeRowHeight(doc);
                            };
                        if (!window.print) {
                            return;
                        } else {
                            if (has("chrome") || has("opera")) {
                                win = window.open("javascript: ''", "", "status=0,menubar=0,location=0,toolbar=0,width=1,height=1,resizable=0,scrollbars=0");
                                _1085(win);
                                win.print();
                                win.close();
                            } else {
                                var fn = this._printFrame,
                                    dn = this.grid.domNode;
                                if (!fn) {
                                    var _1086 = dn.id + "_print_frame";
                                    if (!(fn = html.byId(_1086))) {
                                        fn = html.create("iframe");
                                        fn.id = _1086;
                                        fn.frameBorder = 0;
                                        html.style(fn, {
                                            width: "1px",
                                            height: "1px",
                                            position: "absolute",
                                            right: 0,
                                            bottom: 0,
                                            border: "none",
                                            overflow: "hidden"
                                        });
                                        if (!has("ie")) {
                                            html.style(fn, "visibility", "hidden");
                                        }
                                        dn.appendChild(fn);
                                    }
                                    this._printFrame = fn;
                                }
                                win = fn.contentWindow;
                                _1085(win);
                                win.focus();
                                win.print();
                            }
                        }
                    },
                    _wrapHTML: function (title, _1087, _1088) {
                        return this._loadCSSFiles(_1087).then(function (_1089) {
                            var i, sb = ["<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">", "<html ", html._isBodyLtr() ? "" : "dir=\"rtl\"", "><head><title>", title, "</title><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"></meta>"];
                            for (i = 0; i < _1089.length; ++i) {
                                sb.push("<style type=\"text/css\">", _1089[i], "</style>");
                            }
                            sb.push("</head>");
                            if (_1088.search(/^\s*<body/i) < 0) {
                                _1088 = "<body>" + _1088 + "</body>";
                            }
                            sb.push(_1088, "</html>");
                            return sb.join("");
                        });
                    },
                    normalizeRowHeight: function (doc) {
                        var views = query(".grid_view", doc.body);
                        var _108a = array.map(views, function (view) {
                            return query(".grid_header", view)[0];
                        });
                        var _108b = array.map(views, function (view) {
                            return query(".grid_row", view);
                        });
                        var _108c = _108b[0].length;
                        var i, v, h, _108d = 0;
                        for (v = views.length - 1; v >= 0; --v) {
                            h = html.contentBox(_108a[v]).h;
                            if (h > _108d) {
                                _108d = h;
                            }
                        }
                        for (v = views.length - 1; v >= 0; --v) {
                            html.style(_108a[v], "height", _108d + "px");
                        }
                        for (i = 0; i < _108c; ++i) {
                            _108d = 0;
                            for (v = views.length - 1; v >= 0; --v) {
                                h = html.contentBox(_108b[v][i]).h;
                                if (h > _108d) {
                                    _108d = h;
                                }
                            }
                            for (v = views.length - 1; v >= 0; --v) {
                                html.style(_108b[v][i], "height", _108d + "px");
                            }
                        }
                        var left = 0,
                            ltr = html._isBodyLtr();
                        for (v = 0; v < views.length; ++v) {
                            html.style(views[v], ltr ? "left" : "right", left + "px");
                            left += html.marginBox(views[v]).w;
                        }
                    },
                    _formalizeArgs: function (args) {
                        args = (args && lang.isObject(args)) ? args : {};
                        args.title = String(args.title) || "";
                        if (!lang.isArray(args.cssFiles)) {
                            args.cssFiles = [args.cssFiles];
                        }
                        args.titleInBody = args.title ? ["<h1>", args.title, "</h1>"].join("") : "";
                        return args;
                    }
                });
                _1078.registerPlugin(_107a, {
                    "dependency": ["exporter"]
                });
                return _107a;
            });
        },
        "dojo/DeferredList": function () {
            define(["./_base/kernel", "./_base/Deferred", "./_base/array"], function (dojo, _108e, _108f) {
                dojo.DeferredList = function (list, _1090, _1091, _1092, _1093) {
                    var _1094 = [];
                    _108e.call(this);
                    var self = this;
                    if (list.length === 0 && !_1090) {
                        this.resolve([0, []]);
                    }
                    var _1095 = 0;
                    _108f.forEach(list, function (item, i) {
                        item.then(function (_1096) {
                            if (_1090) {
                                self.resolve([i, _1096]);
                            } else {
                                _1097(true, _1096);
                            }
                        }, function (error) {
                            if (_1091) {
                                self.reject(error);
                            } else {
                                _1097(false, error);
                            }
                            if (_1092) {
                                return null;
                            }
                            throw error;
                        });

                        function _1097(_1098, _1099) {
                            _1094[i] = [_1098, _1099];
                            _1095++;
                            if (_1095 === list.length) {
                                self.resolve(_1094);
                            }
                        };
                    });
                };
                dojo.DeferredList.prototype = new _108e();
                dojo.DeferredList.prototype.gatherResults = function (_109a) {
                    var d = new dojo.DeferredList(_109a, false, true, false);
                    d.addCallback(function (_109b) {
                        var ret = [];
                        _108f.forEach(_109b, function (_109c) {
                            ret.push(_109c[1]);
                        });
                        return ret;
                    });
                    return d;
                };
                return dojo.DeferredList;
            });
        },
        "dojox/grid/enhanced/plugins/exporter/TableWriter": function () {
            define("dojox/grid/enhanced/plugins/exporter/TableWriter", ["dojo/_base/declare", "dojo/_base/array", "dojo/dom-geometry", "./_ExportWriter", "../Exporter"], function (_109d, array, _109e, _109f, _10a0) {
                _10a0.registerWriter("table", "dojox.grid.enhanced.plugins.exporter.TableWriter");
                return _109d("dojox.grid.enhanced.plugins.exporter.TableWriter", _109f, {
                    constructor: function (_10a1) {
                        this._viewTables = [];
                        this._tableAttrs = _10a1 || {};
                    },
                    _getTableAttrs: function (_10a2) {
                        var attrs = this._tableAttrs[_10a2] || "";
                        if (attrs && attrs[0] != " ") {
                            attrs = " " + attrs;
                        }
                        return attrs;
                    },
                    _getRowClass: function (_10a3) {
                        return _10a3.isHeader ? " grid_header" : [" grid_row grid_row_", _10a3.rowIdx + 1, _10a3.rowIdx % 2 ? " grid_even_row" : " grid_odd_row"].join("");
                    },
                    _getColumnClass: function (_10a4) {
                        var _10a5 = _10a4.cell.index + _10a4.colOffset + 1;
                        return [" grid_column grid_column_", _10a5, _10a5 % 2 ? " grid_odd_column" : " grid_even_column"].join("");
                    },
                    beforeView: function (_10a6) {
                        var _10a7 = _10a6.viewIdx,
                            table = this._viewTables[_10a7],
                            _10a8, width = _109e.getMarginBox(_10a6.view.contentNode).w;
                        if (!table) {
                            var left = 0;
                            for (var i = 0; i < _10a7; ++i) {
                                left += this._viewTables[i]._width;
                            }
                            table = this._viewTables[_10a7] = ["<div class=\"grid_view\" style=\"position: absolute; top: 0; ", _109e.isBodyLtr() ? "left" : "right", ":", left, "px;\">"];
                        }
                        table._width = width;
                        if (_10a6.isHeader) {
                            _10a8 = _109e.getContentBox(_10a6.view.headerContentNode).h;
                        } else {
                            var _10a9 = _10a6.grid.getRowNode(_10a6.rowIdx);
                            if (_10a9) {
                                _10a8 = _109e.getContentBox(_10a9).h;
                            } else {
                                _10a8 = _10a6.grid.scroller.averageRowHeight;
                            }
                        }
                        table.push("<table class=\"", this._getRowClass(_10a6), "\" style=\"table-layout:fixed; height:", _10a8, "px; width:", width, "px;\" ", "border=\"0\" cellspacing=\"0\" cellpadding=\"0\" ", this._getTableAttrs("table"), "><tbody ", this._getTableAttrs("tbody"), ">");
                        return true;
                    },
                    afterView: function (_10aa) {
                        this._viewTables[_10aa.viewIdx].push("</tbody></table>");
                    },
                    beforeSubrow: function (_10ab) {
                        this._viewTables[_10ab.viewIdx].push("<tr", this._getTableAttrs("tr"), ">");
                        return true;
                    },
                    afterSubrow: function (_10ac) {
                        this._viewTables[_10ac.viewIdx].push("</tr>");
                    },
                    handleCell: function (_10ad) {
                        var cell = _10ad.cell;
                        if (cell.hidden || array.indexOf(_10ad.spCols, cell.index) >= 0) {
                            return;
                        }
                        var _10ae = _10ad.isHeader ? "th" : "td",
                            attrs = [cell.colSpan ? " colspan=\"" + cell.colSpan + "\"" : "", cell.rowSpan ? " rowspan=\"" + cell.rowSpan + "\"" : "", " style=\"width: ", _109e.getContentBox(cell.getHeaderNode()).w, "px;\"", this._getTableAttrs(_10ae), " class=\"", this._getColumnClass(_10ad), "\""].join(""),
                            table = this._viewTables[_10ad.viewIdx];
                        table.push("<", _10ae, attrs, ">");
                        if (_10ad.isHeader) {
                            table.push(cell.name || cell.field);
                        } else {
                            table.push(this._getExportDataForCell(_10ad.rowIdx, _10ad.row, cell, _10ad.grid));
                        }
                        table.push("</", _10ae, ">");
                    },
                    afterContent: function () {
                        array.forEach(this._viewTables, function (table) {
                            table.push("</div>");
                        });
                    },
                    toString: function () {
                        var _10af = array.map(this._viewTables, function (table) {
                            return table.join("");
                        }).join("");
                        return ["<div style=\"position: relative;\">", _10af, "</div>"].join("");
                    }
                });
            });
        },
        "dojox/grid/enhanced/plugins/Cookie": function () {
            define("dojox/grid/enhanced/plugins/Cookie", ["dojo/_base/declare", "dojo/_base/array", "dojo/_base/lang", "dojo/_base/sniff", "dojo/_base/html", "dojo/_base/json", "dojo/_base/window", "dojo/_base/unload", "dojo/cookie", "../_Plugin", "../../_RowSelector", "../../EnhancedGrid", "../../cells/_base"], function (_10b0, array, lang, has, html, json, win, _10b1, _10b2, _10b3, _10b4, _10b5) {
                var _10b6 = lang.getObject("dojox.grid.cells");
                var _10b7 = function (grid) {
                        return window.location + "/" + grid.id;
                    };
                var _10b8 = function (_10b9) {
                        var cells = [];
                        if (!lang.isArray(_10b9)) {
                            _10b9 = [_10b9];
                        }
                        array.forEach(_10b9, function (_10ba) {
                            if (lang.isArray(_10ba)) {
                                _10ba = {
                                    "cells": _10ba
                                };
                            }
                            var rows = _10ba.rows || _10ba.cells;
                            if (lang.isArray(rows)) {
                                if (!lang.isArray(rows[0])) {
                                    rows = [rows];
                                }
                                array.forEach(rows, function (row) {
                                    if (lang.isArray(row)) {
                                        array.forEach(row, function (cell) {
                                            cells.push(cell);
                                        });
                                    }
                                });
                            }
                        });
                        return cells;
                    };
                var _10bb = function (_10bc, grid) {
                        if (lang.isArray(_10bc)) {
                            var _10bd = grid._setStructureAttr;
                            grid._setStructureAttr = function (_10be) {
                                if (!grid._colWidthLoaded) {
                                    grid._colWidthLoaded = true;
                                    var cells = _10b8(_10be);
                                    for (var i = cells.length - 1; i >= 0; --i) {
                                        if (typeof _10bc[i] == "number") {
                                            cells[i].width = _10bc[i] + "px";
                                        } else {
                                            if (_10bc[i] == "hidden") {
                                                cells[i].hidden = true;
                                            }
                                        }
                                    }
                                }
                                _10bd.call(grid, _10be);
                                grid._setStructureAttr = _10bd;
                            };
                        }
                    };
                var _10bf = function (grid) {
                        return array.map(array.filter(grid.layout.cells, function (cell) {
                            return !(cell.isRowSelector || cell instanceof _10b6.RowIndex);
                        }), function (cell) {
                            return cell.hidden ? "hidden" : html[has("webkit") ? "marginBox" : "contentBox"](cell.getHeaderNode()).w;
                        });
                    };
                var _10c0 = function (_10c1, grid) {
                        if (_10c1 && array.every(_10c1, function (_10c2) {
                            return lang.isArray(_10c2) && array.every(_10c2, function (_10c3) {
                                return lang.isArray(_10c3) && _10c3.length > 0;
                            });
                        })) {
                            var _10c4 = grid._setStructureAttr;
                            var _10c5 = function (def) {
                                    return ("name" in def || "field" in def || "get" in def);
                                };
                            var _10c6 = function (def) {
                                    return (def !== null && lang.isObject(def) && ("cells" in def || "rows" in def || ("type" in def && !_10c5(def))));
                                };
                            grid._setStructureAttr = function (_10c7) {
                                if (!grid._colOrderLoaded) {
                                    grid._colOrderLoaded = true;
                                    grid._setStructureAttr = _10c4;
                                    _10c7 = lang.clone(_10c7);
                                    if (lang.isArray(_10c7) && !array.some(_10c7, _10c6)) {
                                        _10c7 = [{
                                            cells: _10c7
                                        }];
                                    } else {
                                        if (_10c6(_10c7)) {
                                            _10c7 = [_10c7];
                                        }
                                    }
                                    var cells = _10b8(_10c7);
                                    array.forEach(lang.isArray(_10c7) ? _10c7 : [_10c7], function (_10c8, _10c9) {
                                        var _10ca = _10c8;
                                        if (lang.isArray(_10c8)) {
                                            _10c8.splice(0, _10c8.length);
                                        } else {
                                            delete _10c8.rows;
                                            _10ca = _10c8.cells = [];
                                        }
                                        array.forEach(_10c1[_10c9], function (_10cb) {
                                            array.forEach(_10cb, function (_10cc) {
                                                var i, cell;
                                                for (i = 0; i < cells.length; ++i) {
                                                    cell = cells[i];
                                                    if (json.toJson({
                                                        "name": cell.name,
                                                        "field": cell.field
                                                    }) == json.toJson(_10cc)) {
                                                        break;
                                                    }
                                                }
                                                if (i < cells.length) {
                                                    _10ca.push(cell);
                                                }
                                            });
                                        });
                                    });
                                }
                                _10c4.call(grid, _10c7);
                            };
                        }
                    };
                var _10cd = function (grid) {
                        var _10ce = array.map(array.filter(grid.views.views, function (view) {
                            return !(view instanceof _10b4);
                        }), function (view) {
                            return array.map(view.structure.cells, function (_10cf) {
                                return array.map(array.filter(_10cf, function (cell) {
                                    return !(cell.isRowSelector || cell instanceof _10b6.RowIndex);
                                }), function (cell) {
                                    return {
                                        "name": cell.name,
                                        "field": cell.field
                                    };
                                });
                            });
                        });
                        return _10ce;
                    };
                var _10d0 = function (_10d1, grid) {
                        try {
                            if (lang.isObject(_10d1)) {
                                grid.setSortIndex(_10d1.idx, _10d1.asc);
                            }
                        } catch (e) {}
                    };
                var _10d2 = function (grid) {
                        return {
                            idx: grid.getSortIndex(),
                            asc: grid.getSortAsc()
                        };
                    };
                if (!has("ie")) {
                    _10b1.addOnWindowUnload(function () {
                        array.forEach(dijit.findWidgets(win.body()), function (_10d3) {
                            if (_10d3 instanceof _10b5 && !_10d3._destroyed) {
                                _10d3.destroyRecursive();
                            }
                        });
                    });
                }
                var _10d4 = _10b0("dojox.grid.enhanced.plugins.Cookie", _10b3, {
                    name: "cookie",
                    _cookieEnabled: true,
                    constructor: function (grid, args) {
                        this.grid = grid;
                        args = (args && lang.isObject(args)) ? args : {};
                        this.cookieProps = args.cookieProps;
                        this._cookieHandlers = [];
                        this._mixinGrid();
                        this.addCookieHandler({
                            name: "columnWidth",
                            onLoad: _10bb,
                            onSave: _10bf
                        });
                        this.addCookieHandler({
                            name: "columnOrder",
                            onLoad: _10c0,
                            onSave: _10cd
                        });
                        this.addCookieHandler({
                            name: "sortOrder",
                            onLoad: _10d0,
                            onSave: _10d2
                        });
                        array.forEach(this._cookieHandlers, function (_10d5) {
                            if (args[_10d5.name] === false) {
                                _10d5.enable = false;
                            }
                        }, this);
                    },
                    destroy: function () {
                        this._saveCookie();
                        this._cookieHandlers = null;
                        this.inherited(arguments);
                    },
                    _mixinGrid: function () {
                        var g = this.grid;
                        g.addCookieHandler = lang.hitch(this, "addCookieHandler");
                        g.removeCookie = lang.hitch(this, "removeCookie");
                        g.setCookieEnabled = lang.hitch(this, "setCookieEnabled");
                        g.getCookieEnabled = lang.hitch(this, "getCookieEnabled");
                    },
                    _saveCookie: function () {
                        if (this.getCookieEnabled()) {
                            var ck = {},
                                chs = this._cookieHandlers,
                                _10d6 = this.cookieProps,
                                _10d7 = _10b7(this.grid);
                            for (var i = chs.length - 1; i >= 0; --i) {
                                if (chs[i].enabled) {
                                    ck[chs[i].name] = chs[i].onSave(this.grid);
                                }
                            }
                            _10d6 = lang.isObject(this.cookieProps) ? this.cookieProps : {};
                            _10b2(_10d7, json.toJson(ck), _10d6);
                        } else {
                            this.removeCookie();
                        }
                    },
                    onPreInit: function () {
                        var grid = this.grid,
                            chs = this._cookieHandlers,
                            _10d8 = _10b7(grid),
                            ck = _10b2(_10d8);
                        if (ck) {
                            ck = json.fromJson(ck);
                            for (var i = 0; i < chs.length; ++i) {
                                if (chs[i].name in ck && chs[i].enabled) {
                                    chs[i].onLoad(ck[chs[i].name], grid);
                                }
                            }
                        }
                        this._cookie = ck || {};
                        this._cookieStartedup = true;
                    },
                    addCookieHandler: function (args) {
                        if (args.name) {
                            var dummy = function () {};
                            args.onLoad = args.onLoad || dummy;
                            args.onSave = args.onSave || dummy;
                            if (!("enabled" in args)) {
                                args.enabled = true;
                            }
                            for (var i = this._cookieHandlers.length - 1; i >= 0; --i) {
                                if (this._cookieHandlers[i].name == args.name) {
                                    this._cookieHandlers.splice(i, 1);
                                }
                            }
                            this._cookieHandlers.push(args);
                            if (this._cookieStartedup && args.name in this._cookie) {
                                args.onLoad(this._cookie[args.name], this.grid);
                            }
                        }
                    },
                    removeCookie: function () {
                        var key = _10b7(this.grid);
                        _10b2(key, null, {
                            expires: -1
                        });
                    },
                    setCookieEnabled: function (_10d9, _10da) {
                        if (typeof _10d9 == "string") {
                            var chs = this._cookieHandlers;
                            for (var i = chs.length - 1; i >= 0; --i) {
                                if (chs[i].name === _10d9) {
                                    chs[i].enabled = !! _10da;
                                }
                            }
                        } else {
                            this._cookieEnabled = !! _10d9;
                            if (!this._cookieEnabled) {
                                this.removeCookie();
                            }
                        }
                    },
                    getCookieEnabled: function (_10db) {
                        if (lang.isString(_10db)) {
                            var chs = this._cookieHandlers;
                            for (var i = chs.length - 1; i >= 0; --i) {
                                if (chs[i].name == _10db) {
                                    return chs[i].enabled;
                                }
                            }
                            return false;
                        }
                        return this._cookieEnabled;
                    }
                });
                _10b5.registerPlugin(_10d4, {
                    "preInit": true
                });
                return _10d4;
            });
        },
        "dojox/grid/enhanced/plugins/IndirectSelection": function () {
            define("dojox/grid/enhanced/plugins/IndirectSelection", ["dojo/_base/declare", "dojo/_base/array", "dojo/_base/event", "dojo/_base/lang", "dojo/_base/html", "dojo/_base/window", "dojo/_base/connect", "dojo/_base/sniff", "dojo/query", "dojo/keys", "dojo/string", "../_Plugin", "../../EnhancedGrid", "../../cells/dijit"], function (_10dc, array, evt, lang, html, win, _10dd, has, query, keys, _10de, _10df, _10e0) {
                var _10e1 = lang.getObject("dojox.grid.cells");
                var _10e2 = _10dc("dojox.grid.cells.RowSelector", _10e1._Widget, {
                    inputType: "",
                    map: null,
                    disabledMap: null,
                    isRowSelector: true,
                    _connects: null,
                    _subscribes: null,
                    checkedText: "&#10003;",
                    unCheckedText: "O",
                    constructor: function () {
                        this.map = {};
                        this.disabledMap = {}, this.disabledCount = 0;
                        this._connects = [];
                        this._subscribes = [];
                        this.inA11YMode = html.hasClass(win.body(), "dijit_a11y");
                        this.baseClass = "dojoxGridRowSelector dijitReset dijitInline dijit" + this.inputType;
                        this.checkedClass = " dijit" + this.inputType + "Checked";
                        this.disabledClass = " dijit" + this.inputType + "Disabled";
                        this.checkedDisabledClass = " dijit" + this.inputType + "CheckedDisabled";
                        this.statusTextClass = " dojoxGridRowSelectorStatusText";
                        this._connects.push(_10dd.connect(this.grid, "dokeyup", this, "_dokeyup"));
                        this._connects.push(_10dd.connect(this.grid.selection, "onSelected", this, "_onSelected"));
                        this._connects.push(_10dd.connect(this.grid.selection, "onDeselected", this, "_onDeselected"));
                        this._connects.push(_10dd.connect(this.grid.scroller, "invalidatePageNode", this, "_pageDestroyed"));
                        this._connects.push(_10dd.connect(this.grid, "onCellClick", this, "_onClick"));
                        this._connects.push(_10dd.connect(this.grid, "updateRow", this, "_onUpdateRow"));
                    },
                    formatter: function (data, _10e3, scope) {
                        var _10e4 = scope;
                        var clazz = _10e4.baseClass;
                        var _10e5 = _10e4.getValue(_10e3);
                        var _10e6 = !! _10e4.disabledMap[_10e3];
                        if (_10e5) {
                            clazz += _10e4.checkedClass;
                            if (_10e6) {
                                clazz += _10e4.checkedDisabledClass;
                            }
                        } else {
                            if (_10e6) {
                                clazz += _10e4.disabledClass;
                            }
                        }
                        return ["<div tabindex = -1 ", "id = '" + _10e4.grid.id + "_rowSelector_" + _10e3 + "' ", "name = '" + _10e4.grid.id + "_rowSelector' class = '" + clazz + "' ", "role = 'presentation' aria-pressed = '" + _10e5 + "' aria-disabled = '" + _10e6 + "' aria-label = '" + _10de.substitute(_10e4.grid._nls["indirectSelection" + _10e4.inputType], [_10e3 + 1]) + "'>", "<span class = '" + _10e4.statusTextClass + "'>" + (_10e5 ? _10e4.checkedText : _10e4.unCheckedText) + "</span>", "</div>"].join("");
                    },
                    setValue: function (_10e7, _10e8) {},
                    getValue: function (_10e9) {
                        return this.grid.selection.isSelected(_10e9);
                    },
                    toggleRow: function (index, value) {
                        this._nativeSelect(index, value);
                    },
                    setDisabled: function (index, _10ea) {
                        if (index < 0) {
                            return;
                        }
                        this._toggleDisabledStyle(index, _10ea);
                    },
                    disabled: function (index) {
                        return !!this.disabledMap[index];
                    },
                    _onClick: function (e) {
                        if (e.cell === this) {
                            this._selectRow(e);
                        }
                    },
                    _dokeyup: function (e) {
                        if (e.cellIndex == this.index && e.rowIndex >= 0 && e.keyCode == keys.SPACE) {
                            this._selectRow(e);
                        }
                    },
                    focus: function (_10eb) {
                        var _10ec = this.map[_10eb];
                        if (_10ec) {
                            _10ec.focus();
                        }
                    },
                    _focusEndingCell: function (_10ed, _10ee) {
                        var cell = this.grid.getCell(_10ee);
                        this.grid.focus.setFocusCell(cell, _10ed);
                    },
                    _nativeSelect: function (index, value) {
                        this.grid.selection[value ? "select" : "deselect"](index);
                    },
                    _onSelected: function (index) {
                        this._toggleCheckedStyle(index, true);
                    },
                    _onDeselected: function (index) {
                        this._toggleCheckedStyle(index, false);
                    },
                    _onUpdateRow: function (index) {
                        delete this.map[index];
                    },
                    _toggleCheckedStyle: function (index, value) {
                        var _10ef = this._getSelector(index);
                        if (_10ef) {
                            html.toggleClass(_10ef, this.checkedClass, value);
                            if (this.disabledMap[index]) {
                                html.toggleClass(_10ef, this.checkedDisabledClass, value);
                            }
                            _10ef.setAttribute("aria-pressed", value);
                            if (this.inA11YMode) {
                                _10ef.firstChild.innerHTML = (value ? this.checkedText : this.unCheckedText);
                            }
                        }
                    },
                    _toggleDisabledStyle: function (index, _10f0) {
                        var _10f1 = this._getSelector(index);
                        if (_10f1) {
                            html.toggleClass(_10f1, this.disabledClass, _10f0);
                            if (this.getValue(index)) {
                                html.toggleClass(_10f1, this.checkedDisabledClass, _10f0);
                            }
                            _10f1.setAttribute("aria-disabled", _10f0);
                        }
                        this.disabledMap[index] = _10f0;
                        if (index >= 0) {
                            this.disabledCount += _10f0 ? 1 : -1;
                        }
                    },
                    _getSelector: function (index) {
                        var _10f2 = this.map[index];
                        if (!_10f2) {
                            var _10f3 = this.view.rowNodes[index];
                            if (_10f3) {
                                _10f2 = query(".dojoxGridRowSelector", _10f3)[0];
                                if (_10f2) {
                                    this.map[index] = _10f2;
                                }
                            }
                        }
                        return _10f2;
                    },
                    _pageDestroyed: function (_10f4) {
                        var _10f5 = this.grid.scroller.rowsPerPage;
                        var start = _10f4 * _10f5,
                            end = start + _10f5 - 1;
                        for (var i = start; i <= end; i++) {
                            if (!this.map[i]) {
                                continue;
                            }
                            html.destroy(this.map[i]);
                            delete this.map[i];
                        }
                    },
                    destroy: function () {
                        for (var i in this.map) {
                            html.destroy(this.map[i]);
                            delete this.map[i];
                        }
                        for (i in this.disabledMap) {
                            delete this.disabledMap[i];
                        }
                        array.forEach(this._connects, _10dd.disconnect);
                        array.forEach(this._subscribes, _10dd.unsubscribe);
                        delete this._connects;
                        delete this._subscribes;
                    }
                });
                var _10f6 = _10dc("dojox.grid.cells.SingleRowSelector", _10e2, {
                    inputType: "Radio",
                    _selectRow: function (e) {
                        var index = e.rowIndex;
                        if (this.disabledMap[index]) {
                            return;
                        }
                        this._focusEndingCell(index, 0);
                        this._nativeSelect(index, !this.grid.selection.selected[index]);
                    }
                });
                var _10f7 = _10dc("dojox.grid.cells.MultipleRowSelector", _10e2, {
                    inputType: "CheckBox",
                    swipeStartRowIndex: -1,
                    swipeMinRowIndex: -1,
                    swipeMaxRowIndex: -1,
                    toSelect: false,
                    lastClickRowIdx: -1,
                    toggleAllTrigerred: false,
                    unCheckedText: "&#9633;",
                    constructor: function () {
                        this._connects.push(_10dd.connect(win.doc, "onmouseup", this, "_domouseup"));
                        this._connects.push(_10dd.connect(this.grid, "onRowMouseOver", this, "_onRowMouseOver"));
                        this._connects.push(_10dd.connect(this.grid.focus, "move", this, "_swipeByKey"));
                        this._connects.push(_10dd.connect(this.grid, "onCellMouseDown", this, "_onMouseDown"));
                        if (this.headerSelector) {
                            this._connects.push(_10dd.connect(this.grid.views, "render", this, "_addHeaderSelector"));
                            this._connects.push(_10dd.connect(this.grid, "_onFetchComplete", this, "_addHeaderSelector"));
                            this._connects.push(_10dd.connect(this.grid, "onSelectionChanged", this, "_onSelectionChanged"));
                            this._connects.push(_10dd.connect(this.grid, "onKeyDown", this, function (e) {
                                if (e.rowIndex == -1 && e.cellIndex == this.index && e.keyCode == keys.SPACE) {
                                    this._toggletHeader();
                                }
                            }));
                        }
                    },
                    toggleAllSelection: function (_10f8) {
                        var grid = this.grid,
                            _10f9 = grid.selection;
                        if (_10f8) {
                            _10f9.selectRange(0, grid.rowCount - 1);
                        } else {
                            _10f9.deselectAll();
                        }
                        this.toggleAllTrigerred = true;
                    },
                    _onMouseDown: function (e) {
                        if (e.cell == this) {
                            this._startSelection(e.rowIndex);
                            evt.stop(e);
                        }
                    },
                    _onRowMouseOver: function (e) {
                        this._updateSelection(e, 0);
                    },
                    _domouseup: function (e) {
                        if (has("ie")) {
                            this.view.content.decorateEvent(e);
                        }
                        var _10fa = e.cellIndex >= 0 && this.inSwipeSelection() && !this.grid.edit.isEditRow(e.rowIndex);
                        if (_10fa) {
                            this._focusEndingCell(e.rowIndex, e.cellIndex);
                        }
                        this._finishSelect();
                    },
                    _dokeyup: function (e) {
                        this.inherited(arguments);
                        if (!e.shiftKey) {
                            this._finishSelect();
                        }
                    },
                    _startSelection: function (_10fb) {
                        this.swipeStartRowIndex = this.swipeMinRowIndex = this.swipeMaxRowIndex = _10fb;
                        this.toSelect = !this.getValue(_10fb);
                    },
                    _updateSelection: function (e, delta) {
                        if (!this.inSwipeSelection()) {
                            return;
                        }
                        var byKey = delta !== 0;
                        var _10fc = e.rowIndex,
                            _10fd = _10fc - this.swipeStartRowIndex + delta;
                        if (_10fd > 0 && this.swipeMaxRowIndex < _10fc + delta) {
                            this.swipeMaxRowIndex = _10fc + delta;
                        }
                        if (_10fd < 0 && this.swipeMinRowIndex > _10fc + delta) {
                            this.swipeMinRowIndex = _10fc + delta;
                        }
                        var min = _10fd > 0 ? this.swipeStartRowIndex : _10fc + delta;
                        var max = _10fd > 0 ? _10fc + delta : this.swipeStartRowIndex;
                        for (var i = this.swipeMinRowIndex; i <= this.swipeMaxRowIndex; i++) {
                            if (this.disabledMap[i] || i < 0) {
                                continue;
                            }
                            if (i >= min && i <= max) {
                                this._nativeSelect(i, this.toSelect);
                            } else {
                                if (!byKey) {
                                    this._nativeSelect(i, !this.toSelect);
                                }
                            }
                        }
                    },
                    _swipeByKey: function (_10fe, _10ff, e) {
                        if (!e || _10fe === 0 || !e.shiftKey || e.cellIndex != this.index || this.grid.focus.rowIndex < 0) {
                            return;
                        }
                        var _1100 = e.rowIndex;
                        if (this.swipeStartRowIndex < 0) {
                            this.swipeStartRowIndex = _1100;
                            if (_10fe > 0) {
                                this.swipeMaxRowIndex = _1100 + _10fe;
                                this.swipeMinRowIndex = _1100;
                            } else {
                                this.swipeMinRowIndex = _1100 + _10fe;
                                this.swipeMaxRowIndex = _1100;
                            }
                            this.toSelect = this.getValue(_1100);
                        }
                        this._updateSelection(e, _10fe);
                    },
                    _finishSelect: function () {
                        this.swipeStartRowIndex = -1;
                        this.swipeMinRowIndex = -1;
                        this.swipeMaxRowIndex = -1;
                        this.toSelect = false;
                    },
                    inSwipeSelection: function () {
                        return this.swipeStartRowIndex >= 0;
                    },
                    _nativeSelect: function (index, value) {
                        this.grid.selection[value ? "addToSelection" : "deselect"](index);
                    },
                    _selectRow: function (e) {
                        var _1101 = e.rowIndex;
                        if (this.disabledMap[_1101]) {
                            return;
                        }
                        evt.stop(e);
                        this._focusEndingCell(_1101, 0);
                        var delta = _1101 - this.lastClickRowIdx;
                        var _1102 = !this.grid.selection.selected[_1101];
                        if (this.lastClickRowIdx >= 0 && !e.ctrlKey && !e.altKey && e.shiftKey) {
                            var min = delta > 0 ? this.lastClickRowIdx : _1101;
                            var max = delta > 0 ? _1101 : this.lastClickRowIdx;
                            for (var i = min; i >= 0 && i <= max; i++) {
                                this._nativeSelect(i, _1102);
                            }
                        } else {
                            this._nativeSelect(_1101, _1102);
                        }
                        this.lastClickRowIdx = _1101;
                    },
                    getValue: function (_1103) {
                        if (_1103 == -1) {
                            var g = this.grid;
                            return g.rowCount > 0 && g.rowCount <= g.selection.getSelectedCount();
                        }
                        return this.inherited(arguments);
                    },
                    _addHeaderSelector: function () {
                        var _1104 = this.view.getHeaderCellNode(this.index);
                        if (!_1104) {
                            return;
                        }
                        html.empty(_1104);
                        var g = this.grid;
                        var _1105 = _1104.appendChild(html.create("div", {
                            "aria-label": g._nls["selectAll"],
                            "tabindex": -1,
                            "id": g.id + "_rowSelector_-1",
                            "class": this.baseClass,
                            "role": "presentation",
                            "innerHTML": "<span class = '" + this.statusTextClass + "'></span><span style='height: 0; width: 0; overflow: hidden; display: block;'>" + g._nls["selectAll"] + "</span>"
                        }));
                        this.map[-1] = _1105;
                        var idx = this._headerSelectorConnectIdx;
                        if (idx !== undefined) {
                            _10dd.disconnect(this._connects[idx]);
                            this._connects.splice(idx, 1);
                        }
                        this._headerSelectorConnectIdx = this._connects.length;
                        this._connects.push(_10dd.connect(_1105, "onclick", this, "_toggletHeader"));
                        this._onSelectionChanged();
                    },
                    _toggletHeader: function () {
                        if ( !! this.disabledMap[-1]) {
                            return;
                        }
                        this.grid._selectingRange = true;
                        this.toggleAllSelection(!this.getValue(-1));
                        this._onSelectionChanged();
                        this.grid._selectingRange = false;
                    },
                    _onSelectionChanged: function () {
                        var g = this.grid;
                        if (!this.map[-1] || g._selectingRange) {
                            return;
                        }
                        g.allItemsSelected = this.getValue(-1);
                        this._toggleCheckedStyle(-1, g.allItemsSelected);
                    },
                    _toggleDisabledStyle: function (index, _1106) {
                        this.inherited(arguments);
                        if (this.headerSelector) {
                            var _1107 = (this.grid.rowCount == this.disabledCount);
                            if (_1107 != !! this.disabledMap[-1]) {
                                arguments[0] = -1;
                                arguments[1] = _1107;
                                this.inherited(arguments);
                            }
                        }
                    }
                });
                var _1108 = _10dc("dojox.grid.enhanced.plugins.IndirectSelection", _10df, {
                    name: "indirectSelection",
                    constructor: function () {
                        var _1109 = this.grid.layout;
                        this.connect(_1109, "setStructure", lang.hitch(_1109, this.addRowSelectCell, this.option));
                    },
                    addRowSelectCell: function (_110a) {
                        if (!this.grid.indirectSelection || this.grid.selectionMode == "none") {
                            return;
                        }
                        var _110b = false,
                            _110c = ["get", "formatter", "field", "fields"],
                            _110d = {
                                type: _10f7,
                                name: "",
                                width: "30px",
                                styles: "text-align: center;"
                            };
                        if (_110a.headerSelector) {
                            _110a.name = "";
                        }
                        if (this.grid.rowSelectCell) {
                            this.grid.rowSelectCell.destroy();
                        }
                        array.forEach(this.structure, function (view) {
                            var cells = view.cells;
                            if (cells && cells.length > 0 && !_110b) {
                                var _110e = cells[0];
                                if (_110e[0] && _110e[0].isRowSelector) {
                                    _110b = true;
                                    return;
                                }
                                var _110f, _1110 = this.grid.selectionMode == "single" ? _10f6 : _10f7;
                                _110f = lang.mixin(_110d, _110a, {
                                    type: _1110,
                                    editable: false,
                                    notselectable: true,
                                    filterable: false,
                                    navigatable: true,
                                    nosort: true
                                });
                                array.forEach(_110c, function (field) {
                                    if (field in _110f) {
                                        delete _110f[field];
                                    }
                                });
                                if (cells.length > 1) {
                                    _110f.rowSpan = cells.length;
                                }
                                array.forEach(this.cells, function (cell, i) {
                                    if (cell.index >= 0) {
                                        cell.index += 1;
                                    } else {
                                        console.warn("Error:IndirectSelection.addRowSelectCell()-  cell " + i + " has no index!");
                                    }
                                });
                                var _1111 = this.addCellDef(0, 0, _110f);
                                _1111.index = 0;
                                _110e.unshift(_1111);
                                this.cells.unshift(_1111);
                                this.grid.rowSelectCell = _1111;
                                _110b = true;
                            }
                        }, this);
                        this.cellCount = this.cells.length;
                    },
                    destroy: function () {
                        this.grid.rowSelectCell.destroy();
                        delete this.grid.rowSelectCell;
                        this.inherited(arguments);
                    }
                });
                _10e0.registerPlugin(_1108, {
                    "preInit": true
                });
                return _1108;
            });
        },
        "dojox/grid/enhanced/plugins/NestedSorting": function () {
            define("dojox/grid/enhanced/plugins/NestedSorting", ["dojo/_base/declare", "dojo/_base/array", "dojo/_base/connect", "dojo/_base/lang", "dojo/_base/html", "dojo/_base/event", "dojo/_base/window", "dojo/keys", "dojo/query", "dojo/string", "../_Plugin", "../../EnhancedGrid"], function (_1112, array, _1113, lang, html, evt, win, keys, query, _1114, _1115, _1116) {
                var _1117 = _1112("dojox.grid.enhanced.plugins.NestedSorting", _1115, {
                    name: "nestedSorting",
                    _currMainSort: "none",
                    _currRegionIdx: -1,
                    _a11yText: {
                        "dojoxGridDescending": "&#9662;",
                        "dojoxGridAscending": "&#9652;",
                        "dojoxGridAscendingTip": "&#1784;",
                        "dojoxGridDescendingTip": "&#1783;",
                        "dojoxGridUnsortedTip": "x"
                    },
                    constructor: function () {
                        this._sortDef = [];
                        this._sortData = {};
                        this._headerNodes = {};
                        this._excludedColIdx = [];
                        this.nls = this.grid._nls;
                        this.grid.setSortInfo = function () {};
                        this.grid.setSortIndex = lang.hitch(this, "_setGridSortIndex");
                        this.grid.getSortIndex = function () {};
                        this.grid.getSortProps = lang.hitch(this, "getSortProps");
                        if (this.grid.sortFields) {
                            this._setGridSortIndex(this.grid.sortFields, null, true);
                        }
                        this.connect(this.grid.views, "render", "_initSort");
                        this.initCookieHandler();
                        this.subscribe("dojox/grid/rearrange/move/" + this.grid.id, lang.hitch(this, "_onColumnDnD"));
                    },
                    onStartUp: function () {
                        this.inherited(arguments);
                        this.connect(this.grid, "onHeaderCellClick", "_onHeaderCellClick");
                        this.connect(this.grid, "onHeaderCellMouseOver", "_onHeaderCellMouseOver");
                        this.connect(this.grid, "onHeaderCellMouseOut", "_onHeaderCellMouseOut");
                    },
                    _onColumnDnD: function (type, _1118) {
                        if (type !== "col") {
                            return;
                        }
                        var m = _1118,
                            obj = {},
                            d = this._sortData,
                            p;
                        var cr = this._getCurrentRegion();
                        this._blurRegion(cr);
                        var idx = this._getRegionHeader(cr).getAttribute("idx");
                        for (p in m) {
                            if (d[p]) {
                                obj[m[p]] = d[p];
                                delete d[p];
                            }
                            if (p === idx) {
                                idx = m[p];
                            }
                        }
                        for (p in obj) {
                            d[p] = obj[p];
                        }
                        var c = this._headerNodes[idx];
                        this._currRegionIdx = array.indexOf(this._getRegions(), c.firstChild);
                        this._initSort(false);
                    },
                    _setGridSortIndex: function (_1119, inAsc, _111a) {
                        if (lang.isArray(_1119)) {
                            var i, d, cell;
                            for (i = 0; i < _1119.length; i++) {
                                d = _1119[i];
                                cell = this.grid.getCellByField(d.attribute);
                                if (!cell) {
                                    console.warn("Invalid sorting option, column ", d.attribute, " not found.");
                                    return;
                                }
                                if (cell["nosort"] || !this.grid.canSort(cell.index, cell.field)) {
                                    console.warn("Invalid sorting option, column ", d.attribute, " is unsortable.");
                                    return;
                                }
                            }
                            this.clearSort();
                            array.forEach(_1119, function (d, i) {
                                cell = this.grid.getCellByField(d.attribute);
                                this.setSortData(cell.index, "index", i);
                                this.setSortData(cell.index, "order", d.descending ? "desc" : "asc");
                            }, this);
                        } else {
                            if (!isNaN(_1119)) {
                                if (inAsc === undefined) {
                                    return;
                                }
                                this.setSortData(_1119, "order", inAsc ? "asc" : "desc");
                            } else {
                                return;
                            }
                        }
                        this._updateSortDef();
                        if (!_111a) {
                            this.grid.sort();
                        }
                    },
                    getSortProps: function () {
                        return this._sortDef.length ? this._sortDef : null;
                    },
                    _initSort: function (_111b) {
                        var g = this.grid,
                            n = g.domNode,
                            len = this._sortDef.length;
                        html.toggleClass(n, "dojoxGridSorted", !! len);
                        html.toggleClass(n, "dojoxGridSingleSorted", len === 1);
                        html.toggleClass(n, "dojoxGridNestSorted", len > 1);
                        if (len > 0) {
                            this._currMainSort = this._sortDef[0].descending ? "desc" : "asc";
                        }
                        var idx, _111c = this._excludedCoIdx = [];
                        this._headerNodes = query("th", g.viewsHeaderNode).forEach(function (n) {
                            idx = parseInt(n.getAttribute("idx"), 10);
                            if (html.style(n, "display") === "none" || g.layout.cells[idx]["nosort"] || (g.canSort && !g.canSort(idx, g.layout.cells[idx]["field"]))) {
                                _111c.push(idx);
                            }
                        });
                        this._headerNodes.forEach(this._initHeaderNode, this);
                        this._initFocus();
                        if (_111b) {
                            this._focusHeader();
                        }
                    },
                    _initHeaderNode: function (node) {
                        html.toggleClass(node, "dojoxGridSortNoWrap", true);
                        var _111d = query(".dojoxGridSortNode", node)[0];
                        if (_111d) {
                            html.toggleClass(_111d, "dojoxGridSortNoWrap", true);
                        }
                        if (array.indexOf(this._excludedCoIdx, node.getAttribute("idx")) >= 0) {
                            html.addClass(node, "dojoxGridNoSort");
                            return;
                        }
                        if (!query(".dojoxGridSortBtn", node).length) {
                            this._connects = array.filter(this._connects, function (conn) {
                                if (conn._sort) {
                                    _1113.disconnect(conn);
                                    return false;
                                }
                                return true;
                            });
                            var n = html.create("a", {
                                className: "dojoxGridSortBtn dojoxGridSortBtnNested",
                                title: _1114.substitute(this.nls.sortingState, [this.nls.nestedSort, this.nls.ascending]),
                                innerHTML: "1"
                            }, node.firstChild, "last");
                            n.onmousedown = evt.stop;
                            n = html.create("a", {
                                className: "dojoxGridSortBtn dojoxGridSortBtnSingle",
                                title: _1114.substitute(this.nls.sortingState, [this.nls.singleSort, this.nls.ascending])
                            }, node.firstChild, "last");
                            n.onmousedown = evt.stop;
                        } else {
                            var a1 = query(".dojoxGridSortBtnSingle", node)[0];
                            var a2 = query(".dojoxGridSortBtnNested", node)[0];
                            a1.className = "dojoxGridSortBtn dojoxGridSortBtnSingle";
                            a2.className = "dojoxGridSortBtn dojoxGridSortBtnNested";
                            a2.innerHTML = "1";
                            html.removeClass(node, "dojoxGridCellShowIndex");
                            html.removeClass(node.firstChild, "dojoxGridSortNodeSorted");
                            html.removeClass(node.firstChild, "dojoxGridSortNodeAsc");
                            html.removeClass(node.firstChild, "dojoxGridSortNodeDesc");
                            html.removeClass(node.firstChild, "dojoxGridSortNodeMain");
                            html.removeClass(node.firstChild, "dojoxGridSortNodeSub");
                        }
                        this._updateHeaderNodeUI(node);
                    },
                    _onHeaderCellClick: function (e) {
                        this._focusRegion(e.target);
                        if (html.hasClass(e.target, "dojoxGridSortBtn")) {
                            this._onSortBtnClick(e);
                            evt.stop(e);
                            this._focusRegion(this._getCurrentRegion());
                        }
                    },
                    _onHeaderCellMouseOver: function (e) {
                        if (!e.cell) {
                            return;
                        }
                        if (this._sortDef.length > 1) {
                            return;
                        }
                        if (this._sortData[e.cellIndex] && this._sortData[e.cellIndex].index === 0) {
                            return;
                        }
                        var p;
                        for (p in this._sortData) {
                            if (this._sortData[p] && this._sortData[p].index === 0) {
                                html.addClass(this._headerNodes[p], "dojoxGridCellShowIndex");
                                break;
                            }
                        }
                        if (!html.hasClass(win.body(), "dijit_a11y")) {
                            return;
                        }
                        var i = e.cell.index,
                            node = e.cellNode;
                        var _111e = query(".dojoxGridSortBtnSingle", node)[0];
                        var _111f = query(".dojoxGridSortBtnNested", node)[0];
                        var _1120 = "none";
                        if (html.hasClass(this.grid.domNode, "dojoxGridSingleSorted")) {
                            _1120 = "single";
                        } else {
                            if (html.hasClass(this.grid.domNode, "dojoxGridNestSorted")) {
                                _1120 = "nested";
                            }
                        }
                        var _1121 = _111f.getAttribute("orderIndex");
                        if (_1121 === null || _1121 === undefined) {
                            _111f.setAttribute("orderIndex", _111f.innerHTML);
                            _1121 = _111f.innerHTML;
                        }
                        if (this.isAsc(i)) {
                            _111f.innerHTML = _1121 + this._a11yText.dojoxGridDescending;
                        } else {
                            if (this.isDesc(i)) {
                                _111f.innerHTML = _1121 + this._a11yText.dojoxGridUnsortedTip;
                            } else {
                                _111f.innerHTML = _1121 + this._a11yText.dojoxGridAscending;
                            }
                        }
                        if (this._currMainSort === "none") {
                            _111e.innerHTML = this._a11yText.dojoxGridAscending;
                        } else {
                            if (this._currMainSort === "asc") {
                                _111e.innerHTML = this._a11yText.dojoxGridDescending;
                            } else {
                                if (this._currMainSort === "desc") {
                                    _111e.innerHTML = this._a11yText.dojoxGridUnsortedTip;
                                }
                            }
                        }
                    },
                    _onHeaderCellMouseOut: function (e) {
                        var p;
                        for (p in this._sortData) {
                            if (this._sortData[p] && this._sortData[p].index === 0) {
                                html.removeClass(this._headerNodes[p], "dojoxGridCellShowIndex");
                                break;
                            }
                        }
                    },
                    _onSortBtnClick: function (e) {
                        var _1122 = e.cell.index;
                        if (html.hasClass(e.target, "dojoxGridSortBtnSingle")) {
                            this._prepareSingleSort(_1122);
                        } else {
                            if (html.hasClass(e.target, "dojoxGridSortBtnNested")) {
                                this._prepareNestedSort(_1122);
                            } else {
                                return;
                            }
                        }
                        evt.stop(e);
                        this._doSort(_1122);
                    },
                    _doSort: function (_1123) {
                        if (!this._sortData[_1123] || !this._sortData[_1123].order) {
                            this.setSortData(_1123, "order", "asc");
                        } else {
                            if (this.isAsc(_1123)) {
                                this.setSortData(_1123, "order", "desc");
                            } else {
                                if (this.isDesc(_1123)) {
                                    this.removeSortData(_1123);
                                }
                            }
                        }
                        this._updateSortDef();
                        this.grid.sort();
                        this._initSort(true);
                    },
                    setSortData: function (_1124, attr, value) {
                        var sd = this._sortData[_1124];
                        if (!sd) {
                            sd = this._sortData[_1124] = {};
                        }
                        sd[attr] = value;
                    },
                    removeSortData: function (_1125) {
                        var d = this._sortData,
                            i = d[_1125].index,
                            p;
                        delete d[_1125];
                        for (p in d) {
                            if (d[p].index > i) {
                                d[p].index--;
                            }
                        }
                    },
                    _prepareSingleSort: function (_1126) {
                        var d = this._sortData,
                            p;
                        for (p in d) {
                            delete d[p];
                        }
                        this.setSortData(_1126, "index", 0);
                        this.setSortData(_1126, "order", this._currMainSort === "none" ? null : this._currMainSort);
                        if (!this._sortData[_1126] || !this._sortData[_1126].order) {
                            this._currMainSort = "asc";
                        } else {
                            if (this.isAsc(_1126)) {
                                this._currMainSort = "desc";
                            } else {
                                if (this.isDesc(_1126)) {
                                    this._currMainSort = "none";
                                }
                            }
                        }
                    },
                    _prepareNestedSort: function (_1127) {
                        var i = this._sortData[_1127] ? this._sortData[_1127].index : null;
                        if (i === 0 || !! i) {
                            return;
                        }
                        this.setSortData(_1127, "index", this._sortDef.length);
                    },
                    _updateSortDef: function () {
                        this._sortDef.length = 0;
                        var d = this._sortData,
                            p;
                        for (p in d) {
                            this._sortDef[d[p].index] = {
                                attribute: this.grid.layout.cells[p].field,
                                descending: d[p].order === "desc"
                            };
                        }
                    },
                    _updateHeaderNodeUI: function (node) {
                        var cell = this._getCellByNode(node);
                        var _1128 = cell.index;
                        var data = this._sortData[_1128];
                        var _1129 = query(".dojoxGridSortNode", node)[0];
                        var _112a = query(".dojoxGridSortBtnSingle", node)[0];
                        var _112b = query(".dojoxGridSortBtnNested", node)[0];
                        html.toggleClass(_112a, "dojoxGridSortBtnAsc", this._currMainSort === "asc");
                        html.toggleClass(_112a, "dojoxGridSortBtnDesc", this._currMainSort === "desc");
                        if (this._currMainSort === "asc") {
                            _112a.title = _1114.substitute(this.nls.sortingState, [this.nls.singleSort, this.nls.descending]);
                        } else {
                            if (this._currMainSort === "desc") {
                                _112a.title = _1114.substitute(this.nls.sortingState, [this.nls.singleSort, this.nls.unsorted]);
                            } else {
                                _112a.title = _1114.substitute(this.nls.sortingState, [this.nls.singleSort, this.nls.ascending]);
                            }
                        }
                        var _112c = this;

                        function _112d() {
                            var _112e = "Column " + (cell.index + 1) + " " + cell.field;
                            var _112f = "none";
                            var _1130 = "ascending";
                            if (data) {
                                _112f = data.order === "asc" ? "ascending" : "descending";
                                _1130 = data.order === "asc" ? "descending" : "none";
                            }
                            var _1131 = _112e + " - is sorted by " + _112f;
                            var _1132 = _112e + " - is nested sorted by " + _112f;
                            var _1133 = _112e + " - choose to sort by " + _1130;
                            var _1134 = _112e + " - choose to nested sort by " + _1130;
                            _112a.setAttribute("aria-label", _1131);
                            _112b.setAttribute("aria-label", _1132);
                            var _1135 = [_112c.connect(_112a, "onmouseover", function () {
                                _112a.setAttribute("aria-label", _1133);
                            }), _112c.connect(_112a, "onmouseout", function () {
                                _112a.setAttribute("aria-label", _1131);
                            }), _112c.connect(_112b, "onmouseover", function () {
                                _112b.setAttribute("aria-label", _1134);
                            }), _112c.connect(_112b, "onmouseout", function () {
                                _112b.setAttribute("aria-label", _1132);
                            })];
                            array.forEach(_1135, function (_1136) {
                                _1136._sort = true;
                            });
                        };
                        _112d();
                        var a11y = html.hasClass(win.body(), "dijit_a11y");
                        if (!data) {
                            _112b.innerHTML = this._sortDef.length + 1;
                            _112b.title = _1114.substitute(this.nls.sortingState, [this.nls.nestedSort, this.nls.ascending]);
                            if (a11y) {
                                _1129.innerHTML = this._a11yText.dojoxGridUnsortedTip;
                            }
                            return;
                        }
                        if (data.index || (data.index === 0 && this._sortDef.length > 1)) {
                            _112b.innerHTML = data.index + 1;
                        }
                        html.addClass(_1129, "dojoxGridSortNodeSorted");
                        if (this.isAsc(_1128)) {
                            html.addClass(_1129, "dojoxGridSortNodeAsc");
                            _112b.title = _1114.substitute(this.nls.sortingState, [this.nls.nestedSort, this.nls.descending]);
                            if (a11y) {
                                _1129.innerHTML = this._a11yText.dojoxGridAscendingTip;
                            }
                        } else {
                            if (this.isDesc(_1128)) {
                                html.addClass(_1129, "dojoxGridSortNodeDesc");
                                _112b.title = _1114.substitute(this.nls.sortingState, [this.nls.nestedSort, this.nls.unsorted]);
                                if (a11y) {
                                    _1129.innerHTML = this._a11yText.dojoxGridDescendingTip;
                                }
                            }
                        }
                        html.addClass(_1129, (data.index === 0 ? "dojoxGridSortNodeMain" : "dojoxGridSortNodeSub"));
                    },
                    isAsc: function (_1137) {
                        return this._sortData[_1137].order === "asc";
                    },
                    isDesc: function (_1138) {
                        return this._sortData[_1138].order === "desc";
                    },
                    _getCellByNode: function (node) {
                        var i;
                        for (i = 0; i < this._headerNodes.length; i++) {
                            if (this._headerNodes[i] === node) {
                                return this.grid.layout.cells[i];
                            }
                        }
                        return null;
                    },
                    clearSort: function () {
                        this._sortData = {};
                        this._sortDef.length = 0;
                    },
                    initCookieHandler: function () {
                        if (this.grid.addCookieHandler) {
                            this.grid.addCookieHandler({
                                name: "sortOrder",
                                onLoad: lang.hitch(this, "_loadNestedSortingProps"),
                                onSave: lang.hitch(this, "_saveNestedSortingProps")
                            });
                        }
                    },
                    _loadNestedSortingProps: function (_1139, grid) {
                        this._setGridSortIndex(_1139);
                    },
                    _saveNestedSortingProps: function (grid) {
                        return this.getSortProps();
                    },
                    _initFocus: function () {
                        var f = this.focus = this.grid.focus;
                        this._focusRegions = this._getRegions();
                        if (!this._headerArea) {
                            var area = this._headerArea = f.getArea("header");
                            area.onFocus = f.focusHeader = lang.hitch(this, "_focusHeader");
                            area.onBlur = f.blurHeader = f._blurHeader = lang.hitch(this, "_blurHeader");
                            area.onMove = lang.hitch(this, "_onMove");
                            area.onKeyDown = lang.hitch(this, "_onKeyDown");
                            area._regions = [];
                            area.getRegions = null;
                            this.connect(this.grid, "onBlur", "_blurHeader");
                        }
                    },
                    _focusHeader: function (e) {
                        if (this._currRegionIdx === -1) {
                            this._onMove(0, 1, null);
                        } else {
                            this._focusRegion(this._getCurrentRegion());
                        }
                        try {
                            evt.stop(e);
                        } catch (e) {}
                        return true;
                    },
                    _blurHeader: function (e) {
                        this._blurRegion(this._getCurrentRegion());
                        return true;
                    },
                    _onMove: function (_113a, _113b, e) {
                        var curr = this._currRegionIdx || 0,
                            _113c = this._focusRegions;
                        var _113d = _113c[curr + _113b];
                        if (!_113d) {
                            return;
                        } else {
                            if (html.style(_113d, "display") === "none" || html.style(_113d, "visibility") === "hidden") {
                                this._onMove(_113a, _113b + (_113b > 0 ? 1 : -1), e);
                                return;
                            }
                        }
                        this._focusRegion(_113d);
                        var view = this._getRegionView(_113d);
                        view.scrollboxNode.scrollLeft = view.headerNode.scrollLeft;
                    },
                    _onKeyDown: function (e, _113e) {
                        if (_113e) {
                            switch (e.keyCode) {
                            case keys.ENTER:
                            case keys.SPACE:
                                if (html.hasClass(e.target, "dojoxGridSortBtnSingle") || html.hasClass(e.target, "dojoxGridSortBtnNested")) {
                                    this._onSortBtnClick(e);
                                }
                            }
                        }
                    },
                    _getRegionView: function (_113f) {
                        var _1140 = _113f;
                        while (_1140 && !html.hasClass(_1140, "dojoxGridHeader")) {
                            _1140 = _1140.parentNode;
                        }
                        if (_1140) {
                            return array.filter(this.grid.views.views, function (view) {
                                return view.headerNode === _1140;
                            })[0] || null;
                        }
                        return null;
                    },
                    _getRegions: function () {
                        var _1141 = [],
                            cells = this.grid.layout.cells;
                        this._headerNodes.forEach(function (n, i) {
                            if (html.style(n, "display") === "none") {
                                return;
                            }
                            if (cells[i]["isRowSelector"]) {
                                _1141.push(n);
                                return;
                            }
                            query(".dojoxGridSortNode,.dojoxGridSortBtnNested,.dojoxGridSortBtnSingle", n).forEach(function (node) {
                                node.setAttribute("tabindex", 0);
                                _1141.push(node);
                            });
                        }, this);
                        return _1141;
                    },
                    _focusRegion: function (_1142) {
                        if (!_1142) {
                            return;
                        }
                        var _1143 = this._getCurrentRegion();
                        if (_1143 && _1142 !== _1143) {
                            this._blurRegion(_1143);
                        }
                        var _1144 = this._getRegionHeader(_1142);
                        html.addClass(_1144, "dojoxGridCellSortFocus");
                        if (html.hasClass(_1142, "dojoxGridSortNode")) {
                            html.addClass(_1142, "dojoxGridSortNodeFocus");
                        } else {
                            if (html.hasClass(_1142, "dojoxGridSortBtn")) {
                                html.addClass(_1142, "dojoxGridSortBtnFocus");
                            }
                        }
                        _1142.focus();
                        this.focus.currentArea("header");
                        this._currRegionIdx = array.indexOf(this._focusRegions, _1142);
                    },
                    _blurRegion: function (_1145) {
                        if (!_1145) {
                            return;
                        }
                        var _1146 = this._getRegionHeader(_1145);
                        html.removeClass(_1146, "dojoxGridCellSortFocus");
                        if (html.hasClass(_1145, "dojoxGridSortNode")) {
                            html.removeClass(_1145, "dojoxGridSortNodeFocus");
                        } else {
                            if (html.hasClass(_1145, "dojoxGridSortBtn")) {
                                html.removeClass(_1145, "dojoxGridSortBtnFocus");
                            }
                        }
                        _1145.blur();
                    },
                    _getCurrentRegion: function () {
                        return this._focusRegions ? this._focusRegions[this._currRegionIdx] : null;
                    },
                    _getRegionHeader: function (_1147) {
                        while (_1147 && !html.hasClass(_1147, "dojoxGridCell")) {
                            _1147 = _1147.parentNode;
                        }
                        return _1147;
                    },
                    destroy: function () {
                        this._sortDef = this._sortData = null;
                        this._headerNodes = this._focusRegions = null;
                        this.inherited(arguments);
                    }
                });
                _1116.registerPlugin(_1117);
                return _1117;
            });
        },
        "dojox/grid/enhanced/plugins/Selector": function () {
            define("dojox/grid/enhanced/plugins/Selector", ["dojo/_base/kernel", "dojo/_base/lang", "dojo/_base/declare", "dojo/_base/array", "dojo/_base/event", "dojo/keys", "dojo/query", "dojo/_base/html", "dojo/_base/window", "dijit/focus", "../../_RowSelector", "../_Plugin", "../../EnhancedGrid", "../../cells/_base", "./AutoScroll"], function (dojo, lang, _1148, array, event, keys, query, html, win, _1149, _114a, _114b, _114c) {
                var _114d = 0,
                    _114e = 1,
                    MULTI = 2,
                    _114f = {
                        col: "row",
                        row: "col"
                    },
                    _1150 = function (type, value, start, end, _1151) {
                        if (type !== "cell") {
                            value = value[type];
                            start = start[type];
                            end = end[type];
                            if (typeof value !== "number" || typeof start !== "number" || typeof end !== "number") {
                                return false;
                            }
                            return _1151 ? ((value >= start && value < end) || (value > end && value <= start)) : ((value >= start && value <= end) || (value >= end && value <= start));
                        } else {
                            return _1150("col", value, start, end, _1151) && _1150("row", value, start, end, _1151);
                        }
                    },
                    _1152 = function (type, v1, v2) {
                        try {
                            if (v1 && v2) {
                                switch (type) {
                                case "col":
                                case "row":
                                    return v1[type] == v2[type] && typeof v1[type] == "number" && !(_114f[type] in v1) && !(_114f[type] in v2);
                                case "cell":
                                    return v1.col == v2.col && v1.row == v2.row && typeof v1.col == "number" && typeof v1.row == "number";
                                }
                            }
                        } catch (e) {}
                        return false;
                    },
                    _1153 = function (evt) {
                        try {
                            if (evt && evt.preventDefault) {
                                event.stop(evt);
                            }
                        } catch (e) {}
                    },
                    _1154 = function (type, _1155, _1156) {
                        switch (type) {
                        case "col":
                            return {
                                "col": typeof _1156 == "undefined" ? _1155 : _1156,
                                "except": []
                            };
                        case "row":
                            return {
                                "row": _1155,
                                "except": []
                            };
                        case "cell":
                            return {
                                "row": _1155,
                                "col": _1156
                            };
                        }
                        return null;
                    };
                var _1157 = _1148("dojox.grid.enhanced.plugins.Selector", _114b, {
                    name: "selector",
                    constructor: function (grid, args) {
                        this.grid = grid;
                        this._config = {
                            row: MULTI,
                            col: MULTI,
                            cell: MULTI
                        };
                        this.noClear = args && args.noClear;
                        this.setupConfig(args);
                        if (grid.selectionMode === "single") {
                            this._config.row = _114e;
                        }
                        this._enabled = true;
                        this._selecting = {};
                        this._selected = {
                            "col": [],
                            "row": [],
                            "cell": []
                        };
                        this._startPoint = {};
                        this._currentPoint = {};
                        this._lastAnchorPoint = {};
                        this._lastEndPoint = {};
                        this._lastSelectedAnchorPoint = {};
                        this._lastSelectedEndPoint = {};
                        this._keyboardSelect = {};
                        this._lastType = null;
                        this._selectedRowModified = {};
                        this._hacks();
                        this._initEvents();
                        this._initAreas();
                        this._mixinGrid();
                    },
                    destroy: function () {
                        this.inherited(arguments);
                    },
                    setupConfig: function (_1158) {
                        if (!_1158 || !lang.isObject(_1158)) {
                            return;
                        }
                        var types = ["row", "col", "cell"];
                        for (var type in _1158) {
                            if (array.indexOf(types, type) >= 0) {
                                if (!_1158[type] || _1158[type] == "disabled") {
                                    this._config[type] = _114d;
                                } else {
                                    if (_1158[type] == "single") {
                                        this._config[type] = _114e;
                                    } else {
                                        this._config[type] = MULTI;
                                    }
                                }
                            }
                        }
                        var mode = ["none", "single", "extended"][this._config.row];
                        this.grid.selection.setMode(mode);
                    },
                    isSelected: function (type, _1159, _115a) {
                        return this._isSelected(type, _1154(type, _1159, _115a));
                    },
                    toggleSelect: function (type, _115b, _115c) {
                        this._startSelect(type, _1154(type, _115b, _115c), this._config[type] === MULTI, false, false, !this.isSelected(type, _115b, _115c));
                        this._endSelect(type);
                    },
                    select: function (type, _115d, _115e) {
                        if (!this.isSelected(type, _115d, _115e)) {
                            this.toggleSelect(type, _115d, _115e);
                        }
                    },
                    deselect: function (type, _115f, _1160) {
                        if (this.isSelected(type, _115f, _1160)) {
                            this.toggleSelect(type, _115f, _1160);
                        }
                    },
                    selectRange: function (type, start, end, _1161) {
                        this.grid._selectingRange = true;
                        var _1162 = type == "cell" ? _1154(type, start.row, start.col) : _1154(type, start),
                            _1163 = type == "cell" ? _1154(type, end.row, end.col) : _1154(type, end);
                        this._startSelect(type, _1162, false, false, false, _1161);
                        this._highlight(type, _1163, _1161 === undefined ? true : _1161);
                        this._endSelect(type);
                        this.grid._selectingRange = false;
                    },
                    clear: function (type) {
                        this._clearSelection(type || "all");
                    },
                    isSelecting: function (type) {
                        if (typeof type == "undefined") {
                            return this._selecting.col || this._selecting.row || this._selecting.cell;
                        }
                        return this._selecting[type];
                    },
                    selectEnabled: function (_1164) {
                        if (typeof _1164 != "undefined" && !this.isSelecting()) {
                            this._enabled = !! _1164;
                        }
                        return this._enabled;
                    },
                    getSelected: function (type, _1165) {
                        switch (type) {
                        case "cell":
                            return array.map(this._selected[type], function (item) {
                                return item;
                            });
                        case "col":
                        case "row":
                            return array.map(_1165 ? this._selected[type] : array.filter(this._selected[type], function (item) {
                                return item.except.length === 0;
                            }), function (item) {
                                return _1165 ? item : item[type];
                            });
                        }
                        return [];
                    },
                    getSelectedCount: function (type, _1166) {
                        switch (type) {
                        case "cell":
                            return this._selected[type].length;
                        case "col":
                        case "row":
                            return (_1166 ? this._selected[type] : array.filter(this._selected[type], function (item) {
                                return item.except.length === 0;
                            })).length;
                        }
                        return 0;
                    },
                    getSelectedType: function () {
                        var s = this._selected;
                        return ["", "cell", "row", "row|cell", "col", "col|cell", "col|row", "col|row|cell"][( !! s.cell.length) | ( !! s.row.length << 1) | ( !! s.col.length << 2)];
                    },
                    getLastSelectedRange: function (type) {
                        return this._lastAnchorPoint[type] ? {
                            "start": this._lastAnchorPoint[type],
                            "end": this._lastEndPoint[type]
                        } : null;
                    },
                    _hacks: function () {
                        var g = this.grid;
                        var _1167 = function (e) {
                                if (e.cellNode) {
                                    g.onMouseUp(e);
                                }
                                g.onMouseUpRow(e);
                            };
                        var _1168 = lang.hitch(g, "onMouseUp");
                        var _1169 = lang.hitch(g, "onMouseDown");
                        var _116a = function (e) {
                                e.cellNode.style.border = "solid 1px";
                            };
                        array.forEach(g.views.views, function (view) {
                            view.content.domouseup = _1167;
                            view.header.domouseup = _1168;
                            if (view.declaredClass == "dojox.grid._RowSelector") {
                                view.domousedown = _1169;
                                view.domouseup = _1168;
                                view.dofocus = _116a;
                            }
                        });
                        g.selection.clickSelect = function () {};
                        this._oldDeselectAll = g.selection.deselectAll;
                        var _116b = this;
                        g.selection.selectRange = function (from, to) {
                            _116b.selectRange("row", from, to, true);
                            if (g.selection.preserver) {
                                g.selection.preserver._updateMapping(true, true, false, from, to);
                            }
                            g.selection.onChanged();
                        };
                        g.selection.deselectRange = function (from, to) {
                            _116b.selectRange("row", from, to, false);
                            if (g.selection.preserver) {
                                g.selection.preserver._updateMapping(true, false, false, from, to);
                            }
                            g.selection.onChanged();
                        };
                        g.selection.deselectAll = function () {
                            g._selectingRange = true;
                            _116b._oldDeselectAll.apply(g.selection, arguments);
                            _116b._clearSelection("all");
                            g._selectingRange = false;
                            if (g.selection.preserver) {
                                g.selection.preserver._updateMapping(true, false, true);
                            }
                            g.selection.onChanged();
                        };
                        var _116c = g.views.views[0];
                        if (_116c instanceof _114a) {
                            _116c.doStyleRowNode = function (_116d, _116e) {
                                html.removeClass(_116e, "dojoxGridRow");
                                html.addClass(_116e, "dojoxGridRowbar");
                                html.addClass(_116e, "dojoxGridNonNormalizedCell");
                                html.toggleClass(_116e, "dojoxGridRowbarOver", g.rows.isOver(_116d));
                                html.toggleClass(_116e, "dojoxGridRowbarSelected", !! g.selection.isSelected(_116d));
                            };
                        }
                        this.connect(g, "updateRow", function (_116f) {
                            array.forEach(g.layout.cells, function (cell) {
                                if (this.isSelected("cell", _116f, cell.index)) {
                                    this._highlightNode(cell.getNode(_116f), true);
                                }
                            }, this);
                        });
                    },
                    _mixinGrid: function () {
                        var g = this.grid;
                        g.setupSelectorConfig = lang.hitch(this, this.setupConfig);
                        g.onStartSelect = function () {};
                        g.onEndSelect = function () {};
                        g.onStartDeselect = function () {};
                        g.onEndDeselect = function () {};
                        g.onSelectCleared = function () {};
                    },
                    _initEvents: function () {
                        var g = this.grid,
                            _1170 = this,
                            dp = lang.partial,
                            _1171 = function (type, e) {
                                if (type === "row") {
                                    _1170._isUsingRowSelector = true;
                                }
                                if (_1170.selectEnabled() && _1170._config[type] && e.button != 2) {
                                    if (_1170._keyboardSelect.col || _1170._keyboardSelect.row || _1170._keyboardSelect.cell) {
                                        _1170._endSelect("all");
                                        _1170._keyboardSelect.col = _1170._keyboardSelect.row = _1170._keyboardSelect.cell = 0;
                                    }
                                    if (_1170._usingKeyboard) {
                                        _1170._usingKeyboard = false;
                                    }
                                    var _1172 = _1154(type, e.rowIndex, e.cell && e.cell.index);
                                    _1170._startSelect(type, _1172, e.ctrlKey, e.shiftKey);
                                }
                            },
                            ender = lang.hitch(this, "_endSelect");
                        this.connect(g, "onHeaderCellMouseDown", dp(_1171, "col"));
                        this.connect(g, "onHeaderCellMouseUp", dp(ender, "col"));
                        this.connect(g, "onRowSelectorMouseDown", dp(_1171, "row"));
                        this.connect(g, "onRowSelectorMouseUp", dp(ender, "row"));
                        this.connect(g, "onCellMouseDown", function (e) {
                            if (e.cell && e.cell.isRowSelector) {
                                return;
                            }
                            if (g.singleClickEdit) {
                                _1170._singleClickEdit = true;
                                g.singleClickEdit = false;
                            }
                            _1171(_1170._config["cell"] == _114d ? "row" : "cell", e);
                        });
                        this.connect(g, "onCellMouseUp", function (e) {
                            if (_1170._singleClickEdit) {
                                delete _1170._singleClickEdit;
                                g.singleClickEdit = true;
                            }
                            ender("all", e);
                        });
                        this.connect(g, "onCellMouseOver", function (e) {
                            if (_1170._curType != "row" && _1170._selecting[_1170._curType] && _1170._config[_1170._curType] == MULTI) {
                                _1170._highlight("col", _1154("col", e.cell.index), _1170._toSelect);
                                if (!_1170._keyboardSelect.cell) {
                                    _1170._highlight("cell", _1154("cell", e.rowIndex, e.cell.index), _1170._toSelect);
                                }
                            }
                        });
                        this.connect(g, "onHeaderCellMouseOver", function (e) {
                            if (_1170._selecting.col && _1170._config.col == MULTI) {
                                _1170._highlight("col", _1154("col", e.cell.index), _1170._toSelect);
                            }
                        });
                        this.connect(g, "onRowMouseOver", function (e) {
                            if (_1170._selecting.row && _1170._config.row == MULTI) {
                                _1170._highlight("row", _1154("row", e.rowIndex), _1170._toSelect);
                            }
                        });
                        this.connect(g, "onSelectedById", "_onSelectedById");
                        this.connect(g, "_onFetchComplete", function () {
                            if (!g._notRefreshSelection) {
                                this._refreshSelected(true);
                            }
                        });
                        this.connect(g.scroller, "buildPage", function () {
                            if (!g._notRefreshSelection) {
                                this._refreshSelected(true);
                            }
                        });
                        this.connect(win.doc, "onmouseup", dp(ender, "all"));
                        this.connect(g, "onEndAutoScroll", function (_1173, _1174, view, _1175) {
                            var _1176 = _1170._selecting.cell,
                                type, _1177, dir = _1174 ? 1 : -1;
                            if (_1173 && (_1176 || _1170._selecting.row)) {
                                type = _1176 ? "cell" : "row";
                                _1177 = _1170._currentPoint[type];
                                _1170._highlight(type, _1154(type, _1177.row + dir, _1177.col), _1170._toSelect);
                            } else {
                                if (!_1173 && (_1176 || _1170._selecting.col)) {
                                    type = _1176 ? "cell" : "col";
                                    _1177 = _1170._currentPoint[type];
                                    _1170._highlight(type, _1154(type, _1177.row, _1175), _1170._toSelect);
                                }
                            }
                        });
                        this.subscribe("dojox/grid/rearrange/move/" + g.id, "_onInternalRearrange");
                        this.subscribe("dojox/grid/rearrange/copy/" + g.id, "_onInternalRearrange");
                        this.subscribe("dojox/grid/rearrange/change/" + g.id, "_onExternalChange");
                        this.subscribe("dojox/grid/rearrange/insert/" + g.id, "_onExternalChange");
                        this.subscribe("dojox/grid/rearrange/remove/" + g.id, "clear");
                        this.connect(g, "onSelected", function (_1178) {
                            if (this._selectedRowModified && this._isUsingRowSelector) {
                                delete this._selectedRowModified;
                            } else {
                                if (!this.grid._selectingRange) {
                                    this.select("row", _1178);
                                }
                            }
                        });
                        this.connect(g, "onDeselected", function (_1179) {
                            if (this._selectedRowModified && this._isUsingRowSelector) {
                                delete this._selectedRowModified;
                            } else {
                                if (!this.grid._selectingRange) {
                                    this.deselect("row", _1179);
                                }
                            }
                        });
                    },
                    _onSelectedById: function (id, _117a, _117b) {
                        if (this.grid._noInternalMapping) {
                            return;
                        }
                        var _117c = [this._lastAnchorPoint.row, this._lastEndPoint.row, this._lastSelectedAnchorPoint.row, this._lastSelectedEndPoint.row];
                        _117c = _117c.concat(this._selected.row);
                        var found = false;
                        array.forEach(_117c, function (item) {
                            if (item) {
                                if (item.id === id) {
                                    found = true;
                                    item.row = _117a;
                                } else {
                                    if (item.row === _117a && item.id) {
                                        item.row = -1;
                                    }
                                }
                            }
                        });
                        if (!found && _117b) {
                            array.some(this._selected.row, function (item) {
                                if (item && !item.id && !item.except.length) {
                                    item.id = id;
                                    item.row = _117a;
                                    return true;
                                }
                                return false;
                            });
                        }
                        found = false;
                        _117c = [this._lastAnchorPoint.cell, this._lastEndPoint.cell, this._lastSelectedAnchorPoint.cell, this._lastSelectedEndPoint.cell];
                        _117c = _117c.concat(this._selected.cell);
                        array.forEach(_117c, function (item) {
                            if (item) {
                                if (item.id === id) {
                                    found = true;
                                    item.row = _117a;
                                } else {
                                    if (item.row === _117a && item.id) {
                                        item.row = -1;
                                    }
                                }
                            }
                        });
                    },
                    onSetStore: function () {
                        this._clearSelection("all");
                    },
                    _onInternalRearrange: function (type, _117d) {
                        try {
                            this._refresh("col", false);
                            array.forEach(this._selected.row, function (item) {
                                array.forEach(this.grid.layout.cells, function (cell) {
                                    this._highlightNode(cell.getNode(item.row), false);
                                }, this);
                            }, this);
                            query(".dojoxGridRowSelectorSelected").forEach(function (node) {
                                html.removeClass(node, "dojoxGridRowSelectorSelected");
                                html.removeClass(node, "dojoxGridRowSelectorSelectedUp");
                                html.removeClass(node, "dojoxGridRowSelectorSelectedDown");
                            });
                            var _117e = function (item) {
                                    if (item) {
                                        delete item.converted;
                                    }
                                },
                                _117f = [this._lastAnchorPoint[type], this._lastEndPoint[type], this._lastSelectedAnchorPoint[type], this._lastSelectedEndPoint[type]];
                            if (type === "cell") {
                                this.selectRange("cell", _117d.to.min, _117d.to.max);
                                var cells = this.grid.layout.cells;
                                array.forEach(_117f, function (item) {
                                    if (item.converted) {
                                        return;
                                    }
                                    for (var r = _117d.from.min.row, tr = _117d.to.min.row; r <= _117d.from.max.row; ++r, ++tr) {
                                        for (var c = _117d.from.min.col, tc = _117d.to.min.col; c <= _117d.from.max.col; ++c, ++tc) {
                                            while (cells[c].hidden) {
                                                ++c;
                                            }
                                            while (cells[tc].hidden) {
                                                ++tc;
                                            }
                                            if (item.row == r && item.col == c) {
                                                item.row = tr;
                                                item.col = tc;
                                                item.converted = true;
                                                return;
                                            }
                                        }
                                    }
                                });
                            } else {
                                _117f = this._selected.cell.concat(this._selected[type]).concat(_117f).concat([this._lastAnchorPoint.cell, this._lastEndPoint.cell, this._lastSelectedAnchorPoint.cell, this._lastSelectedEndPoint.cell]);
                                array.forEach(_117f, function (item) {
                                    if (item && !item.converted) {
                                        var from = item[type];
                                        if (from in _117d) {
                                            item[type] = _117d[from];
                                        }
                                        item.converted = true;
                                    }
                                });
                                array.forEach(this._selected[_114f[type]], function (item) {
                                    for (var i = 0, len = item.except.length; i < len; ++i) {
                                        var from = item.except[i];
                                        if (from in _117d) {
                                            item.except[i] = _117d[from];
                                        }
                                    }
                                });
                            }
                            array.forEach(_117f, _117e);
                            this._refreshSelected(true);
                            this._focusPoint(type, this._lastEndPoint);
                        } catch (e) {
                            console.warn("Selector._onInternalRearrange() error", e);
                        }
                    },
                    _onExternalChange: function (type, _1180) {
                        var start = type == "cell" ? _1180.min : _1180[0],
                            end = type == "cell" ? _1180.max : _1180[_1180.length - 1];
                        this.selectRange(type, start, end);
                    },
                    _refresh: function (type, _1181) {
                        if (!this._keyboardSelect[type]) {
                            array.forEach(this._selected[type], function (item) {
                                this._highlightSingle(type, _1181, item, undefined, true);
                            }, this);
                        }
                    },
                    _refreshSelected: function () {
                        this._refresh("col", true);
                        this._refresh("row", true);
                        this._refresh("cell", true);
                    },
                    _initAreas: function () {
                        var g = this.grid,
                            f = g.focus,
                            _1182 = this,
                            _1183 = 1,
                            _1184 = 2,
                            _1185 = function (type, _1186, _1187, _1188, evt) {
                                var ks = _1182._keyboardSelect;
                                if (evt.shiftKey && ks[type]) {
                                    if (ks[type] === _1183) {
                                        if (type === "cell") {
                                            var item = _1182._lastEndPoint[type];
                                            if (f.cell != g.layout.cells[item.col + _1188] || f.rowIndex != item.row + _1187) {
                                                ks[type] = 0;
                                                return;
                                            }
                                        }
                                        _1182._startSelect(type, _1182._lastAnchorPoint[type], true, false, true);
                                        _1182._highlight(type, _1182._lastEndPoint[type], _1182._toSelect);
                                        ks[type] = _1184;
                                    }
                                    var _1189 = _1186(type, _1187, _1188, evt);
                                    if (_1182._isValid(type, _1189, g)) {
                                        _1182._highlight(type, _1189, _1182._toSelect);
                                    }
                                    _1153(evt);
                                }
                            },
                            _118a = function (type, _118b, evt, _118c) {
                                if (_118c && _1182.selectEnabled() && _1182._config[type] != _114d) {
                                    switch (evt.keyCode) {
                                    case keys.SPACE:
                                        _1182._startSelect(type, _118b(), evt.ctrlKey, evt.shiftKey);
                                        _1182._endSelect(type);
                                        break;
                                    case keys.SHIFT:
                                        if (_1182._config[type] == MULTI && _1182._isValid(type, _1182._lastAnchorPoint[type], g)) {
                                            _1182._endSelect(type);
                                            _1182._keyboardSelect[type] = _1183;
                                            _1182._usingKeyboard = true;
                                        }
                                    }
                                }
                            },
                            _118d = function (type, evt, _118e) {
                                if (_118e && evt.keyCode == keys.SHIFT && _1182._keyboardSelect[type]) {
                                    _1182._endSelect(type);
                                    _1182._keyboardSelect[type] = 0;
                                }
                            };
                        if (g.views.views[0] instanceof _114a) {
                            this._lastFocusedRowBarIdx = 0;
                            f.addArea({
                                name: "rowHeader",
                                onFocus: function (evt, step) {
                                    var view = g.views.views[0];
                                    if (view instanceof _114a) {
                                        var _118f = view.getCellNode(_1182._lastFocusedRowBarIdx, 0);
                                        if (_118f) {
                                            html.toggleClass(_118f, f.focusClass, false);
                                        }
                                        if (evt && "rowIndex" in evt) {
                                            if (evt.rowIndex >= 0) {
                                                _1182._lastFocusedRowBarIdx = evt.rowIndex;
                                            } else {
                                                if (!_1182._lastFocusedRowBarIdx) {
                                                    _1182._lastFocusedRowBarIdx = 0;
                                                }
                                            }
                                        }
                                        _118f = view.getCellNode(_1182._lastFocusedRowBarIdx, 0);
                                        if (_118f) {
                                            _1149.focus(_118f);
                                            html.toggleClass(_118f, f.focusClass, true);
                                        }
                                        f.rowIndex = _1182._lastFocusedRowBarIdx;
                                        _1153(evt);
                                        return true;
                                    }
                                    return false;
                                },
                                onBlur: function (evt, step) {
                                    var view = g.views.views[0];
                                    if (view instanceof _114a) {
                                        var _1190 = view.getCellNode(_1182._lastFocusedRowBarIdx, 0);
                                        if (_1190) {
                                            html.toggleClass(_1190, f.focusClass, false);
                                        }
                                        _1153(evt);
                                    }
                                    return true;
                                },
                                onMove: function (_1191, _1192, evt) {
                                    var view = g.views.views[0];
                                    if (_1191 && view instanceof _114a) {
                                        var next = _1182._lastFocusedRowBarIdx + _1191;
                                        if (next >= 0 && next < g.rowCount) {
                                            _1153(evt);
                                            var _1193 = view.getCellNode(_1182._lastFocusedRowBarIdx, 0);
                                            html.toggleClass(_1193, f.focusClass, false);
                                            var sc = g.scroller;
                                            var _1194 = sc.getLastPageRow(sc.page);
                                            var rc = g.rowCount - 1,
                                                row = Math.min(rc, next);
                                            if (next > _1194) {
                                                g.setScrollTop(g.scrollTop + sc.findScrollTop(row) - sc.findScrollTop(_1182._lastFocusedRowBarIdx));
                                            }
                                            _1193 = view.getCellNode(next, 0);
                                            _1149.focus(_1193);
                                            html.toggleClass(_1193, f.focusClass, true);
                                            _1182._lastFocusedRowBarIdx = next;
                                            f.cell = _1193;
                                            f.cell.view = view;
                                            f.cell.getNode = function (index) {
                                                return f.cell;
                                            };
                                            f.rowIndex = _1182._lastFocusedRowBarIdx;
                                            f.scrollIntoView();
                                            f.cell = null;
                                        }
                                    }
                                }
                            });
                            f.placeArea("rowHeader", "before", "content");
                        }
                        f.addArea({
                            name: "cellselect",
                            onMove: lang.partial(_1185, "cell", function (type, _1195, _1196, evt) {
                                var _1197 = _1182._currentPoint[type];
                                return _1154("cell", _1197.row + _1195, _1197.col + _1196);
                            }),
                            onKeyDown: lang.partial(_118a, "cell", function () {
                                return _1154("cell", f.rowIndex, f.cell.index);
                            }),
                            onKeyUp: lang.partial(_118d, "cell")
                        });
                        f.placeArea("cellselect", "below", "content");
                        f.addArea({
                            name: "colselect",
                            onMove: lang.partial(_1185, "col", function (type, _1198, _1199, evt) {
                                var _119a = _1182._currentPoint[type];
                                return _1154("col", _119a.col + _1199);
                            }),
                            onKeyDown: lang.partial(_118a, "col", function () {
                                return _1154("col", f.getHeaderIndex());
                            }),
                            onKeyUp: lang.partial(_118d, "col")
                        });
                        f.placeArea("colselect", "below", "header");
                        f.addArea({
                            name: "rowselect",
                            onMove: lang.partial(_1185, "row", function (type, _119b, _119c, evt) {
                                return _1154("row", f.rowIndex);
                            }),
                            onKeyDown: lang.partial(_118a, "row", function () {
                                return _1154("row", f.rowIndex);
                            }),
                            onKeyUp: lang.partial(_118d, "row")
                        });
                        f.placeArea("rowselect", "below", "rowHeader");
                    },
                    _clearSelection: function (type, _119d) {
                        if (type == "all") {
                            this._clearSelection("cell", _119d);
                            this._clearSelection("col", _119d);
                            this._clearSelection("row", _119d);
                            return;
                        }
                        this._isUsingRowSelector = true;
                        array.forEach(this._selected[type], function (item) {
                            if (!_1152(type, _119d, item)) {
                                this._highlightSingle(type, false, item);
                            }
                        }, this);
                        this._blurPoint(type, this._currentPoint);
                        this._selecting[type] = false;
                        this._startPoint[type] = this._currentPoint[type] = null;
                        this._selected[type] = [];
                        if (type == "row" && !this.grid._selectingRange) {
                            this._oldDeselectAll.call(this.grid.selection);
                            this.grid.selection._selectedById = {};
                        }
                        this.grid.onEndDeselect(type, null, null, this._selected);
                        this.grid.onSelectCleared(type);
                    },
                    _startSelect: function (type, start, _119e, _119f, _11a0, _11a1) {
                        if (!this._isValid(type, start)) {
                            return;
                        }
                        var _11a2 = this._isSelected(type, this._lastEndPoint[type]),
                            _11a3 = this._isSelected(type, start);
                        if (this.noClear && !_119e) {
                            this._toSelect = _11a1 === undefined ? true : _11a1;
                        } else {
                            this._toSelect = _11a0 ? _11a3 : !_11a3;
                        }
                        if (!_119e || (!_11a3 && this._config[type] == _114e)) {
                            this._clearSelection("col", start);
                            this._clearSelection("cell", start);
                            if (!this.noClear || (type === "row" && this._config[type] == _114e)) {
                                this._clearSelection("row", start);
                            }
                            this._toSelect = _11a1 === undefined ? true : _11a1;
                        }
                        this._selecting[type] = true;
                        this._currentPoint[type] = null;
                        if (_119f && this._lastType == type && _11a2 == this._toSelect && this._config[type] == MULTI) {
                            if (type === "row") {
                                this._isUsingRowSelector = true;
                            }
                            this._startPoint[type] = this._lastEndPoint[type];
                            this._highlight(type, this._startPoint[type]);
                            this._isUsingRowSelector = false;
                        } else {
                            this._startPoint[type] = start;
                        }
                        this._curType = type;
                        this._fireEvent("start", type);
                        this._isStartFocus = true;
                        this._isUsingRowSelector = true;
                        this._highlight(type, start, this._toSelect);
                        this._isStartFocus = false;
                    },
                    _endSelect: function (type) {
                        if (type === "row") {
                            delete this._isUsingRowSelector;
                        }
                        if (type == "all") {
                            this._endSelect("col");
                            this._endSelect("row");
                            this._endSelect("cell");
                        } else {
                            if (this._selecting[type]) {
                                this._addToSelected(type);
                                this._lastAnchorPoint[type] = this._startPoint[type];
                                this._lastEndPoint[type] = this._currentPoint[type];
                                if (this._toSelect) {
                                    this._lastSelectedAnchorPoint[type] = this._lastAnchorPoint[type];
                                    this._lastSelectedEndPoint[type] = this._lastEndPoint[type];
                                }
                                this._startPoint[type] = this._currentPoint[type] = null;
                                this._selecting[type] = false;
                                this._lastType = type;
                                this._fireEvent("end", type);
                            }
                        }
                    },
                    _fireEvent: function (_11a4, type) {
                        switch (_11a4) {
                        case "start":
                            this.grid[this._toSelect ? "onStartSelect" : "onStartDeselect"](type, this._startPoint[type], this._selected);
                            break;
                        case "end":
                            this.grid[this._toSelect ? "onEndSelect" : "onEndDeselect"](type, this._lastAnchorPoint[type], this._lastEndPoint[type], this._selected);
                            break;
                        }
                    },
                    _calcToHighlight: function (type, _11a5, _11a6, _11a7) {
                        if (_11a7 !== undefined) {
                            var sltd;
                            if (this._usingKeyboard && !_11a6) {
                                var last = this._isInLastRange(this._lastType, _11a5);
                                if (last) {
                                    sltd = this._isSelected(type, _11a5);
                                    if (_11a7 && sltd) {
                                        return false;
                                    }
                                    if (!_11a7 && !sltd && this._isInLastRange(this._lastType, _11a5, true)) {
                                        return true;
                                    }
                                }
                            }
                            return _11a6 ? _11a7 : (sltd || this._isSelected(type, _11a5));
                        }
                        return _11a6;
                    },
                    _highlightNode: function (node, _11a8) {
                        if (node) {
                            var _11a9 = "dojoxGridRowSelected";
                            var _11aa = "dojoxGridCellSelected";
                            html.toggleClass(node, _11a9, _11a8);
                            html.toggleClass(node, _11aa, _11a8);
                        }
                    },
                    _highlightHeader: function (_11ab, _11ac) {
                        var cells = this.grid.layout.cells;
                        var node = cells[_11ab].getHeaderNode();
                        var _11ad = "dojoxGridHeaderSelected";
                        html.toggleClass(node, _11ad, _11ac);
                    },
                    _highlightRowSelector: function (_11ae, _11af) {
                        var _11b0 = this.grid.views.views[0];
                        if (_11b0 instanceof _114a) {
                            var node = _11b0.getRowNode(_11ae);
                            if (node) {
                                var _11b1 = "dojoxGridRowSelectorSelected";
                                html.toggleClass(node, _11b1, _11af);
                            }
                        }
                    },
                    _highlightSingle: function (type, _11b2, _11b3, _11b4, _11b5) {
                        var _11b6 = this,
                            toHL, g = _11b6.grid,
                            cells = g.layout.cells;
                        switch (type) {
                        case "cell":
                            toHL = this._calcToHighlight(type, _11b3, _11b2, _11b4);
                            var c = cells[_11b3.col];
                            if (!c.hidden && !c.notselectable) {
                                this._highlightNode(_11b3.node || c.getNode(_11b3.row), toHL);
                            }
                            break;
                        case "col":
                            toHL = this._calcToHighlight(type, _11b3, _11b2, _11b4);
                            this._highlightHeader(_11b3.col, toHL);
                            query("td[idx='" + _11b3.col + "']", g.domNode).forEach(function (_11b7) {
                                var _11b8 = cells[_11b3.col].view.content.findRowTarget(_11b7);
                                if (_11b8) {
                                    var _11b9 = _11b8[dojox.grid.util.rowIndexTag];
                                    _11b6._highlightSingle("cell", toHL, {
                                        "row": _11b9,
                                        "col": _11b3.col,
                                        "node": _11b7
                                    });
                                }
                            });
                            break;
                        case "row":
                            toHL = this._calcToHighlight(type, _11b3, _11b2, _11b4);
                            this._highlightRowSelector(_11b3.row, toHL);
                            if (this._config.cell) {
                                array.forEach(cells, function (cell) {
                                    _11b6._highlightSingle("cell", toHL, {
                                        "row": _11b3.row,
                                        "col": cell.index,
                                        "node": cell.getNode(_11b3.row)
                                    });
                                });
                            }
                            this._selectedRowModified = true;
                            if (!_11b5) {
                                g.selection.setSelected(_11b3.row, toHL);
                            }
                        }
                    },
                    _highlight: function (type, _11ba, _11bb) {
                        if (this._selecting[type] && _11ba !== null) {
                            var start = this._startPoint[type],
                                _11bc = this._currentPoint[type],
                                _11bd = this,
                                _11be = function (from, to, toHL) {
                                    _11bd._forEach(type, from, to, function (item) {
                                        _11bd._highlightSingle(type, toHL, item, _11bb);
                                    }, true);
                                };
                            switch (type) {
                            case "col":
                            case "row":
                                if (_11bc !== null) {
                                    if (_1150(type, _11ba, start, _11bc, true)) {
                                        _11be(_11bc, _11ba, false);
                                    } else {
                                        if (_1150(type, start, _11ba, _11bc, true)) {
                                            _11be(_11bc, start, false);
                                            _11bc = start;
                                        }
                                        _11be(_11ba, _11bc, true);
                                    }
                                } else {
                                    this._highlightSingle(type, true, _11ba, _11bb);
                                }
                                break;
                            case "cell":
                                if (_11bc !== null) {
                                    if (_1150("row", _11ba, start, _11bc, true) || _1150("col", _11ba, start, _11bc, true) || _1150("row", start, _11ba, _11bc, true) || _1150("col", start, _11ba, _11bc, true)) {
                                        _11be(start, _11bc, false);
                                    }
                                }
                                _11be(start, _11ba, true);
                            }
                            this._currentPoint[type] = _11ba;
                            this._focusPoint(type, this._currentPoint);
                        }
                    },
                    _focusPoint: function (type, point) {
                        if (!this._isStartFocus) {
                            var _11bf = point[type],
                                f = this.grid.focus;
                            if (type == "col") {
                                f._colHeadFocusIdx = _11bf.col;
                                f.focusArea("header");
                            } else {
                                if (type == "row") {
                                    f.focusArea("rowHeader", {
                                        "rowIndex": _11bf.row
                                    });
                                } else {
                                    if (type == "cell") {
                                        f.setFocusIndex(_11bf.row, _11bf.col);
                                    }
                                }
                            }
                        }
                    },
                    _blurPoint: function (type, point) {
                        var f = this.grid.focus;
                        if (type == "cell") {
                            f._blurContent();
                        }
                    },
                    _addToSelected: function (type) {
                        var _11c0 = this._toSelect,
                            _11c1 = this,
                            toAdd = [],
                            _11c2 = [],
                            start = this._startPoint[type],
                            end = this._currentPoint[type];
                        if (this._usingKeyboard) {
                            this._forEach(type, this._lastAnchorPoint[type], this._lastEndPoint[type], function (item) {
                                if (!_1150(type, item, start, end)) {
                                    (_11c0 ? _11c2 : toAdd).push(item);
                                }
                            });
                        }
                        this._forEach(type, start, end, function (item) {
                            var _11c3 = _11c1._isSelected(type, item);
                            if (_11c0 && !_11c3) {
                                toAdd.push(item);
                            } else {
                                if (!_11c0) {
                                    _11c2.push(item);
                                }
                            }
                        });
                        this._add(type, toAdd);
                        this._remove(type, _11c2);
                        array.forEach(this._selected.row, function (item) {
                            if (item.except.length > 0) {
                                this._selectedRowModified = true;
                                this.grid.selection.setSelected(item.row, false);
                            }
                        }, this);
                    },
                    _forEach: function (type, start, end, func, _11c4) {
                        if (!this._isValid(type, start, true) || !this._isValid(type, end, true)) {
                            return;
                        }
                        switch (type) {
                        case "col":
                        case "row":
                            start = start[type];
                            end = end[type];
                            var dir = end > start ? 1 : -1;
                            if (!_11c4) {
                                end += dir;
                            }
                            for (; start != end; start += dir) {
                                func(_1154(type, start));
                            }
                            break;
                        case "cell":
                            var _11c5 = end.col > start.col ? 1 : -1,
                                _11c6 = end.row > start.row ? 1 : -1;
                            for (var i = start.row, p = end.row + _11c6; i != p; i += _11c6) {
                                for (var j = start.col, q = end.col + _11c5; j != q; j += _11c5) {
                                    func(_1154(type, i, j));
                                }
                            }
                        }
                    },
                    _makeupForExceptions: function (type, _11c7) {
                        var _11c8 = [];
                        array.forEach(this._selected[type], function (v1) {
                            array.forEach(_11c7, function (v2) {
                                if (v1[type] == v2[type]) {
                                    var pos = array.indexOf(v1.except, v2[_114f[type]]);
                                    if (pos >= 0) {
                                        v1.except.splice(pos, 1);
                                    }
                                    _11c8.push(v2);
                                }
                            });
                        });
                        return _11c8;
                    },
                    _makeupForCells: function (type, _11c9) {
                        var _11ca = [];
                        array.forEach(this._selected.cell, function (v1) {
                            array.some(_11c9, function (v2) {
                                if (v1[type] == v2[type]) {
                                    _11ca.push(v1);
                                    return true;
                                }
                                return false;
                            });
                        });
                        this._remove("cell", _11ca);
                        array.forEach(this._selected[_114f[type]], function (v1) {
                            array.forEach(_11c9, function (v2) {
                                var pos = array.indexOf(v1.except, v2[type]);
                                if (pos >= 0) {
                                    v1.except.splice(pos, 1);
                                }
                            });
                        });
                    },
                    _addException: function (type, items) {
                        array.forEach(this._selected[type], function (v1) {
                            array.forEach(items, function (v2) {
                                v1.except.push(v2[_114f[type]]);
                            });
                        });
                    },
                    _addCellException: function (type, items) {
                        array.forEach(this._selected[type], function (v1) {
                            array.forEach(items, function (v2) {
                                if (v1[type] == v2[type]) {
                                    v1.except.push(v2[_114f[type]]);
                                }
                            });
                        });
                    },
                    _add: function (type, items) {
                        var cells = this.grid.layout.cells;
                        if (type == "cell") {
                            var _11cb = this._makeupForExceptions("col", items);
                            var _11cc = this._makeupForExceptions("row", items);
                            items = array.filter(items, function (item) {
                                return array.indexOf(_11cb, item) < 0 && array.indexOf(_11cc, item) < 0 && !cells[item.col].hidden && !cells[item.col].notselectable;
                            });
                        } else {
                            if (type == "col") {
                                items = array.filter(items, function (item) {
                                    return !cells[item.col].hidden && !cells[item.col].notselectable;
                                });
                            }
                            this._makeupForCells(type, items);
                            this._selected[type] = array.filter(this._selected[type], function (v) {
                                return array.every(items, function (item) {
                                    return v[type] !== item[type];
                                });
                            });
                        }
                        if (type != "col" && this.grid._hasIdentity) {
                            array.forEach(items, function (item) {
                                var _11cd = this.grid._by_idx[item.row];
                                if (_11cd) {
                                    item.id = _11cd.idty;
                                }
                            }, this);
                        }
                        this._selected[type] = this._selected[type].concat(items);
                    },
                    _remove: function (type, items) {
                        var comp = lang.partial(_1152, type);
                        this._selected[type] = array.filter(this._selected[type], function (v1) {
                            return !array.some(items, function (v2) {
                                return comp(v1, v2);
                            });
                        });
                        if (type == "cell") {
                            this._addCellException("col", items);
                            this._addCellException("row", items);
                        } else {
                            if (this._config.cell) {
                                this._addException(_114f[type], items);
                            }
                        }
                    },
                    _isCellNotInExcept: function (type, item) {
                        var attr = item[type],
                            _11ce = item[_114f[type]];
                        return array.some(this._selected[type], function (v) {
                            return v[type] == attr && array.indexOf(v.except, _11ce) < 0;
                        });
                    },
                    _isSelected: function (type, item) {
                        if (!item) {
                            return false;
                        }
                        var res = array.some(this._selected[type], function (v) {
                            var ret = _1152(type, item, v);
                            if (ret && type !== "cell") {
                                return v.except.length === 0;
                            }
                            return ret;
                        });
                        if (!res && type === "cell") {
                            res = (this._isCellNotInExcept("col", item) || this._isCellNotInExcept("row", item));
                            if (type === "cell") {
                                res = res && !this.grid.layout.cells[item.col].notselectable;
                            }
                        }
                        return res;
                    },
                    _isInLastRange: function (type, item, _11cf) {
                        var start = this[_11cf ? "_lastSelectedAnchorPoint" : "_lastAnchorPoint"][type],
                            end = this[_11cf ? "_lastSelectedEndPoint" : "_lastEndPoint"][type];
                        if (!item || !start || !end) {
                            return false;
                        }
                        return _1150(type, item, start, end);
                    },
                    _isValid: function (type, item, _11d0) {
                        if (!item) {
                            return false;
                        }
                        try {
                            var g = this.grid,
                                index = item[type];
                            switch (type) {
                            case "col":
                                return index >= 0 && index < g.layout.cells.length && lang.isArray(item.except) && (_11d0 || !g.layout.cells[index].notselectable);
                            case "row":
                                return index >= 0 && index < g.rowCount && lang.isArray(item.except);
                            case "cell":
                                return item.col >= 0 && item.col < g.layout.cells.length && item.row >= 0 && item.row < g.rowCount && (_11d0 || !g.layout.cells[item.col].notselectable);
                            }
                        } catch (e) {}
                        return false;
                    }
                });
                _114c.registerPlugin(_1157, {
                    "dependency": ["autoScroll"]
                });
                return _1157;
            });
        },
        "dojox/grid/enhanced/plugins/AutoScroll": function () {
            define("dojox/grid/enhanced/plugins/AutoScroll", ["dojo/_base/declare", "dojo/_base/array", "dojo/_base/lang", "dojo/_base/html", "dojo/_base/window", "../_Plugin", "../../_RowSelector", "../../EnhancedGrid"], function (_11d1, array, lang, html, win, _11d2, _11d3, _11d4) {
                var _11d5 = _11d1("dojox.grid.enhanced.plugins.AutoScroll", _11d2, {
                    name: "autoScroll",
                    autoScrollInterval: 1000,
                    autoScrollMargin: 30,
                    constructor: function (grid, args) {
                        this.grid = grid;
                        this.readyForAutoScroll = false;
                        this._scrolling = false;
                        args = lang.isObject(args) ? args : {};
                        if ("interval" in args) {
                            this.autoScrollInterval = args.interval;
                        }
                        if ("margin" in args) {
                            this.autoScrollMargin = args.margin;
                        }
                        this._initEvents();
                        this._mixinGrid();
                    },
                    _initEvents: function () {
                        var g = this.grid;
                        this.connect(g, "onCellMouseDown", function () {
                            this.readyForAutoScroll = true;
                        });
                        this.connect(g, "onHeaderCellMouseDown", function () {
                            this.readyForAutoScroll = true;
                        });
                        this.connect(g, "onRowSelectorMouseDown", function () {
                            this.readyForAutoScroll = true;
                        });
                        this.connect(win.doc, "onmouseup", function (evt) {
                            this._manageAutoScroll(true);
                            this.readyForAutoScroll = false;
                        });
                        this.connect(win.doc, "onmousemove", function (evt) {
                            if (this.readyForAutoScroll) {
                                this._event = evt;
                                var _11d6 = html.position(g.domNode),
                                    hh = g._getHeaderHeight(),
                                    _11d7 = this.autoScrollMargin,
                                    ey = evt.clientY,
                                    ex = evt.clientX,
                                    gy = _11d6.y,
                                    gx = _11d6.x,
                                    gh = _11d6.h,
                                    gw = _11d6.w;
                                if (ex >= gx && ex <= gx + gw) {
                                    if (ey >= gy + hh && ey < gy + hh + _11d7) {
                                        this._manageAutoScroll(false, true, false);
                                        return;
                                    } else {
                                        if (ey > gy + gh - _11d7 && ey <= gy + gh) {
                                            this._manageAutoScroll(false, true, true);
                                            return;
                                        } else {
                                            if (ey >= gy && ey <= gy + gh) {
                                                var _11d8 = array.some(g.views.views, function (view, i) {
                                                    if (view instanceof _11d3) {
                                                        return false;
                                                    }
                                                    var _11d9 = html.position(view.domNode);
                                                    if (ex < _11d9.x + _11d7 && ex >= _11d9.x) {
                                                        this._manageAutoScroll(false, false, false, view);
                                                        return true;
                                                    } else {
                                                        if (ex > _11d9.x + _11d9.w - _11d7 && ex < _11d9.x + _11d9.w) {
                                                            this._manageAutoScroll(false, false, true, view);
                                                            return true;
                                                        }
                                                    }
                                                    return false;
                                                }, this);
                                                if (_11d8) {
                                                    return;
                                                }
                                            }
                                        }
                                    }
                                }
                                this._manageAutoScroll(true);
                            }
                        });
                    },
                    _mixinGrid: function () {
                        var g = this.grid;
                        g.onStartAutoScroll = function () {};
                        g.onEndAutoScroll = function () {};
                    },
                    _fireEvent: function (_11da, args) {
                        var g = this.grid;
                        switch (_11da) {
                        case "start":
                            g.onStartAutoScroll.apply(g, args);
                            break;
                        case "end":
                            g.onEndAutoScroll.apply(g, args);
                            break;
                        }
                    },
                    _manageAutoScroll: function (_11db, _11dc, _11dd, view) {
                        if (_11db) {
                            this._scrolling = false;
                            clearInterval(this._handler);
                        } else {
                            if (!this._scrolling) {
                                this._scrolling = true;
                                this._fireEvent("start", [_11dc, _11dd, view]);
                                this._autoScroll(_11dc, _11dd, view);
                                this._handler = setInterval(lang.hitch(this, "_autoScroll", _11dc, _11dd, view), this.autoScrollInterval);
                            }
                        }
                    },
                    _autoScroll: function (_11de, _11df, view) {
                        var g = this.grid,
                            _11e0 = null;
                        if (_11de) {
                            var _11e1 = g.scroller.firstVisibleRow + (_11df ? 1 : -1);
                            if (_11e1 >= 0 && _11e1 < g.rowCount) {
                                g.scrollToRow(_11e1);
                                _11e0 = _11e1;
                            }
                        } else {
                            _11e0 = this._scrollColumn(_11df, view);
                        }
                        if (_11e0 !== null) {
                            this._fireEvent("end", [_11de, _11df, view, _11e0, this._event]);
                        }
                    },
                    _scrollColumn: function (_11e2, view) {
                        var node = view.scrollboxNode,
                            _11e3 = null;
                        if (node.clientWidth < node.scrollWidth) {
                            var cells = array.filter(this.grid.layout.cells, function (cell) {
                                return !cell.hidden;
                            });
                            var _11e4 = html.position(view.domNode);
                            var limit, edge, _11e5, i;
                            if (_11e2) {
                                limit = node.clientWidth;
                                for (i = 0; i < cells.length; ++i) {
                                    _11e5 = html.position(cells[i].getHeaderNode());
                                    edge = _11e5.x - _11e4.x + _11e5.w;
                                    if (edge > limit) {
                                        _11e3 = cells[i].index;
                                        node.scrollLeft += edge - limit + 10;
                                        break;
                                    }
                                }
                            } else {
                                limit = 0;
                                for (i = cells.length - 1; i >= 0; --i) {
                                    _11e5 = html.position(cells[i].getHeaderNode());
                                    edge = _11e5.x - _11e4.x;
                                    if (edge < limit) {
                                        _11e3 = cells[i].index;
                                        node.scrollLeft += edge - limit - 10;
                                        break;
                                    }
                                }
                            }
                        }
                        return _11e3;
                    }
                });
                _11d4.registerPlugin(_11d5);
                return _11d5;
            });
        },
        "dojox/grid/enhanced/plugins/Menu": function () {
            define("dojox/grid/enhanced/plugins/Menu", ["dojo/_base/declare", "dojo/_base/array", "dojo/_base/lang", "dojo/_base/html", "dojo/_base/event", "dojo/keys", "../_Plugin", "../../EnhancedGrid"], function (_11e6, array, lang, html, evt, keys, _11e7, _11e8) {
                var Menu = _11e6("dojox.grid.enhanced.plugins.Menu", _11e7, {
                    name: "menus",
                    types: ["headerMenu", "rowMenu", "cellMenu", "selectedRegionMenu"],
                    constructor: function () {
                        var g = this.grid;
                        g.showMenu = lang.hitch(g, this.showMenu);
                        g._setRowMenuAttr = lang.hitch(this, "_setRowMenuAttr");
                        g._setCellMenuAttr = lang.hitch(this, "_setCellMenuAttr");
                        g._setSelectedRegionMenuAttr = lang.hitch(this, "_setSelectedRegionMenuAttr");
                    },
                    onStartUp: function () {
                        var type, _11e9 = this.option;
                        for (type in _11e9) {
                            if (array.indexOf(this.types, type) >= 0 && _11e9[type]) {
                                this._initMenu(type, _11e9[type]);
                            }
                        }
                    },
                    _initMenu: function (_11ea, menu) {
                        var g = this.grid;
                        if (!g[_11ea]) {
                            var m = this._getMenuWidget(menu);
                            if (!m) {
                                return;
                            }
                            g.set(_11ea, m);
                            if (_11ea != "headerMenu") {
                                m._scheduleOpen = function () {
                                    return;
                                };
                            } else {
                                g.setupHeaderMenu();
                            }
                        }
                    },
                    _getMenuWidget: function (menu) {
                        return (menu instanceof dijit.Menu) ? menu : dijit.byId(menu);
                    },
                    _setRowMenuAttr: function (menu) {
                        this._setMenuAttr(menu, "rowMenu");
                    },
                    _setCellMenuAttr: function (menu) {
                        this._setMenuAttr(menu, "cellMenu");
                    },
                    _setSelectedRegionMenuAttr: function (menu) {
                        this._setMenuAttr(menu, "selectedRegionMenu");
                    },
                    _setMenuAttr: function (menu, _11eb) {
                        var g = this.grid,
                            n = g.domNode;
                        if (!menu || !(menu instanceof dijit.Menu)) {
                            console.warn(_11eb, " of Grid ", g.id, " is not existed!");
                            return;
                        }
                        if (g[_11eb]) {
                            g[_11eb].unBindDomNode(n);
                        }
                        g[_11eb] = menu;
                        g[_11eb].bindDomNode(n);
                    },
                    showMenu: function (e) {
                        var _11ec = (e.cellNode && html.hasClass(e.cellNode, "dojoxGridRowSelected") || e.rowNode && (html.hasClass(e.rowNode, "dojoxGridRowSelected") || html.hasClass(e.rowNode, "dojoxGridRowbarSelected")));
                        if (_11ec && this.selectedRegionMenu) {
                            this.onSelectedRegionContextMenu(e);
                            return;
                        }
                        var info = {
                            target: e.target,
                            coords: e.keyCode !== keys.F10 && "pageX" in e ? {
                                x: e.pageX,
                                y: e.pageY
                            } : null
                        };
                        if (this.rowMenu && (!this.cellMenu || this.selection.isSelected(e.rowIndex) || e.rowNode && html.hasClass(e.rowNode, "dojoxGridRowbar"))) {
                            this.rowMenu._openMyself(info);
                            evt.stop(e);
                            return;
                        }
                        if (this.cellMenu) {
                            this.cellMenu._openMyself(info);
                        }
                        evt.stop(e);
                    },
                    destroy: function () {
                        var g = this.grid;
                        if (g.headerMenu) {
                            g.headerMenu.unBindDomNode(g.viewsHeaderNode);
                        }
                        if (g.rowMenu) {
                            g.rowMenu.unBindDomNode(g.domNode);
                        }
                        if (g.cellMenu) {
                            g.cellMenu.unBindDomNode(g.domNode);
                        }
                        if (g.selectedRegionMenu) {
                            g.selectedRegionMenu.destroy();
                        }
                        this.inherited(arguments);
                    }
                });
                _11e8.registerPlugin(Menu);
                return Menu;
            });
        },
        "dojox/grid/enhanced/plugins/DnD": function () {
            define("dojox/grid/enhanced/plugins/DnD", ["dojo/_base/kernel", "dojo/_base/declare", "dojo/_base/connect", "dojo/_base/array", "dojo/_base/lang", "dojo/_base/html", "dojo/_base/json", "dojo/_base/window", "dojo/query", "dojo/keys", "dojo/dnd/Source", "dojo/dnd/Avatar", "../_Plugin", "../../EnhancedGrid", "./Selector", "./Rearrange", "dojo/dnd/Manager"], function (dojo, _11ed, _11ee, array, lang, html, json, win, query, keys, _11ef, _11f0, _11f1, _11f2) {
                var _11f3 = function (a) {
                        a.sort(function (v1, v2) {
                            return v1 - v2;
                        });
                        var arr = [
                            [a[0]]
                        ];
                        for (var i = 1, j = 0; i < a.length; ++i) {
                            if (a[i] == a[i - 1] + 1) {
                                arr[j].push(a[i]);
                            } else {
                                arr[++j] = [a[i]];
                            }
                        }
                        return arr;
                    },
                    _11f4 = function (_11f5) {
                        var a = _11f5[0];
                        for (var i = 1; i < _11f5.length; ++i) {
                            a = a.concat(_11f5[i]);
                        }
                        return a;
                    };
                var _11f6 = _11ed("dojox.grid.enhanced.plugins.GridDnDElement", null, {
                    constructor: function (_11f7) {
                        this.plugin = _11f7;
                        this.node = html.create("div");
                        this._items = {};
                    },
                    destroy: function () {
                        this.plugin = null;
                        html.destroy(this.node);
                        this.node = null;
                        this._items = null;
                    },
                    createDnDNodes: function (_11f8) {
                        this.destroyDnDNodes();
                        var _11f9 = ["grid/" + _11f8.type + "s"];
                        var _11fa = this.plugin.grid.id + "_dndItem";
                        array.forEach(_11f8.selected, function (range, i) {
                            var id = _11fa + i;
                            this._items[id] = {
                                "type": _11f9,
                                "data": range,
                                "dndPlugin": this.plugin
                            };
                            this.node.appendChild(html.create("div", {
                                "id": id
                            }));
                        }, this);
                    },
                    getDnDNodes: function () {
                        return array.map(this.node.childNodes, function (node) {
                            return node;
                        });
                    },
                    destroyDnDNodes: function () {
                        html.empty(this.node);
                        this._items = {};
                    },
                    getItem: function (_11fb) {
                        return this._items[_11fb];
                    }
                });
                var _11fc = _11ed("dojox.grid.enhanced.plugins.GridDnDSource", _11ef, {
                    accept: ["grid/cells", "grid/rows", "grid/cols"],
                    constructor: function (node, param) {
                        this.grid = param.grid;
                        this.dndElem = param.dndElem;
                        this.dndPlugin = param.dnd;
                        this.sourcePlugin = null;
                    },
                    destroy: function () {
                        this.inherited(arguments);
                        this.grid = null;
                        this.dndElem = null;
                        this.dndPlugin = null;
                        this.sourcePlugin = null;
                    },
                    getItem: function (_11fd) {
                        return this.dndElem.getItem(_11fd);
                    },
                    checkAcceptance: function (_11fe, nodes) {
                        if (this != _11fe && nodes[0]) {
                            var item = _11fe.getItem(nodes[0].id);
                            if (item.dndPlugin) {
                                var type = item.type;
                                for (var j = 0; j < type.length; ++j) {
                                    if (type[j] in this.accept) {
                                        if (this.dndPlugin._canAccept(item.dndPlugin)) {
                                            this.sourcePlugin = item.dndPlugin;
                                        } else {
                                            return false;
                                        }
                                        break;
                                    }
                                }
                            } else {
                                if ("grid/rows" in this.accept) {
                                    var rows = [];
                                    array.forEach(nodes, function (node) {
                                        var item = _11fe.getItem(node.id);
                                        if (item.data && array.indexOf(item.type, "grid/rows") >= 0) {
                                            var _11ff = item.data;
                                            if (typeof item.data == "string") {
                                                _11ff = json.fromJson(item.data);
                                            }
                                            if (_11ff) {
                                                rows.push(_11ff);
                                            }
                                        }
                                    });
                                    if (rows.length) {
                                        this.sourcePlugin = {
                                            _dndRegion: {
                                                type: "row",
                                                selected: [rows]
                                            }
                                        };
                                    } else {
                                        return false;
                                    }
                                }
                            }
                        }
                        return this.inherited(arguments);
                    },
                    onDraggingOver: function () {
                        this.dndPlugin.onDraggingOver(this.sourcePlugin);
                    },
                    onDraggingOut: function () {
                        this.dndPlugin.onDraggingOut(this.sourcePlugin);
                    },
                    onDndDrop: function (_1200, nodes, copy, _1201) {
                        this.onDndCancel();
                        if (this != _1200 && this == _1201) {
                            this.dndPlugin.onDragIn(this.sourcePlugin, copy);
                        }
                    }
                });
                var _1202 = _11ed("dojox.grid.enhanced.plugins.GridDnDAvatar", _11f0, {
                    construct: function () {
                        this._itemType = this.manager._dndPlugin._dndRegion.type;
                        this._itemCount = this._getItemCount();
                        this.isA11y = html.hasClass(win.body(), "dijit_a11y");
                        var a = html.create("table", {
                            "border": "0",
                            "cellspacing": "0",
                            "class": "dojoxGridDndAvatar",
                            "style": {
                                position: "absolute",
                                zIndex: "1999",
                                margin: "0px"
                            }
                        }),
                            _1203 = this.manager.source,
                            b = html.create("tbody", null, a),
                            tr = html.create("tr", null, b),
                            td = html.create("td", {
                                "class": "dojoxGridDnDIcon"
                            }, tr);
                        if (this.isA11y) {
                            html.create("span", {
                                "id": "a11yIcon",
                                "innerHTML": this.manager.copy ? "+" : "<"
                            }, td);
                        }
                        td = html.create("td", {
                            "class": "dojoxGridDnDItemIcon " + this._getGridDnDIconClass()
                        }, tr);
                        td = html.create("td", null, tr);
                        html.create("span", {
                            "class": "dojoxGridDnDItemCount",
                            "innerHTML": _1203.generateText ? this._generateText() : ""
                        }, td);
                        html.style(tr, {
                            "opacity": 0.9
                        });
                        this.node = a;
                    },
                    _getItemCount: function () {
                        var _1204 = this.manager._dndPlugin._dndRegion.selected,
                            count = 0;
                        switch (this._itemType) {
                        case "cell":
                            _1204 = _1204[0];
                            var cells = this.manager._dndPlugin.grid.layout.cells,
                                _1205 = _1204.max.col - _1204.min.col + 1,
                                _1206 = _1204.max.row - _1204.min.row + 1;
                            if (_1205 > 1) {
                                for (var i = _1204.min.col; i <= _1204.max.col; ++i) {
                                    if (cells[i].hidden) {
                                        --_1205;
                                    }
                                }
                            }
                            count = _1205 * _1206;
                            break;
                        case "row":
                        case "col":
                            count = _11f4(_1204).length;
                        }
                        return count;
                    },
                    _getGridDnDIconClass: function () {
                        return {
                            "row": ["dojoxGridDnDIconRowSingle", "dojoxGridDnDIconRowMulti"],
                            "col": ["dojoxGridDnDIconColSingle", "dojoxGridDnDIconColMulti"],
                            "cell": ["dojoxGridDnDIconCellSingle", "dojoxGridDnDIconCellMulti"]
                        }[this._itemType][this._itemCount == 1 ? 0 : 1];
                    },
                    _generateText: function () {
                        return "(" + this._itemCount + ")";
                    }
                });
                var DnD = _11ed("dojox.grid.enhanced.plugins.DnD", _11f1, {
                    name: "dnd",
                    _targetAnchorBorderWidth: 2,
                    _copyOnly: false,
                    _config: {
                        "row": {
                            "within": true,
                            "in": true,
                            "out": true
                        },
                        "col": {
                            "within": true,
                            "in": true,
                            "out": true
                        },
                        "cell": {
                            "within": true,
                            "in": true,
                            "out": true
                        }
                    },
                    constructor: function (grid, args) {
                        this.grid = grid;
                        this._config = lang.clone(this._config);
                        args = lang.isObject(args) ? args : {};
                        this.setupConfig(args.dndConfig);
                        this._copyOnly = !! args.copyOnly;
                        this._mixinGrid();
                        this.selector = grid.pluginMgr.getPlugin("selector");
                        this.rearranger = grid.pluginMgr.getPlugin("rearrange");
                        this.rearranger.setArgs(args);
                        this._clear();
                        this._elem = new _11f6(this);
                        this._source = new _11fc(this._elem.node, {
                            "grid": grid,
                            "dndElem": this._elem,
                            "dnd": this
                        });
                        this._container = query(".dojoxGridMasterView", this.grid.domNode)[0];
                        this._initEvents();
                    },
                    destroy: function () {
                        this.inherited(arguments);
                        this._clear();
                        this._source.destroy();
                        this._elem.destroy();
                        this._container = null;
                        this.grid = null;
                        this.selector = null;
                        this.rearranger = null;
                        this._config = null;
                    },
                    _mixinGrid: function () {
                        this.grid.setupDnDConfig = lang.hitch(this, "setupConfig");
                        this.grid.dndCopyOnly = lang.hitch(this, "copyOnly");
                    },
                    setupConfig: function (_1207) {
                        if (_1207 && lang.isObject(_1207)) {
                            var _1208 = ["row", "col", "cell"],
                                _1209 = ["within", "in", "out"],
                                cfg = this._config;
                            array.forEach(_1208, function (type) {
                                if (type in _1207) {
                                    var t = _1207[type];
                                    if (t && lang.isObject(t)) {
                                        array.forEach(_1209, function (mode) {
                                            if (mode in t) {
                                                cfg[type][mode] = !! t[mode];
                                            }
                                        });
                                    } else {
                                        array.forEach(_1209, function (mode) {
                                            cfg[type][mode] = !! t;
                                        });
                                    }
                                }
                            });
                            array.forEach(_1209, function (mode) {
                                if (mode in _1207) {
                                    var m = _1207[mode];
                                    if (m && lang.isObject(m)) {
                                        array.forEach(_1208, function (type) {
                                            if (type in m) {
                                                cfg[type][mode] = !! m[type];
                                            }
                                        });
                                    } else {
                                        array.forEach(_1208, function (type) {
                                            cfg[type][mode] = !! m;
                                        });
                                    }
                                }
                            });
                        }
                    },
                    copyOnly: function (_120a) {
                        if (typeof _120a != "undefined") {
                            this._copyOnly = !! _120a;
                        }
                        return this._copyOnly;
                    },
                    _isOutOfGrid: function (evt) {
                        var _120b = html.position(this.grid.domNode),
                            x = evt.clientX,
                            y = evt.clientY;
                        return y < _120b.y || y > _120b.y + _120b.h || x < _120b.x || x > _120b.x + _120b.w;
                    },
                    _onMouseMove: function (evt) {
                        if (this._dndRegion && !this._dnding && !this._externalDnd) {
                            this._dnding = true;
                            this._startDnd(evt);
                        } else {
                            if (this._isMouseDown && !this._dndRegion) {
                                delete this._isMouseDown;
                                this._oldCursor = html.style(win.body(), "cursor");
                                html.style(win.body(), "cursor", "not-allowed");
                            }
                            var isOut = this._isOutOfGrid(evt);
                            if (!this._alreadyOut && isOut) {
                                this._alreadyOut = true;
                                if (this._dnding) {
                                    this._destroyDnDUI(true, false);
                                }
                                this._moveEvent = evt;
                                this._source.onOutEvent();
                            } else {
                                if (this._alreadyOut && !isOut) {
                                    this._alreadyOut = false;
                                    if (this._dnding) {
                                        this._createDnDUI(evt, true);
                                    }
                                    this._moveEvent = evt;
                                    this._source.onOverEvent();
                                }
                            }
                        }
                    },
                    _onMouseUp: function () {
                        if (!this._extDnding && !this._isSource) {
                            var _120c = this._dnding && !this._alreadyOut;
                            if (_120c && this._config[this._dndRegion.type]["within"]) {
                                this._rearrange();
                            }
                            this._endDnd(_120c);
                        }
                        html.style(win.body(), "cursor", this._oldCursor || "");
                        delete this._isMouseDown;
                    },
                    _initEvents: function () {
                        var g = this.grid,
                            s = this.selector;
                        this.connect(win.doc, "onmousemove", "_onMouseMove");
                        this.connect(win.doc, "onmouseup", "_onMouseUp");
                        this.connect(g, "onCellMouseOver", function (evt) {
                            if (!this._dnding && !s.isSelecting() && !evt.ctrlKey) {
                                this._dndReady = s.isSelected("cell", evt.rowIndex, evt.cell.index);
                                s.selectEnabled(!this._dndReady);
                            }
                        });
                        this.connect(g, "onHeaderCellMouseOver", function (evt) {
                            if (this._dndReady) {
                                s.selectEnabled(true);
                            }
                        });
                        this.connect(g, "onRowMouseOver", function (evt) {
                            if (this._dndReady && !evt.cell) {
                                s.selectEnabled(true);
                            }
                        });
                        this.connect(g, "onCellMouseDown", function (evt) {
                            if (!evt.ctrlKey && this._dndReady) {
                                this._dndRegion = this._getDnDRegion(evt.rowIndex, evt.cell.index);
                                this._isMouseDown = true;
                            }
                        });
                        this.connect(g, "onCellMouseUp", function (evt) {
                            if (!this._dndReady && !s.isSelecting() && evt.cell) {
                                this._dndReady = s.isSelected("cell", evt.rowIndex, evt.cell.index);
                                s.selectEnabled(!this._dndReady);
                            }
                        });
                        this.connect(g, "onCellClick", function (evt) {
                            if (this._dndReady && !evt.ctrlKey && !evt.shiftKey) {
                                s.select("cell", evt.rowIndex, evt.cell.index);
                            }
                        });
                        this.connect(g, "onEndAutoScroll", function (_120d, _120e, view, _120f, evt) {
                            if (this._dnding) {
                                this._markTargetAnchor(evt);
                            }
                        });
                        this.connect(win.doc, "onkeydown", function (evt) {
                            if (evt.keyCode == keys.ESCAPE) {
                                this._endDnd(false);
                            } else {
                                if (evt.keyCode == keys.CTRL) {
                                    s.selectEnabled(true);
                                    this._isCopy = true;
                                }
                            }
                        });
                        this.connect(win.doc, "onkeyup", function (evt) {
                            if (evt.keyCode == keys.CTRL) {
                                s.selectEnabled(!this._dndReady);
                                this._isCopy = false;
                            }
                        });
                    },
                    _clear: function () {
                        this._dndRegion = null;
                        this._target = null;
                        this._moveEvent = null;
                        this._targetAnchor = {};
                        this._dnding = false;
                        this._externalDnd = false;
                        this._isSource = false;
                        this._alreadyOut = false;
                        this._extDnding = false;
                    },
                    _getDnDRegion: function (_1210, _1211) {
                        var s = this.selector,
                            _1212 = s._selected,
                            flag = ( !! _1212.cell.length) | ( !! _1212.row.length << 1) | ( !! _1212.col.length << 2),
                            type;
                        switch (flag) {
                        case 1:
                            type = "cell";
                            if (!this._config[type]["within"] && !this._config[type]["out"]) {
                                return null;
                            }
                            var cells = this.grid.layout.cells,
                                _1213 = function (range) {
                                    var _1214 = 0;
                                    for (var i = range.min.col; i <= range.max.col; ++i) {
                                        if (cells[i].hidden) {
                                            ++_1214;
                                        }
                                    }
                                    return (range.max.row - range.min.row + 1) * (range.max.col - range.min.col + 1 - _1214);
                                },
                                _1215 = function (item, range) {
                                    return item.row >= range.min.row && item.row <= range.max.row && item.col >= range.min.col && item.col <= range.max.col;
                                },
                                range = {
                                    max: {
                                        row: -1,
                                        col: -1
                                    },
                                    min: {
                                        row: Infinity,
                                        col: Infinity
                                    }
                                };
                            array.forEach(_1212[type], function (item) {
                                if (item.row < range.min.row) {
                                    range.min.row = item.row;
                                }
                                if (item.row > range.max.row) {
                                    range.max.row = item.row;
                                }
                                if (item.col < range.min.col) {
                                    range.min.col = item.col;
                                }
                                if (item.col > range.max.col) {
                                    range.max.col = item.col;
                                }
                            });
                            if (array.some(_1212[type], function (item) {
                                return item.row == _1210 && item.col == _1211;
                            })) {
                                if (_1213(range) == _1212[type].length && array.every(_1212[type], function (item) {
                                    return _1215(item, range);
                                })) {
                                    return {
                                        "type": type,
                                        "selected": [range],
                                        "handle": {
                                            "row": _1210,
                                            "col": _1211
                                        }
                                    };
                                }
                            }
                            return null;
                        case 2:
                        case 4:
                            type = flag == 2 ? "row" : "col";
                            if (!this._config[type]["within"] && !this._config[type]["out"]) {
                                return null;
                            }
                            var res = s.getSelected(type);
                            if (res.length) {
                                return {
                                    "type": type,
                                    "selected": _11f3(res),
                                    "handle": flag == 2 ? _1210 : _1211
                                };
                            }
                            return null;
                        }
                        return null;
                    },
                    _startDnd: function (evt) {
                        this._createDnDUI(evt);
                    },
                    _endDnd: function (_1216) {
                        this._destroyDnDUI(false, _1216);
                        this._clear();
                    },
                    _createDnDUI: function (evt, _1217) {
                        var _1218 = html.position(this.grid.views.views[0].domNode);
                        html.style(this._container, "height", _1218.h + "px");
                        try {
                            if (!_1217) {
                                this._createSource(evt);
                            }
                            this._createMoveable(evt);
                            this._oldCursor = html.style(win.body(), "cursor");
                            html.style(win.body(), "cursor", "default");
                        } catch (e) {
                            console.warn("DnD._createDnDUI() error:", e);
                        }
                    },
                    _destroyDnDUI: function (_1219, _121a) {
                        try {
                            if (_121a) {
                                this._destroySource();
                            }
                            this._unmarkTargetAnchor();
                            if (!_1219) {
                                this._destroyMoveable();
                            }
                            html.style(win.body(), "cursor", this._oldCursor);
                        } catch (e) {
                            console.warn("DnD._destroyDnDUI() error:", this.grid.id, e);
                        }
                    },
                    _createSource: function (evt) {
                        this._elem.createDnDNodes(this._dndRegion);
                        var m = dojo.dnd.manager();
                        var _121b = m.makeAvatar;
                        m._dndPlugin = this;
                        m.makeAvatar = function () {
                            var _121c = new _1202(m);
                            delete m._dndPlugin;
                            return _121c;
                        };
                        m.startDrag(this._source, this._elem.getDnDNodes(), evt.ctrlKey);
                        m.makeAvatar = _121b;
                        m.onMouseMove(evt);
                    },
                    _destroySource: function () {
                        _11ee.publish("/dnd/cancel");
                    },
                    _createMoveable: function (evt) {
                        if (!this._markTagetAnchorHandler) {
                            this._markTagetAnchorHandler = this.connect(win.doc, "onmousemove", "_markTargetAnchor");
                        }
                    },
                    _destroyMoveable: function () {
                        this.disconnect(this._markTagetAnchorHandler);
                        delete this._markTagetAnchorHandler;
                    },
                    _calcColTargetAnchorPos: function (evt, _121d) {
                        var i, _121e, left, _121f, ex = evt.clientX,
                            cells = this.grid.layout.cells,
                            ltr = html._isBodyLtr(),
                            _1220 = this._getVisibleHeaders();
                        for (i = 0; i < _1220.length; ++i) {
                            _121e = html.position(_1220[i].node);
                            if (ltr ? ((i === 0 || ex >= _121e.x) && ex < _121e.x + _121e.w) : ((i === 0 || ex < _121e.x + _121e.w) && ex >= _121e.x)) {
                                left = _121e.x + (ltr ? 0 : _121e.w);
                                break;
                            } else {
                                if (ltr ? (i === _1220.length - 1 && ex >= _121e.x + _121e.w) : (i === _1220.length - 1 && ex < _121e.x)) {
                                    ++i;
                                    left = _121e.x + (ltr ? _121e.w : 0);
                                    break;
                                }
                            }
                        }
                        if (i < _1220.length) {
                            _121f = _1220[i].cell.index;
                            if (this.selector.isSelected("col", _121f) && this.selector.isSelected("col", _121f - 1)) {
                                var _1221 = this._dndRegion.selected;
                                for (i = 0; i < _1221.length; ++i) {
                                    if (array.indexOf(_1221[i], _121f) >= 0) {
                                        _121f = _1221[i][0];
                                        _121e = html.position(cells[_121f].getHeaderNode());
                                        left = _121e.x + (ltr ? 0 : _121e.w);
                                        break;
                                    }
                                }
                            }
                        } else {
                            _121f = cells.length;
                        }
                        this._target = _121f;
                        return left - _121d.x;
                    },
                    _calcRowTargetAnchorPos: function (evt, _1222) {
                        var g = this.grid,
                            top, i = 0,
                            cells = g.layout.cells;
                        while (cells[i].hidden) {
                            ++i;
                        }
                        var cell = g.layout.cells[i],
                            _1223 = g.scroller.firstVisibleRow,
                            _1224 = cell.getNode(_1223);
                        if (!_1224) {
                            this._target = -1;
                            return 0;
                        }
                        var _1225 = html.position(_1224);
                        while (_1225.y + _1225.h < evt.clientY) {
                            if (++_1223 >= g.rowCount) {
                                break;
                            }
                            _1225 = html.position(cell.getNode(_1223));
                        }
                        if (_1223 < g.rowCount) {
                            if (this.selector.isSelected("row", _1223) && this.selector.isSelected("row", _1223 - 1)) {
                                var _1226 = this._dndRegion.selected;
                                for (i = 0; i < _1226.length; ++i) {
                                    if (array.indexOf(_1226[i], _1223) >= 0) {
                                        _1223 = _1226[i][0];
                                        _1225 = html.position(cell.getNode(_1223));
                                        break;
                                    }
                                }
                            }
                            top = _1225.y;
                        } else {
                            top = _1225.y + _1225.h;
                        }
                        this._target = _1223;
                        return top - _1222.y;
                    },
                    _calcCellTargetAnchorPos: function (evt, _1227, _1228) {
                        var s = this._dndRegion.selected[0],
                            _1229 = this._dndRegion.handle,
                            g = this.grid,
                            ltr = html._isBodyLtr(),
                            cells = g.layout.cells,
                            _122a, _122b, _122c, _122d, _122e, width, left, top, _122f, _1230, i, _1231 = _1229.col - s.min.col,
                            _1232 = s.max.col - _1229.col,
                            _1233, _1234;
                        if (!_1228.childNodes.length) {
                            _1233 = html.create("div", {
                                "class": "dojoxGridCellBorderLeftTopDIV"
                            }, _1228);
                            _1234 = html.create("div", {
                                "class": "dojoxGridCellBorderRightBottomDIV"
                            }, _1228);
                        } else {
                            _1233 = query(".dojoxGridCellBorderLeftTopDIV", _1228)[0];
                            _1234 = query(".dojoxGridCellBorderRightBottomDIV", _1228)[0];
                        }
                        for (i = s.min.col + 1; i < _1229.col; ++i) {
                            if (cells[i].hidden) {
                                --_1231;
                            }
                        }
                        for (i = _1229.col + 1; i < s.max.col; ++i) {
                            if (cells[i].hidden) {
                                --_1232;
                            }
                        }
                        _122d = this._getVisibleHeaders();
                        for (i = _1231; i < _122d.length - _1232; ++i) {
                            _122a = html.position(_122d[i].node);
                            if ((evt.clientX >= _122a.x && evt.clientX < _122a.x + _122a.w) || (i == _1231 && (ltr ? evt.clientX < _122a.x : evt.clientX >= _122a.x + _122a.w)) || (i == _122d.length - _1232 - 1 && (ltr ? evt.clientX >= _122a.x + _122a.w : evt < _122a.x))) {
                                _122f = _122d[i - _1231];
                                _1230 = _122d[i + _1232];
                                _122b = html.position(_122f.node);
                                _122c = html.position(_1230.node);
                                _122f = _122f.cell.index;
                                _1230 = _1230.cell.index;
                                left = ltr ? _122b.x : _122c.x;
                                width = ltr ? (_122c.x + _122c.w - _122b.x) : (_122b.x + _122b.w - _122c.x);
                                break;
                            }
                        }
                        i = 0;
                        while (cells[i].hidden) {
                            ++i;
                        }
                        var cell = cells[i],
                            _1235 = g.scroller.firstVisibleRow,
                            _1236 = html.position(cell.getNode(_1235));
                        while (_1236.y + _1236.h < evt.clientY) {
                            if (++_1235 < g.rowCount) {
                                _1236 = html.position(cell.getNode(_1235));
                            } else {
                                break;
                            }
                        }
                        var _1237 = _1235 >= _1229.row - s.min.row ? _1235 - _1229.row + s.min.row : 0;
                        var _1238 = _1237 + s.max.row - s.min.row;
                        if (_1238 >= g.rowCount) {
                            _1238 = g.rowCount - 1;
                            _1237 = _1238 - s.max.row + s.min.row;
                        }
                        _122b = html.position(cell.getNode(_1237));
                        _122c = html.position(cell.getNode(_1238));
                        top = _122b.y;
                        _122e = _122c.y + _122c.h - _122b.y;
                        this._target = {
                            "min": {
                                "row": _1237,
                                "col": _122f
                            },
                            "max": {
                                "row": _1238,
                                "col": _1230
                            }
                        };
                        var _1239 = (html.marginBox(_1233).w - html.contentBox(_1233).w) / 2;
                        var _123a = html.position(cells[_122f].getNode(_1237));
                        html.style(_1233, {
                            "width": (_123a.w - _1239) + "px",
                            "height": (_123a.h - _1239) + "px"
                        });
                        var _123b = html.position(cells[_1230].getNode(_1238));
                        html.style(_1234, {
                            "width": (_123b.w - _1239) + "px",
                            "height": (_123b.h - _1239) + "px"
                        });
                        return {
                            h: _122e,
                            w: width,
                            l: left - _1227.x,
                            t: top - _1227.y
                        };
                    },
                    _markTargetAnchor: function (evt) {
                        try {
                            var t = this._dndRegion.type;
                            if (this._alreadyOut || (this._dnding && !this._config[t]["within"]) || (this._extDnding && !this._config[t]["in"])) {
                                return;
                            }
                            var _123c, width, left, top, _123d = this._targetAnchor[t],
                                pos = html.position(this._container);
                            if (!_123d) {
                                _123d = this._targetAnchor[t] = html.create("div", {
                                    "class": (t == "cell") ? "dojoxGridCellBorderDIV" : "dojoxGridBorderDIV"
                                });
                                html.style(_123d, "display", "none");
                                this._container.appendChild(_123d);
                            }
                            switch (t) {
                            case "col":
                                _123c = pos.h;
                                width = this._targetAnchorBorderWidth;
                                left = this._calcColTargetAnchorPos(evt, pos);
                                top = 0;
                                break;
                            case "row":
                                _123c = this._targetAnchorBorderWidth;
                                width = pos.w;
                                left = 0;
                                top = this._calcRowTargetAnchorPos(evt, pos);
                                break;
                            case "cell":
                                var _123e = this._calcCellTargetAnchorPos(evt, pos, _123d);
                                _123c = _123e.h;
                                width = _123e.w;
                                left = _123e.l;
                                top = _123e.t;
                            }
                            if (typeof _123c == "number" && typeof width == "number" && typeof left == "number" && typeof top == "number") {
                                html.style(_123d, {
                                    "height": _123c + "px",
                                    "width": width + "px",
                                    "left": left + "px",
                                    "top": top + "px"
                                });
                                html.style(_123d, "display", "");
                            } else {
                                this._target = null;
                            }
                        } catch (e) {
                            console.warn("DnD._markTargetAnchor() error:", e);
                        }
                    },
                    _unmarkTargetAnchor: function () {
                        if (this._dndRegion) {
                            var _123f = this._targetAnchor[this._dndRegion.type];
                            if (_123f) {
                                html.style(this._targetAnchor[this._dndRegion.type], "display", "none");
                            }
                        }
                    },
                    _getVisibleHeaders: function () {
                        return array.map(array.filter(this.grid.layout.cells, function (cell) {
                            return !cell.hidden;
                        }), function (cell) {
                            return {
                                "node": cell.getHeaderNode(),
                                "cell": cell
                            };
                        });
                    },
                    _rearrange: function () {
                        if (this._target === null) {
                            return;
                        }
                        var t = this._dndRegion.type;
                        var _1240 = this._dndRegion.selected;
                        if (t === "cell") {
                            this.rearranger[(this._isCopy || this._copyOnly) ? "copyCells" : "moveCells"](_1240[0], this._target === -1 ? null : this._target);
                        } else {
                            this.rearranger[t == "col" ? "moveColumns" : "moveRows"](_11f4(_1240), this._target === -1 ? null : this._target);
                        }
                        this._target = null;
                    },
                    onDraggingOver: function (_1241) {
                        if (!this._dnding && _1241) {
                            _1241._isSource = true;
                            this._extDnding = true;
                            if (!this._externalDnd) {
                                this._externalDnd = true;
                                this._dndRegion = this._mapRegion(_1241.grid, _1241._dndRegion);
                            }
                            this._createDnDUI(this._moveEvent, true);
                            this.grid.pluginMgr.getPlugin("autoScroll").readyForAutoScroll = true;
                        }
                    },
                    _mapRegion: function (_1242, _1243) {
                        if (_1243.type === "cell") {
                            var _1244 = _1243.selected[0];
                            var cells = this.grid.layout.cells;
                            var _1245 = _1242.layout.cells;
                            var c, cnt = 0;
                            for (c = _1244.min.col; c <= _1244.max.col; ++c) {
                                if (!_1245[c].hidden) {
                                    ++cnt;
                                }
                            }
                            for (c = 0; cnt > 0; ++c) {
                                if (!cells[c].hidden) {
                                    --cnt;
                                }
                            }
                            var _1246 = lang.clone(_1243);
                            _1246.selected[0].min.col = 0;
                            _1246.selected[0].max.col = c - 1;
                            for (c = _1244.min.col; c <= _1243.handle.col; ++c) {
                                if (!_1245[c].hidden) {
                                    ++cnt;
                                }
                            }
                            for (c = 0; cnt > 0; ++c) {
                                if (!cells[c].hidden) {
                                    --cnt;
                                }
                            }
                            _1246.handle.col = c;
                        }
                        return _1243;
                    },
                    onDraggingOut: function (_1247) {
                        if (this._externalDnd) {
                            this._extDnding = false;
                            this._destroyDnDUI(true, false);
                            if (_1247) {
                                _1247._isSource = false;
                            }
                        }
                    },
                    onDragIn: function (_1248, _1249) {
                        var _124a = false;
                        if (this._target !== null) {
                            var type = _1248._dndRegion.type;
                            var _124b = _1248._dndRegion.selected;
                            switch (type) {
                            case "cell":
                                this.rearranger.changeCells(_1248.grid, _124b[0], this._target);
                                break;
                            case "row":
                                var range = _11f4(_124b);
                                this.rearranger.insertRows(_1248.grid, range, this._target);
                                break;
                            }
                            _124a = true;
                        }
                        this._endDnd(true);
                        if (_1248.onDragOut) {
                            _1248.onDragOut(_124a && !_1249);
                        }
                    },
                    onDragOut: function (_124c) {
                        if (_124c && !this._copyOnly) {
                            var type = this._dndRegion.type;
                            var _124d = this._dndRegion.selected;
                            switch (type) {
                            case "cell":
                                this.rearranger.clearCells(_124d[0]);
                                break;
                            case "row":
                                this.rearranger.removeRows(_11f4(_124d));
                                break;
                            }
                        }
                        this._endDnd(true);
                    },
                    _canAccept: function (_124e) {
                        if (!_124e) {
                            return false;
                        }
                        var _124f = _124e._dndRegion;
                        var type = _124f.type;
                        if (!this._config[type]["in"] || !_124e._config[type]["out"]) {
                            return false;
                        }
                        var g = this.grid;
                        var _1250 = _124f.selected;
                        var _1251 = array.filter(g.layout.cells, function (cell) {
                            return !cell.hidden;
                        }).length;
                        var _1252 = g.rowCount;
                        var res = true;
                        switch (type) {
                        case "cell":
                            _1250 = _1250[0];
                            res = g.store.getFeatures()["dojo.data.api.Write"] && (_1250.max.row - _1250.min.row) <= _1252 && array.filter(_124e.grid.layout.cells, function (cell) {
                                return cell.index >= _1250.min.col && cell.index <= _1250.max.col && !cell.hidden;
                            }).length <= _1251;
                        case "row":
                            if (_124e._allDnDItemsLoaded()) {
                                return res;
                            }
                        }
                        return false;
                    },
                    _allDnDItemsLoaded: function () {
                        if (this._dndRegion) {
                            var type = this._dndRegion.type,
                                _1253 = this._dndRegion.selected,
                                rows = [];
                            switch (type) {
                            case "cell":
                                for (var i = _1253[0].min.row, max = _1253[0].max.row; i <= max; ++i) {
                                    rows.push(i);
                                }
                                break;
                            case "row":
                                rows = _11f4(_1253);
                                break;
                            default:
                                return false;
                            }
                            var cache = this.grid._by_idx;
                            return array.every(rows, function (_1254) {
                                return !!cache[_1254];
                            });
                        }
                        return false;
                    }
                });
                _11f2.registerPlugin(DnD, {
                    "dependency": ["selector", "rearrange"]
                });
                return DnD;
            });
        },
        "dojox/grid/enhanced/plugins/Rearrange": function () {
            define("dojox/grid/enhanced/plugins/Rearrange", ["dojo/_base/kernel", "dojo/_base/lang", "dojo/_base/declare", "dojo/_base/array", "dojo/_base/connect", "../../EnhancedGrid", "../_Plugin", "./_RowMapLayer"], function (dojo, lang, _1255, array, _1256, _1257, _1258, _1259) {
                var _125a = _1255("dojox.grid.enhanced.plugins.Rearrange", _1258, {
                    name: "rearrange",
                    constructor: function (grid, args) {
                        this.grid = grid;
                        this.setArgs(args);
                        var _125b = new _1259(grid);
                        dojox.grid.enhanced.plugins.wrap(grid, "_storeLayerFetch", _125b);
                    },
                    setArgs: function (args) {
                        this.args = lang.mixin(this.args || {}, args || {});
                        this.args.setIdentifierForNewItem = this.args.setIdentifierForNewItem ||
                        function (v) {
                            return v;
                        };
                    },
                    destroy: function () {
                        this.inherited(arguments);
                        this.grid.unwrap("rowmap");
                    },
                    onSetStore: function (store) {
                        this.grid.layer("rowmap").clearMapping();
                    },
                    _hasIdentity: function (_125c) {
                        var g = this.grid,
                            s = g.store,
                            cells = g.layout.cells;
                        if (s.getFeatures()["dojo.data.api.Identity"]) {
                            if (array.some(_125c, function (point) {
                                return s.getIdentityAttributes(g._by_idx[point.r].item) == cells[point.c].field;
                            })) {
                                return true;
                            }
                        }
                        return false;
                    },
                    moveColumns: function (_125d, _125e) {
                        var g = this.grid,
                            _125f = g.layout,
                            cells = _125f.cells,
                            _1260, i, delta = 0,
                            _1261 = true,
                            tmp = {},
                            _1262 = {};
                        _125d.sort(function (a, b) {
                            return a - b;
                        });
                        for (i = 0; i < _125d.length; ++i) {
                            tmp[_125d[i]] = i;
                            if (_125d[i] < _125e) {
                                ++delta;
                            }
                        }
                        var _1263 = 0,
                            _1264 = 0;
                        var _1265 = Math.max(_125d[_125d.length - 1], _125e);
                        if (_1265 == cells.length) {
                            --_1265;
                        }
                        var _1266 = Math.min(_125d[0], _125e);
                        for (i = _1266; i <= _1265; ++i) {
                            var j = tmp[i];
                            if (j >= 0) {
                                _1262[i] = _125e - delta + j;
                            } else {
                                if (i < _125e) {
                                    _1262[i] = _1266 + _1263;
                                    ++_1263;
                                } else {
                                    if (i >= _125e) {
                                        _1262[i] = _125e + _125d.length - delta + _1264;
                                        ++_1264;
                                    }
                                }
                            }
                        }
                        delta = 0;
                        if (_125e == cells.length) {
                            --_125e;
                            _1261 = false;
                        }
                        g._notRefreshSelection = true;
                        for (i = 0; i < _125d.length; ++i) {
                            _1260 = _125d[i];
                            if (_1260 < _125e) {
                                _1260 -= delta;
                            }++delta;
                            if (_1260 != _125e) {
                                _125f.moveColumn(cells[_1260].view.idx, cells[_125e].view.idx, _1260, _125e, _1261);
                                cells = _125f.cells;
                            }
                            if (_125e <= _1260) {
                                ++_125e;
                            }
                        }
                        delete g._notRefreshSelection;
                        _1256.publish("dojox/grid/rearrange/move/" + g.id, ["col", _1262, _125d]);
                    },
                    moveRows: function (_1267, _1268) {
                        var g = this.grid,
                            _1269 = {},
                            _126a = [],
                            _126b = [],
                            len = _1267.length,
                            i, r, k, arr, _126c, _126d;
                        for (i = 0; i < len; ++i) {
                            r = _1267[i];
                            if (r >= _1268) {
                                break;
                            }
                            _126a.push(r);
                        }
                        _126b = _1267.slice(i);
                        arr = _126a;
                        len = arr.length;
                        if (len) {
                            _126c = {};
                            array.forEach(arr, function (r) {
                                _126c[r] = true;
                            });
                            _1269[arr[0]] = _1268 - len;
                            for (k = 0, i = arr[k] + 1, _126d = i - 1; i < _1268; ++i) {
                                if (!_126c[i]) {
                                    _1269[i] = _126d;
                                    ++_126d;
                                } else {
                                    ++k;
                                    _1269[i] = _1268 - len + k;
                                }
                            }
                        }
                        arr = _126b;
                        len = arr.length;
                        if (len) {
                            _126c = {};
                            array.forEach(arr, function (r) {
                                _126c[r] = true;
                            });
                            _1269[arr[len - 1]] = _1268 + len - 1;
                            for (k = len - 1, i = arr[k] - 1, _126d = i + 1; i >= _1268; --i) {
                                if (!_126c[i]) {
                                    _1269[i] = _126d;
                                    --_126d;
                                } else {
                                    --k;
                                    _1269[i] = _1268 + k;
                                }
                            }
                        }
                        var _126e = lang.clone(_1269);
                        g.layer("rowmap").setMapping(_1269);
                        g.forEachLayer(function (layer) {
                            if (layer.name() != "rowmap") {
                                layer.invalidate();
                                return true;
                            } else {
                                return false;
                            }
                        }, false);
                        g.selection.selected = [];
                        g._noInternalMapping = true;
                        g._refresh();
                        setTimeout(function () {
                            _1256.publish("dojox/grid/rearrange/move/" + g.id, ["row", _126e, _1267]);
                            g._noInternalMapping = false;
                        }, 0);
                    },
                    moveCells: function (_126f, _1270) {
                        var g = this.grid,
                            s = g.store;
                        if (s.getFeatures()["dojo.data.api.Write"]) {
                            if (_126f.min.row == _1270.min.row && _126f.min.col == _1270.min.col) {
                                return;
                            }
                            var cells = g.layout.cells,
                                cnt = _126f.max.row - _126f.min.row + 1,
                                r, c, tr, tc, _1271 = [],
                                _1272 = [];
                            for (r = _126f.min.row, tr = _1270.min.row; r <= _126f.max.row; ++r, ++tr) {
                                for (c = _126f.min.col, tc = _1270.min.col; c <= _126f.max.col; ++c, ++tc) {
                                    while (cells[c] && cells[c].hidden) {
                                        ++c;
                                    }
                                    while (cells[tc] && cells[tc].hidden) {
                                        ++tc;
                                    }
                                    _1271.push({
                                        "r": r,
                                        "c": c
                                    });
                                    _1272.push({
                                        "r": tr,
                                        "c": tc,
                                        "v": cells[c].get(r, g._by_idx[r].item)
                                    });
                                }
                            }
                            if (this._hasIdentity(_1271.concat(_1272))) {
                                console.warn("Can not write to identity!");
                                return;
                            }
                            array.forEach(_1271, function (point) {
                                s.setValue(g._by_idx[point.r].item, cells[point.c].field, "");
                            });
                            array.forEach(_1272, function (point) {
                                s.setValue(g._by_idx[point.r].item, cells[point.c].field, point.v);
                            });
                            s.save({
                                onComplete: function () {
                                    _1256.publish("dojox/grid/rearrange/move/" + g.id, ["cell",
                                    {
                                        "from": _126f,
                                        "to": _1270
                                    }]);
                                }
                            });
                        }
                    },
                    copyCells: function (_1273, _1274) {
                        var g = this.grid,
                            s = g.store;
                        if (s.getFeatures()["dojo.data.api.Write"]) {
                            if (_1273.min.row == _1274.min.row && _1273.min.col == _1274.min.col) {
                                return;
                            }
                            var cells = g.layout.cells,
                                cnt = _1273.max.row - _1273.min.row + 1,
                                r, c, tr, tc, _1275 = [];
                            for (r = _1273.min.row, tr = _1274.min.row; r <= _1273.max.row; ++r, ++tr) {
                                for (c = _1273.min.col, tc = _1274.min.col; c <= _1273.max.col; ++c, ++tc) {
                                    while (cells[c] && cells[c].hidden) {
                                        ++c;
                                    }
                                    while (cells[tc] && cells[tc].hidden) {
                                        ++tc;
                                    }
                                    _1275.push({
                                        "r": tr,
                                        "c": tc,
                                        "v": cells[c].get(r, g._by_idx[r].item)
                                    });
                                }
                            }
                            if (this._hasIdentity(_1275)) {
                                console.warn("Can not write to identity!");
                                return;
                            }
                            array.forEach(_1275, function (point) {
                                s.setValue(g._by_idx[point.r].item, cells[point.c].field, point.v);
                            });
                            s.save({
                                onComplete: function () {
                                    setTimeout(function () {
                                        _1256.publish("dojox/grid/rearrange/copy/" + g.id, ["cell",
                                        {
                                            "from": _1273,
                                            "to": _1274
                                        }]);
                                    }, 0);
                                }
                            });
                        }
                    },
                    changeCells: function (_1276, _1277, _1278) {
                        var g = this.grid,
                            s = g.store;
                        if (s.getFeatures()["dojo.data.api.Write"]) {
                            var srcg = _1276,
                                cells = g.layout.cells,
                                _1279 = srcg.layout.cells,
                                cnt = _1277.max.row - _1277.min.row + 1,
                                r, c, tr, tc, _127a = [];
                            for (r = _1277.min.row, tr = _1278.min.row; r <= _1277.max.row; ++r, ++tr) {
                                for (c = _1277.min.col, tc = _1278.min.col; c <= _1277.max.col; ++c, ++tc) {
                                    while (_1279[c] && _1279[c].hidden) {
                                        ++c;
                                    }
                                    while (cells[tc] && cells[tc].hidden) {
                                        ++tc;
                                    }
                                    _127a.push({
                                        "r": tr,
                                        "c": tc,
                                        "v": _1279[c].get(r, srcg._by_idx[r].item)
                                    });
                                }
                            }
                            if (this._hasIdentity(_127a)) {
                                console.warn("Can not write to identity!");
                                return;
                            }
                            array.forEach(_127a, function (point) {
                                s.setValue(g._by_idx[point.r].item, cells[point.c].field, point.v);
                            });
                            s.save({
                                onComplete: function () {
                                    _1256.publish("dojox/grid/rearrange/change/" + g.id, ["cell", _1278]);
                                }
                            });
                        }
                    },
                    clearCells: function (_127b) {
                        var g = this.grid,
                            s = g.store;
                        if (s.getFeatures()["dojo.data.api.Write"]) {
                            var cells = g.layout.cells,
                                cnt = _127b.max.row - _127b.min.row + 1,
                                r, c, _127c = [];
                            for (r = _127b.min.row; r <= _127b.max.row; ++r) {
                                for (c = _127b.min.col; c <= _127b.max.col; ++c) {
                                    while (cells[c] && cells[c].hidden) {
                                        ++c;
                                    }
                                    _127c.push({
                                        "r": r,
                                        "c": c
                                    });
                                }
                            }
                            if (this._hasIdentity(_127c)) {
                                console.warn("Can not write to identity!");
                                return;
                            }
                            array.forEach(_127c, function (point) {
                                s.setValue(g._by_idx[point.r].item, cells[point.c].field, "");
                            });
                            s.save({
                                onComplete: function () {
                                    _1256.publish("dojox/grid/rearrange/change/" + g.id, ["cell", _127b]);
                                }
                            });
                        }
                    },
                    insertRows: function (_127d, _127e, _127f) {
                        try {
                            var g = this.grid,
                                s = g.store,
                                _1280 = g.rowCount,
                                _1281 = {},
                                obj = {
                                    idx: 0
                                },
                                _1282 = [],
                                i, _1283 = _127f < 0;
                            _this = this;
                            var len = _127e.length;
                            if (_1283) {
                                _127f = 0;
                            } else {
                                for (i = _127f; i < g.rowCount; ++i) {
                                    _1281[i] = i + len;
                                }
                            }
                            if (s.getFeatures()["dojo.data.api.Write"]) {
                                if (_127d) {
                                    var srcg = _127d,
                                        srcs = srcg.store,
                                        _1284, attrs;
                                    if (!_1283) {
                                        for (i = 0; !_1284; ++i) {
                                            _1284 = g._by_idx[i];
                                        }
                                        attrs = s.getAttributes(_1284.item);
                                    } else {
                                        attrs = array.map(g.layout.cells, function (cell) {
                                            return cell.field;
                                        });
                                    }
                                    var _1285 = [];
                                    array.forEach(_127e, function (_1286, i) {
                                        var item = {};
                                        var _1287 = srcg._by_idx[_1286];
                                        if (_1287) {
                                            array.forEach(attrs, function (attr) {
                                                item[attr] = srcs.getValue(_1287.item, attr);
                                            });
                                            item = _this.args.setIdentifierForNewItem(item, s, _1280 + obj.idx) || item;
                                            try {
                                                s.newItem(item);
                                                _1282.push(_127f + i);
                                                _1281[_1280 + obj.idx] = _127f + i;
                                                ++obj.idx;
                                            } catch (e) {}
                                        } else {
                                            _1285.push(_1286);
                                        }
                                    });
                                } else {
                                    if (_127e.length && lang.isObject(_127e[0])) {
                                        array.forEach(_127e, function (_1288, i) {
                                            var item = _this.args.setIdentifierForNewItem(_1288, s, _1280 + obj.idx) || _1288;
                                            try {
                                                s.newItem(item);
                                                _1282.push(_127f + i);
                                                _1281[_1280 + obj.idx] = _127f + i;
                                                ++obj.idx;
                                            } catch (e) {}
                                        });
                                    } else {
                                        return;
                                    }
                                }
                                g.layer("rowmap").setMapping(_1281);
                                s.save({
                                    onComplete: function () {
                                        g._refresh();
                                        setTimeout(function () {
                                            _1256.publish("dojox/grid/rearrange/insert/" + g.id, ["row", _1282]);
                                        }, 0);
                                    }
                                });
                            }
                        } catch (e) {}
                    },
                    removeRows: function (_1289) {
                        var g = this.grid;
                        var s = g.store;
                        try {
                            array.forEach(array.map(_1289, function (_128a) {
                                return g._by_idx[_128a];
                            }), function (row) {
                                if (row) {
                                    s.deleteItem(row.item);
                                }
                            });
                            s.save({
                                onComplete: function () {
                                    _1256.publish("dojox/grid/rearrange/remove/" + g.id, ["row", _1289]);
                                }
                            });
                        } catch (e) {}
                    },
                    _getPageInfo: function () {
                        var _128b = this.grid.scroller,
                            _128c = _128b.page,
                            _128d = _128b.page,
                            _128e = _128b.firstVisibleRow,
                            _128f = _128b.lastVisibleRow,
                            _1290 = _128b.rowsPerPage,
                            _1291 = _128b.pageNodes[0],
                            _1292, _1293, _1294, _1295 = [];
                        array.forEach(_1291, function (page, _1296) {
                            if (!page) {
                                return;
                            }
                            _1294 = false;
                            _1292 = _1296 * _1290;
                            _1293 = (_1296 + 1) * _1290 - 1;
                            if (_128e >= _1292 && _128e <= _1293) {
                                _128c = _1296;
                                _1294 = true;
                            }
                            if (_128f >= _1292 && _128f <= _1293) {
                                _128d = _1296;
                                _1294 = true;
                            }
                            if (!_1294 && (_1292 > _128f || _1293 < _128e)) {
                                _1295.push(_1296);
                            }
                        });
                        return {
                            topPage: _128c,
                            bottomPage: _128d,
                            invalidPages: _1295
                        };
                    }
                });
                _1257.registerPlugin(_125a);
                return _125a;
            });
        },
        "dojox/grid/enhanced/plugins/_RowMapLayer": function () {
            define("dojox/grid/enhanced/plugins/_RowMapLayer", ["dojo/_base/declare", "dojo/_base/array", "dojo/_base/lang", "./_StoreLayer"], function (_1297, array, lang, _1298) {
                var _1299 = function (a) {
                        a.sort(function (v1, v2) {
                            return v1 - v2;
                        });
                        var arr = [
                            [a[0]]
                        ];
                        for (var i = 1, j = 0; i < a.length; ++i) {
                            if (a[i] == a[i - 1] + 1) {
                                arr[j].push(a[i]);
                            } else {
                                arr[++j] = [a[i]];
                            }
                        }
                        return arr;
                    },
                    _129a = function (scope, func) {
                        return func ? lang.hitch(scope || lang.global, func) : function () {};
                    };
                return _1297("dojox.grid.enhanced.plugins._RowMapLayer", _1298._StoreLayer, {
                    tags: ["reorder"],
                    constructor: function (grid) {
                        this._map = {};
                        this._revMap = {};
                        this.grid = grid;
                        this._oldOnDelete = grid._onDelete;
                        var _129b = this;
                        grid._onDelete = function (item) {
                            _129b._onDelete(item);
                            _129b._oldOnDelete.call(grid, item);
                        };
                        this._oldSort = grid.sort;
                        grid.sort = function () {
                            _129b.clearMapping();
                            _129b._oldSort.apply(grid, arguments);
                        };
                    },
                    uninitialize: function () {
                        this.grid._onDelete = this._oldOnDelete;
                        this.grid.sort = this._oldSort;
                    },
                    setMapping: function (_129c) {
                        this._store.forEachLayer(function (layer) {
                            if (layer.name() === "rowmap") {
                                return false;
                            } else {
                                if (layer.onRowMappingChange) {
                                    layer.onRowMappingChange(_129c);
                                }
                            }
                            return true;
                        }, false);
                        var from, to, _129d, _129e = {};
                        for (from in _129c) {
                            from = parseInt(from, 10);
                            to = _129c[from];
                            if (typeof to == "number") {
                                if (from in this._revMap) {
                                    _129d = this._revMap[from];
                                    delete this._revMap[from];
                                } else {
                                    _129d = from;
                                }
                                if (_129d == to) {
                                    delete this._map[_129d];
                                    _129e[to] = "eq";
                                } else {
                                    this._map[_129d] = to;
                                    _129e[to] = _129d;
                                }
                            }
                        }
                        for (to in _129e) {
                            if (_129e[to] === "eq") {
                                delete this._revMap[parseInt(to, 10)];
                            } else {
                                this._revMap[parseInt(to, 10)] = _129e[to];
                            }
                        }
                    },
                    clearMapping: function () {
                        this._map = {};
                        this._revMap = {};
                    },
                    _onDelete: function (item) {
                        var idx = this.grid._getItemIndex(item, true);
                        if (idx in this._revMap) {
                            var _129f = [],
                                r, i, _12a0 = this._revMap[idx];
                            delete this._map[_12a0];
                            delete this._revMap[idx];
                            for (r in this._revMap) {
                                r = parseInt(r, 10);
                                if (this._revMap[r] > _12a0) {
                                    --this._revMap[r];
                                }
                            }
                            for (r in this._revMap) {
                                r = parseInt(r, 10);
                                if (r > idx) {
                                    _129f.push(r);
                                }
                            }
                            _129f.sort(function (a, b) {
                                return b - a;
                            });
                            for (i = _129f.length - 1; i >= 0; --i) {
                                r = _129f[i];
                                this._revMap[r - 1] = this._revMap[r];
                                delete this._revMap[r];
                            }
                            this._map = {};
                            for (r in this._revMap) {
                                this._map[this._revMap[r]] = r;
                            }
                        }
                    },
                    _fetch: function (_12a1) {
                        var _12a2 = 0,
                            r;
                        var start = _12a1.start || 0;
                        for (r in this._revMap) {
                            r = parseInt(r, 10);
                            if (r >= start) {
                                ++_12a2;
                            }
                        }
                        if (_12a2 > 0) {
                            var rows = [],
                                i, map = {},
                                count = _12a1.count > 0 ? _12a1.count : -1;
                            if (count > 0) {
                                for (i = 0; i < count; ++i) {
                                    r = start + i;
                                    r = r in this._revMap ? this._revMap[r] : r;
                                    map[r] = i;
                                    rows.push(r);
                                }
                            } else {
                                for (i = 0;; ++i) {
                                    r = start + i;
                                    if (r in this._revMap) {
                                        --_12a2;
                                        r = this._revMap[r];
                                    }
                                    map[r] = i;
                                    rows.push(r);
                                    if (_12a2 <= 0) {
                                        break;
                                    }
                                }
                            }
                            this._subFetch(_12a1, this._getRowArrays(rows), 0, [], map, _12a1.onComplete, start, count);
                            return _12a1;
                        } else {
                            return lang.hitch(this._store, this._originFetch)(_12a1);
                        }
                    },
                    _getRowArrays: function (rows) {
                        return _1299(rows);
                    },
                    _subFetch: function (_12a3, _12a4, index, _12a5, map, _12a6, start, count) {
                        var arr = _12a4[index],
                            _12a7 = this;
                        var _12a8 = _12a3.start = arr[0];
                        _12a3.count = arr[arr.length - 1] - arr[0] + 1;
                        _12a3.onComplete = function (items) {
                            array.forEach(items, function (item, i) {
                                var r = _12a8 + i;
                                if (r in map) {
                                    _12a5[map[r]] = item;
                                }
                            });
                            if (++index == _12a4.length) {
                                if (count > 0) {
                                    _12a3.start = start;
                                    _12a3.count = count;
                                    _12a3.onComplete = _12a6;
                                    _129a(_12a3.scope, _12a6)(_12a5, _12a3);
                                } else {
                                    _12a3.start = _12a3.start + items.length;
                                    delete _12a3.count;
                                    _12a3.onComplete = function (items) {
                                        _12a5 = _12a5.concat(items);
                                        _12a3.start = start;
                                        _12a3.onComplete = _12a6;
                                        _129a(_12a3.scope, _12a6)(_12a5, _12a3);
                                    };
                                    _12a7.originFetch(_12a3);
                                }
                            } else {
                                _12a7._subFetch(_12a3, _12a4, index, _12a5, map, _12a6, start, count);
                            }
                        };
                        _12a7.originFetch(_12a3);
                    }
                });
            });
        },
        "dojox/grid/enhanced/plugins/Search": function () {
            define("dojox/grid/enhanced/plugins/Search", ["dojo/_base/kernel", "dojo/_base/lang", "dojo/_base/declare", "dojo/_base/array", "dojo/data/util/filter", "../../EnhancedGrid", "../_Plugin"], function (dojo, lang, _12a9, array, _12aa, _12ab, _12ac) {
                var _12ad = _12a9("dojox.grid.enhanced.plugins.Search", _12ac, {
                    name: "search",
                    constructor: function (grid, args) {
                        this.grid = grid;
                        args = (args && lang.isObject(args)) ? args : {};
                        this._cacheSize = args.cacheSize || -1;
                        grid.searchRow = lang.hitch(this, "searchRow");
                    },
                    searchRow: function (_12ae, _12af) {
                        if (!lang.isFunction(_12af)) {
                            return;
                        }
                        if (lang.isString(_12ae)) {
                            _12ae = _12aa.patternToRegExp(_12ae);
                        }
                        var _12b0 = false;
                        if (_12ae instanceof RegExp) {
                            _12b0 = true;
                        } else {
                            if (lang.isObject(_12ae)) {
                                var _12b1 = true;
                                for (var field in _12ae) {
                                    if (lang.isString(_12ae[field])) {
                                        _12ae[field] = _12aa.patternToRegExp(_12ae[field]);
                                    }
                                    _12b1 = false;
                                }
                                if (_12b1) {
                                    return;
                                }
                            } else {
                                return;
                            }
                        }
                        this._search(_12ae, 0, _12af, _12b0);
                    },
                    _search: function (_12b2, start, _12b3, _12b4) {
                        var _12b5 = this,
                            cnt = this._cacheSize,
                            args = {
                                start: start,
                                query: this.grid.query,
                                sort: this.grid.getSortProps(),
                                queryOptions: this.grid.queryOptions,
                                onBegin: function (size) {
                                    _12b5._storeSize = size;
                                },
                                onComplete: function (items) {
                                    if (!array.some(items, function (item, i) {
                                        if (_12b5._checkRow(item, _12b2, _12b4)) {
                                            _12b3(start + i, item);
                                            return true;
                                        }
                                        return false;
                                    })) {
                                        if (cnt > 0 && start + cnt < _12b5._storeSize) {
                                            _12b5._search(_12b2, start + cnt, _12b3, _12b4);
                                        } else {
                                            _12b3(-1, null);
                                        }
                                    }
                                }
                            };
                        if (cnt > 0) {
                            args.count = cnt;
                        }
                        this.grid._storeLayerFetch(args);
                    },
                    _checkRow: function (item, _12b6, _12b7) {
                        var g = this.grid,
                            s = g.store,
                            i, field, cells = array.filter(g.layout.cells, function (cell) {
                                return !cell.hidden;
                            });
                        if (_12b7) {
                            return array.some(cells, function (cell) {
                                try {
                                    if (cell.field) {
                                        return String(s.getValue(item, cell.field)).search(_12b6) >= 0;
                                    }
                                } catch (e) {}
                                return false;
                            });
                        } else {
                            for (field in _12b6) {
                                if (_12b6[field] instanceof RegExp) {
                                    for (i = cells.length - 1; i >= 0; --i) {
                                        if (cells[i].field == field) {
                                            try {
                                                if (String(s.getValue(item, field)).search(_12b6[field]) < 0) {
                                                    return false;
                                                }
                                                break;
                                            } catch (e) {
                                                return false;
                                            }
                                        }
                                    }
                                    if (i < 0) {
                                        return false;
                                    }
                                }
                            }
                            return true;
                        }
                    }
                });
                _12ab.registerPlugin(_12ad);
                return _12ad;
            });
        },
        "dojox/grid/enhanced/plugins/CellMerge": function () {
            define("dojox/grid/enhanced/plugins/CellMerge", ["dojo/_base/declare", "dojo/_base/array", "dojo/_base/lang", "dojo/_base/html", "../_Plugin", "../../EnhancedGrid"], function (_12b8, array, lang, html, _12b9, _12ba) {
                var _12bb = _12b8("dojox.grid.enhanced.plugins.CellMerge", _12b9, {
                    name: "cellMerge",
                    constructor: function (grid, args) {
                        this.grid = grid;
                        this._records = [];
                        this._merged = {};
                        if (args && lang.isObject(args)) {
                            this._setupConfig(args.mergedCells);
                        }
                        this._initEvents();
                        this._mixinGrid();
                    },
                    mergeCells: function (_12bc, _12bd, _12be, _12bf) {
                        var item = this._createRecord({
                            "row": _12bc,
                            "start": _12bd,
                            "end": _12be,
                            "major": _12bf
                        });
                        if (item) {
                            this._updateRows(item);
                        }
                        return item;
                    },
                    unmergeCells: function (_12c0) {
                        var idx;
                        if (_12c0 && (idx = array.indexOf(this._records, _12c0)) >= 0) {
                            this._records.splice(idx, 1);
                            this._updateRows(_12c0);
                        }
                    },
                    getMergedCells: function () {
                        var res = [];
                        for (var i in this._merged) {
                            res = res.concat(this._merged[i]);
                        }
                        return res;
                    },
                    getMergedCellsByRow: function (_12c1) {
                        return this._merged[_12c1] || [];
                    },
                    _setupConfig: function (_12c2) {
                        array.forEach(_12c2, this._createRecord, this);
                    },
                    _initEvents: function () {
                        array.forEach(this.grid.views.views, function (view) {
                            this.connect(view, "onAfterRow", lang.hitch(this, "_onAfterRow", view.index));
                        }, this);
                    },
                    _mixinGrid: function () {
                        var g = this.grid;
                        g.mergeCells = lang.hitch(this, "mergeCells");
                        g.unmergeCells = lang.hitch(this, "unmergeCells");
                        g.getMergedCells = lang.hitch(this, "getMergedCells");
                        g.getMergedCellsByRow = lang.hitch(this, "getMergedCellsByRow");
                    },
                    _getWidth: function (_12c3) {
                        var node = this.grid.layout.cells[_12c3].getHeaderNode();
                        return html.position(node).w;
                    },
                    _onAfterRow: function (_12c4, _12c5, _12c6) {
                        try {
                            if (_12c5 < 0) {
                                return;
                            }
                            var _12c7 = [],
                                i, j, len = this._records.length,
                                cells = this.grid.layout.cells;
                            for (i = 0; i < len; ++i) {
                                var item = this._records[i];
                                var _12c8 = this.grid._by_idx[_12c5];
                                if (item.view == _12c4 && item.row(_12c5, _12c8 && _12c8.item, this.grid.store)) {
                                    var res = {
                                        record: item,
                                        hiddenCells: [],
                                        totalWidth: 0,
                                        majorNode: cells[item.major].getNode(_12c5),
                                        majorHeaderNode: cells[item.major].getHeaderNode()
                                    };
                                    for (j = item.start; j <= item.end; ++j) {
                                        var w = this._getWidth(j, _12c5);
                                        res.totalWidth += w;
                                        if (j != item.major) {
                                            res.hiddenCells.push(cells[j].getNode(_12c5));
                                        }
                                    }
                                    if (_12c6.length != 1 || res.totalWidth > 0) {
                                        for (j = _12c7.length - 1; j >= 0; --j) {
                                            var r = _12c7[j].record;
                                            if ((r.start >= item.start && r.start <= item.end) || (r.end >= item.start && r.end <= item.end)) {
                                                _12c7.splice(j, 1);
                                            }
                                        }
                                        _12c7.push(res);
                                    }
                                }
                            }
                            this._merged[_12c5] = [];
                            array.forEach(_12c7, function (res) {
                                array.forEach(res.hiddenCells, function (node) {
                                    html.style(node, "display", "none");
                                });
                                var pbm = html.marginBox(res.majorHeaderNode).w - html.contentBox(res.majorHeaderNode).w;
                                var tw = res.totalWidth;
                                if (!html.isWebKit) {
                                    tw -= pbm;
                                }
                                html.style(res.majorNode, "width", tw + "px");
                                res.majorNode.setAttribute("colspan", res.hiddenCells.length + 1);
                                this._merged[_12c5].push({
                                    "row": _12c5,
                                    "start": res.record.start,
                                    "end": res.record.end,
                                    "major": res.record.major,
                                    "handle": res.record
                                });
                            }, this);
                        } catch (e) {
                            console.warn("CellMerge._onAfterRow() error: ", _12c5, e);
                        }
                    },
                    _createRecord: function (item) {
                        if (this._isValid(item)) {
                            item = {
                                "row": item.row,
                                "start": item.start,
                                "end": item.end,
                                "major": item.major
                            };
                            var cells = this.grid.layout.cells;
                            item.view = cells[item.start].view.index;
                            item.major = typeof item.major == "number" && !isNaN(item.major) ? item.major : item.start;
                            if (typeof item.row == "number") {
                                var r = item.row;
                                item.row = function (_12c9) {
                                    return _12c9 === r;
                                };
                            } else {
                                if (typeof item.row == "string") {
                                    var id = item.row;
                                    item.row = function (_12ca, _12cb, store) {
                                        try {
                                            if (store && _12cb && store.getFeatures()["dojo.data.api.Identity"]) {
                                                return store.getIdentity(_12cb) == id;
                                            }
                                        } catch (e) {
                                            console.error(e);
                                        }
                                        return false;
                                    };
                                }
                            }
                            if (lang.isFunction(item.row)) {
                                this._records.push(item);
                                return item;
                            }
                        }
                        return null;
                    },
                    _isValid: function (item) {
                        var cells = this.grid.layout.cells,
                            _12cc = cells.length;
                        return (lang.isObject(item) && ("row" in item) && ("start" in item) && ("end" in item) && item.start >= 0 && item.start < _12cc && item.end > item.start && item.end < _12cc && cells[item.start].view.index == cells[item.end].view.index && cells[item.start].subrow == cells[item.end].subrow && !(typeof item.major == "number" && (item.major < item.start || item.major > item.end)));
                    },
                    _updateRows: function (item) {
                        var min = null;
                        for (var i = 0, count = this.grid.rowCount; i < count; ++i) {
                            var _12cd = this.grid._by_idx[i];
                            if (_12cd && item.row(i, _12cd && _12cd.item, this.grid.store)) {
                                this.grid.views.updateRow(i);
                                if (min === null) {
                                    min = i;
                                }
                            }
                        }
                        if (min >= 0) {
                            this.grid.scroller.rowHeightChanged(min);
                        }
                    }
                });
                _12ba.registerPlugin(_12bb);
                return _12bb;
            });
        },
        "dojox/grid/enhanced/plugins/Pagination": function () {
            require({
                cache: {
                    "url:dojox/grid/enhanced/templates/Pagination.html": "<div dojoAttachPoint=\"paginatorBar\"\n\t><table cellpadding=\"0\" cellspacing=\"0\"  class=\"dojoxGridPaginator\"\n\t\t><tr\n\t\t\t><td dojoAttachPoint=\"descriptionTd\" class=\"dojoxGridDescriptionTd\"\n\t\t\t\t><div dojoAttachPoint=\"descriptionDiv\" class=\"dojoxGridDescription\"></div\n\t\t\t></div></td\n\t\t\t><td dojoAttachPoint=\"sizeSwitchTd\"></td\n\t\t\t><td dojoAttachPoint=\"pageStepperTd\" class=\"dojoxGridPaginatorFastStep\"\n\t\t\t\t><div dojoAttachPoint=\"pageStepperDiv\" class=\"dojoxGridPaginatorStep\"></div\n\t\t\t></td\n\t\t\t><td dojoAttachPoint=\"gotoPageTd\" class=\"dojoxGridPaginatorGotoTd\"\n\t\t\t\t><div dojoAttachPoint=\"gotoPageDiv\" class=\"dojoxGridPaginatorGotoDiv\" dojoAttachEvent=\"onclick:_openGotopageDialog, onkeydown:_openGotopageDialog\"\n\t\t\t\t\t><span class=\"dojoxGridWardButtonInner\">&#8869;</span\n\t\t\t\t></div\n\t\t\t></td\n\t\t></tr\n\t></table\n></div>\n"
                }
            });
            define("dojox/grid/enhanced/plugins/Pagination", ["dojo/_base/kernel", "dojo/_base/declare", "dojo/_base/array", "dojo/_base/connect", "dojo/_base/lang", "dojo/_base/html", "dojo/_base/event", "dojo/_base/window", "dojo/query", "dojo/string", "dojo/i18n", "dojo/keys", "dojo/text!../templates/Pagination.html", "./Dialog", "./_StoreLayer", "../_Plugin", "../../EnhancedGrid", "dijit/form/Button", "dijit/form/NumberTextBox", "dijit/focus", "dijit/_Widget", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "dojox/html/metrics", "dojo/i18n!../nls/Pagination"], function (_12ce, _12cf, array, _12d0, lang, html, event, win, query, _12d1, i18n, keys, _12d2, _12d3, _12d4, _12d5, _12d6, _12d7, _12d8, _12d9, _12da, _12db, _12dc, _12dd) {
                var _12de = _12cf("dojox.grid.enhanced.plugins.pagination._GotoPagePane", [_12da, _12db, _12dc], {
                    templateString: "<div>" + "<div class='dojoxGridDialogMargin' dojoAttachPoint='_mainMsgNode'></div>" + "<div class='dojoxGridDialogMargin'>" + "<input dojoType='dijit.form.NumberTextBox' style='width: 50px;' dojoAttachPoint='_pageInputBox' dojoAttachEvent='onKeyUp: _onKey'></input>" + "<label dojoAttachPoint='_pageLabelNode'></label>" + "</div>" + "<div class='dojoxGridDialogButton'>" + "<button dojoType='dijit.form.Button' dojoAttachPoint='_confirmBtn' dojoAttachEvent='onClick: _onConfirm'></button>" + "<button dojoType='dijit.form.Button' dojoAttachPoint='_cancelBtn' dojoAttachEvent='onClick: _onCancel'></button>" + "</div>" + "</div>",
                    widgetsInTemplate: true,
                    dlg: null,
                    postMixInProperties: function () {
                        this.plugin = this.dlg.plugin;
                    },
                    postCreate: function () {
                        this.inherited(arguments);
                        this._mainMsgNode.innerHTML = this.plugin._nls[12];
                        this._confirmBtn.set("label", this.plugin._nls[14]);
                        this._confirmBtn.set("disabled", true);
                        this._cancelBtn.set("label", this.plugin._nls[15]);
                    },
                    _onConfirm: function (evt) {
                        if (this._pageInputBox.isValid() && this._pageInputBox.getDisplayedValue() !== "") {
                            this.plugin.currentPage(this._pageInputBox.parse(this._pageInputBox.getDisplayedValue()));
                            this.dlg._gotoPageDialog.hide();
                            this._pageInputBox.reset();
                        }
                        _12df(evt);
                    },
                    _onCancel: function (evt) {
                        this._pageInputBox.reset();
                        this.dlg._gotoPageDialog.hide();
                        _12df(evt);
                    },
                    _onKey: function (evt) {
                        this._confirmBtn.set("disabled", !this._pageInputBox.isValid() || this._pageInputBox.getDisplayedValue() == "");
                        if (!evt.altKey && !evt.metaKey && evt.keyCode === keys.ENTER) {
                            this._onConfirm(evt);
                        }
                    }
                });
                var _12e0 = _12cf("dojox.grid.enhanced.plugins.pagination._GotoPageDialog", null, {
                    pageCount: 0,
                    dlgPane: null,
                    constructor: function (_12e1) {
                        this.plugin = _12e1;
                        this.dlgPane = new _12de({
                            "dlg": this
                        });
                        this.dlgPane.startup();
                        this._gotoPageDialog = new _12d3({
                            "refNode": _12e1.grid.domNode,
                            "title": this.plugin._nls[11],
                            "content": this.dlgPane
                        });
                        this._gotoPageDialog.startup();
                    },
                    _updatePageCount: function () {
                        this.pageCount = this.plugin.getTotalPageNum();
                        this.dlgPane._pageInputBox.constraints = {
                            fractional: false,
                            min: 1,
                            max: this.pageCount
                        };
                        this.dlgPane._pageLabelNode.innerHTML = _12d1.substitute(this.plugin._nls[13], [this.pageCount]);
                    },
                    showDialog: function () {
                        this._updatePageCount();
                        this._gotoPageDialog.show();
                    },
                    destroy: function () {
                        this._gotoPageDialog.destroy();
                    }
                });
                var _12e2 = _12cf("dojox.grid.enhanced.plugins._ForcedPageStoreLayer", _12d4._StoreLayer, {
                    tags: ["presentation"],
                    constructor: function (_12e3) {
                        this._plugin = _12e3;
                    },
                    _fetch: function (_12e4) {
                        var _12e5 = this,
                            _12e6 = _12e5._plugin,
                            grid = _12e6.grid,
                            scope = _12e4.scope || win.global,
                            _12e7 = _12e4.onBegin;
                        _12e4.start = (_12e6._currentPage - 1) * _12e6._currentPageSize + _12e4.start;
                        _12e5.startIdx = _12e4.start;
                        _12e5.endIdx = _12e4.start + _12e6._currentPageSize - 1;
                        var p = _12e6._paginator;
                        if (!_12e6._showAll) {
                            _12e6._showAll = !p.sizeSwitch && !p.pageStepper && !p.gotoButton;
                        }
                        if (_12e7 && _12e6._showAll) {
                            _12e4.onBegin = function (size, req) {
                                _12e6._maxSize = _12e6._currentPageSize = size;
                                _12e5.startIdx = 0;
                                _12e5.endIdx = size - 1;
                                _12e6._paginator._update();
                                req.onBegin = _12e7;
                                req.onBegin.call(scope, size, req);
                            };
                        } else {
                            if (_12e7) {
                                _12e4.onBegin = function (size, req) {
                                    req.start = 0;
                                    req.count = _12e6._currentPageSize;
                                    _12e6._maxSize = size;
                                    _12e5.endIdx = _12e5.endIdx >= size ? (size - 1) : _12e5.endIdx;
                                    if (_12e5.startIdx > size && size !== 0) {
                                        grid._pending_requests[req.start] = false;
                                        _12e6.firstPage();
                                    }
                                    _12e6._paginator._update();
                                    req.onBegin = _12e7;
                                    req.onBegin.call(scope, Math.min(_12e6._currentPageSize, (size - _12e5.startIdx)), req);
                                };
                            }
                        }
                        return lang.hitch(this._store, this._originFetch)(_12e4);
                    }
                });
                var _12df = function (evt) {
                        try {
                            event.stop(evt);
                        } catch (e) {}
                    };
                var _12e8 = _12cf("dojox.grid.enhanced.plugins.pagination._Focus", null, {
                    _focusedNode: null,
                    _isFocused: false,
                    constructor: function (_12e9) {
                        this._pager = _12e9;
                        var _12ea = _12e9.plugin.grid.focus;
                        _12e9.plugin.connect(_12e9, "onSwitchPageSize", lang.hitch(this, "_onActive"));
                        _12e9.plugin.connect(_12e9, "onPageStep", lang.hitch(this, "_onActive"));
                        _12e9.plugin.connect(_12e9, "onShowGotoPageDialog", lang.hitch(this, "_onActive"));
                        _12e9.plugin.connect(_12e9, "_update", lang.hitch(this, "_moveFocus"));
                    },
                    _onFocus: function (evt, step) {
                        var node, nodes;
                        if (!this._isFocused) {
                            node = this._focusedNode || query("[tabindex]", this._pager.domNode)[0];
                        } else {
                            if (step && this._focusedNode) {
                                var dir = step > 0 ? -1 : 1,
                                    _12eb = parseInt(this._focusedNode.getAttribute("tabindex"), 10) + dir;
                                while (_12eb >= -3 && _12eb < 0) {
                                    node = query("[tabindex=" + _12eb + "]", this._pager.domNode)[0];
                                    if (node) {
                                        break;
                                    } else {
                                        _12eb += dir;
                                    }
                                }
                            }
                        }
                        return this._focus(node, evt);
                    },
                    _onBlur: function (evt, step) {
                        if (!step || !this._focusedNode) {
                            this._isFocused = false;
                            if (this._focusedNode && html.hasClass(this._focusedNode, "dojoxGridButtonFocus")) {
                                html.removeClass(this._focusedNode, "dojoxGridButtonFocus");
                            }
                            return true;
                        }
                        var node, dir = step > 0 ? -1 : 1,
                            _12ec = parseInt(this._focusedNode.getAttribute("tabindex"), 10) + dir;
                        while (_12ec >= -3 && _12ec < 0) {
                            node = query("[tabindex=" + _12ec + "]", this._pager.domNode)[0];
                            if (node) {
                                break;
                            } else {
                                _12ec += dir;
                            }
                        }
                        if (!node) {
                            this._isFocused = false;
                            if (html.hasClass(this._focusedNode, "dojoxGridButtonFocus")) {
                                html.removeClass(this._focusedNode, "dojoxGridButtonFocus");
                            }
                        }
                        return node ? false : true;
                    },
                    _onMove: function (_12ed, _12ee, evt) {
                        if (this._focusedNode) {
                            var _12ef = this._focusedNode.getAttribute("tabindex"),
                                delta = _12ee == 1 ? "nextSibling" : "previousSibling",
                                node = this._focusedNode[delta];
                            while (node) {
                                if (node.getAttribute("tabindex") == _12ef) {
                                    this._focus(node);
                                    break;
                                }
                                node = node[delta];
                            }
                        }
                    },
                    _focus: function (node, evt) {
                        if (node) {
                            this._isFocused = true;
                            if (_12ce.isIE && this._focusedNode) {
                                html.removeClass(this._focusedNode, "dojoxGridButtonFocus");
                            }
                            this._focusedNode = node;
                            node.focus();
                            if (_12ce.isIE) {
                                html.addClass(node, "dojoxGridButtonFocus");
                            }
                            _12df(evt);
                            return true;
                        }
                        return false;
                    },
                    _onActive: function (e) {
                        this._focusedNode = e.target;
                        if (!this._isFocused) {
                            this._pager.plugin.grid.focus.focusArea("pagination" + this._pager.position);
                        }
                    },
                    _moveFocus: function () {
                        if (this._focusedNode && !this._focusedNode.getAttribute("tabindex")) {
                            var next = this._focusedNode.nextSibling;
                            while (next) {
                                if (next.getAttribute("tabindex")) {
                                    this._focus(next);
                                    return;
                                }
                                next = next.nextSibling;
                            }
                            var prev = this._focusedNode.previousSibling;
                            while (prev) {
                                if (prev.getAttribute("tabindex")) {
                                    this._focus(prev);
                                    return;
                                }
                                prev = prev.previousSibling;
                            }
                            this._focusedNode = null;
                            this._onBlur();
                        } else {
                            if (_12ce.isIE && this._focusedNode) {
                                html.addClass(this._focusedNode, "dojoxGridButtonFocus");
                            }
                        }
                    }
                });
                var _12f0 = _12cf("dojox.grid.enhanced.plugins._Paginator", [_12da, _12db], {
                    templateString: _12d2,
                    constructor: function (_12f1) {
                        lang.mixin(this, _12f1);
                        this.grid = this.plugin.grid;
                    },
                    postCreate: function () {
                        this.inherited(arguments);
                        var _12f2 = this,
                            g = this.grid;
                        this.plugin.connect(g, "_resize", lang.hitch(this, "_resetGridHeight"));
                        this._originalResize = g.resize;
                        g.resize = function (_12f3, _12f4) {
                            _12f2._changeSize = _12f3;
                            _12f2._resultSize = _12f4;
                            _12f2._originalResize.apply(g, arguments);
                        };
                        this.focus = _12e8(this);
                        this._placeSelf();
                    },
                    destroy: function () {
                        this.inherited(arguments);
                        this.grid.focus.removeArea("pagination" + this.position);
                        if (this._gotoPageDialog) {
                            this._gotoPageDialog.destroy();
                        }
                        this.grid.resize = this._originalResize;
                    },
                    onSwitchPageSize: function (evt) {},
                    onPageStep: function (evt) {},
                    onShowGotoPageDialog: function (evt) {},
                    _update: function () {
                        this._updateDescription();
                        this._updatePageStepper();
                        this._updateSizeSwitch();
                        this._updateGotoButton();
                    },
                    _registerFocus: function (isTop) {
                        var _12f5 = this.grid.focus,
                            name = "pagination" + this.position,
                            f = this.focus;
                        _12f5.addArea({
                            name: name,
                            onFocus: lang.hitch(this.focus, "_onFocus"),
                            onBlur: lang.hitch(this.focus, "_onBlur"),
                            onMove: lang.hitch(this.focus, "_onMove")
                        });
                        _12f5.placeArea(name, isTop ? "before" : "after", isTop ? "header" : "content");
                    },
                    _placeSelf: function () {
                        var g = this.grid,
                            isTop = this.position == "top";
                        this.placeAt(isTop ? g.viewsHeaderNode : g.viewsNode, isTop ? "before" : "after");
                        this._registerFocus(isTop);
                    },
                    _resetGridHeight: function (_12f6, _12f7) {
                        var g = this.grid;
                        _12f6 = _12f6 || this._changeSize;
                        _12f7 = _12f7 || this._resultSize;
                        delete this._changeSize;
                        delete this._resultSize;
                        if (g._autoHeight) {
                            return;
                        }
                        var _12f8 = g._getPadBorder().h;
                        if (!this.plugin.gh) {
                            this.plugin.gh = html.contentBox(g.domNode).h + 2 * _12f8;
                        }
                        if (_12f7) {
                            _12f6 = _12f7;
                        }
                        if (_12f6) {
                            this.plugin.gh = html.contentBox(g.domNode).h + 2 * _12f8;
                        }
                        var gh = this.plugin.gh,
                            hh = g._getHeaderHeight(),
                            ph = html.marginBox(this.domNode).h;
                        if (typeof g.autoHeight === "number") {
                            var cgh = gh + ph - _12f8;
                            html.style(g.domNode, "height", cgh + "px");
                            html.style(g.viewsNode, "height", (cgh - ph - hh) + "px");
                            this._styleMsgNode(hh, html.marginBox(g.viewsNode).w, cgh - ph - hh);
                        } else {
                            var h = gh - ph - hh - _12f8;
                            html.style(g.viewsNode, "height", h + "px");
                            var _12f9 = array.some(g.views.views, function (v) {
                                return v.hasHScrollbar();
                            });
                            array.forEach(g.viewsNode.childNodes, function (c) {
                                html.style(c, "height", h + "px");
                            });
                            array.forEach(g.views.views, function (v) {
                                if (v.scrollboxNode) {
                                    if (!v.hasHScrollbar() && _12f9) {
                                        html.style(v.scrollboxNode, "height", (h - _12dd.getScrollbar().h) + "px");
                                    } else {
                                        html.style(v.scrollboxNode, "height", h + "px");
                                    }
                                }
                            });
                            this._styleMsgNode(hh, html.marginBox(g.viewsNode).w, h);
                        }
                    },
                    _styleMsgNode: function (top, width, _12fa) {
                        var _12fb = this.grid.messagesNode;
                        html.style(_12fb, {
                            "position": "absolute",
                            "top": top + "px",
                            "width": width + "px",
                            "height": _12fa + "px",
                            "z-Index": "100"
                        });
                    },
                    _updateDescription: function () {
                        var s = this.plugin.forcePageStoreLayer,
                            _12fc = this.plugin._maxSize,
                            nls = this.plugin._nls,
                            _12fd = function () {
                                return _12fc <= 0 || _12fc == 1 ? nls[5] : nls[4];
                            };
                        if (this.description && this.descriptionDiv) {
                            this.descriptionDiv.innerHTML = _12fc > 0 ? _12d1.substitute(nls[0], [_12fd(), _12fc, s.startIdx + 1, s.endIdx + 1]) : "0 " + _12fd();
                        }
                    },
                    _updateSizeSwitch: function () {
                        html.style(this.sizeSwitchTd, "display", this.sizeSwitch ? "" : "none");
                        if (!this.sizeSwitch) {
                            return;
                        }
                        if (this.sizeSwitchTd.childNodes.length < 1) {
                            this._createSizeSwitchNodes();
                        }
                        this._updateSwitchNodesStyle();
                    },
                    _createSizeSwitchNodes: function () {
                        var node = null,
                            nls = this.plugin._nls,
                            _12d0 = lang.hitch(this.plugin, "connect");
                        array.forEach(this.pageSizes, function (size) {
                            var _12fe = isFinite(size) ? _12d1.substitute(nls[2], [size]) : nls[1],
                                value = isFinite(size) ? size : nls[16];
                            node = html.create("span", {
                                innerHTML: value,
                                title: _12fe,
                                value: size,
                                tabindex: "-1"
                            }, this.sizeSwitchTd, "last");
                            node.setAttribute("aria-label", _12fe);
                            _12d0(node, "onclick", lang.hitch(this, "_onSwitchPageSize"));
                            _12d0(node, "onkeydown", lang.hitch(this, "_onSwitchPageSize"));
                            _12d0(node, "onmouseover", function (e) {
                                html.addClass(e.target, "dojoxGridPageTextHover");
                            });
                            _12d0(node, "onmouseout", function (e) {
                                html.removeClass(e.target, "dojoxGridPageTextHover");
                            });
                            node = html.create("span", {
                                innerHTML: "|"
                            }, this.sizeSwitchTd, "last");
                            html.addClass(node, "dojoxGridSeparator");
                        }, this);
                        html.destroy(node);
                    },
                    _updateSwitchNodesStyle: function () {
                        var size = null;
                        var _12ff = function (node, _1300) {
                                if (_1300) {
                                    html.addClass(node, "dojoxGridActivedSwitch");
                                    html.removeAttr(node, "tabindex");
                                } else {
                                    html.addClass(node, "dojoxGridInactiveSwitch");
                                    node.setAttribute("tabindex", "-1");
                                }
                            };
                        array.forEach(this.sizeSwitchTd.childNodes, function (node) {
                            if (node.value) {
                                html.removeClass(node);
                                size = node.value;
                                if (this.plugin._showAll) {
                                    _12ff(node, isNaN(parseInt(size, 10)));
                                } else {
                                    _12ff(node, this.plugin._currentPageSize == size);
                                }
                            }
                        }, this);
                    },
                    _updatePageStepper: function () {
                        html.style(this.pageStepperTd, "display", this.pageStepper ? "" : "none");
                        if (!this.pageStepper) {
                            return;
                        }
                        if (this.pageStepperDiv.childNodes.length < 1) {
                            this._createPageStepNodes();
                            this._createWardBtns();
                        } else {
                            this._resetPageStepNodes();
                        }
                        this._updatePageStepNodesStyle();
                    },
                    _createPageStepNodes: function () {
                        var _1301 = this._getStartPage(),
                            _1302 = this._getStepPageSize(),
                            label = "",
                            node = null,
                            i = _1301,
                            _12d0 = lang.hitch(this.plugin, "connect");
                        for (; i < _1301 + this.maxPageStep + 1; i++) {
                            label = _12d1.substitute(this.plugin._nls[3], [i]);
                            node = html.create("div", {
                                innerHTML: i,
                                value: i,
                                title: label
                            }, this.pageStepperDiv, "last");
                            node.setAttribute("aria-label", label);
                            _12d0(node, "onclick", lang.hitch(this, "_onPageStep"));
                            _12d0(node, "onkeydown", lang.hitch(this, "_onPageStep"));
                            _12d0(node, "onmouseover", function (e) {
                                html.addClass(e.target, "dojoxGridPageTextHover");
                            });
                            _12d0(node, "onmouseout", function (e) {
                                html.removeClass(e.target, "dojoxGridPageTextHover");
                            });
                            html.style(node, "display", i < _1301 + _1302 ? "" : "none");
                        }
                    },
                    _createWardBtns: function () {
                        var _1303 = this,
                            nls = this.plugin._nls;
                        var _1304 = {
                            prevPage: "&#60;",
                            firstPage: "&#171;",
                            nextPage: "&#62;",
                            lastPage: "&#187;"
                        };
                        var _1305 = function (value, label, _1306) {
                                var node = html.create("div", {
                                    value: value,
                                    title: label,
                                    tabindex: "-2"
                                }, _1303.pageStepperDiv, _1306);
                                _1303.plugin.connect(node, "onclick", lang.hitch(_1303, "_onPageStep"));
                                _1303.plugin.connect(node, "onkeydown", lang.hitch(_1303, "_onPageStep"));
                                node.setAttribute("aria-label", label);
                                var _1307 = html.create("span", {
                                    value: value,
                                    title: label,
                                    innerHTML: _1304[value]
                                }, node, _1306);
                                html.addClass(_1307, "dojoxGridWardButtonInner");
                            };
                        _1305("prevPage", nls[6], "first");
                        _1305("firstPage", nls[7], "first");
                        _1305("nextPage", nls[8], "last");
                        _1305("lastPage", nls[9], "last");
                    },
                    _resetPageStepNodes: function () {
                        var _1308 = this._getStartPage(),
                            _1309 = this._getStepPageSize(),
                            _130a = this.pageStepperDiv.childNodes,
                            node = null,
                            i = _1308,
                            j = 2,
                            tip;
                        for (; j < _130a.length - 2; j++, i++) {
                            node = _130a[j];
                            if (i < _1308 + _1309) {
                                tip = _12d1.substitute(this.plugin._nls[3], [i]);
                                html.attr(node, {
                                    "innerHTML": i,
                                    "title": tip,
                                    "value": i
                                });
                                html.style(node, "display", "");
                                node.setAttribute("aria-label", tip);
                            } else {
                                html.style(node, "display", "none");
                            }
                        }
                    },
                    _updatePageStepNodesStyle: function () {
                        var value = null,
                            _130b = this.plugin.currentPage(),
                            _130c = this.plugin.getTotalPageNum();
                        var _130d = function (node, _130e, _130f) {
                                var value = node.value,
                                    _1310 = _130e ? "dojoxGrid" + value + "Btn" : "dojoxGridInactived",
                                    _1311 = _130e ? "dojoxGrid" + value + "BtnDisable" : "dojoxGridActived";
                                if (_130f) {
                                    html.addClass(node, _1311);
                                    html.removeAttr(node, "tabindex");
                                } else {
                                    html.addClass(node, _1310);
                                    node.setAttribute("tabindex", "-2");
                                }
                            };
                        array.forEach(this.pageStepperDiv.childNodes, function (node) {
                            html.removeClass(node);
                            if (isNaN(parseInt(node.value, 10))) {
                                html.addClass(node, "dojoxGridWardButton");
                                var _1312 = node.value == "prevPage" || node.value == "firstPage" ? 1 : _130c;
                                _130d(node, true, (_130b === _1312));
                            } else {
                                value = parseInt(node.value, 10);
                                _130d(node, false, (value === _130b || html.style(node, "display") === "none"));
                            }
                        }, this);
                    },
                    _showGotoButton: function (flag) {
                        this.gotoButton = flag;
                        this._updateGotoButton();
                    },
                    _updateGotoButton: function () {
                        if (!this.gotoButton) {
                            if (this._gotoPageDialog) {
                                this._gotoPageDialog.destroy();
                            }
                            html.removeAttr(this.gotoPageDiv, "tabindex");
                            html.style(this.gotoPageTd, "display", "none");
                            return;
                        }
                        if (html.style(this.gotoPageTd, "display") == "none") {
                            html.style(this.gotoPageTd, "display", "");
                        }
                        this.gotoPageDiv.setAttribute("title", this.plugin._nls[10]);
                        html.toggleClass(this.gotoPageDiv, "dojoxGridPaginatorGotoDivDisabled", this.plugin.getTotalPageNum() <= 1);
                        if (this.plugin.getTotalPageNum() <= 1) {
                            html.removeAttr(this.gotoPageDiv, "tabindex");
                        } else {
                            this.gotoPageDiv.setAttribute("tabindex", "-3");
                        }
                    },
                    _openGotopageDialog: function (e) {
                        if (this.plugin.getTotalPageNum() <= 1) {
                            return;
                        }
                        if (e.type === "keydown" && e.keyCode !== keys.ENTER && e.keyCode !== keys.SPACE) {
                            return;
                        }
                        if (!this._gotoPageDialog) {
                            this._gotoPageDialog = new _12e0(this.plugin);
                        }
                        this._gotoPageDialog.showDialog();
                        this.onShowGotoPageDialog(e);
                    },
                    _onSwitchPageSize: function (e) {
                        if (e.type === "keydown" && e.keyCode !== keys.ENTER && e.keyCode !== keys.SPACE) {
                            return;
                        }
                        this.onSwitchPageSize(e);
                        this.plugin.currentPageSize(e.target.value);
                    },
                    _onPageStep: function (e) {
                        if (e.type === "keydown" && e.keyCode !== keys.ENTER && e.keyCode !== keys.SPACE) {
                            return;
                        }
                        var p = this.plugin,
                            value = e.target.value;
                        this.onPageStep(e);
                        if (!isNaN(parseInt(value, 10))) {
                            p.currentPage(parseInt(value, 10));
                        } else {
                            p[value]();
                        }
                    },
                    _getStartPage: function () {
                        var cp = this.plugin.currentPage(),
                            ms = this.maxPageStep,
                            hs = parseInt(ms / 2, 10),
                            tp = this.plugin.getTotalPageNum();
                        if (cp < hs || (cp - hs) < 1 || tp <= ms) {
                            return 1;
                        } else {
                            return tp - cp < hs && cp - ms >= 0 ? tp - ms + 1 : cp - hs;
                        }
                    },
                    _getStepPageSize: function () {
                        var sp = this._getStartPage(),
                            tp = this.plugin.getTotalPageNum(),
                            ms = this.maxPageStep;
                        return sp + ms > tp ? tp - sp + 1 : ms;
                    }
                });
                var _1313 = _12cf("dojox.grid.enhanced.plugins.Pagination", _12d5, {
                    name: "pagination",
                    defaultPageSize: 25,
                    defaultPage: 1,
                    description: true,
                    sizeSwitch: true,
                    pageStepper: true,
                    gotoButton: false,
                    pageSizes: [10, 25, 50, 100, Infinity],
                    maxPageStep: 7,
                    position: "bottom",
                    init: function () {
                        var g = this.grid;
                        g.usingPagination = true;
                        this._initOptions();
                        this._currentPage = this.defaultPage;
                        this._currentPageSize = this.grid.rowsPerPage = this.defaultPageSize;
                        this._store = g.store;
                        this.forcePageStoreLayer = new _12e2(this);
                        _12d4.wrap(g, "_storeLayerFetch", this.forcePageStoreLayer);
                        this._paginator = this.option.position != "top" ? new _12f0(lang.mixin(this.option, {
                            position: "bottom",
                            plugin: this
                        })) : new _12f0(lang.mixin(this.option, {
                            position: "top",
                            plugin: this
                        }));
                        this._regApis();
                    },
                    destroy: function () {
                        this.inherited(arguments);
                        this._paginator.destroy();
                        var g = this.grid;
                        g.unwrap(this.forcePageStoreLayer.name());
                        g.scrollToRow = this._gridOriginalfuncs[0];
                        g._onNew = this._gridOriginalfuncs[1];
                        g.removeSelectedRows = this._gridOriginalfuncs[2];
                        this._paginator = null;
                        this._nls = null;
                    },
                    currentPage: function (page) {
                        if (page <= this.getTotalPageNum() && page > 0 && this._currentPage !== page) {
                            this._currentPage = page;
                            this.grid._refresh(true);
                            this.grid.resize();
                        }
                        return this._currentPage;
                    },
                    nextPage: function () {
                        this.currentPage(this._currentPage + 1);
                    },
                    prevPage: function () {
                        this.currentPage(this._currentPage - 1);
                    },
                    firstPage: function () {
                        this.currentPage(1);
                    },
                    lastPage: function () {
                        this.currentPage(this.getTotalPageNum());
                    },
                    currentPageSize: function (size) {
                        if (!isNaN(size)) {
                            var g = this.grid,
                                _1314 = this._currentPageSize * (this._currentPage - 1),
                                _1315;
                            this._showAll = !isFinite(size);
                            this.grid.usingPagination = !this._showAll;
                            this._currentPageSize = this._showAll ? this._maxSize : size;
                            g.rowsPerPage = this._showAll ? this._defaultRowsPerPage : size;
                            _1315 = _1314 + Math.min(this._currentPageSize, this._maxSize);
                            if (_1315 > this._maxSize) {
                                this.lastPage();
                            } else {
                                var cp = Math.ceil(_1314 / this._currentPageSize) + 1;
                                if (cp !== this._currentPage) {
                                    this.currentPage(cp);
                                } else {
                                    this.grid._refresh(true);
                                }
                            }
                            this.grid.resize();
                        }
                        return this._currentPageSize;
                    },
                    getTotalPageNum: function () {
                        return Math.ceil(this._maxSize / this._currentPageSize);
                    },
                    getTotalRowCount: function () {
                        return this._maxSize;
                    },
                    scrollToRow: function (_1316) {
                        var page = parseInt(_1316 / this._currentPageSize, 10) + 1;
                        if (page > this.getTotalPageNum()) {
                            return;
                        }
                        this.currentPage(page);
                        var _1317 = _1316 % this._currentPageSize;
                        return this._gridOriginalfuncs[0](_1317);
                    },
                    removeSelectedRows: function () {
                        this._multiRemoving = true;
                        this._gridOriginalfuncs[2].apply();
                        this._multiRemoving = false;
                        if (this.grid.store.save) {
                            this.grid.store.save();
                        }
                        this.grid.resize();
                        this.grid._refresh();
                    },
                    showGotoPageButton: function (flag) {
                        this._paginator.gotoButton = flag;
                        this._paginator._updateGotoButton();
                    },
                    gotoPage: function (page) {
                        _12ce.deprecated("dojox.grid.enhanced.EnhancedGrid.gotoPage(page)", "use dojox.grid.enhanced.EnhancedGrid.currentPage(page) instead", "1.8");
                        this.currentPage(page);
                    },
                    gotoFirstPage: function () {
                        _12ce.deprecated("dojox.grid.enhanced.EnhancedGrid.gotoFirstPage()", "use dojox.grid.enhanced.EnhancedGrid.firstPage() instead", "1.8");
                        this.firstPage();
                    },
                    gotoLastPage: function () {
                        _12ce.deprecated("dojox.grid.enhanced.EnhancedGrid.gotoLastPage()", "use dojox.grid.enhanced.EnhancedGrid.lastPage() instead", "1.8");
                        this.lastPage();
                    },
                    changePageSize: function (size) {
                        _12ce.deprecated("dojox.grid.enhanced.EnhancedGrid.changePageSize(size)", "use dojox.grid.enhanced.EnhancedGrid.currentPageSize(size) instead", "1.8");
                        this.currentPageSize(size);
                    },
                    _nls: null,
                    _showAll: false,
                    _maxSize: 0,
                    _defaultRowsPerPage: 25,
                    _currentPage: 1,
                    _currentPageSize: 25,
                    _initOptions: function () {
                        this._defaultRowsPerPage = this.grid.rowsPerPage || 25;
                        this.defaultPage = this.option.defaultPage >= 1 ? parseInt(this.option.defaultPage, 10) : 1;
                        this.option.description = this.option.description !== undefined ? !! this.option.description : this.description;
                        this.option.sizeSwitch = this.option.sizeSwitch !== undefined ? !! this.option.sizeSwitch : this.sizeSwitch;
                        this.option.pageStepper = this.option.pageStepper !== undefined ? !! this.option.pageStepper : this.pageStepper;
                        this.option.gotoButton = this.option.gotoButton !== undefined ? !! this.option.gotoButton : this.gotoButton;
                        if (lang.isArray(this.option.pageSizes)) {
                            var _1318 = [];
                            array.forEach(this.option.pageSizes, function (size) {
                                size = typeof size == "number" ? size : parseInt(size, 10);
                                if (!isNaN(size) && size > 0) {
                                    _1318.push(size);
                                } else {
                                    if (array.indexOf(_1318, Infinity) < 0) {
                                        _1318.push(Infinity);
                                    }
                                }
                            }, this);
                            this.option.pageSizes = _1318.sort(function (a, b) {
                                return a - b;
                            });
                        } else {
                            this.option.pageSizes = this.pageSizes;
                        }
                        this.defaultPageSize = this.option.defaultPageSize >= 1 ? parseInt(this.option.defaultPageSize, 10) : this.pageSizes[0];
                        this.option.maxPageStep = this.option.maxPageStep > 0 ? this.option.maxPageStep : this.maxPageStep;
                        this.option.position = lang.isString(this.option.position) ? this.option.position.toLowerCase() : this.position;
                        var nls = i18n.getLocalization("dojox.grid.enhanced", "Pagination");
                        this._nls = [nls.descTemplate, nls.allItemsLabelTemplate, nls.pageSizeLabelTemplate, nls.pageStepLabelTemplate, nls.itemTitle, nls.singularItemTitle, nls.prevTip, nls.firstTip, nls.nextTip, nls.lastTip, nls.gotoButtonTitle, nls.dialogTitle, nls.dialogIndication, nls.pageCountIndication, nls.dialogConfirm, nls.dialogCancel, nls.all];
                    },
                    _regApis: function () {
                        var g = this.grid;
                        g.currentPage = lang.hitch(this, this.currentPage);
                        g.nextPage = lang.hitch(this, this.nextPage);
                        g.prevPage = lang.hitch(this, this.prevPage);
                        g.firstPage = lang.hitch(this, this.firstPage);
                        g.lastPage = lang.hitch(this, this.lastPage);
                        g.currentPageSize = lang.hitch(this, this.currentPageSize);
                        g.showGotoPageButton = lang.hitch(this, this.showGotoPageButton);
                        g.getTotalRowCount = lang.hitch(this, this.getTotalRowCount);
                        g.getTotalPageNum = lang.hitch(this, this.getTotalPageNum);
                        g.gotoPage = lang.hitch(this, this.gotoPage);
                        g.gotoFirstPage = lang.hitch(this, this.gotoFirstPage);
                        g.gotoLastPage = lang.hitch(this, this.gotoLastPage);
                        g.changePageSize = lang.hitch(this, this.changePageSize);
                        this._gridOriginalfuncs = [lang.hitch(g, g.scrollToRow), lang.hitch(g, g._onNew), lang.hitch(g, g.removeSelectedRows)];
                        g.scrollToRow = lang.hitch(this, this.scrollToRow);
                        g.removeSelectedRows = lang.hitch(this, this.removeSelectedRows);
                        g._onNew = lang.hitch(this, this._onNew);
                        this.connect(g, "_onDelete", lang.hitch(this, this._onDelete));
                    },
                    _onNew: function (item, _1319) {
                        var _131a = this.getTotalPageNum();
                        if (((this._currentPage === _131a || _131a === 0) && this.grid.get("rowCount") < this._currentPageSize) || this._showAll) {
                            lang.hitch(this.grid, this._gridOriginalfuncs[1])(item, _1319);
                            this.forcePageStoreLayer.endIdx++;
                        }
                        this._maxSize++;
                        if (this._showAll) {
                            this._currentPageSize++;
                        }
                        if (this._showAll && this.grid.autoHeight) {
                            this.grid._refresh();
                        } else {
                            this._paginator._update();
                        }
                    },
                    _onDelete: function () {
                        if (!this._multiRemoving) {
                            this.grid.resize();
                            if (this._showAll) {
                                this.grid._refresh();
                            }
                        }
                        if (this.grid.get("rowCount") === 0) {
                            this.prevPage();
                        }
                    }
                });
                _12d6.registerPlugin(_1313);
                return _1313;
            });
        },
        "url:dojox/grid/enhanced/templates/Pagination.html": "<div dojoAttachPoint=\"paginatorBar\"\n\t><table cellpadding=\"0\" cellspacing=\"0\"  class=\"dojoxGridPaginator\"\n\t\t><tr\n\t\t\t><td dojoAttachPoint=\"descriptionTd\" class=\"dojoxGridDescriptionTd\"\n\t\t\t\t><div dojoAttachPoint=\"descriptionDiv\" class=\"dojoxGridDescription\"></div\n\t\t\t></div></td\n\t\t\t><td dojoAttachPoint=\"sizeSwitchTd\"></td\n\t\t\t><td dojoAttachPoint=\"pageStepperTd\" class=\"dojoxGridPaginatorFastStep\"\n\t\t\t\t><div dojoAttachPoint=\"pageStepperDiv\" class=\"dojoxGridPaginatorStep\"></div\n\t\t\t></td\n\t\t\t><td dojoAttachPoint=\"gotoPageTd\" class=\"dojoxGridPaginatorGotoTd\"\n\t\t\t\t><div dojoAttachPoint=\"gotoPageDiv\" class=\"dojoxGridPaginatorGotoDiv\" dojoAttachEvent=\"onclick:_openGotopageDialog, onkeydown:_openGotopageDialog\"\n\t\t\t\t\t><span class=\"dojoxGridWardButtonInner\">&#8869;</span\n\t\t\t\t></div\n\t\t\t></td\n\t\t></tr\n\t></table\n></div>\n",
        "dojox/grid/enhanced/nls/Pagination": function () {
            define("dojox/grid/enhanced/nls/Pagination", {
                root: ({
                    "descTemplate": "${2} - ${3} of ${1} ${0}",
                    "firstTip": "First Page",
                    "lastTip": "Last Page",
                    "nextTip": "Next Page",
                    "prevTip": "Previous Page",
                    "itemTitle": "items",
                    "singularItemTitle": "item",
                    "pageStepLabelTemplate": "Page ${0}",
                    "pageSizeLabelTemplate": "${0} items per page",
                    "allItemsLabelTemplate": "All items",
                    "gotoButtonTitle": "Go to a specific page",
                    "dialogTitle": "Go to Page",
                    "dialogIndication": "Specify the page number",
                    "pageCountIndication": " (${0} pages)",
                    "dialogConfirm": "Go",
                    "dialogCancel": "Cancel",
                    "all": "All"
                }),
                "ar": true,
                "ca": true,
                "cs": true,
                "da": true,
                "de": true,
                "el": true,
                "es": true,
                "fi": true,
                "fr": true,
                "he": true,
                "hr": true,
                "hu": true,
                "hr": true,
                "it": true,
                "ja": true,
                "kk": true,
                "ko": true,
                "nb": true,
                "nl": true,
                "pl": true,
                "pt": true,
                "pt-pt": true,
                "ro": true,
                "ru": true,
                "sk": true,
                "sl": true,
                "sv": true,
                "th": true,
                "tr": true,
                "zh": true,
                "zh-tw": true
            });
        }
    }
});
require(["dojo/i18n"], function (i18n) {
    i18n._preloadLocalizations("demos/grid/nls/src", ["ar", "ca", "cs", "da", "de-de", "el", "en-gb", "en-us", "es-es", "fi-fi", "fr-fr", "he-il", "hu", "it-it", "ja-jp", "ko-kr", "nl-nl", "nb", "pl", "pt-br", "pt-pt", "ru", "sk", "sl", "sv", "th", "tr", "zh-tw", "zh-cn"]);
});
require(["dojo/data/ItemFileWriteStore", "dojox/grid/EnhancedGrid", "dojox/grid/enhanced/plugins/Filter", "dojox/grid/enhanced/plugins/exporter/CSVWriter", "dojox/grid/enhanced/plugins/Printer", "dojox/grid/enhanced/plugins/Cookie", "dojox/grid/enhanced/plugins/IndirectSelection", "dojox/grid/enhanced/plugins/NestedSorting", "dojox/grid/enhanced/plugins/Selector", "dojox/grid/enhanced/plugins/Menu", "dojox/grid/enhanced/plugins/DnD", "dojox/grid/enhanced/plugins/Search", "dojox/grid/enhanced/plugins/CellMerge", "dojox/grid/enhanced/plugins/Pagination"], function () {
    var _131b = {
        rowsPerPage: 5,
        keepSelection: true,
        plugins: {}
    };
    var _131c = {
        "nestedSorting": {},
        "indirectSelection": {
            headerSelector: true
        },
        "menus": {
            headerMenu: "headerMenu",
            rowMenu: "rowMenu",
            cellMenu: "cellMenu",
            selectedRegionMenu: "selectedRegionMenu"
        },
        "exporter": {},
        "printer": {},
        "filter": {
            closeFilterbarButton: true,
            ruleCount: 0
        },
        "selector": {},
        "dnd": {
            copyOnly: true
        },
        "cellMerge": {
            "mergedCells": [{
                row: "3",
                start: 1,
                end: 10,
                major: 3
            }]
        },
        "search": {},
        "pagination": {
            pageSizes: ["5", "10", "20", "50", "All"],
            description: true,
            sizeSwitch: true,
            pageStepper: true,
            gotoButton: true,
            maxPageStep: 10,
            position: "bottom"
        }
    };
    var _131d = {
        "canSort": {
            label: "disable canSort",
            value: function (_131e) {
                return false;
            }
        },
        "rowSelector": {
            value: "20px"
        },
        "autoWidth": {
            value: true
        },
        "singleClickEdit": {
            value: true
        },
        "selectionMode": {
            label: "single selectionMode",
            value: "single"
        }
    };

    function _131f() {
        var sb = ["<table><tbody>"];
        for (var _1320 in _131d) {
            sb.push("<tr>");
            sb.push("<td><input id='cbid", _1320, "' dojoType='dijit.form.CheckBox' dojoAttachPoint='cb", _1320, "'><label id='lbl", _1320, "' for='cbid", _1320, "'>", _131d[_1320].label || _1320, "</label></input></td>");
            sb.push("</tr>");
        }
        sb.push("<tr><td><hr/></td></tr>", "<tr><td><button id='selectAllOptions' >Select All</button>", "<button id='deselectAllOptions'>Deselect All</button></td></tr>");
        for (var _1321 in _131c) {
            sb.push("<tr>");
            sb.push("<td><input id='cbid", _1321, "' dojoType='dijit.form.CheckBox' dojoAttachPoint='cb", _1321, "'><label id='lbl", _1321, "' for='cbid", _1321, "'>", _1321, "</label></input></td>");
            sb.push("</tr>");
        }
        sb.push("</tbody></table>");
        return sb.join("");
    };
    dojo.declare("PluginTable", [dijit._Widget, dijit._TemplatedMixin, dijit._WidgetsInTemplateMixin], {
        templateString: _131f(),
        widgetsInTemplate: true,
        _onChangePlugin: function (_1322, cb, e) {
            var _1323 = cb.get("checked");
            _131b.plugins[_1322] = _1323 ? _131c[_1322] : false;
            var nd = dojo.byId(_1322 + "Support");
            if (nd) {
                dojo.style(nd, "display", _1323 ? "" : "none");
            }
        },
        _onChangeFeature: function (_1324, cb, e) {
            var _1325 = cb.get("checked");
            if (_1325) {
                _131b[_1324] = _131d[_1324].value;
            } else {
                delete _131b[_1324];
            }
        },
        postCreate: function () {
            var cb;
            for (var _1326 in _131d) {
                cb = this["cb" + _1326];
                this.connect(cb, "onChange", dojo.hitch(this, "_onChangeFeature", _1326, cb));
            }
            for (var _1327 in _131c) {
                cb = this["cb" + _1327];
                this.connect(cb, "onChange", dojo.hitch(this, "_onChangePlugin", _1327, cb));
            }
        }
    });

    function _1328() {
        for (var _1329 in _131c) {
            dijit.byId("cbid" + _1329).set("checked", true);
        }
    };

    function _132a() {
        for (var _132b in _131c) {
            dijit.byId("cbid" + _132b).set("checked", false);
        }
    };

    function _132c() {
        var g = dijit.byId("grid");
        g && g.exportGrid("csv", {
            writerArgs: {
                separator: dojo.byId("sep").value
            }
        }, function (str) {
            dojo.byId("csvResults").value = str;
        });
    };

    function _132d() {
        var g = dijit.byId("grid");
        if (g) {
            dojo.byId("csvResults").value = g.exportSelected("csv", {
                separator: dojo.byId("sep").value
            });
        }
    };

    function _132e() {
        var g = dijit.byId("grid");
        if (g) {
            g.printGrid({
                title: dojo.byId("print_title").value,
                cssFiles: ["support/print_style1.css", "support/print_style2.css"]
            });
        }
    };

    function _132f() {
        var g = dijit.byId("grid");
        g && g.printSelected({
            title: dojo.byId("print_title").value,
            cssFiles: ["support/print_style1.css", "support/print_style2.css"]
        });
    };

    function _1330() {
        var g = dijit.byId("grid");
        g && g.exportToHTML({
            title: dojo.byId("print_title").value,
            cssFiles: ["support/print_style1.css", "support/print_style2.css"]
        }, function (str) {
            var win = window.open();
            win.document.open();
            win.document.write(str);
            g.normalizePrintedGrid(win.document);
            win.document.close();
        });
    };

    function _1331() {
        var _1332 = parseInt(dojo.byId("inputRow").value, 10) - 1;
        var start = parseInt(dojo.byId("inputStart").value, 10);
        var end = parseInt(dojo.byId("inputEnd").value, 10);
        var major = parseInt(dojo.byId("inputMajor").value, 10);
        var grid = dijit.byId("grid");
        grid.mergeCells(_1332, start, end, major);
    };

    function _1333(key, _1334) {
        try {
            var g = dijit.byId("grid");
            if (g) {
                if (key) {
                    g.setCookieEnabled(key, _1334);
                } else {
                    g.setCookieEnabled(_1334);
                }
            }
        } catch (e) {}
    };

    function _1335() {
        var g = dijit.byId("grid");
        if (g) {
            var idx = parseInt(dojo.byId("inputScrollToRowIdx").value, 10);
            g.scrollToRow(idx);
        }
    };
    dojo.ready(function () {
        dojo.connect(dojo.byId("selectAllOptions"), "click", _1328);
        dojo.connect(dojo.byId("deselectAllOptions"), "click", _132a);
        dojo.connect(dojo.byId("exportAllCSV"), "click", _132c);
        dojo.connect(dojo.byId("exportSelectedCSV"), "click", _132d);
        dojo.connect(dojo.byId("mergeCell"), "click", _1331);
        dojo.connect(dojo.byId("scrollToRow"), "click", _1335);
        var btns = dojo.byId("ctrlBtns2");
        btns.appendChild(dojo.create("button", {
            "innerHTML": "Refresh",
            "onclick": function () {
                var g = dijit.byId("grid");
                g && g._refresh();
            }
        }));
        btns.appendChild(dojo.create("button", {
            "innerHTML": "Delete Selected",
            "onclick": function () {
                var g = dijit.byId("grid");
                g && g.removeSelectedRows();
            }
        }));
        btns.appendChild(dojo.create("button", {
            "innerHTML": "resize",
            "onclick": function () {
                var g = dijit.byId("grid");
                if (g) {
                    var cc = dojo.byId("gridContainer");
                    dojo.style(cc, "height", (dojo.contentBox(cc).h + 10) + "px");
                    dojo.style(cc, "width", (dojo.contentBox(cc).w - 10) + "px");
                    g.resize(dojo.contentBox(cc));
                }
            }
        }));
        btns.appendChild(dojo.create("button", {
            "innerHTML": "Select All",
            "onclick": function () {
                var g = dijit.byId("grid");
                if (g) {
                    var t1 = (new Date()).getTime();
                    g.selection.selectRange(0, g.rowCount - 1);
                }
            }
        }));
        var _1336 = true;
        btns.appendChild(dojo.create("button", {
            "innerHTML": "Disable 4th row selector",
            "onclick": function () {
                var g = dijit.byId("grid");
                if (g) {
                    var cell = g.layout.cells[0];
                    if (cell.setDisabled) {
                        cell.setDisabled(3, _1336);
                        _1336 = !_1336;
                    }
                }
            }
        }));
        btns.appendChild(dojo.create("button", {
            "innerHTML": "clear sort",
            "onclick": function () {
                var g = dijit.byId("grid");
                if (g) {
                    g.setSortIndex([]);
                }
            }
        }));
    });
    var data = {
        identifier: "id",
        label: "id",
        items: []
    };
    var _1337 = [{
        "Heard": true,
        "Checked": "True",
        "Genre": "Easy Listening",
        "Artist": "Bette Midler",
        "Year": 2003,
        "Album": "Bette Midler Sings the Rosemary Clooney Songbook",
        "Name": "Hey There",
        "Length": "03:31",
        "Track": 4,
        "Composer": "Ross, Jerry 1926-1956 -w Adler, Richard 1921-",
        "Download Date": "1923/4/9",
        "Last Played": "04:32:49"
    }, {
        "Heard": true,
        "Checked": "True",
        "Genre": "Classic Rock",
        "Artist": "Jimi Hendrix",
        "Year": 1993,
        "Album": "Are You Experienced",
        "Name": "Love Or Confusion",
        "Length": "03:15",
        "Track": 4,
        "Composer": "Jimi Hendrix",
        "Download Date": "1947/12/6",
        "Last Played": "03:47:49"
    }, {
        "Heard": true,
        "Checked": "True",
        "Genre": "Jazz",
        "Artist": "Andy Narell",
        "Year": 1992,
        "Album": "Down the Road",
        "Name": "Sugar Street",
        "Length": "07:00",
        "Track": 8,
        "Composer": "Andy Narell",
        "Download Date": "1906/3/22",
        "Last Played": "21:56:15"
    }, {
        "Heard": true,
        "Checked": "True",
        "Genre": "Progressive Rock",
        "Artist": "Emerson, Lake & Palmer",
        "Year": 1992,
        "Album": "The Atlantic Years",
        "Name": "Tarkus",
        "Length": "20:40",
        "Track": 5,
        "Composer": "Greg Lake/Keith Emerson",
        "Download Date": "1994/11/29",
        "Last Played": "03:25:19"
    }, {
        "Heard": true,
        "Checked": "True",
        "Genre": "Rock",
        "Artist": "Blood, Sweat & Tears",
        "Year": 1968,
        "Album": "Child Is Father To The Man",
        "Name": "Somethin' Goin' On",
        "Length": "08:00",
        "Track": 9,
        "Composer": "",
        "Download Date": "1973/9/11",
        "Last Played": "19:49:41"
    }, {
        "Heard": true,
        "Checked": "True",
        "Genre": "Jazz",
        "Artist": "Andy Narell",
        "Year": 1989,
        "Album": "Little Secrets",
        "Name": "Armchair Psychology",
        "Length": "08:20",
        "Track": 5,
        "Composer": "Andy Narell",
        "Download Date": "2010/4/15",
        "Last Played": "01:13:08"
    }, {
        "Heard": true,
        "Checked": "True",
        "Genre": "Easy Listening",
        "Artist": "Frank Sinatra",
        "Year": 1991,
        "Album": "Sinatra Reprise: The Very Good Years",
        "Name": "Luck Be A Lady",
        "Length": "05:16",
        "Track": 4,
        "Composer": "F. Loesser",
        "Download Date": "2035/4/12",
        "Last Played": "06:16:53"
    }, {
        "Heard": true,
        "Checked": "True",
        "Genre": "Progressive Rock",
        "Artist": "Dixie dregs",
        "Year": 1977,
        "Album": "Free Fall",
        "Name": "Sleep",
        "Length": "01:58",
        "Track": 6,
        "Composer": "Steve Morse",
        "Download Date": "2032/11/21",
        "Last Played": "08:23:26"
    }];
    var len = _1337.length;
    var _1338 = 25;
    for (var i = 0; i < _1338 * len; ++i) {
        data.items.push(dojo.mixin({
            "id": i + 1
        }, _1337[i % len]));
    }
    var store = new dojo.data.ItemFileWriteStore({
        data: data
    });
    var _1339 = function (_133a) {
            var dtb = new dijit.form.DateTextBox({});
            var res = dojo.date.locale.parse(_133a, {
                selector: "date",
                datePattern: "yyyy/MM/dd"
            });
            dtb.set("value", res);
            return dtb;
        };
    var _133b = [
        [{
            defaultCell: {
                editable: true,
                autoComplete: true,
                type: dojox.grid.cells._Widget
            },
            cells: [{
                field: "id",
                name: "Index",
                datatype: "number",
                width: 4
            }, {
                field: "Genre",
                name: "Genre",
                datatype: "string",
                width: 10
            }, {
                field: "Artist",
                name: "Artist",
                datatype: "string",
                width: 10
            }, {
                field: "Year",
                name: "Year",
                datatype: "string",
                width: 6
            }, {
                field: "Album",
                name: "Album",
                datatype: "string",
                width: 10
            }, {
                field: "Name",
                name: "Name",
                datatype: "string",
                width: 8,
                disabledConditions: ["contains", "notcontains"]
            }, {
                field: "Length",
                name: "Length",
                datatype: "string",
                width: 6
            }, {
                field: "Track",
                name: "Track",
                datatype: "number",
                width: 5
            }, {
                field: "Composer",
                name: "Composer",
                datatype: "string",
                width: 12
            }, {
                field: "Download Date",
                name: "Download Date",
                datatype: "date",
                width: 12,
                navigatable: true,
                editable: false,
                dataTypeArgs: {
                    datePattern: "yyyy/M/d"
                }
            }, {
                field: "Last Played",
                name: "Last Played",
                datatype: "time",
                width: 6,
                dataTypeArgs: {
                    timePattern: "HH:mm:ss"
                }
            }, {
                field: "Heard",
                name: "Checked",
                datatype: "boolean",
                width: 6
            }, {
                field: "Checked",
                name: "Checked (Customized Label)",
                editable: false,
                datatype: "boolean",
                width: 15,
                dataTypeArgs: {
                    trueLabel: "This sounds like a very old song.",
                    falseLabel: "Never heard of this song."
                }
            }]
        }],
        [{
            defaultCell: {},
            rows: [
                [{
                    field: "id",
                    name: "Index(1)",
                    hidden: false
                }, {
                    field: "Genre",
                    name: "Genre(2)",
                    hidden: false
                }, {
                    field: "Artist",
                    name: "Artist(3)",
                    hidden: false
                }, {
                    field: "Year",
                    name: "Year(4)",
                    hidden: false
                }, {
                    field: "Album",
                    name: "Album(5)",
                    hidden: false
                }, {
                    field: "Name",
                    name: "Name(6)",
                    hidden: false
                }, {
                    field: "Length",
                    name: "Length(7)",
                    hidden: false
                }, {
                    field: "Track",
                    name: "Track(8)",
                    hidden: false
                }, {
                    field: "Composer",
                    name: "Composer(9)",
                    hidden: false
                }, {
                    field: "Download Date",
                    name: "Download Date(10)",
                    cellFormatter: {
                        selector: "date",
                        parse: {
                            datePattern: "yyyy/M/d"
                        },
                        format: {
                            datePattern: "MMMM d, yyyy"
                        }
                    },
                    hidden: false
                }, {
                    field: "Last Played",
                    name: "Last Played(11)",
                    hidden: false
                }]
            ]
        }],
        [{
            width: "300px",
            rows: [{
                field: "Genre",
                width: "6"
            }, {
                field: "Artist",
                width: "5"
            }, {
                field: "Year",
                width: "6"
            }, {
                field: "Album",
                width: "10"
            }]
        }, {
            rows: [{
                field: "Name",
                width: "17"
            }, {
                field: "Length",
                width: "6"
            }, {
                field: "Track",
                width: "6"
            }, {
                field: "Composer",
                width: "15"
            }]
        }],
        [{
            rows: [{
                field: "Genre",
                width: "8"
            }, {
                field: "Artist",
                width: "6"
            }, {
                field: "Year",
                width: "6"
            }, {
                field: "Album",
                width: "10"
            }, {
                field: "Name",
                width: "10"
            }, {
                field: "Length",
                width: "6"
            }, {
                field: "Track",
                width: "6"
            }, {
                field: "Composer",
                width: "13"
            }, {
                field: "Download Date",
                width: "10"
            }, {
                field: "Last Played",
                width: "10"
            }]
        }],
        [{
            rows: [
                [{
                    field: "Genre"
                }, {
                    field: "Artist"
                }, {
                    field: "Year"
                }, {
                    field: "Album"
                }, {
                    field: "Name"
                }],
                [{
                    field: "Length"
                }, {
                    field: "Track"
                }, {
                    field: "Composer"
                }, {
                    field: "Download Date"
                }, {
                    field: "Last Played"
                }]
            ]
        }],
        [{
            rows: [
                [{
                    field: "Genre",
                    width: "10",
                    rowSpan: 2
                }, {
                    field: "Artist",
                    width: "15"
                }, {
                    field: "Year",
                    width: "15"
                }, ],
                [{
                    field: "Album",
                    colSpan: 2
                }]
            ]
        }, {
            rows: [
                [{
                    field: "Name",
                    width: "20",
                    rowSpan: 2
                }, {
                    field: "Length",
                    width: "20"
                }, {
                    field: "Track"
                }],
                [{
                    field: "Composer",
                    colSpan: 2
                }, ],
                [{
                    field: "Download Date"
                }, {
                    field: "Last Played"
                }, {
                    field: "Checked"
                }]
            ]
        }]
    ];
    var _133c = 0;
    var _133d = 1000;
    var _133e = 500;

    function _133f(step) {
        try {
            var g = dijit.byId("grid");
            g && g.destroyRecursive();
            for (_133c += step; _133c < 0; _133c += _133b.length) {}
            _133c %= _133b.length;
            var t1 = (new Date()).getTime();
            g = new dojox.grid.EnhancedGrid(dojo.mixin({
                "id": "grid",
                "store": store,
                "structure": _133b[_133c]
            }, _131b || {}));
            g.placeAt(dojo.byId("gridContainer"));
            g.startup();
            dojo.byId("num").value = _133c;
            return g;
        } catch (e) {}
    };
    var cnt = _133d;

    function start() {
        if (cnt > 0) {
            --cnt;
            _133f(1);
            setTimeout(start, _133e);
        } else {
            var g = dijit.byId("grid");
            g && g.destroyRecursive();
            cnt = _133d;
        }
    };

    function stop() {
        cnt = 0;
    };

    function _1340() {
        var id = parseInt(dojo.byId("num").value) % _133b.length;
        _133c = isNaN(id) ? _133c : id;
        _133f(0);
    };

    function _1341() {
        var g = dijit.byId("grid");
        g && g.destroyRecursive();
    };
    dojo.addOnLoad(function () {
        var btns = dojo.byId("ctrlBtns");
        btns.appendChild(dojo.create("button", {
            "innerHTML": "Play",
            "onclick": start
        }));
        btns.appendChild(dojo.create("button", {
            "innerHTML": "Stop",
            "onclick": stop
        }));
        btns.appendChild(dojo.create("button", {
            "innerHTML": "Prev",
            "onclick": dojo.partial(_133f, -1)
        }));
        btns.appendChild(dojo.create("button", {
            "innerHTML": "Next",
            "onclick": dojo.partial(_133f, 1)
        }));
        btns.appendChild(dojo.create("input", {
            "id": "num",
            "value": _133c,
            "type": "text"
        }));
        btns.appendChild(dojo.create("button", {
            "innerHTML": "Create",
            "onclick": _1340
        }));
        btns.appendChild(dojo.create("button", {
            "innerHTML": "Destroy",
            "onclick": _1341
        }));
        _1340();
    });
});